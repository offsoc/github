# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pandoc-ruby` gem.
# Please instead update this file by running `bin/tapioca gem pandoc-ruby`.

# source://pandoc-ruby//lib/pandoc-ruby.rb#5
class PandocRuby
  # Create a new PandocRuby converter object. The first argument contains the
  # input either as string or as an array of filenames.
  #
  # Any other arguments will be converted to pandoc options.
  #
  # Usage:
  #   new("# A String", :option1 => :value, :option2)
  #   new(["/path/to/file.md"], :option1 => :value, :option2)
  #   new(["/to/file1.html", "/to/file2.html"], :option1 => :value)
  #
  # @return [PandocRuby] a new instance of PandocRuby
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#177
  def initialize(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#143
  def binary_output; end

  # Sets the attribute binary_output
  #
  # @param value the value to set the attribute binary_output to.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#141
  def binary_output=(_arg0); end

  # Run the conversion. The convert method can take any number of arguments,
  # which will be converted to pandoc options. If options were already
  # specified in an initializer or reader method, they will be combined with
  # any that are passed to this method.
  #
  # Returns a string with the converted content.
  #
  # Example:
  #
  #   PandocRuby.new("# text").convert
  #   # => "<h1 id=\"text\">text</h1>\n"
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#199
  def convert(*args); end

  # Returns the value of attribute input_files.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#165
  def input_files; end

  # Sets the attribute input_files
  #
  # @param value the value to set the attribute input_files to.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#165
  def input_files=(_arg0); end

  # Returns the value of attribute input_string.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#166
  def input_string; end

  # Sets the attribute input_string
  #
  # @param value the value to set the attribute input_string to.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#166
  def input_string=(_arg0); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#155
  def option_string; end

  # Sets the attribute option_string
  #
  # @param value the value to set the attribute option_string to.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#153
  def option_string=(_arg0); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#149
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#147
  def options=(_arg0); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_asciidoc(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_asciidoctor(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_beamer(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_biblatex(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_bibtex(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_chunkedhtml(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_commonmark(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_commonmark_x(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_context(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_csljson(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_docbook(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_docbook4(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_docbook5(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_docx(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_dokuwiki(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_dzslides(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_epub(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_epub2(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_epub3(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_fb2(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_gfm(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_haddock(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_html(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_html4(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_html5(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_icml(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_ipynb(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_jats(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_jats_archiving(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_jats_articleauthoring(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_jats_publishing(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_jira(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_json(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_latex(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_man(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_markdown(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_markdown_mmd(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_markdown_phpextra(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_markdown_strict(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_markua(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_mediawiki(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_ms(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_muse(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_native(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_odt(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_opendocument(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_opml(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_org(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_pdf(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_plain(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_pptx(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_revealjs(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_rst(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_rtf(*args); end

  # Run the conversion. The convert method can take any number of arguments,
  # which will be converted to pandoc options. If options were already
  # specified in an initializer or reader method, they will be combined with
  # any that are passed to this method.
  #
  # Returns a string with the converted content.
  #
  # Example:
  #
  #   PandocRuby.new("# text").convert
  #   # => "<h1 id=\"text\">text</h1>\n"
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#199
  def to_s(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_s5(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_slideous(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_slidy(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_tei(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_texinfo(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_textile(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_xwiki(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#239
  def to_zimwiki(*args); end

  # source://pandoc-ruby//lib/pandoc-ruby.rb#161
  def writer; end

  # Sets the attribute writer
  #
  # @param value the value to set the attribute writer to.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#159
  def writer=(_arg0); end

  private

  # Execute the pandoc command for binary writers. A temp file is created
  # and written to, then read back into the program as a string, then the
  # temp file is closed and unlinked.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#251
  def convert_binary; end

  # Execute the pandoc command for string writers.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#269
  def convert_string; end

  # Takes a flag and optional argument, uses it to set any relevant options
  # used by the library, and returns string with the option formatted as a
  # command line options. If the option has an argument, it is also included.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#329
  def create_option(flag, argument = T.unsafe(nil)); end

  # Run the command and returns the output.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#283
  def execute(command); end

  # Wrapper to run pandoc in a consistent, DRY way
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#274
  def execute_pandoc; end

  # Formats an option flag in order to be used with the pandoc command line
  # tool.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#345
  def format_flag(flag); end

  # Builds the option string to be passed to pandoc by iterating over the
  # opts passed in. Recursively calls itself in order to handle hash options.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#314
  def prepare_options(opts = T.unsafe(nil)); end

  # Takes an option and optional argument and uses them to set any flags
  # used by PandocRuby.
  #
  # source://pandoc-ruby//lib/pandoc-ruby.rb#357
  def set_pandoc_ruby_options(flag, argument = T.unsafe(nil)); end

  class << self
    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def biblatex(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def bibtex(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def commonmark(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def commonmark_x(*args); end

    # A shortcut method that creates a new PandocRuby object and immediately
    # calls `#convert`. Options passed to this method are passed directly to
    # `#new` and treated the same as if they were passed directly to the
    # initializer.
    #
    # source://pandoc-ruby//lib/pandoc-ruby.rb#137
    def convert(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def creole(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def csljson(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def csv(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def docbook(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def docx(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def dokuwiki(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def endnotexml(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def epub(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def fb2(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def gfm(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def haddock(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def html(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def ipynb(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def jats(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def jira(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def json(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def latex(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def man(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def markdown(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def markdown_mmd(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def markdown_phpextra(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def markdown_strict(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def mediawiki(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def muse(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def native(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def odt(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def opml(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def org(*args); end

    # Returns the value of attribute pandoc_path.
    #
    # source://pandoc-ruby//lib/pandoc-ruby.rb#9
    def pandoc_path; end

    # Sets the attribute pandoc_path
    #
    # @param value the value to set the attribute pandoc_path to.
    #
    # source://pandoc-ruby//lib/pandoc-ruby.rb#9
    def pandoc_path=(_arg0); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def ris(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def rst(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def rtf(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def t2t(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def textile(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def tikiwiki(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def tsv(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def twiki(*args); end

    # source://pandoc-ruby//lib/pandoc-ruby.rb#221
    def vimwiki(*args); end
  end
end

# The available binary writers and their corresponding names. The keys are
# used to generate methods and specify options to Pandoc.
#
# source://pandoc-ruby//lib/pandoc-ruby.rb#122
PandocRuby::BINARY_WRITERS = T.let(T.unsafe(nil), Hash)

# The available readers and their corresponding names. The keys are used to
# generate methods and specify options to Pandoc.
#
# source://pandoc-ruby//lib/pandoc-ruby.rb#14
PandocRuby::READERS = T.let(T.unsafe(nil), Hash)

# The available string writers and their corresponding names. The keys are
# used to generate methods and specify options to Pandoc.
#
# source://pandoc-ruby//lib/pandoc-ruby.rb#60
PandocRuby::STRING_WRITERS = T.let(T.unsafe(nil), Hash)

# All of the available Writers.
#
# source://pandoc-ruby//lib/pandoc-ruby.rb#131
PandocRuby::WRITERS = T.let(T.unsafe(nil), Hash)

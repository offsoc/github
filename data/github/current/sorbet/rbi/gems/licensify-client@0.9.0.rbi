# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `licensify-client` gem.
# Please instead update this file by running `bin/tapioca gem licensify-client`.

module Google::Protobuf::MessageExts::ClassMethods; end

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#57
module Licensify; end

# source://licensify-client//lib/licensify/client.rb#10
class Licensify::Client
  extend ::Forwardable

  # @return [Client] a new instance of Client
  #
  # source://licensify-client//lib/licensify/client.rb#24
  def initialize(hmac_key:, host: T.unsafe(nil), path_prefix: T.unsafe(nil), &blk); end

  # source://licensify-client//lib/licensify/client.rb#34
  def connection=(conn, &blk); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_customer_license(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_customer_licenses(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_licensee_global_ids(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_licensee_ids(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def get_product_enablements(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def sync_organization_memberships(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def upsert_product_enablement(*args, **_arg1, &block); end

  private

  # @yield [conn]
  #
  # source://licensify-client//lib/licensify/client.rb#70
  def configure_connection(conn, &blk); end

  # Returns the value of attribute connection.
  #
  # source://licensify-client//lib/licensify/client.rb#42
  def connection; end

  # source://licensify-client//lib/licensify/client.rb#42
  def customer_license_client; end

  # source://licensify-client//lib/licensify/client.rb#77
  def default_headers; end

  # source://licensify-client//lib/licensify/client.rb#53
  def default_host_mapping; end

  # source://licensify-client//lib/licensify/client.rb#44
  def inferred_env; end

  # Returns the value of attribute product_enablement_client.
  #
  # source://licensify-client//lib/licensify/client.rb#42
  def product_enablement_client; end

  # source://licensify-client//lib/licensify/client.rb#85
  def setup_customer_license_client; end

  # source://licensify-client//lib/licensify/client.rb#62
  def setup_default_connection(&blk); end

  # source://licensify-client//lib/licensify/client.rb#81
  def setup_product_enablement_client; end

  # Returns the value of attribute url.
  #
  # source://licensify-client//lib/licensify/client.rb#42
  def url; end
end

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#58
module Licensify::Services; end

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#59
module Licensify::Services::V1; end

class Licensify::Services::V1::CustomerLicense
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::CustomerLicenseEnablement
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://licensify-client//lib/licensify/services/v1/customer_license_api_twirp.rb#19
class Licensify::Services::V1::CustomerLicenseServiceClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_customer_license(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_customer_licenses(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_licensee_global_ids(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_licensee_ids(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def sync_organization_memberships(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def upsert_customer_license(input, req_opts = T.unsafe(nil)); end
end

# source://licensify-client//lib/licensify/services/v1/customer_license_api_twirp.rb#8
class Licensify::Services::V1::CustomerLicenseServiceService < ::Twirp::Service; end

module Licensify::Services::V1::EnablementReason
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#67
Licensify::Services::V1::EnablementReason::ENABLEMENT_REASON_ORG_MEMBERSHIP = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#67
Licensify::Services::V1::EnablementReason::ENABLEMENT_REASON_REPOSITORY_COLLABORATOR = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#67
Licensify::Services::V1::EnablementReason::ENABLEMENT_REASON_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Licensify::Services::V1::GetCustomerLicenseRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetCustomerLicenseResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetCustomerLicensesRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetCustomerLicensesResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetLicenseeGlobalIdsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetLicenseeGlobalIdsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetLicenseeIdsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetLicenseeIdsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetProductEnablementsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::GetProductEnablementsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::Licensee
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module Licensify::Services::V1::LicenseeType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#66
Licensify::Services::V1::LicenseeType::LICENSEE_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#66
Licensify::Services::V1::LicenseeType::LICENSEE_TYPE_USER = T.let(T.unsafe(nil), Integer)

module Licensify::Services::V1::Product
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#64
Licensify::Services::V1::Product::PRODUCT_GHAS = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#64
Licensify::Services::V1::Product::PRODUCT_SDLC = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#64
Licensify::Services::V1::Product::PRODUCT_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Licensify::Services::V1::ProductEnablement
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://licensify-client//lib/licensify/services/v1/product_enablement_api_twirp.rb#15
class Licensify::Services::V1::ProductEnablementServiceClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_product_enablements(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def upsert_product_enablement(input, req_opts = T.unsafe(nil)); end
end

# source://licensify-client//lib/licensify/services/v1/product_enablement_api_twirp.rb#8
class Licensify::Services::V1::ProductEnablementServiceService < ::Twirp::Service; end

module Licensify::Services::V1::ProductEnablementType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#65
Licensify::Services::V1::ProductEnablementType::PRODUCT_ENABLEMENT_TYPE_ORG = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#65
Licensify::Services::V1::ProductEnablementType::PRODUCT_ENABLEMENT_TYPE_REPO = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/common_pb.rb#65
Licensify::Services::V1::ProductEnablementType::PRODUCT_ENABLEMENT_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

module Licensify::Services::V1::SyncEntityType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://licensify-client//lib/licensify/services/v1/customer_license_api_pb.rb#75
Licensify::Services::V1::SyncEntityType::SYNC_ENTITY_TYPE_CUSTOMER = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/customer_license_api_pb.rb#75
Licensify::Services::V1::SyncEntityType::SYNC_ENTITY_TYPE_ORGANIZATION = T.let(T.unsafe(nil), Integer)

# source://licensify-client//lib/licensify/services/v1/customer_license_api_pb.rb#75
Licensify::Services::V1::SyncEntityType::SYNC_ENTITY_TYPE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Licensify::Services::V1::SyncOrganizationMembershipsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::SyncOrganizationMembershipsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::UpsertCustomerLicenseRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::UpsertCustomerLicenseResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::UpsertProductEnablementRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Licensify::Services::V1::UpsertProductEnablementResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#4
module Licensify::Twirp; end

# source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#5
module Licensify::Twirp::HMAC; end

# Faraday middleware to HMAC sign requests from Twirp.
#
# source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#7
class Licensify::Twirp::HMAC::RequestSigningMiddleware
  # @return [RequestSigningMiddleware] a new instance of RequestSigningMiddleware
  #
  # source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#11
  def initialize(app, key); end

  # source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#16
  def call(env); end

  private

  # source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#23
  def request_hmac(time, key); end
end

# source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#8
Licensify::Twirp::HMAC::RequestSigningMiddleware::HMAC_ALGORITHM = T.let(T.unsafe(nil), String)

# source://licensify-client//lib/licensify/twirp/hmac/request_signing_middleware.rb#9
Licensify::Twirp::HMAC::RequestSigningMiddleware::HMAC_HEADER = T.let(T.unsafe(nil), String)

# source://licensify-client//lib/licensify/version.rb#4
Licensify::VERSION = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Scans::V1::AddBypassRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Scans::V1::AddBypassRequest`.

class GitHub::Proto::SecretScanning::Scans::V1::AddBypassRequest
  sig do
    params(
      actor_id: T.nilable(Integer),
      expire_at: T.nilable(Google::Protobuf::Timestamp),
      notes: T.nilable(String),
      owner_id: T.nilable(Integer),
      owner_scope: T.nilable(T.any(Symbol, Integer)),
      reason: T.nilable(T.any(Symbol, Integer)),
      signature: T.nilable(String),
      token_type: T.nilable(String)
    ).void
  end
  def initialize(actor_id: nil, expire_at: nil, notes: nil, owner_id: nil, owner_scope: nil, reason: nil, signature: nil, token_type: nil); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_expire_at; end

  sig { void }
  def clear_notes; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_owner_scope; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_signature; end

  sig { void }
  def clear_token_type; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expire_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expire_at=(value); end

  sig { returns(String) }
  def notes; end

  sig { params(value: String).void }
  def notes=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def owner_scope; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def owner_scope=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(String) }
  def signature; end

  sig { params(value: String).void }
  def signature=(value); end

  sig { returns(String) }
  def token_type; end

  sig { params(value: String).void }
  def token_type=(value); end
end

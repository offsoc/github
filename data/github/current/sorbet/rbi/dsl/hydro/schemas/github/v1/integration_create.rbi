# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::IntegrationCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::IntegrationCreate`.

class Hydro::Schemas::Github::V1::IntegrationCreate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      from_manifest: T.nilable(T::Boolean),
      integration: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration),
      manifest_hash: T.nilable(String),
      manifest_json: T.nilable(String),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, from_manifest: nil, integration: nil, manifest_hash: nil, manifest_json: nil, owner: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_from_manifest; end

  sig { void }
  def clear_integration; end

  sig { void }
  def clear_manifest_hash; end

  sig { void }
  def clear_manifest_json; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_request_context; end

  sig { returns(T::Boolean) }
  def from_manifest; end

  sig { params(value: T::Boolean).void }
  def from_manifest=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)) }
  def integration; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)).void }
  def integration=(value); end

  sig { returns(String) }
  def manifest_hash; end

  sig { params(value: String).void }
  def manifest_hash=(value); end

  sig { returns(String) }
  def manifest_json; end

  sig { params(value: String).void }
  def manifest_json=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

{"version":3,"file":"chunk-ui_packages_code-mirror_CodeMirror_tsx-_d4d70-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/code-mirror/autocomplete/theme.ts","ui/packages/code-mirror/extensions/help-panels.ts","ui/packages/code-mirror/utils.ts","ui/packages/hotkey/hotkey.ts","ui/packages/hotkey/keyboard-shortcuts-helper.ts","ui/packages/code-mirror/extensions/basic-setup.ts","ui/packages/code-mirror/themes/github-theme.ts","ui/packages/code-mirror/extensions/spacing-controls.ts","ui/packages/code-mirror/extensions/file-upload.ts","ui/packages/code-mirror/extensions/markdown.ts","ui/packages/code-mirror/autocomplete/emoji-autocomplete.ts","ui/packages/code-mirror/decorations/lint-mark.ts","ui/packages/code-mirror/extensions/secret-detected.ts","ui/packages/code-mirror/themes/language-themes.ts","ui/packages/code-mirror/extensions/focus-trap-toggle.ts","ui/packages/code-mirror/CodeMirror.tsx","ui/packages/code-mirror/hooks/use-code-mirror.ts","ui/packages/code-mirror/extensions/scroller-attributes.ts","ui/packages/code-mirror/extensions/data-hpc.ts","ui/packages/code-mirror/extensions/readonly.ts","ui/packages/code-mirror/extensions/utils.ts"],"sourcesContent":["import {EditorView} from '@codemirror/view'\n\nexport const autocompleteTheme = EditorView.baseTheme({\n  '.cm-tooltip.cm-tooltip-autocomplete': {\n    border: 0,\n    backgroundColor: 'transparent',\n  },\n\n  '.cm-tooltip.cm-tooltip-autocomplete > ul': {\n    fontFamily: \"SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace\",\n    fontSize: '12px',\n    backgroundColor: 'var(--bgColor-default, var(--color-canvas-default))',\n    border: '1px solid var(--borderColor-default, var(--color-border-default))',\n    borderRadius: 'var(--borderRadius-medium)',\n    boxShadow: 'var(--shadow-resting-medium, var(--color-shadow-medium))',\n    minWidth: 'auto',\n  },\n  '.cm-tooltip.cm-tooltip-autocomplete li[role=\"option\"]': {\n    padding: '2px 8px',\n    margin: 0,\n    color: 'var(--fgColor-default, var(--color-fg-default))',\n    whiteSpace: 'pre',\n  },\n  '.cm-tooltip.cm-tooltip-autocomplete li[role=\"option\"]:first-child': {\n    borderTopLeftRadius: 'var(--borderRadius-medium)',\n    borderTopRightRadius: 'var(--borderRadius-medium)',\n  },\n  '.cm-tooltip.cm-tooltip-autocomplete li[role=\"option\"]:last-child': {\n    borderBottomLeftRadius: 'var(--borderRadius-medium)',\n    borderBottomRightRadius: 'var(--borderRadius-medium)',\n  },\n  '.cm-tooltip.cm-tooltip-autocomplete ul li[aria-selected], .cm-tooltip.cm-tooltip-autocomplete ul li[aria-selected] .cm-completionDetail':\n    {\n      color: 'var(--fgColor-onEmphasis, var(--color-fg-on-emphasis))',\n      background: 'var(--bgColor-accent-emphasis, var(--color-accent-emphasis))',\n    },\n  '.cm-completionDetail': {\n    paddingLeft: '8px',\n    color: 'var(--fgColor-muted, var(--color-fg-muted))',\n    fontSize: 'var(--fontSize-small)',\n    fontStyle: 'normal',\n  },\n})\n","import type {Extension} from '@codemirror/state'\nimport {type Panel, showPanel} from '@codemirror/view'\n\n/**\n * Creates a help panel extension from an HTMLElement\n * @param panelDom help panel HTMLElement\n * @param position position of the help panel, either 'top' or 'bottom'\n * @returns help panel extension\n */\nexport function helpPanelConstructor(\n  panelDom: HTMLElement | null = null,\n  position: 'top' | 'bottom' = 'bottom',\n): Extension {\n  const panelConstructor = () => {\n    return {\n      dom: panelDom,\n      top: position === 'top',\n    } as Panel\n  }\n\n  return [showPanel.of(panelConstructor)]\n}\n","import {indentUnit} from '@codemirror/language'\nimport {SearchCursor} from '@codemirror/search'\nimport {EditorSelection, type EditorState} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\n\nexport const getCursor = (view: EditorView) => {\n  return view.state.selection.main\n}\n\nexport const setCursor = (view: EditorView, newPosition: number) => {\n  view.dispatch({\n    selection: {\n      anchor: newPosition,\n    },\n  })\n}\n\nexport const somethingSelected = (view: EditorView) => {\n  return view.state.selection.ranges.some(r => !r.empty)\n}\n\nexport const getSelection = (state: EditorState) => {\n  return state.sliceDoc(state.selection.main.from, state.selection.main.to)\n}\n\nexport const setSelection = (view: EditorView, startPosition: number, endPosition: number) => {\n  view.dispatch({\n    selection: {\n      anchor: startPosition,\n      head: endPosition,\n    },\n  })\n}\n\n// https://codemirror.net/docs/migration/#positions\nexport function posToOffset(view: EditorView, pos: {line: number; ch: number}) {\n  return view.state.doc.line(pos.line + 1).from + pos.ch\n}\n\n// https://codemirror.net/docs/migration/#positions\nexport function offsetToPos(view: EditorView, offset: number) {\n  const line = view.state.doc.lineAt(offset)\n  return {line: line.number - 1, ch: offset - line.from}\n}\n\nexport const getLine = (view: EditorView, lineNumber: number) => {\n  return view.state.doc.line(lineNumber) // CM6 is 1-indexed for lines\n}\n\nexport const insertAtStartOfLine = (view: EditorView, lineNumber: number, text: string) => {\n  const line = getLine(view, lineNumber)\n\n  replaceRange(view, line.from, line.from, text)\n}\n\nexport const removeFromStartOfLine = (view: EditorView, lineNumber: number, text: string) => {\n  const line = getLine(view, lineNumber)\n  replaceRange(view, line.from, line.from + text.length, '')\n}\n\nexport const replaceSelection = (view: EditorView, text: string) => {\n  view.dispatch(view.state.replaceSelection(text))\n}\n\nexport const getRange = (state: EditorState, from: number, to: number) => {\n  return state.sliceDoc(from, to)\n}\n\nexport const replaceRange = (view: EditorView, from: number, to: number, text: string) => {\n  view.dispatch({changes: {from, to, insert: text}})\n}\n\nexport const insertAtCursor = (view: EditorView, text: string) => {\n  const cursor = getCursor(view)\n  replaceRange(view, cursor.from, cursor.to, text)\n}\n\n/**\n * Find the first occurrence of search in the document\n */\nexport const find = (view: EditorView, search: string) => {\n  const searchCursor = new SearchCursor(view.state.doc, search)\n  return searchCursor.next()\n}\n\n/**\n * Find and replace the first occurrence of search in the document\n */\nexport const findAndReplace = (view: EditorView, search: string, replace: string) => {\n  const searchCursor = new SearchCursor(view.state.doc, search)\n  const match = searchCursor.next()\n  view.dispatch({changes: {from: match.value.from, to: match.value.to, insert: replace}})\n}\n\nexport const moveCursorToPositionAndScroll = (\n  view: EditorView,\n  startLine: number,\n  endLine?: number,\n  startColumn?: number,\n  endColumn?: number,\n) => {\n  if (endLine !== undefined) {\n    try {\n      const startLineElement = getLine(view, startLine)\n      const endLineElement = getLine(view, endLine)\n      if (startLineElement && endLineElement) {\n        view.focus()\n\n        const selectionEnd = endColumn ? endLineElement.from + endColumn : endLineElement.to\n\n        setSelection(view, startLineElement.from + (startColumn ?? 0), selectionEnd)\n        view.dispatch({\n          effects: [\n            EditorView.scrollIntoView(EditorSelection.range(startLineElement.from, endLineElement.to), {y: 'center'}),\n          ],\n        })\n      }\n    } catch (RangeError) {\n      // Invalid line number, ignore\n    }\n  } else {\n    try {\n      const lineElement = getLine(view, startLine)\n      if (lineElement) {\n        view.focus()\n        setCursor(view, lineElement.from + (startColumn ?? 0))\n        view.dispatch({effects: [EditorView.scrollIntoView(lineElement.from, {y: 'center'})]})\n      }\n    } catch (RangeError) {\n      // Invalid line number, ignore\n    }\n  }\n}\n\nexport function getIndentationUnit(view: EditorView) {\n  // returns '\\t' or ' '.repeat(indentUnit)\n  return view.state.facet(indentUnit)\n}\n","// this file is a shim to allow importing @github/hotkey and is the only allowed import for @github/hotkey\n// eslint-disable-next-line no-restricted-imports\nexport * from '@github/hotkey'\n\n// - (?:^|,)    Starting with the beginning of the string or the comma delineating the previous item\n// - ((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)    The target capture group, consisting of:\n//   - (?:[^,]|,(?=\\+| |$))*    Any number of characters that are not commas, or are commas that are followed by a\n//     plus sign, space, or end of string (ie, the commas in `,+Control` or `Control+, g` or `Control+,`)\n//   - (?:,(?=,))?    Optionally ending with a comma followed by another comma, like the commas in `Control+,,n` or\n//     `Control+,,,`\n// - (?=,|$)    Ending with a comma or the end of the string\nconst chordOrKeyRegex = /(?:^|,)((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)/g\n\nexport function splitHotkeyString(hotkey: string) {\n  // \",\" is a valid key name, so we can't just use `String.split()`. Even with a regular expression we can't split, for\n  // example \"Control+,,,\" into [\"Control+,\", \",\"] without a lookbehind (not supported in Safari).\n\n  // Instead, we match against all valid substrings:\n  return Array.from(hotkey.matchAll(chordOrKeyRegex)).map(([, chord]) => chord!)\n}\n","import {eventToHotkeyString} from './hotkey'\n\n/** Returns false if a user has explicitly disabled character key shortcuts. */\nexport const areCharacterKeyShortcutsEnabled = () => {\n  const keyboardShortcutsPreference = document.querySelector<HTMLMetaElement>(\n    'meta[name=keyboard-shortcuts-preference]',\n  )\n  if (keyboardShortcutsPreference) {\n    return keyboardShortcutsPreference.content === 'all'\n  }\n  return true\n}\n\n/**\n * Character-key shortcuts are implemented only with lowercase characters (\"g\", \"g f\"), uppercase characters (\"Shift+A\", \"a\"),\n * symbols (\"Alt+g\"), and punctuation (\"?\", \"!\", \"/\").\n *\n * Returns true if string is NOT what we define as a character key shortcut.\n */\nexport const isNonCharacterKeyShortcut = (hotkey: string) => {\n  return /Enter|Arrow|Escape|Meta|Control|Mod|Esc/.test(hotkey) || (hotkey.includes('Alt') && hotkey.includes('Shift'))\n}\n\nconst nonEditableInputTypes = new Set([\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit',\n])\n\n/**\n * Returns true if `element` is editable - that is, if it can be focused and typed in like an input or textarea.\n */\nexport function isEditableElement(target: EventTarget | null): boolean {\n  if (!(target instanceof HTMLElement)) return false\n\n  const name = target.nodeName.toLowerCase()\n  const type = target.getAttribute('type')?.toLowerCase() ?? 'text'\n\n  const isReadonly =\n    target.ariaReadOnly === 'true' ||\n    target.getAttribute('aria-readonly') === 'true' ||\n    target.getAttribute('readonly') !== null\n\n  return (\n    (name === 'select' ||\n      name === 'textarea' ||\n      (name === 'input' && !nonEditableInputTypes.has(type)) ||\n      target.isContentEditable) &&\n    !isReadonly\n  )\n}\n\n/**\n * Returns false if a user settings has character key shortcut disabled and keyboard event corresponds to a character\n * key shortcut. Character key shortcuts are never enabled on editable form inputs.\n */\nexport const isShortcutAllowed = (event: KeyboardEvent) => {\n  const hotkey = eventToHotkeyString(event)\n\n  // Never allow character key shortcuts in inputs\n  const allowCharacterKeyShortcuts = areCharacterKeyShortcutsEnabled() && !isEditableElement(event.target)\n\n  return isNonCharacterKeyShortcut(hotkey) || allowCharacterKeyShortcuts\n}\n","import {defaultKeymap, history, historyKeymap} from '@codemirror/commands'\nimport {search, searchKeymap} from '@codemirror/search'\nimport type {Extension} from '@codemirror/state'\nimport {EditorView, type KeyBinding, keymap, lineNumbers, tooltips} from '@codemirror/view'\nimport {bracketMatching, indentOnInput} from '@codemirror/language'\nimport {areCharacterKeyShortcutsEnabled} from '@github-ui/hotkey/keyboard-shortcuts-helper'\n\n// instead of trying to find and delete specific keymaps, we're going to catch them, mark them handled, and prevent them from bubbling\nconst specialCharacterKeyShortcuts: KeyBinding[] = (() => {\n  if (!areCharacterKeyShortcutsEnabled()) {\n    // We treat `Alt+G` as a character key shortcut because it is equivalent to a special character.\n    return [\n      {\n        key: 'Alt-g',\n        run: () => {\n          return true\n        },\n        preventDefault: true, // dont bubble up\n      },\n    ]\n  }\n\n  return []\n})()\n\nexport const basicSetup: Extension[] = (() => [\n  history(),\n  indentOnInput(),\n  lineNumbers(),\n  bracketMatching(),\n  tooltips({position: 'absolute'}),\n  search({top: true}),\n  EditorView.editorAttributes.of({\n    class: 'js-codemirror-editor',\n    'data-testid': 'codemirror-editor',\n  }),\n  keymap.of([...specialCharacterKeyShortcuts, ...defaultKeymap, ...searchKeymap, ...historyKeymap]),\n])()\n","import {EditorView} from '@codemirror/view'\nimport {HighlightStyle, type TagStyle, syntaxHighlighting} from '@codemirror/language'\nimport {tags as t} from '@lezer/highlight'\n\nconst ghTheme = {\n  '&': {\n    background: 'var(--codeMirror-bgColor, var(--color-codemirror-bg))',\n    color: 'var(--codeMirror-fgColor, var(--color-codemirror-text))',\n    cursor: 'text',\n  },\n\n  '.cm-gutters': {\n    background: 'var(--codeMirror-gutters-bgColor, var(--color-codemirror-gutters-bg))',\n    borderRightWidth: 0,\n  },\n  '.cm-lineNumbers .cm-gutterElement': {\n    color: 'var(--codeMirror-lineNumber-fgColor, var(--color-codemirror-linenumber-text))',\n    fontFamily: 'var(--fontStack-monospace)',\n    fontSize: '12px',\n    lineHeight: '20px',\n    padding: '0 16px 0 16px',\n  },\n\n  '.cm-content': {\n    caretColor: 'var(--codeMirror-cursor-fgColor, var(--color-codemirror-cursor))',\n    fontFamily: 'var(--fontStack-monospace)',\n    fontSize: '12px',\n    background: 'var(--codeMirror-lines-bgColor, var(--color-codemirror-lines-bg))',\n    lineHeight: '20px',\n    paddingTop: '8px',\n  },\n\n  '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {\n    backgroundColor: 'var(--codeMirror-selection-bgColor, var(--color-codemirror-selection-bg, #d7d4f0))',\n  },\n\n  '&.cm-focused': {\n    outline: 'none',\n  },\n\n  '&.hide-help-until-focus': {\n    '&.cm-focused .cm-panels-bottom': {\n      display: 'block',\n    },\n\n    '& .cm-panels-bottom': {\n      display: 'none',\n    },\n  },\n\n  '.cm-content ::-moz-selection': {\n    backgroundColor: 'var(--codeMirror-selection-bgColor, var(--color-codemirror-selection-bg, #d7d4f0))',\n  },\n\n  '.cm-activeLine': {\n    backgroundColor: 'var(--codeMirror-activeline-bgColor, var(--color-codemirror-activeline-bg))',\n  },\n\n  '.cm-line': {\n    paddingLeft: '16px',\n  },\n\n  '.cm-help-panel': {\n    background: 'var(--bgColor-muted, var(--color-canvas-subtle))',\n    padding: '7px 10px',\n    margin: 0,\n    fontSize: '13px',\n    lineHeight: '16px',\n    color: 'var(--fgColor-muted, var(--color-fg-muted))',\n    cursor: 'default',\n  },\n\n  '.cm-panels-bottom': {\n    borderTop: 'var(--borderWidth-thin, 1px) solid var(--borderColor-default, var(--color-border-default))',\n    background: 'none',\n  },\n\n  // this adjusts the position of the help panel to account for the sticky markdown footer\n  // the & isnt standard css, it's a placeholder for CM6 to insert the generated editor class name\n  '.js-upload-markdown-image & .cm-panels-bottom': {\n    bottom: '30px !important',\n  },\n\n  '.cm-panel.cm-search': {\n    background: 'var(--bgColor-muted, var(--color-canvas-subtle))',\n    padding: '8px',\n    fontSize: '16px',\n  },\n\n  '.cm-panel.cm-search > button': {\n    borderRadius: '6px',\n    padding: '4px 8px',\n    background: 'var(--codeMirror-bgColor, var(--color-codemirror-bg))',\n    color: 'var(--button-default-fgColor-rest, var(--color-btn-text))',\n    border: '1px solid var(--button-default-borderColor-rest, var(--color-btn-border))',\n    textTransform: 'capitalize',\n  },\n\n  '.cm-panel.cm-search > label': {\n    color: 'var(--fgColor-default, var(--color-fg-default))',\n    textTransform: 'capitalize',\n    fontSize: '12px',\n  },\n\n  '.cm-panel.cm-search > input': {\n    borderRadius: '6px',\n    padding: '4px 8px',\n    background: 'var(--bgColor-default, var(--color-canvas-default))',\n    color: 'var(--fgColor-default, var(--color-fg-default))',\n    border: '1px solid var(--borderColor-default, var(--color-border-default))',\n    fontSize: '12px',\n  },\n\n  '.cm-panel.cm-search > button[name=\"close\"]': {\n    padding: '4px',\n  },\n\n  '.cm-panels-top': {\n    borderBottom: 'var(--borderWidth-thin, 1px) solid var(--color-border-default)',\n    background: 'none',\n  },\n\n  '.cm-panel.cm-search input, .cm-panel.cm-search button, .cm-panel.cm-search label': {\n    marginRight: '8px',\n    marginBottom: '4px',\n    marginTop: '4px',\n    marginLeft: 0,\n  },\n\n  '.cm-lintRange': {\n    cursor: 'help',\n    // prefer using lint-mark styles in /workspaces/github/app/assets/stylesheets/bundles/github/blob-editor.scss\n    backgroundImage: 'none !important',\n  },\n\n  // Resolves an issue where multiline placeholder values cause the\n  // fake CodeMirror cursor to expand to the height of that content\n  '.cm-placeholder': {\n    height: '1em',\n  },\n\n  '&.custom-tooltips .cm-tooltip': {\n    border: 'none !important',\n    backgroundColor: 'transparent !important',\n  },\n\n  '&.custom-tooltips .cm-diagnostic': {\n    padding: 0,\n    marginLeft: '0 !important',\n    borderLeft: 'none !important',\n    whiteSpace: 'unset',\n  },\n}\n\n// Simple highlighting missing entity and support highlighting from the old codemirror\n// The new codemirror gives a lot more control over how things are highlighted maybe we should look at constructing\n// a new, more detailed syntax theme\nconst githubDefaultHighlights: TagStyle[] = [\n  {tag: [t.keyword], color: 'var(--codeMirror-syntax-fgColor-keyword, var(--color-codemirror-syntax-keyword))'},\n  {tag: [t.comment], color: 'var(--codeMirror-syntax-fgColor-comment, var(--color-codemirror-syntax-comment))'},\n  // No way in the new one to tell if a bracket is matching to my knowledge\n  {tag: [t.bracket], color: 'var(--codeMirror-matchingBracket-fgColor, var(--color-codemirror-matchingbracket-text))'},\n  {\n    tag: [t.string, t.url, t.regexp],\n    color: 'var(--codeMirror-syntax-fgColor-string, var(--color-codemirror-syntax-string))',\n  },\n  {\n    tag: [t.constant(t.name), t.propertyName, t.attributeName],\n    color: 'var(--codeMirror-syntax-fgColor-constant, var(--color-codemirror-syntax-constant))',\n  },\n  {\n    tag: [t.atom, t.number, t.bool],\n    color: 'var(--codeMirror-syntax-fgColor-constant, var(--color-codemirror-syntax-constant))',\n  },\n  {\n    tag: [t.function(t.variableName)],\n    color: 'var(--codeMirror-syntax-fgColor-entity, var(--color-codemirror-syntax-entity))',\n  },\n  {\n    tag: t.definition(t.variableName),\n    color: 'var(--codeMirror-syntax-fgColor-variable, var(--color-codemirror-syntax-variable))',\n  },\n  {tag: t.meta, color: 'inherit'},\n  {tag: t.heading, fontWeight: 'bold', color: 'inherit !important'},\n  {tag: t.monospace, color: 'var(--codeMirror-syntax-fgColor-comment, var(--color-codemirror-syntax-comment))'}, // markdown code blocks\n]\n\n// empty for now but a dark mode placeholder\nconst darkModeHighlights: TagStyle[] = []\n\n// default styles taken from @codemirror/language\nexport const codemirrorDefaultHighlightStyle = [\n  // uncommented lines are used from the default theme without overrides\n  {tag: t.link, textDecoration: 'underline'},\n  {tag: t.emphasis, fontStyle: 'italic'},\n  {tag: t.strong, fontWeight: 'bold'},\n  {tag: t.strikethrough, textDecoration: 'line-through'},\n\n  // remaining commented out for reference until needed for overrides\n  // {tag: [t.contentSeparator, t.labelName], color: '#219'},\n  // {tag: [t.literal, t.inserted], color: '#164'},\n  // {tag: [t.deleted], color: '#a11'},\n  // {tag: [t.regexp, t.escape, t.special(t.string)], color: '#e40'},\n  // {tag: t.local(t.variableName), color: '#30a'},\n  // {tag: [t.typeName, t.namespace], color: '#085'},\n  // {tag: t.className, color: '#167'},\n  // {tag: [t.special(t.variableName), t.macroName], color: '#256'},\n  // {tag: t.definition(t.propertyName), color: '#00c'},\n  // {tag: t.invalid, color: '#f00'},\n]\n\nconst githubLightHighlightStyle = [...githubDefaultHighlights, ...codemirrorDefaultHighlightStyle]\nconst githubDarkHighlightStyle = [...githubDefaultHighlights, ...darkModeHighlights, ...codemirrorDefaultHighlightStyle]\n\nexport function getTheme(additionalStyles: TagStyle[] = []) {\n  const isDarkMode = document.querySelector('[data-color-mode=\"dark\"]') !== null\n\n  const baseHighlightStyles = isDarkMode ? githubDarkHighlightStyle : githubLightHighlightStyle\n  const extendedHighlightStyles = [...baseHighlightStyles, ...additionalStyles]\n\n  return [\n    EditorView.theme(ghTheme),\n    syntaxHighlighting(HighlightStyle.define(extendedHighlightStyles), {fallback: true}),\n  ]\n}\n","import {indentUnit} from '@codemirror/language'\nimport {EditorState, type Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\nimport type {SpacingOptions} from '../CodeMirror'\n\nexport const spacingControls = (options: SpacingOptions): Extension[] => {\n  const extensions: Extension[] = [EditorState.tabSize.of(options.indentUnit)]\n\n  if (options.indentWithTabs) {\n    extensions.push(indentUnit.of('\\t'))\n  } else {\n    extensions.push(indentUnit.of(' '.repeat(options.indentUnit)))\n  }\n\n  if (options.lineWrapping) {\n    extensions.push(EditorView.lineWrapping)\n  }\n\n  return extensions\n}\n","import type {Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\nimport {findAndReplace, insertAtCursor, replaceSelection, somethingSelected} from '../utils'\nimport type {UploadChangeDetail, UploadCursorChangeDetail, UploadEvents} from '../types/custom-events'\n\nconst handleUploadChange = (event: Event, view: EditorView) => {\n  const customEvent = event as CustomEvent<UploadChangeDetail>\n  const {state, placeholder, replacementText} = customEvent.detail\n\n  if (state === 'uploading') {\n    if (somethingSelected(view)) {\n      replaceSelection(view, placeholder)\n    } else {\n      insertAtCursor(view, replacementText)\n    }\n  } else if (state === 'uploaded' || state === 'failed') {\n    findAndReplace(view, placeholder, replacementText)\n  }\n}\n\n// positions the cursor where the user expects the file upload to be insert\nconst handleCursorChange = (event: Event, view: EditorView) => {\n  const customEvent = event as CustomEvent<UploadCursorChangeDetail>\n  const {left, top} = customEvent.detail\n  const dropPos = view.posAtCoords({x: left, y: top})\n\n  if (!dropPos) return\n\n  view.dispatch({selection: {anchor: dropPos, head: dropPos}})\n}\n\ntype EventHandlers = {\n  [key in UploadEvents]: (event: Event, view: EditorView) => void\n}\n\nexport function fileUploadListener(): Extension {\n  const eventHandlers: EventHandlers = {\n    'upload:editor:change': handleUploadChange,\n    'upload:editor:cursor': handleCursorChange,\n  }\n\n  return [EditorView.domEventHandlers(eventHandlers)]\n}\n","import {\n  type Command,\n  Decoration,\n  type DecorationSet,\n  EditorView,\n  type KeyBinding,\n  ViewPlugin,\n  type ViewUpdate,\n  keymap,\n} from '@codemirror/view'\nimport {\n  find,\n  getCursor,\n  getSelection,\n  insertAtCursor,\n  insertAtStartOfLine,\n  removeFromStartOfLine,\n  replaceSelection,\n  setCursor,\n  setSelection,\n  somethingSelected,\n} from '../utils'\nimport {type Extension, RangeSetBuilder} from '@codemirror/state'\n\nconst ITALIC_TOKEN = '_'\nconst BOLD_TOKEN = '**'\nconst CODE_TOKEN = '`'\nconst BLOCKQUOTE_TOKEN = '>'\nconst ORDERED_LIST_TOKEN = 'ol'\nconst UNORDERED_LIST_TOKEN = '-'\n\nconst DISALLOW_LINKYFY_ON_PASTE = new WeakMap<EditorView, boolean>()\n\nfunction insertToken(view: EditorView, token: string) {\n  if (somethingSelected(view)) {\n    const currentSelection = getSelection(view.state)\n    replaceSelection(view, `${token}${currentSelection}${token}`)\n  } else {\n    const cursor = getCursor(view)\n    insertAtCursor(view, token.repeat(2))\n    setCursor(view, cursor.anchor + token.length)\n  }\n\n  return true // indicates that the key was handled\n}\n\nfunction toggleList(view: EditorView, token: string) {\n  const cursor = getCursor(view)\n  const currentLine = view.state.doc.lineAt(cursor.from)\n\n  const selection = getSelection(view.state)\n  const prefixRegex = new RegExp(`^${token === 'ol' ? '\\\\d+\\\\.' : token}\\\\s`)\n\n  if (selection) {\n    // if we end with a newline character, we need to trim it off to keep the right number of selected lines\n    const trimmedSelection = selection.endsWith('\\n') ? selection.slice(0, -2) : selection\n    const rawLines = trimmedSelection.split('\\n')\n\n    // re-select the lines, to make sure we are looking at the full line and not just the selection\n    const lines = rawLines.map((_line, index) => {\n      const lineNumber = currentLine.number + index\n      return {text: view.state.doc.line(lineNumber).text, lineNumber}\n    })\n\n    const everyLineStartsWithPrefix = lines.every(line => prefixRegex.test(line.text))\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i]!\n\n      if (everyLineStartsWithPrefix) {\n        // unformat every line\n        const match = line.text.match(prefixRegex)\n        if (match) {\n          removeFromStartOfLine(view, line?.lineNumber, match[0])\n        }\n      } else {\n        // format every line\n        const marker = `${token === 'ol' ? `${i + 1}.` : token} `\n        insertAtStartOfLine(view, line?.lineNumber, marker)\n      }\n    }\n  } else {\n    const match = currentLine.text.match(prefixRegex)\n    if (match) {\n      removeFromStartOfLine(view, currentLine.number, match[0])\n    } else {\n      const marker = `${token === 'ol' ? `1.` : token} `\n      insertAtStartOfLine(view, currentLine.number, marker)\n\n      if (!currentLine.text) {\n        // if we are on an empty line, we need to move the cursor to the right of the inserted marker\n        setCursor(view, cursor.anchor + marker.length)\n      }\n    }\n  }\n\n  return true // indicates that the key was handled\n}\n\nexport const insertLink: Command = (view: EditorView) => {\n  const selection = getSelection(view.state)\n  if (selection) {\n    const newSelection = `[${selection}](url)`\n    replaceSelection(view, newSelection)\n\n    const match = find(view, newSelection)\n    const matchStart = match.value.from\n\n    // 3 => Add 3 for `[,],(` - characters added to the\n    // 6 => Add 3 for `[,],(` - The 3 above, plus `url`\n    setSelection(view, matchStart + selection.length + 3, matchStart + selection.length + 6)\n  } else {\n    const cursor = getCursor(view)\n    insertAtCursor(view, '[](url)')\n    setCursor(view, cursor.anchor + 1) // Then place the cursor between the square brackets\n  }\n\n  return true // indicates that the key was handled\n}\n\nfunction insertSelectedTextLink(view: EditorView, event: ClipboardEvent) {\n  const selection = getSelection(view.state)\n  const dataTransfer = event.clipboardData\n\n  if (selection && dataTransfer) {\n    const pasteLink = dataTransfer.getData('text/plain')\n\n    // check if the clipboard item was an actual link\n    if (!/^https?:\\/\\//i.test(pasteLink)) return\n\n    if (pasteLink) {\n      event.preventDefault() // prevent default paste insertion and let us handle the paste and replace\n      replaceSelection(view, `[${selection}](${pasteLink})`)\n    }\n  }\n}\n\nfunction setDisallowLinkifyOnPaste(view: EditorView, disallow: boolean) {\n  DISALLOW_LINKYFY_ON_PASTE.set(view, disallow)\n\n  return false // indicates should be allowed to bubble up\n}\n\nexport const insertItalicToken: Command = (view: EditorView) => insertToken(view, ITALIC_TOKEN)\nexport const insertBoldToken: Command = (view: EditorView) => insertToken(view, BOLD_TOKEN)\nexport const insertCodeToken: Command = (view: EditorView) => insertToken(view, CODE_TOKEN)\n\nexport const toggleBlockQuoteList: Command = (view: EditorView) => toggleList(view, BLOCKQUOTE_TOKEN)\nexport const toggleOrderedList: Command = (view: EditorView) => toggleList(view, ORDERED_LIST_TOKEN)\nexport const toggleUnorderedList: Command = (view: EditorView) => toggleList(view, UNORDERED_LIST_TOKEN)\n\nconst pasteFormatted: Command = (view: EditorView) => setDisallowLinkifyOnPaste(view, false)\nconst pasteUnformatted: Command = (view: EditorView) => setDisallowLinkifyOnPaste(view, true)\n\nconst MarkdownKeymaps: KeyBinding[] = [\n  {key: 'Mod-i', run: insertItalicToken, preventDefault: true},\n  {key: 'Mod-b', run: insertBoldToken, preventDefault: true},\n  {key: 'Mod-e', run: insertCodeToken, preventDefault: true},\n  {key: 'Mod-k', run: insertLink, preventDefault: true},\n  {key: 'Shift-Mod-.', run: toggleBlockQuoteList, preventDefault: true},\n  {key: 'Shift-Mod-7', run: toggleOrderedList, preventDefault: true},\n  {key: 'Shift-Mod-8', run: toggleUnorderedList, preventDefault: true},\n  {key: 'Mod-v', run: pasteFormatted},\n  {key: 'Shift-Mod-v', run: pasteUnformatted},\n]\n\nfunction autoDirectionBuilder(view: EditorView) {\n  const autoDirectionDecoration = Decoration.line({\n    attributes: {dir: 'auto'},\n  })\n\n  const builder = new RangeSetBuilder<Decoration>()\n  for (const {from, to} of view.visibleRanges) {\n    for (let pos = from; pos <= to; ) {\n      const line = view.state.doc.lineAt(pos)\n\n      builder.add(line.from, line.from, autoDirectionDecoration)\n      pos = line.to + 1\n    }\n  }\n  return builder.finish()\n}\n\n// right-align pargraphs in right-to-left languages when editing Markdown\nconst autoDirectionPlugin = ViewPlugin.fromClass(\n  class {\n    decorations: DecorationSet\n\n    constructor(view: EditorView) {\n      this.decorations = autoDirectionBuilder(view)\n    }\n\n    update(update: ViewUpdate) {\n      if (update.docChanged || update.viewportChanged) this.decorations = autoDirectionBuilder(update.view)\n    }\n  },\n  {\n    decorations: v => v.decorations,\n  },\n)\n\nexport const markdownExtension: Extension[] = (() => [\n  // order of the keymaps matters for stopping propagation\n  EditorView.domEventHandlers({\n    keydown(event) {\n      // if we don't stop the propagation, this will open the Command Prompt\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {\n        event.stopPropagation()\n      }\n    },\n    paste(event, view) {\n      // we need to do this funny business here instead of a key binding because we need access to the clipboard event\n      if (!DISALLOW_LINKYFY_ON_PASTE.get(view)) {\n        insertSelectedTextLink(view, event)\n      }\n      DISALLOW_LINKYFY_ON_PASTE.set(view, false)\n    },\n  }),\n  keymap.of(MarkdownKeymaps),\n  autoDirectionPlugin,\n])()\n","import {\n  type Completion,\n  type CompletionContext,\n  type CompletionResult,\n  acceptCompletion,\n  autocompletion,\n} from '@codemirror/autocomplete'\nimport {Prec} from '@codemirror/state'\nimport {keymap} from '@codemirror/view'\nimport memoize from '@github/memoize'\nimport {autocompleteTheme} from './theme'\n\ninterface Emoji {\n  name: string\n  src: string\n  emoji?: string\n}\n\ninterface EmojiResponse {\n  [name: string]: [src: string, emoji?: string]\n}\n\nconst emojiRequest = memoize(async function getEmojis() {\n  const request = new Request('/autocomplete/emojis_for_editor', {\n    method: 'GET',\n    credentials: 'same-origin',\n    headers: {\n      Accept: 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n    },\n  })\n\n  const res = await fetch(request)\n  if (res.status !== 200) {\n    throw new Error(`emoji request failed with a ${res.status}`)\n  }\n\n  const emojiData: EmojiResponse = await res.json()\n\n  // flatten the response into something more reasonable to work with\n  const emojis: Emoji[] = Object.keys(emojiData).map(emojiName => {\n    const emoji = emojiData[emojiName]!\n\n    return {\n      name: emojiName,\n      src: emoji[0],\n      emoji: emoji[1],\n    }\n  })\n\n  return emojis\n})\n\nfunction emojiAutocompleteContext(context: CompletionContext, data: Emoji[] = []): CompletionResult | null {\n  const word = context.matchBefore(/:\\w+/)\n\n  if (!word) return null\n  if (word && word.from === word.to && !context.explicit) {\n    return null\n  }\n\n  const filteredEmojis = data.filter(emoji => {\n    return emoji.name.indexOf(word.text.replace(':', '')) !== -1\n  })\n\n  const completions: Completion[] = filteredEmojis.map(emoji => {\n    return {\n      label: emoji.name,\n\n      // some emojis don't have a unicode representation and get rendered from markdown pipeline\n      apply: emoji.emoji || `:${emoji.name}:`,\n\n      // we can only talk to the render via Completion objects - hack the src in this way\n      // alternatively we could push the emoji data into a global store and have the render look it up\n      type: emoji.src,\n    }\n  })\n\n  return {\n    from: word.from,\n    to: word.to,\n    options: completions,\n    filter: false,\n  }\n}\n\nexport function emojiAutocomplete() {\n  return [\n    autocompleteTheme,\n    autocompletion({\n      override: [\n        async (context: CompletionContext) => {\n          const emojiData = await emojiRequest()\n          return emojiAutocompleteContext(context, emojiData)\n        },\n      ],\n      icons: false,\n      addToOptions: [\n        {\n          render: (completion: Completion) => {\n            const emojiOption = document.createElement('img')\n            emojiOption.className = 'emoji emoji-result mr-2'\n            emojiOption.height = 20\n            emojiOption.width = 20\n            emojiOption.alt = `:${completion.label}:`\n            emojiOption.src = completion.type!\n            emojiOption.setAttribute('async', '')\n\n            return emojiOption\n          },\n          position: 0,\n        },\n      ],\n    }),\n    Prec.highest(keymap.of([{key: 'Tab', run: acceptCompletion}])),\n  ]\n}\n","import {StateField, StateEffect} from '@codemirror/state'\nimport {EditorView, Decoration, type DecorationSet} from '@codemirror/view'\n\nexport type LintMarkSeverity = 'info' | 'warning' | 'error'\n\ninterface AddLintMark {\n  from: number\n  to: number\n  severity: LintMarkSeverity\n}\n\nexport const addLintMark = StateEffect.define<AddLintMark>({\n  map: ({from, to, severity}, change) => ({from: change.mapPos(from), to: change.mapPos(to), severity}),\n})\n\nexport const lintMarkField = StateField.define<DecorationSet>({\n  create() {\n    return Decoration.none\n  },\n  update(lintMarks, tr) {\n    lintMarks = lintMarks.map(tr.changes)\n    for (const e of tr.effects) {\n      if (e.is(addLintMark)) {\n        if (e.value.severity === 'error') {\n          lintMarks = lintMarks.update({\n            add: [lintMarkError.range(e.value.from, e.value.to)],\n          })\n        } else if (e.value.severity === 'warning') {\n          lintMarks = lintMarks.update({\n            add: [lintMarkWarning.range(e.value.from, e.value.to)],\n          })\n        } else if (e.value.severity === 'info') {\n          lintMarks = lintMarks.update({\n            add: [lintMarkInfo.range(e.value.from, e.value.to)],\n          })\n        }\n      }\n    }\n    return lintMarks\n  },\n  provide: f => EditorView.decorations.from(f),\n})\n\nconst lintMarkError = Decoration.mark({class: 'CodeMirror-lint-mark-error'})\nconst lintMarkWarning = Decoration.mark({class: 'CodeMirror-lint-mark-warning'})\nconst lintMarkInfo = Decoration.mark({class: 'CodeMirror-lint-mark-info'})\n","import type {Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\nimport {posToOffset} from '../utils'\nimport type {SecretDetectedLintEventDetail, SecretDetectedEvents} from '../types/custom-events'\nimport {addLintMark, lintMarkField} from '../decorations/lint-mark'\n\nconst handleSecretLint = (event: Event, view: EditorView) => {\n  const customEvent = event as CustomEvent<SecretDetectedLintEventDetail>\n  const {from, to, severity} = customEvent.detail\n\n  const fromOffset = posToOffset(view, {line: from.lineNumber, ch: from.character})\n  const toOffset = posToOffset(view, {line: to.lineNumber, ch: to.character})\n\n  view.dispatch({\n    effects: [addLintMark.of({from: fromOffset, to: toOffset, severity})],\n  })\n}\n\ntype EventHandlers = {\n  [key in SecretDetectedEvents]: (event: Event, view: EditorView) => void\n}\n\nexport function secretDetectedListener(): Extension {\n  const eventHandlers: EventHandlers = {\n    'secret-detected:lint': handleSecretLint,\n  }\n\n  return [EditorView.domEventHandlers(eventHandlers), lintMarkField]\n}\n","import type {TagStyle} from '@codemirror/language'\nimport {tags as t} from '@lezer/highlight'\n\n// these keys should be lower cased versions of LanguageDescription.name\ntype LanguageThemeMapping = {\n  [key: string]: TagStyle[]\n}\n\n// This is a mapping of language names to the tags that should be highlighted for that language\nconst languageThemes: LanguageThemeMapping = {\n  ruby: [\n    {tag: t.variableName, color: 'var(--codeMirror-syntax-fgColor-variable, var(--color-codemirror-syntax-variable))'},\n  ],\n}\n\nexport const languageNames = Object.keys(languageThemes)\n\nexport function loadLanguageTheme(name: string) {\n  if (languageNames.includes(name.toLowerCase())) {\n    return languageThemes[name.toLowerCase()]\n  }\n\n  return null\n}\n","import {indentLess, indentMore} from '@codemirror/commands'\nimport {indentUnit} from '@codemirror/language'\nimport type {Extension, StateCommand} from '@codemirror/state'\nimport {type KeyBinding, keymap} from '@codemirror/view'\nimport {toggleWith} from './utils'\nimport {helpPanelConstructor} from './help-panels'\n\nexport const insertIndent: StateCommand = ({state, dispatch}) => {\n  if (state.selection.ranges.some(r => !r.empty)) return indentMore({state, dispatch})\n  dispatch(state.update(state.replaceSelection(state.facet(indentUnit)), {scrollIntoView: true, userEvent: 'input'}))\n  return true\n}\n\n// this keymap prevents the editor from losing focus when tab is pressed\nconst indentWithTab: KeyBinding = {key: 'Tab', run: insertIndent, shift: indentLess}\n\nexport function focusTrapToggle(): Extension {\n  // by default, pressing tab will insert an indent\n  // pressing Shift-Ctrl-m will toggle the focus trap and allow tab to be used for navigation\n  // pressing Shift-Ctrl-m again will toggle the focus trap back on\n  return [toggleWith('Shift-Ctrl-m', keymap.of([indentWithTab]), true), helpPanelConstructor(focusTrapHelpPanel())]\n}\n\nfunction focusTrapHelpPanel() {\n  const dom = document.createElement('div')\n\n  const createKbdElement = (key: string) => {\n    const kbd = document.createElement('kbd')\n    kbd.textContent = key\n    return kbd\n  }\n\n  // manually create the dom for the help text to avoid unnecessary dependencies (ie- lit-html)\n  dom.append(\n    'Use ',\n    createKbdElement(`Control + Shift + m`),\n    ' to toggle the ',\n    createKbdElement('tab'),\n    ' key moving focus. Alternatively, use ',\n    createKbdElement('esc'),\n    ' then ',\n    createKbdElement('tab'),\n    ' to move to the next interactive element on the page.',\n  )\n\n  dom.className = 'cm-help-panel'\n  dom.id = 'focus-trap-help-panel'\n  return dom\n}\n","import type {EditorStateConfig, Extension} from '@codemirror/state'\nimport {type EditorView, type KeyBinding, type ViewUpdate, keymap} from '@codemirror/view'\nimport {forwardRef, useImperativeHandle, useRef} from 'react'\n\nimport {useCodeMirror} from './hooks/use-code-mirror'\n\nexport interface CodeMirrorProps extends Omit<EditorStateConfig, 'doc' | 'extensions'> {\n  value?: string\n  height?: string\n  minHeight?: string\n  width?: string\n  fileName?: string\n  placeholder?: string\n  ariaLabelledBy: string\n\n  extensions?: Extension[]\n  keyBindings?: KeyBinding[]\n  spacing: SpacingOptions\n  focusNextRenderRef?: React.MutableRefObject<boolean>\n\n  // after CM6 is stable and the default experience\n  // consumers will pass extensions in instead of prop based\n  enableFileUpload?: boolean\n  isHpc?: boolean\n  isReadOnly?: boolean\n  hideHelpUntilFocus?: boolean\n\n  /** Fired whenever a change occurs to the document. */\n  onChange(newValue: string): void\n  /** Fired whenever any state change occurs within the editor, including non-document changes like lint results. */\n  onUpdate?(viewUpdate: ViewUpdate): void\n  /** Fired when the editor is created. */\n  onCreateEditor?(view: EditorView): void\n  /** Fired when the editor is destroyed. */\n  onDestroyEditor?(view: EditorView): void\n}\n\nexport interface SpacingOptions {\n  indentUnit: number\n  indentWithTabs: boolean\n  lineWrapping: boolean\n}\n\nexport interface CodeMirrorRef {\n  editor?: HTMLDivElement | null\n  view?: EditorView\n}\n\nconst CodeMirror = forwardRef<CodeMirrorRef, CodeMirrorProps>((props, ref) => {\n  const {\n    value = '',\n    extensions = [],\n    keyBindings = [],\n    height = '85vh',\n    width = '100%',\n    focusNextRenderRef,\n    ...rest\n  } = props\n  const editorRef = useRef<HTMLDivElement>(null)\n\n  const viewRef = useCodeMirror({\n    parentRef: editorRef,\n    value,\n    height,\n    width,\n    extensions: [...extensions, keymap.of(keyBindings)],\n    ...rest,\n  })\n\n  useImperativeHandle(ref, () => ({editor: editorRef.current, view: viewRef.current}), [editorRef, viewRef])\n\n  if (focusNextRenderRef?.current && viewRef) {\n    window.requestAnimationFrame(() => {\n      if (viewRef.current && !viewRef.current.hasFocus) {\n        viewRef.current.focus()\n      }\n    })\n    focusNextRenderRef.current = false\n  }\n\n  return <div ref={editorRef} />\n})\n\nCodeMirror.displayName = 'CodeMirror'\n\nexport default CodeMirror\n","import {EditorState, Compartment, StateEffect} from '@codemirror/state'\nimport {languages} from '@codemirror/language-data'\nimport {markdown, markdownLanguage} from '@codemirror/lang-markdown'\nimport {dropCursor, EditorView, placeholder as placeholderExtension, type ViewUpdate} from '@codemirror/view'\nimport {type RefObject, useCallback, useEffect, useMemo, useRef} from 'react'\n\nimport {basicSetup} from '../extensions/basic-setup'\nimport {getTheme} from '../themes/github-theme'\nimport type {CodeMirrorProps} from '../CodeMirror'\nimport {spacingControls} from '../extensions/spacing-controls'\nimport {fileUploadListener} from '../extensions/file-upload'\nimport {markdownExtension} from '../extensions/markdown'\nimport {emojiAutocomplete} from '../autocomplete/emoji-autocomplete'\nimport {secretDetectedListener} from '../extensions/secret-detected'\nimport {dataHpc} from '../extensions/data-hpc'\nimport {loadLanguageTheme} from '../themes/language-themes'\nimport {scrollerAttributes} from '../extensions/scroller-attributes'\nimport {readOnly} from '../extensions/readonly'\nimport {focusTrapToggle} from '../extensions/focus-trap-toggle'\n\nexport interface UseCodeMirror extends CodeMirrorProps {\n  parentRef: RefObject<HTMLElement | null>\n}\n\nexport function useCodeMirror({\n  extensions = [],\n  fileName = '',\n  onChange,\n  spacing,\n  isHpc,\n  isReadOnly,\n  enableFileUpload,\n  parentRef,\n  placeholder = 'Enter file contents here',\n  ariaLabelledBy,\n  value,\n  width = '',\n  height = '',\n  minHeight = '',\n  hideHelpUntilFocus,\n  onCreateEditor,\n  onDestroyEditor,\n}: UseCodeMirror) {\n  const viewRef = useRef<EditorView | undefined>(undefined)\n  const languageCompartment = useMemo(() => {\n    return new Compartment()\n  }, [])\n\n  const autoCompleteCompartment = useMemo(() => {\n    return new Compartment()\n  }, [])\n\n  const themeCompartment = useMemo(() => {\n    return new Compartment()\n  }, [])\n\n  const internalOnChange = useCallback(\n    (update: ViewUpdate) => {\n      if (update.docChanged) {\n        onChange(update.state.doc.toString() || '')\n      }\n    },\n    [onChange],\n  )\n\n  const updateListener = EditorView.updateListener.of(internalOnChange)\n\n  const editorSizingTheme = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      width,\n    },\n  })\n\n  let managedExtensions = useMemo(() => {\n    return [\n      ...basicSetup,\n      updateListener,\n      editorSizingTheme,\n      placeholderExtension(placeholder),\n      ...spacingControls(spacing),\n      secretDetectedListener(),\n      languageCompartment.of([]),\n      autoCompleteCompartment.of([]),\n      themeCompartment.of([getTheme()]),\n      scrollerAttributes(ariaLabelledBy),\n      EditorView.contentAttributes.of({\n        'aria-labelledby': `${ariaLabelledBy} focus-trap-help-panel`,\n      }),\n      EditorView.editorAttributes.of({\n        class: hideHelpUntilFocus ? 'hide-help-until-focus' : '',\n      }),\n    ]\n  }, [\n    updateListener,\n    editorSizingTheme,\n    placeholder,\n    spacing,\n    languageCompartment,\n    autoCompleteCompartment,\n    themeCompartment,\n    ariaLabelledBy,\n    hideHelpUntilFocus,\n  ])\n\n  if (enableFileUpload) {\n    managedExtensions.push(dropCursor())\n    managedExtensions.push(fileUploadListener())\n  }\n\n  if (isHpc) {\n    managedExtensions.push(dataHpc())\n  }\n\n  if (isReadOnly) {\n    managedExtensions.push(readOnly())\n  } else {\n    managedExtensions.push(focusTrapToggle())\n  }\n\n  managedExtensions = managedExtensions.concat(extensions)\n\n  useEffect(() => {\n    const parent = parentRef.current\n    if (!parent) return\n\n    const state = EditorState.create({\n      doc: value,\n      extensions: managedExtensions,\n    })\n\n    const view = new EditorView({\n      state,\n      parent,\n    })\n\n    onCreateEditor && onCreateEditor(view)\n\n    viewRef.current = view\n\n    return () => {\n      view.destroy()\n\n      onDestroyEditor && onDestroyEditor(view)\n    }\n    // right now - only run once to initialize\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (viewRef.current) {\n      viewRef.current.dispatch({effects: autoCompleteCompartment.reconfigure([])}) // reset autocomplete\n      viewRef.current.dispatch({effects: StateEffect.reconfigure.of(managedExtensions)})\n    }\n  }, [autoCompleteCompartment, managedExtensions])\n\n  // update the value if it changes externally\n  useEffect(() => {\n    if (viewRef.current && value !== undefined) {\n      const currentValue = viewRef.current.state.doc.toString() || ''\n      const newValue = value || ''\n\n      if (newValue !== currentValue) {\n        viewRef.current.dispatch({\n          changes: {from: 0, to: currentValue.length, insert: newValue},\n        })\n      }\n    }\n  }, [value])\n\n  useEffect(() => {\n    const loadLanguage = async () => {\n      const fileExtension = fileName.split('.').pop() || ''\n      const language = fileExtension\n        ? languages.find(l => l.extensions.includes(fileExtension) || (l.filename && l.filename.test(fileName)))\n        : undefined\n\n      if (language && viewRef.current) {\n        const languageTheme = loadLanguageTheme(language.name)\n\n        if (languageTheme) {\n          viewRef.current.dispatch({\n            effects: themeCompartment.reconfigure(getTheme(languageTheme)),\n          })\n        }\n\n        if (language.name === 'Markdown') {\n          // use gfm as the base for markdown language\n          viewRef.current.dispatch({\n            effects: languageCompartment.reconfigure(markdown({base: markdownLanguage})),\n          })\n\n          // add markdown extensions\n          viewRef.current.dispatch({\n            effects: StateEffect.reconfigure.of([...markdownExtension, ...managedExtensions]),\n          })\n\n          // add emoji autocomplete - this needs its own compartment\n          viewRef.current.dispatch({effects: autoCompleteCompartment.reconfigure(emojiAutocomplete())})\n        } else {\n          viewRef.current.dispatch({effects: autoCompleteCompartment.reconfigure([])}) // reset autocomplete\n          viewRef.current.dispatch({effects: languageCompartment.reconfigure(await language.load())})\n        }\n      }\n    }\n\n    if (viewRef.current) {\n      loadLanguage()\n    }\n  }, [fileName, languageCompartment, autoCompleteCompartment, managedExtensions, themeCompartment])\n\n  return viewRef\n}\n","import type {Extension} from '@codemirror/state'\nimport type {EditorView} from '@codemirror/view'\nimport {ViewPlugin} from '@codemirror/view'\n\n/**\n * Adds role, tabIndex, and aria-labelledby attributes to the scroller DOM element\n * @param ariaLabelledBy The id of the element that the scroller is labelled by\n * @returns Extension\n */\nexport function scrollerAttributes(ariaLabelledBy: string): Extension {\n  const scroller = ViewPlugin.fromClass(\n    class {\n      constructor(view: EditorView) {\n        view.scrollDOM.tabIndex = 0\n        view.scrollDOM.setAttribute('role', 'region')\n        view.scrollDOM.setAttribute('aria-labelledby', ariaLabelledBy)\n      }\n    },\n  )\n\n  return [scroller]\n}\n","import type {Extension} from '@codemirror/state'\nimport {EditorView} from '@codemirror/view'\n\nexport function dataHpc(): Extension {\n  return EditorView.editorAttributes.of({\n    'data-hpc': 'true',\n  })\n}\n","import {EditorState, type Extension} from '@codemirror/state'\n\nexport function readOnly(): Extension {\n  return EditorState.readOnly.of(true)\n}\n","import {Compartment, type Extension} from '@codemirror/state'\nimport {type EditorView, keymap} from '@codemirror/view'\n\n/**\n * This function is used to create an extension that is toggleable by a key binding.\n * @param key The key to use to toggle the extension\n * @param extension The extension to toggle\n * @param initialState The initial state of the extension\n * @returns An extension array\n */\nexport function toggleWith(keyBinding: string, extension: Extension, initiallyEnabled: boolean): Extension[] {\n  const initial = initiallyEnabled ? extension : []\n\n  const privateCompartment = new Compartment()\n  function toggle(view: EditorView) {\n    const on = privateCompartment.get(view.state) === extension\n    view.dispatch({\n      effects: privateCompartment.reconfigure(on ? [] : extension),\n    })\n    return true\n  }\n  return [privateCompartment.of(initial), keymap.of([{key: keyBinding, run: toggle}])]\n}\n"],"names":["autocompleteTheme","EditorView","baseTheme","border","backgroundColor","fontFamily","fontSize","borderRadius","boxShadow","minWidth","padding","margin","color","whiteSpace","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","background","paddingLeft","fontStyle","helpPanelConstructor","panelDom","position","showPanel","of","dom","top","getCursor","view","state","selection","main","setCursor","newPosition","dispatch","anchor","somethingSelected","ranges","some","r","empty","getSelection","sliceDoc","from","to","setSelection","startPosition","endPosition","head","posToOffset","pos","doc","line","ch","offsetToPos","offset","lineAt","number","getLine","lineNumber","insertAtStartOfLine","text","replaceRange","removeFromStartOfLine","length","replaceSelection","getRange","changes","insert","insertAtCursor","cursor","find","search","searchCursor","SearchCursor","next","findAndReplace","replace","match","value","moveCursorToPositionAndScroll","startLine","endLine","startColumn","endColumn","undefined","startLineElement","endLineElement","focus","selectionEnd","effects","scrollIntoView","EditorSelection","range","y","RangeError","lineElement","getIndentationUnit","facet","indentUnit","chordOrKeyRegex","splitHotkeyString","hotkey","Array","matchAll","map","chord","areCharacterKeyShortcutsEnabled","keyboardShortcutsPreference","document","querySelector","content","isNonCharacterKeyShortcut","test","includes","nonEditableInputTypes","Set","isShortcutAllowed","eventToHotkeyString","event","allowCharacterKeyShortcuts","isEditableElement","target","HTMLElement","name","nodeName","toLowerCase","type","getAttribute","isReadonly","ariaReadOnly","has","isContentEditable","specialCharacterKeyShortcuts","key","run","preventDefault","basicSetup","history","indentOnInput","lineNumbers","bracketMatching","tooltips","editorAttributes","class","keymap","defaultKeymap","searchKeymap","historyKeymap","ghTheme","borderRightWidth","lineHeight","caretColor","paddingTop","outline","display","borderTop","bottom","textTransform","borderBottom","marginRight","marginBottom","marginTop","marginLeft","backgroundImage","height","borderLeft","githubDefaultHighlights","tag","t","keyword","comment","bracket","string","url","regexp","constant","propertyName","attributeName","atom","bool","function","variableName","definition","meta","heading","fontWeight","monospace","codemirrorDefaultHighlightStyle","link","textDecoration","emphasis","strong","strikethrough","githubLightHighlightStyle","githubDarkHighlightStyle","getTheme","additionalStyles","extendedHighlightStyles","isDarkMode","theme","syntaxHighlighting","HighlightStyle","define","fallback","spacingControls","extensions","EditorState","tabSize","options","indentWithTabs","push","repeat","lineWrapping","handleUploadChange","placeholder","replacementText","customEvent","detail","handleCursorChange","left","dropPos","posAtCoords","x","DISALLOW_LINKYFY_ON_PASTE","WeakMap","insertToken","token","currentSelection","toggleList","currentLine","prefixRegex","lines","rawLines","endsWith","slice","split","_line","index","everyLineStartsWithPrefix","every","i","marker","MarkdownKeymaps","newSelection","matchStart","set","autoDirectionBuilder","autoDirectionDecoration","Decoration","attributes","dir","builder","RangeSetBuilder","visibleRanges","add","finish","autoDirectionPlugin","ViewPlugin","fromClass","update","docChanged","viewportChanged","decorations","constructor","v","markdownExtension","domEventHandlers","keydown","metaKey","ctrlKey","stopPropagation","paste","get","insertSelectedTextLink","dataTransfer","clipboardData","pasteLink","getData","emojiRequest","memoize","request","Request","method","credentials","headers","Accept","res","fetch","status","emojiData","json","Object","keys","emojiName","emoji","src","addLintMark","StateEffect","severity","change","mapPos","lintMarkField","StateField","create","none","lintMarks","tr","e","is","lintMarkError","lintMarkWarning","lintMarkInfo","provide","f","mark","handleSecretLint","fromOffset","character","toOffset","languageThemes","ruby","languageNames","indentWithTab","indentMore","userEvent","shift","indentLess","CodeMirror","forwardRef","props","ref","keyBindings","width","focusNextRenderRef","rest","editorRef","useRef","viewRef","useCodeMirror","fileName","onChange","spacing","isHpc","isReadOnly","enableFileUpload","parentRef","ariaLabelledBy","minHeight","hideHelpUntilFocus","onCreateEditor","onDestroyEditor","languageCompartment","useMemo","Compartment","autoCompleteCompartment","themeCompartment","internalOnChange","useCallback","toString","updateListener","editorSizingTheme","managedExtensions","placeholderExtension","scrollDOM","tabIndex","setAttribute","contentAttributes","dropCursor","readOnly","toggleWith","keyBinding","extension","initiallyEnabled","privateCompartment","on","reconfigure","focusTrapHelpPanel","createElement","createKbdElement","kbd","textContent","append","className","id","concat","useEffect","parent","current","destroy","currentValue","newValue","loadLanguage","fileExtension","pop","language","languages","l","filename","languageTheme","markdown","base","markdownLanguage","autocompletion","override","context","emojiAutocompleteContext","data","word","matchBefore","explicit","completions","filteredEmojis","filter","indexOf","label","apply","icons","addToOptions","render","emojiOption","alt","completion","Prec","highest","acceptCompletion","load","useImperativeHandle","editor","window","requestAnimationFrame","hasFocus","div","displayName"],"sourceRoot":""}
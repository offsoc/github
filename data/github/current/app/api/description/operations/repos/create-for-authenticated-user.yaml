---
summary: Create a repository for the authenticated user
description: |-
  Creates a new repository for the authenticated user.

  OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
tags:
  - repos
operationId: repos/create-for-authenticated-user
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/repos/repos#create-a-repository-for-the-authenticated-user'
parameters: []
requestBody:
  required: true
  content:
    application/json:
      schema:
        properties:
          name:
            description: The name of the repository.
            type: string
            example: Team Environment
          description:
            description: A short description of the repository.
            type: string
          homepage:
            description: A URL with more information about the repository.
            type: string
          private:
            description: Whether the repository is private.
            default: false
            type: boolean
          has_issues:
            description: Whether issues are enabled.
            default: true
            type: boolean
            example: true
          has_projects:
            description: Whether projects are enabled.
            default: true
            type: boolean
            example: true
          has_wiki:
            description: Whether the wiki is enabled.
            default: true
            type: boolean
            example: true
          has_discussions:
            description: Whether discussions are enabled.
            default: false
            type: boolean
            example: true
          team_id:
            description: The id of the team that will be granted access to this repository.
              This is only valid when creating a repository in an organization.
            type: integer
          auto_init:
            description: Whether the repository is initialized with a minimal README.
            default: false
            type: boolean
          gitignore_template:
            description: The desired language or platform to apply to the .gitignore.
            example: Haskell
            type: string
          license_template:
            description: The license keyword of the open source license for this repository.
            example: mit
            type: string
          allow_squash_merge:
            description: Whether to allow squash merges for pull requests.
            default: true
            type: boolean
            example: true
          allow_merge_commit:
            description: Whether to allow merge commits for pull requests.
            default: true
            type: boolean
            example: true
          allow_rebase_merge:
            description: Whether to allow rebase merges for pull requests.
            default: true
            type: boolean
            example: true
          allow_auto_merge:
            description: Whether to allow Auto-merge to be used on pull requests.
            default: false
            type: boolean
            example: false
          delete_branch_on_merge:
            description: Whether to delete head branches when pull requests are merged
            default: false
            type: boolean
            example: false
          squash_merge_commit_title:
            type: string
            enum:
            - PR_TITLE
            - COMMIT_OR_PR_TITLE
            description: |-
              Required when using `squash_merge_commit_message`.
              
              The default value for a squash merge commit title:

              - `PR_TITLE` - default to the pull request's title.
              - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
          squash_merge_commit_message:
            type: string
            enum:
            - PR_BODY
            - COMMIT_MESSAGES
            - BLANK
            description: |-
              The default value for a squash merge commit message:

              - `PR_BODY` - default to the pull request's body.
              - `COMMIT_MESSAGES` - default to the branch's commit messages.
              - `BLANK` - default to a blank commit message.
          merge_commit_title:
            type: string
            enum:
            - PR_TITLE
            - MERGE_MESSAGE
            description: |-
              Required when using `merge_commit_message`.
              
              The default value for a merge commit title.

              - `PR_TITLE` - default to the pull request's title.
              - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
          merge_commit_message:
            type: string
            enum:
            - PR_BODY
            - PR_TITLE
            - BLANK
            description: |-
              The default value for a merge commit message.

              - `PR_TITLE` - default to the pull request's title.
              - `PR_BODY` - default to the pull request's body.
              - `BLANK` - default to a blank commit message.
          has_downloads:
            description: Whether downloads are enabled.
            default: true
            type: boolean
            example: true
          is_template:
            description: Whether this repository acts as a template that can be used
              to generate new repositories.
            default: false
            type: boolean
            example: true
        required:
          - name
        type: object
      examples:
        default:
          value:
            name: Hello-World
            description: This is your first repo!
            homepage: https://github.com
            private: false
            is_template: true
responses:
  '201':
    description: Response
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/full-repository.yaml'
        examples:
          default:
            $ref: '../../components/examples/full-repository.yaml'
    headers:
      Location:
        example: https://api.github.com/repos/octocat/Hello-World
        schema:
          type: string
  '401':
    $ref: '../../components/responses/requires_authentication.yaml'
  '304':
    $ref: '../../components/responses/not_modified.yaml'
  '404':
    $ref: '../../components/responses/not_found.yaml'
  '403':
    $ref: '../../components/responses/forbidden.yaml'
  '422':
    $ref: '../../components/responses/validation_failed.yaml'
  '400':
    $ref: '../../components/responses/bad_request.yaml'
x-github-releases:
  - ghec
  - ghes: '>= 2.18'
  - api.github.com
x-github:
  githubCloudOnly: false
  enabledForGitHubApps: false
  category: repos
  subcategory: repos
x-github-internal:
  path: '/user/repos'
  http-method: post
  service-tier: 1
  owner: '@github/repos'
  published: true
x-githubEnterpriseOverlays:
  '< 3.2':
    x-github:
      previews:
        - $ref: '../../components/x-previews/nebula.yaml'
          required: false
        - $ref: '../../components/x-previews/baptiste.yaml'
          required: false
  '< 3.3':
    requestBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              allow_auto_merge:
x-github-breaking-changes:
  - changeset: change_create_repo_trade_compliance_response_status
    patch:
      responses:
        '451':
          $ref: '../../components/responses/validation_failed.yaml'

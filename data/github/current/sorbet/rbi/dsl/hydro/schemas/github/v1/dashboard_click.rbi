# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::DashboardClick`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::DashboardClick`.

class Hydro::Schemas::Github::V1::DashboardClick
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      dashboard_context: T.nilable(T.any(Symbol, Integer)),
      dashboard_version: T.nilable(Integer),
      event_context: T.nilable(T.any(Symbol, Integer)),
      metadata: T.nilable(Hydro::Schemas::Github::V1::Entities::DashboardClickMetadata),
      record_id: T.nilable(Integer),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      target: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, dashboard_context: nil, dashboard_version: nil, event_context: nil, metadata: nil, record_id: nil, request_context: nil, target: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_dashboard_context; end

  sig { void }
  def clear_dashboard_version; end

  sig { void }
  def clear_event_context; end

  sig { void }
  def clear_metadata; end

  sig { void }
  def clear_record_id; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_target; end

  sig { returns(T.any(Symbol, Integer)) }
  def dashboard_context; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def dashboard_context=(value); end

  sig { returns(Integer) }
  def dashboard_version; end

  sig { params(value: Integer).void }
  def dashboard_version=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def event_context; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::DashboardClickMetadata)) }
  def metadata; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::DashboardClickMetadata)).void }
  def metadata=(value); end

  sig { returns(Integer) }
  def record_id; end

  sig { params(value: Integer).void }
  def record_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def target; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def target=(value); end
end

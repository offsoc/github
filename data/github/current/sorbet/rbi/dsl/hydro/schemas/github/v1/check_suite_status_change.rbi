# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::CheckSuiteStatusChange`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::CheckSuiteStatusChange`.

class Hydro::Schemas::Github::V1::CheckSuiteStatusChange
  sig do
    params(
      app: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration),
      check_suite_id: T.nilable(Integer),
      conclusion: T.nilable(String),
      current_status: T.nilable(T.any(Symbol, Integer)),
      head_sha: T.nilable(String),
      previous_status: T.nilable(T.any(Symbol, Integer)),
      repository_id: T.nilable(Integer)
    ).void
  end
  def initialize(app: nil, check_suite_id: nil, conclusion: nil, current_status: nil, head_sha: nil, previous_status: nil, repository_id: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)) }
  def app; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)).void }
  def app=(value); end

  sig { returns(Integer) }
  def check_suite_id; end

  sig { params(value: Integer).void }
  def check_suite_id=(value); end

  sig { void }
  def clear_app; end

  sig { void }
  def clear_check_suite_id; end

  sig { void }
  def clear_conclusion; end

  sig { void }
  def clear_current_status; end

  sig { void }
  def clear_head_sha; end

  sig { void }
  def clear_previous_status; end

  sig { void }
  def clear_repository_id; end

  sig { returns(String) }
  def conclusion; end

  sig { params(value: String).void }
  def conclusion=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def current_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def current_status=(value); end

  sig { returns(String) }
  def head_sha; end

  sig { params(value: String).void }
  def head_sha=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def previous_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def previous_status=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end
end

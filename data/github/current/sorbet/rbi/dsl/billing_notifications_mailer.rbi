# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `BillingNotificationsMailer`.
# Please instead update this file by running `bin/tapioca dsl BillingNotificationsMailer`.

class BillingNotificationsMailer
  include GeneratedUrlHelpersModule
  include GeneratedPathHelpersModule

  class << self
    sig { params(return_to: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def add_account_path(return_to: T.unsafe(nil)); end

    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def admin_emails(account, except: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def admin_host_url; end

    sig do
      params(
        entity: T.nilable(T.any(::Business, ::Organization, ::User))
      ).returns(::ActionMailer::MessageDelivery)
    end
    def admin_roles(entity); end

    sig do
      params(
        repository: T.nilable(::Repository),
        org_param: T.nilable(::String)
      ).returns(::ActionMailer::MessageDelivery)
    end
    def agnostic_categories_path(repository: T.unsafe(nil), org_param: T.unsafe(nil)); end

    sig do
      params(
        repository: T.nilable(::Repository),
        org: T.nilable(T.any(::Organization, ::String)),
        args: T::Hash[T.any(::String, ::Symbol), T.untyped]
      ).returns(::ActionMailer::MessageDelivery)
    end
    def agnostic_choose_category_discussion_path(repository = T.unsafe(nil), org: T.unsafe(nil), **args); end

    sig do
      params(
        discussion: ::Discussion,
        org_param: T.nilable(::String),
        args: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def agnostic_discussion_path(discussion, org_param: T.unsafe(nil), **args); end

    sig do
      params(
        discussion: ::Discussion,
        org_param: T.nilable(::String),
        anchor: T.nilable(::String)
      ).returns(::ActionMailer::MessageDelivery)
    end
    def agnostic_discussion_url(discussion, org_param: T.unsafe(nil), anchor: T.unsafe(nil)); end

    sig do
      params(
        repository: T.nilable(::Repository),
        org_param: T.nilable(::String),
        args: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def agnostic_discussions_path(repository = T.unsafe(nil), org_param: T.unsafe(nil), **args); end

    sig do
      params(
        repository: T.nilable(::Repository),
        org_param: T.nilable(T.any(::Organization, ::String)),
        args: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def agnostic_new_discussion_path(repository = T.unsafe(nil), org_param: T.unsafe(nil), **args); end

    sig do
      params(
        campaign: T.untyped,
        source: T.untyped,
        medium: T.untyped,
        content: T.untyped,
        term: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def android_mobile_app_store_url(campaign: T.unsafe(nil), source: T.unsafe(nil), medium: T.unsafe(nil), content: T.unsafe(nil), term: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def apple_app_store_subscriptions_url; end

    sig { params(card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def archive_project_card_path(card); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def archive_repository_path(repo); end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_url(source, options = T.unsafe(nil)); end

    sig { params(text: T.untyped, args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def auto_link(text, *args, &block); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        actor: T.nilable(::User)
      ).returns(::ActionMailer::MessageDelivery)
    end
    def available_plans(target, actor: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def base_url; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def bcc_log; end

    sig { params(account: T.untyped, include_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def billing_emails(account, include_name: T.unsafe(nil)); end

    sig { params(tab: T.nilable(::String)).returns(::ActionMailer::MessageDelivery) }
    def billing_page_title(tab); end

    sig { params(parts: T.untyped, tree: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def blob_blame_path(parts, tree, repo = T.unsafe(nil)); end

    sig { params(parts: T.untyped, tree: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def blob_create_path(parts, tree, repo = T.unsafe(nil)); end

    sig { params(parts: T.untyped, tree: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def blob_edit_path(parts, tree, repo = T.unsafe(nil)); end

    sig { params(parts: T.untyped, tree: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def blob_new_path(parts, tree, repo = T.unsafe(nil)); end

    sig { params(parts: T.untyped, tree: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def blob_raw_path(parts, tree, repo = T.unsafe(nil)); end

    sig do
      params(
        parts: T.untyped,
        tree: T.untyped,
        repo: T.untyped,
        anchor: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def blob_view_path(parts, tree, repo = T.unsafe(nil), anchor: T.unsafe(nil)); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def blob_view_url(*args); end

    sig { params(plan: ::GitHub::Plan, account_type: T.nilable(::String)).returns(::ActionMailer::MessageDelivery) }
    def branded_plan_name(plan, account_type: T.unsafe(nil)); end

    sig do
      params(
        user_emails: T::Array[::String],
        owner: T.any(::Business, ::Organization),
        email_context: T::Hash[T.untyped, T.untyped]
      ).returns(::ActionMailer::MessageDelivery)
    end
    def budget_threshold_notification(user_emails:, owner:, email_context:); end

    sig { params(account: T.untyped, admins: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def build_admin_recipients_list(account, admins); end

    sig { params(assignment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def bundled_license_assignment_created(assignment); end

    sig { params(business: ::Business, education_coupon: T::Boolean).returns(::ActionMailer::MessageDelivery) }
    def business_coupon_expired(business, education_coupon: T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def can_manage_munich_seats?(target); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def can_manage_seats?(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def can_purchase_data_packs?(target); end

    sig do
      params(
        target: ::User,
        seat_change: ::Billing::PlanChange::SeatChange
      ).returns(::ActionMailer::MessageDelivery)
    end
    def can_purchase_seats?(target, seat_change); end

    sig { params(args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def capture(*args, &block); end

    sig { params(project: T.untyped, pull_request: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def card_pull_request_status_path(project, pull_request); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def cc_expired_failure(account); end

    sig { params(account: T.untyped, message: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def cc_failure(account, message); end

    sig { params(content: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def cdata_section(content); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def class_names(*args); end

    sig { params(repo: T.untyped, parts: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def clean_repository_path(repo, *parts); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def client_side_feature_flags; end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def comment_discussion_anchor(comment); end

    sig { params(commit: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def commit_branches_path(commit); end

    sig { params(parts: T.untyped, tree: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def commits_path(parts, tree, repo = T.unsafe(nil)); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def commits_url(*args); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_extname(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_host(source = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(source: ::String, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def concat(string); end

    sig { params(survey: ::Survey).returns(::ActionMailer::MessageDelivery) }
    def contact_opt_in_survey_question(survey); end

    sig do
      params(
        name: T.untyped,
        content: T.untyped,
        options: T.untyped,
        block: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def content_for(name, content = T.unsafe(nil), options = T.unsafe(nil), &block); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def content_for?(name); end

    sig do
      params(
        name: T.untyped,
        content_or_options_with_block: T.untyped,
        options: T.untyped,
        escape: T.untyped,
        block: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def content_tag(name, content_or_options_with_block = T.unsafe(nil), options = T.unsafe(nil), escape = T.unsafe(nil), &block); end

    sig { params(context: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def context_path(context); end

    sig { params(mail: T.untyped, premailer_options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def convert_to_premail(mail, premailer_options: T.unsafe(nil)); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def copilot_enabled_for_user?(target); end

    sig do
      params(
        billable_entity: T.any(::Business, ::Organization, ::User),
        education_coupon: T::Boolean
      ).returns(::ActionMailer::MessageDelivery)
    end
    def coupon_expired_failure(billable_entity, education_coupon: T.unsafe(nil)); end

    sig { params(organization: T.untyped, business: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def coupon_removed_from_enterprise_owned_organization(organization, business); end

    sig do
      params(
        billable_entity: T.any(::Business, ::Organization, ::User),
        redemption: ::CouponRedemption
      ).returns(::ActionMailer::MessageDelivery)
    end
    def coupon_will_expire_soon(billable_entity, redemption); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def create_or_transform_org_path; end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def credit_card_will_expire_soon(account); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def current_cycle(name = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def current_path; end

    sig { params(entity: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def customer_payload(entity); end

    sig { params(first_value: T.untyped, values: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def cycle(first_value, *values); end

    sig { params(migration_date: T.nilable(::ActiveSupport::TimeWithZone)).returns(::ActionMailer::MessageDelivery) }
    def days_since_migration(migration_date); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def default_url_options; end

    sig { params(path: T.untyped, left_row: T.untyped, right_row: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def diff_file_anchor(path, left_row = T.unsafe(nil), right_row = T.unsafe(nil)); end

    sig { params(path: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def diff_path_anchor(path); end

    sig do
      params(
        file_list_view: T.untyped,
        base_repository: T.untyped,
        head_repository: T.untyped,
        entry: T.untyped,
        whitespace: T.untyped,
        short_path: T.untyped,
        source: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def diff_path_for(file_list_view:, base_repository:, head_repository:, entry:, whitespace:, short_path: T.unsafe(nil), source: T.unsafe(nil)); end

    sig { params(diffable: T.untyped, path: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def diffable_file_path(diffable, path); end

    sig do
      params(
        file_list_view: T.untyped,
        base_repository: T.untyped,
        head_repository: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def diffs_path_base_options(file_list_view, base_repository, head_repository); end

    sig do
      params(
        file_list_view: T.untyped,
        base_repository: T.untyped,
        head_repository: T.untyped,
        start_entry: T.untyped,
        whitespace: T.untyped,
        sticky: T.untyped,
        responsive: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def diffs_path_for(file_list_view:, base_repository:, head_repository:, start_entry:, whitespace:, sticky: T.unsafe(nil), responsive: T.unsafe(nil)); end

    sig { params(discussion: T.untyped, comment_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def discussion_comment_show_path_from(discussion:, comment_id:); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def discussion_url_to_main_site(*args); end

    sig { params(survey: ::Survey).returns(::ActionMailer::MessageDelivery) }
    def downgrade_reason_survey_question(survey); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def downgrade_survey; end

    sig { params(project: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def edit_project_path(project, *args); end

    sig { params(additional_params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def enterprise_trial_referral_params(additional_params: T.unsafe(nil)); end

    sig { params(organization: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def enterprise_trial_signup_path(organization = T.unsafe(nil), params: T.unsafe(nil)); end

    sig { params(html: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def escape_once(html); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def escape_url_branch(string); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def escape_url_path(string); end

    sig { params(parts: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def escape_url_paths(parts); end

    sig { params(text: T.untyped, phrase: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def excerpt(text, phrase, options = T.unsafe(nil)); end

    sig { params(helper: T.untyped, pull_request_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def expand_from_pull_request_orchestration(helper, pull_request_orchestration); end

    sig { params(helper: T.untyped, repository_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def expand_from_repository_orchestration(helper, repository_orchestration); end

    sig { params(helper: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def expand_nwo_from(helper, subject); end

    sig { params(feature_name: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_for_current_user?(feature_name:, subject: T.unsafe(nil)); end

    sig { params(feature_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_for_current_visitor?(feature_name:); end

    sig { params(feature_name: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_for_user_or_current_visitor?(feature_name:, subject: T.unsafe(nil)); end

    sig { params(feature_name: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_globally_or_for_user?(feature_name:, subject: T.unsafe(nil)); end

    sig { params(type: ::Symbol, actor: ::User).returns(::ActionMailer::MessageDelivery) }
    def feature_list(type, actor); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def features_datafile_tag; end

    sig { params(options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def filter_notifications_query(options); end

    sig do
      params(
        selections: T::Array[{type: ::Integer, displayText: ::String, dateText: ::String}],
        migration_date: ::Time
      ).returns(::ActionMailer::MessageDelivery)
    end
    def filter_period_selections(selections, migration_date); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_url(source, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def fork_path(repo); end

    sig { params(url: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def formatted_url_path(url); end

    sig { params(user: T.untyped, subscription_item_change: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def free_trial_will_end_soon(user, subscription_item_change); end

    sig { params(path: T.untyped, query_params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def ga_campaign_url(path, query_params = T.unsafe(nil)); end

    sig { params(period: ::Integer).returns(::ActionMailer::MessageDelivery) }
    def get_end_date_for_period(period); end

    sig { params(period: ::Integer).returns(::ActionMailer::MessageDelivery) }
    def get_start_date_for_period(period); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_abuse_reports_stafftools_repository_path(repo); end

    sig { params(transfer: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_accept_settings_app_transfer_path(transfer); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_billing_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_latest_runs_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_secrets_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_self_hosted_runners_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_variables_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_actions_workflows_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_admin_disable_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_admin_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_analyze_language_stafftools_repository_path(repo); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installation_action_path(app, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, user: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installation_permissions_path(app, user, **params); end

    sig { params(app: T.untyped, user: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installation_permissions_url(app, user, **params); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installations_path(app, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, user: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_installations_suggestions_path(app, user, **params); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_path(app, user); end

    sig { params(app: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_select_target_path(app, **params); end

    sig { params(app: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_select_target_url(app, **params); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_app_url(app, user = T.unsafe(nil)); end

    sig { params(repo: T.untyped, id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_archive_stafftools_repository_large_file_path(repo, id); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_archive_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cancel_access_request_stafftools_repository_path(repo); end

    sig { params(request: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cancel_app_integration_installation_request_url(request, user); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cancel_unlock_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_allow_force_push_stafftools_repository_path(repo); end

    sig { params(kind: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_disk_quota_stafftools_repository_path(kind, repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_max_object_size_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_change_timeout_stafftools_repository_large_files_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_child_teams_stafftools_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_children_stafftools_repository_network_path(repo); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cleanup_codespaces_path(pull); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_cleanup_pull_request_path(pull); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_dependencies_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_domain_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_generated_pages_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_clear_snapshot_dependencies_stafftools_repository_path(repo); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_close_issue_path(issue); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_close_stafftools_repository_pull_request_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_code_frequency_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_collaboration_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_collaborators_only_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_commit_activity_path(repo); end

    sig { params(repo: T.untyped, period: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_community_graph_path(repo, period = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_content_warning_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_contributors_graph_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_create_pull_request_path(repo); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_advisory_comment_path(comment); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_advisory_path(advisory); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_issue_comment_path(comment); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_issue_path(issue); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_path(repo); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_pull_request_path(pr); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_pull_request_review_comment_path(comment); end

    sig { params(file: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_repository_repository_file_path(file); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_team_path(team); end

    sig { params(key: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_database_stafftools_user_gpg_key_path(key); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_delete_https_certificate_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_deleted_stafftools_repository_reflog_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_dependabot_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_dependency_graph_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_deploy_keys_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_detect_manifests_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_disable_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_disk_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, snapshot_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_download_dependency_snapshot_stafftools_repository_path(repo, snapshot_id); end

    sig do
      params(
        app: T.untyped,
        installation: T.untyped,
        user: T.untyped,
        params: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def gh_edit_app_installation_path(app, installation, user, **params); end

    sig { params(app: T.untyped, installation: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_edit_app_installation_permissions_path(app, installation, user); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_enable_code_search_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_events_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, snapshot_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_exclude_dependency_snapshot_stafftools_repository_path(repo, snapshot_id); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_external_groups_stafftools_team_path(team); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_first_stafftools_repository_advisory_comments_path(advisory); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_first_stafftools_repository_issue_comments_path(issue); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_force_pushes_stafftools_repository_reflog_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_fsck_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_funding_links_disable_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_generate_key_settings_app_path(app); end

    sig { params(options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_graphql_app_installation_permissions_path(**options); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_hide_from_google_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_https_status_stafftools_repository_pages_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_integration_revoke_all_tokens_path(app); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issue_path(issue); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_assigned_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_created_by_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_mentioned_path(repo, args); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_issues_path(repo); end

    sig { params(label: T.untyped, repository: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_label_path(label, repository = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_labels_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_languages_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_list_keys_settings_app_path(app); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_lock_for_migration_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_lock_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_make_private_settings_app_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_make_public_settings_app_path(app); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_members_stafftools_team_path(team); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_merge_pull_request_path(pull); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_merge_stafftools_repository_pull_request_path(pr); end

    sig { params(milestone: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_milestone_issue_search_path(milestone); end

    sig { params(milestone: T.untyped, repository: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_milestone_path(milestone, repository = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_network_map_stafftools_repository_path(repo); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_new_app_installation_path(app, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_new_app_installation_url(app, user = T.unsafe(nil)); end

    sig { params(context: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_new_settings_app_path(context); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_notifications_stafftools_repository_path(repo); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_open_issue_path(issue); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_open_stafftools_repository_pull_request_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_overview_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pause_repo_invite_limit_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_permissions_stafftools_repository_path(repo); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_permissions_update_request_settings_installation_path(installation); end

    sig { params(app: T.untyped, field: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_preview_permissions_note_apps_path(app, field:); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_preview_stafftools_repository_large_files_path(repo); end

    sig { params(pull: T.untyped, commit: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pull_request_commit_path(pull, commit); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pull_request_diff_path(pull); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pull_request_patch_path(pull); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pulls_assigned_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pulls_mentioned_path(repo, args); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_pulls_review_requested_path(repo, args); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_punch_card_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_code_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_commits_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_discussions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_events_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_issues_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_objects_stafftools_repository_large_files_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_projects_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_releases_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_repository_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_stafftools_repository_pull_requests_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_purge_wiki_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_rebuild_commit_contributions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_redetect_license_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reflog_sync_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_blackbird_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_code_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_commits_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_discussions_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_issues_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_org_blackbird_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_projects_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_releases_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_repository_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_stafftools_repository_pull_requests_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_reindex_wiki_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_releases_stafftools_repository_path(repo); end

    sig { params(app: T.untyped, key: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_remove_key_settings_app_path(app, key); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_repo_graphs_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_repositories_stafftools_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_request_access_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_request_https_certificate_stafftools_repository_pages_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_requests_stafftools_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_require_login_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_require_opt_in_on_entire_network_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_require_opt_in_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_restore_objects_stafftools_repository_large_files_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_restore_page_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped, ref: T.untyped, oid: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_restore_stafftools_repository_reflog_path(repo, ref, oid); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_schedule_backup_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_schedule_wiki_backup_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_search_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_security_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_set_used_by_stafftools_repository_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_advanced_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_beta_feature_toggle_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_beta_features_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_create_client_secret_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_installations_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_integration_agent_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_permissions_path(app); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_remove_client_secret_path(app); end

    sig { params(target: T.untyped, transfer: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_transfer_path(target, transfer); end

    sig { params(target: T.untyped, transfer: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_transfer_url(target, transfer); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_app_update_integration_agent_path(app); end

    sig { params(context: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_apps_path(context); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_apps_sign_agreement_path(app); end

    sig { params(installation: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_installation_path(installation, params = T.unsafe(nil)); end

    sig { params(installation: T.untyped, params: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_installation_repositories_path(installation, params = T.unsafe(nil)); end

    sig { params(target: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_settings_installations_path(target); end

    sig do
      params(
        pull: T.untyped,
        commit: T.untyped,
        selected_check_run: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def gh_show_pull_request_check_sha_path(pull, commit, selected_check_run); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_show_pull_request_path(pull); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_siblings_stafftools_repository_network_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_size_disable_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_staff_override_unlock_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_staff_unlock_stafftools_repository_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_reconcile_team_path(team); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repo_hooks_path(repo); end

    sig { params(repo: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_activity_path(repo, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisories_path(repo); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisory_comment_path(comment); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisory_comments_path(advisory); end

    sig { params(advisory: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_advisory_path(advisory); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_collaborators_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_country_block_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_dmca_takedown_path(repo); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_comment_path(comment); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_comments_path(issue); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_path(issue); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issue_subscriptions_path(issue); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_issues_path(repo); end

    sig { params(repo: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_large_files_path(repo, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_mirror_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_network_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_network_tree_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_notification_settings_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_projects_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_protected_branches_path(repo); end

    sig { params(pull_request_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_orchestration_path(pull_request_orchestration); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_orchestrations_path(repo); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_path(pr); end

    sig { params(comment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_review_comment_path(comment); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_review_comments_path(pr); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_request_subscriptions_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_pull_requests_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_redirects_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_reflog_path(repo); end

    sig { params(file: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_file_path(file); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_files_path(repo); end

    sig { params(repository_orchestration: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_orchestration_path(repository_orchestration); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_repository_orchestrations_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_svn_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_vulnerability_alerts_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_repository_watchers_path(repo); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_sync_team_path(team); end

    sig { params(team: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_team_path(team); end

    sig { params(key: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_user_gpg_key_path(key); end

    sig { params(user_or_bot: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stafftools_user_path(user_or_bot); end

    sig { params(entity: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_star_path(entity); end

    sig { params(entity: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_stargazers_path(entity); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_status_stafftools_repository_pages_path(repo); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_subscribe_issue_path(issue); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_suggested_reviewers_path(pull); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_suspend_settings_installation_path(installation); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_search_index_stafftools_repository_pull_request(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_stafftools_repository_mirror_path(repo); end

    sig { params(pr: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_stafftools_repository_pull_request_path(pr); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_sync_stafftools_repository_reflog_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_allow_git_graph_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_anonymous_release_download_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_permission_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_public_push_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_toggle_token_scanning_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_traffic_path(repo); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_transfer_settings_app_path(app); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_transfer_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unarchive_stafftools_repository_large_file_path(repo, id); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unarchive_stafftools_repository_path(repo); end

    sig { params(pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_undo_cleanup_pull_request_path(pull); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unlock_build_stafftools_repository_pages_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unlock_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unpublish_unsearchable_releases_stafftools_repository_path(repo, options = T.unsafe(nil)); end

    sig { params(entity: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unstar_path(entity); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unsubscribe_issue_path(issue); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_unsuspend_settings_installation_path(installation); end

    sig { params(app: T.untyped, installation: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_app_installation_path(app, installation, user = T.unsafe(nil)); end

    sig { params(app: T.untyped, installation: T.untyped, user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_app_installation_permissions_path(app, installation, user = T.unsafe(nil)); end

    sig { params(app: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_permissions_settings_apps_path(app); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_permissions_settings_installation_path(installation); end

    sig { params(installation: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_update_settings_installation_path(installation); end

    sig { params(repo: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_user_pull_requests_path(repo, args); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_mark_as_broken_stafftools_repository_path(repo); end

    sig { params(page: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_path(page, repo = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_restore_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wiki_schedule_maintenance_stafftools_repository_path(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def gh_wikis_path(repo); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_guides; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_marketplace; end

    sig { params(from: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def github_noreply(from = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_opensource; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_partnerships; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_shop; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_appeals; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_sap_bis; end

    sig { params(options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def global_notifications_path(options = T.unsafe(nil)); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def go_get_url(repo); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def go_import_url(repo); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def google_app_store_subscriptions_url; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def has_payment_details?; end

    sig do
      params(
        text: T.untyped,
        phrases: T.untyped,
        options: T.untyped,
        block: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def highlight(text, phrases, options = T.unsafe(nil), &block); end

    sig { params(hook: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def hook_path(hook, options = T.unsafe(nil)); end

    sig { params(parent: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def hooks_path(parent); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def host_for_repo(repo); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def image_base_url; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_path(source, options = T.unsafe(nil)); end

    sig { params(path: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_url(path); end

    sig { params(parent: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def installations_path(parent); end

    sig { params(campaign: T.untyped, provider_token: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def ios_mobile_app_store_url(campaign: T.unsafe(nil), provider_token: T.unsafe(nil)); end

    sig { params(business: ::Business).returns(::ActionMailer::MessageDelivery) }
    def is_legacy_report_an_option?(business); end

    sig { params(issue: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def issue_or_pull_request_path(issue); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def issue_url_to_main_site(*args); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_url(source, options = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def lfs_bandwidth_breakdown(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def lfs_repository_list(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def lfs_storage_breakdown(target); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def login_path_with_return; end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def mailer_asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def mailer_static_asset_path(path); end

    sig { params(account: T.untyped, notification_number: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def manual_dunning_attempts(account, notification_number); end

    sig { params(account: T.untyped, message: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def marketplace_failure(account, message); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def microsoft_trade_help; end

    sig { params(business: ::Business).returns(::ActionMailer::MessageDelivery) }
    def migrated_meuse_customer?(business); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_choose_organization_path(account); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_choose_resources_path(account); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_confirm_path(account); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_confirmation_page_path(account); end

    sig { params(account: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_memex_projects_path(account, options = T.unsafe(nil)); end

    sig { params(account: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_new_choose_organization_path(account, options = T.unsafe(nil)); end

    sig { params(account: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_projects_path(account, options = T.unsafe(nil)); end

    sig { params(account: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def move_work_repositories_path(account, options = T.unsafe(nil)); end

    sig { params(account: T.untyped, message: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def never_entered_dunning_failure(account, message); end

    sig { params(parent: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def new_hook_path(parent, options = T.unsafe(nil)); end

    sig { params(account: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def new_move_work_path(account, options = T.unsafe(nil)); end

    sig { params(organization: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def new_org_repository_path(organization); end

    sig do
      params(
        tag_name: T.untyped,
        repo: T.untyped,
        query_params: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def new_release_path_helper(tag_name: T.unsafe(nil), repo: T.unsafe(nil), query_params: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def no_payment_details?; end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def no_payment_failure(account); end

    sig { params(url: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notification_signature(url); end

    sig { params(list: T.untyped, email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notifications_list_email(list, email); end

    sig { params(number: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def number_to_currency(number, options = T.unsafe(nil)); end

    sig { params(number: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def number_to_human(number, options = T.unsafe(nil)); end

    sig { params(number: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def number_to_human_size(number, options = T.unsafe(nil)); end

    sig { params(number: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def number_to_percentage(number, options = T.unsafe(nil)); end

    sig { params(number: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def number_to_phone(number, options = T.unsafe(nil)); end

    sig { params(number: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def number_with_delimiter(number, options = T.unsafe(nil)); end

    sig { params(number: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def number_with_precision(number, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def octocaptcha_help_url; end

    sig { params(target: ::Organization).returns(::ActionMailer::MessageDelivery) }
    def on_per_seat_pricing?(target); end

    sig { params(organization_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def org_dashboard_url_to_main_site(organization_id); end

    sig { params(organization: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def org_owners_path(organization); end

    sig { params(organization: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def org_owners_url(organization); end

    sig { params(organization: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def organization_path(organization); end

    sig { params(organization: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def organization_upgrade_failure(organization); end

    sig { params(account: T.untyped, message: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def over_billing_attempts_limit_failure(account, message); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def parse_payment_details; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def path_string; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def path_string_for_display; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_video(source, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def payment_details; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def payment_details_includes_paypal?; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def payment_details_object; end

    sig { params(account: T.untyped, message: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def paypal_failure(account, message); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def pending_change_active_on(target); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def pending_cycle(target); end

    sig { params(business: ::Business).returns(::ActionMailer::MessageDelivery) }
    def pending_cycle_seat_change_payload(business); end

    sig { params(target: ::Organization).returns(::ActionMailer::MessageDelivery) }
    def pending_non_manager_invitations_count(target); end

    sig do
      params(
        count: T.untyped,
        singular: T.untyped,
        plural_arg: T.untyped,
        plural: T.untyped,
        locale: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def pluralize(count, singular, plural_arg = T.unsafe(nil), plural: T.unsafe(nil), locale: T.unsafe(nil)); end

    sig { params(repository: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def porter_admin_repository_url(repository:, options: T.unsafe(nil)); end

    sig { params(user: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def porter_admin_user_url(user:, options: T.unsafe(nil)); end

    sig { params(repository: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def porter_api_base_url(repository:); end

    sig { params(repository: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def porter_url(repository:); end

    sig { params(parent: T.untyped, hook: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def pre_receive_update_hook_path(parent, hook, options = T.unsafe(nil)); end

    sig do
      params(
        type: T.untyped,
        repository: T.untyped,
        tree_name: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def preferred_file_path(type:, repository: T.unsafe(nil), tree_name: T.unsafe(nil)); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def premail(*args); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        product: ::Symbol
      ).returns(::ActionMailer::MessageDelivery)
    end
    def product_moved_to_vnext?(target, product); end

    sig { params(project: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_activity_path(project); end

    sig { params(card: T.untyped, pull: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_card_closing_reference_path(card, pull); end

    sig { params(card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_card_closing_references_path(card); end

    sig { params(project: T.untyped, card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_card_columns_path(project, card); end

    sig { params(card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_card_path(card); end

    sig { params(project: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_cards_path(project); end

    sig { params(project: T.untyped, column: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_column_cards_path(project, column, *args); end

    sig { params(project: T.untyped, column: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_column_path(project, column); end

    sig { params(card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_convert_note_to_issue_path(card); end

    sig { params(owner: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_linkable_repositories_path(owner); end

    sig { params(project: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_path(project, *args); end

    sig { params(project: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_repository_results_path(project, *args); end

    sig { params(project: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_search_archived_cards_path(project); end

    sig { params(project: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_search_results_path(project, *args); end

    sig { params(project: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_settings_linked_repositories_path(project, *args); end

    sig { params(project: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_settings_path(project, *args); end

    sig { params(project: T.untyped, args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_settings_users_path(project, *args); end

    sig { params(card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_update_note_path(card); end

    sig { params(card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def project_update_note_task_list_path(card); end

    sig { params(name: T.untyped, content: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def provide(name, content = T.unsafe(nil), &block); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def public_compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(pull_request: T.untyped, range: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def pull_request_diff_range_path(pull_request, range: T.unsafe(nil)); end

    sig { params(pull_request: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def pull_request_path(pull_request, repo = T.unsafe(nil)); end

    sig { params(pull_request: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def pull_request_url(pull_request, repo = T.unsafe(nil)); end

    sig { params(pull_request: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def pull_request_url_to_main_site(pull_request, repo = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def purchase_button_aria_label(target); end

    sig { params(email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_email_address(email); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_user_name(user); end

    sig { params(stringish: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def raw(stringish); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def real_user_path(user); end

    sig { params(account: T.untyped, billing_transaction: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def receipt(account, billing_transaction); end

    sig { params(account: T.untyped, billing_transaction: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def receipt_bcc(account, billing_transaction); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def redalert; end

    sig do
      params(
        user: T.untyped,
        purchased_on: T.untyped,
        refund_amount_in_cents: T.untyped,
        instrument: T.untyped,
        refunded_at: T.untyped,
        custom_text: T.untyped,
        old_refund_transaction: T.untyped,
        refund_transaction: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def refund(user, purchased_on, refund_amount_in_cents, instrument, refunded_at = T.unsafe(nil), custom_text = T.unsafe(nil), old_refund_transaction = T.unsafe(nil), refund_transaction:); end

    sig do
      params(
        action: T.untyped,
        release_or_tag_name: T.untyped,
        repo: T.untyped,
        full_url: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def release_action_path(action, release_or_tag_name, repo = T.unsafe(nil), full_url: T.unsafe(nil)); end

    sig do
      params(
        release_or_tag_name: T.untyped,
        repo: T.untyped,
        full_url: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def release_path(release_or_tag_name, repo = T.unsafe(nil), full_url: T.unsafe(nil)); end

    sig { params(options: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def repository_issues_path(options = T.unsafe(nil), repo = T.unsafe(nil)); end

    sig { params(options: T.untyped, repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def repository_pull_requests_path(options = T.unsafe(nil), repo = T.unsafe(nil)); end

    sig do
      params(
        repo: T.untyped,
        tree: T.untyped,
        action: T.untyped,
        parts: T.untyped,
        anchor: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def repository_tree_path(repo, tree, action, parts, anchor: T.unsafe(nil)); end

    sig { params(repo: T.untyped, tree: T.untyped, action: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def repository_tree_path_root(repo, tree, action); end

    sig { params(path: T.untyped, tree: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def repository_upload_breadcrumb_path(path, tree); end

    sig { params(repo: T.untyped, parts: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def repository_url_to_main_site(repo, *parts); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def reset_cycle(name = T.unsafe(nil)); end

    sig do
      params(
        owner: T.untyped,
        content: T.untyped,
        content_owner: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def resources_usage(owner, content, content_owner: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def return_to_path; end

    sig { params(text: T.untyped, args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def rinku_auto_link(text, *args, &block); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_concat(string); end

    sig { params(array: T.untyped, sep: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_join(array, sep = T.unsafe(nil)); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_name?(name); end

    sig { params(options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_url_for(options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def sanctioned_by_ofac_message; end

    sig { params(html: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def sanitize(html, options = T.unsafe(nil)); end

    sig { params(style: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def sanitize_css(style); end

    sig { params(url: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def sanitize_url(url, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def sanitizer_vendor; end

    sig { params(val: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def sanitizer_vendor=(val); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def scrub_real_name(name); end

    sig do
      params(
        target: ::User,
        seat_change: ::Billing::PlanChange::SeatChange
      ).returns(::ActionMailer::MessageDelivery)
    end
    def seat_change_covered_by_coupon?(target, seat_change); end

    sig { params(organization: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def settings_org_discussions_path(organization); end

    sig { params(plan: ::GitHub::Plan, account_type: T.nilable(::String)).returns(::ActionMailer::MessageDelivery) }
    def short_plan_name(plan, account_type: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def should_show_synchronous_payment_collection_upgrading_page?; end

    sig { params(request_url: ::String).returns(::ActionMailer::MessageDelivery) }
    def show_development_payment_form_warning?(request_url); end

    sig { params(target: ::User, plan: ::GitHub::Plan).returns(::ActionMailer::MessageDelivery) }
    def show_downgrade_survey?(target, plan); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def signup_path_with_return; end

    sig do
      params(
        text: T.untyped,
        html_options: T.untyped,
        options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def simple_format(text, html_options = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(hook: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stafftools_hook_path(hook, options = T.unsafe(nil)); end

    sig { params(parent: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stafftools_hooks_path(parent, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped, newsies_thread: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stafftools_notifications_path(repo, newsies_thread); end

    sig { params(hook: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stafftools_toggle_hook_active_status_path(hook, options = T.unsafe(nil)); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def static_asset_path(path); end

    sig { params(html: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def strip_links(html); end

    sig { params(html: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def strip_tags(html); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_url(source, options = T.unsafe(nil)); end

    sig do
      params(
        submodule: T.untyped,
        content: T.untyped,
        include_branch: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def submodule_content_url(submodule, content = T.unsafe(nil), include_branch = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def subscription_data_packs_can_be_changed?(target); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def synchronous_payment_collection_job_status; end

    sig do
      params(
        name: T.untyped,
        options: T.untyped,
        open: T.untyped,
        escape: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def tag(name = T.unsafe(nil), options = T.unsafe(nil), open = T.unsafe(nil), escape = T.unsafe(nil)); end

    sig { params(target: ::User, options: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_billing_data_plan_path(target, options = T.unsafe(nil)); end

    sig { params(target: ::User, options: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_billing_downgrade_data_plan_path(target, options = T.unsafe(nil)); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        query_params: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_billing_path(target, query_params = T.unsafe(nil)); end

    sig { params(target: ::User, options: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_billing_upgrade_data_plan_path(target, options = T.unsafe(nil)); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        tab: T.nilable(T.any(::String, ::Symbol))
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_billing_url(target, tab: T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_cc_update_path(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_cycle_update_path(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_downgrade_with_exit_survey_path(target); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        invoice_number: ::String
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_invoice_signature_path(target, invoice_number); end

    sig { params(target: ::Organization, arg: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_org_payment_method_path(target, arg); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        arg: T::Hash[::Symbol, T.untyped]
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_payment_method_path(target, arg = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_self_serve_invoicing_path(target); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        invoice_number: ::String
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_show_invoice_path(target, invoice_number); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def target_update_credit_card_path(target); end

    sig { params(tax_exemption_status: ::Billing::TaxExemptionStatus).returns(::ActionMailer::MessageDelivery) }
    def tax_exemption_certificate_rejected(tax_exemption_status); end

    sig { params(tax_exemption_status: ::Billing::TaxExemptionStatus).returns(::ActionMailer::MessageDelivery) }
    def tax_exemption_certificate_uploaded(tax_exemption_status); end

    sig { params(team: T.untyped, organization: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def team_organization_role_path(team, organization); end

    sig { params(array: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def to_sentence(array, options = T.unsafe(nil)); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def token_list(*args); end

    sig { params(url: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def tokenized_feed_url(url); end

    sig { params(text: T.untyped, options: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def truncate(text, options = T.unsafe(nil), &block); end

    sig { params(card: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def unarchive_project_card_path(card); end

    sig { params(repo: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def unarchive_repository_path(repo); end

    sig { params(target: ::User, plan: ::GitHub::Plan).returns(::ActionMailer::MessageDelivery) }
    def upgrade_downgrade_form_action_path(target, plan); end

    sig { params(uri: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def uri_origin(uri); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_video(source, options = T.unsafe(nil)); end

    sig { params(options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_with(options = T.unsafe(nil)); end

    sig { params(url: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_without_scheme(url); end

    sig { params(entity: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def usage_customer_selections(entity); end

    sig { params(use_usage_chart_data_endpoint: T::Boolean).returns(::ActionMailer::MessageDelivery) }
    def usage_group_selections(use_usage_chart_data_endpoint); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def usage_period_selections; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def usage_report_legacy_selection; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def usage_report_selections; end

    sig { params(target: ::Organization).returns(::ActionMailer::MessageDelivery) }
    def use_pending_invitations_link_instead_of_dialog?(target); end

    sig do
      params(
        user: T.untyped,
        email: T.untyped,
        allow_private: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def user_email(user, email = T.unsafe(nil), allow_private: T.unsafe(nil)); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_login(user); end

    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_admin_recipients(account, except: T.unsafe(nil)); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_billing_recipients(account); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_url_to_main_site(user); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_url(source, options = T.unsafe(nil)); end

    sig { params(repo: T.untyped, pull_request: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def visual_studio_clone_url(repo = T.unsafe(nil), pull_request = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def visual_studio_urls_enabled?; end

    sig { params(page: T.untyped, extra: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def wiki_compare_path(page = T.unsafe(nil), extra = T.unsafe(nil)); end

    sig { params(page: T.untyped, extra: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def wiki_history_path(page = T.unsafe(nil), extra = T.unsafe(nil)); end

    sig { params(page: T.untyped, version: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def wiki_page_path(page = T.unsafe(nil), version = T.unsafe(nil)); end

    sig { params(page: T.untyped, extra: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def wiki_revert_path(page = T.unsafe(nil), extra = T.unsafe(nil)); end

    sig { params(buf: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def with_output_buffer(buf = T.unsafe(nil)); end

    sig do
      params(
        text: T.untyped,
        line_width: T.untyped,
        break_sequence: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def word_wrap(text, line_width: T.unsafe(nil), break_sequence: T.unsafe(nil)); end

    sig { params(repo: T.untyped, pull_request: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def xcode_clone_url(repo = T.unsafe(nil), pull_request = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def xcode_urls_enabled?; end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def yearly_billing_notice(user); end

    sig do
      params(
        user: T.untyped,
        old_plan: T.untyped,
        new_plan: T.untyped,
        delta_cost: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def yearly_plan_change(user, old_plan, new_plan, delta_cost); end

    sig { params(question: ::SurveyQuestion).returns(::ActionMailer::MessageDelivery) }
    def yes_no_opt_in_choices(question); end
  end
end

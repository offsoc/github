# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::TokenScanningService::V0::JobGroupEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::TokenScanningService::V0::JobGroupEvent`.

class Hydro::Schemas::TokenScanningService::V0::JobGroupEvent
  sig do
    params(
      aqueduct_job_id: T.nilable(String),
      event_type: T.nilable(T.any(Symbol, Integer)),
      group_id: T.nilable(Integer),
      group_status: T.nilable(T.any(Symbol, Integer)),
      group_type: T.nilable(T.any(Symbol, Integer)),
      owner_id: T.nilable(Integer),
      retry_count: T.nilable(Integer),
      scope: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(aqueduct_job_id: nil, event_type: nil, group_id: nil, group_status: nil, group_type: nil, owner_id: nil, retry_count: nil, scope: nil); end

  sig { returns(String) }
  def aqueduct_job_id; end

  sig { params(value: String).void }
  def aqueduct_job_id=(value); end

  sig { void }
  def clear_aqueduct_job_id; end

  sig { void }
  def clear_event_type; end

  sig { void }
  def clear_group_id; end

  sig { void }
  def clear_group_status; end

  sig { void }
  def clear_group_type; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_retry_count; end

  sig { void }
  def clear_scope; end

  sig { returns(T.any(Symbol, Integer)) }
  def event_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event_type=(value); end

  sig { returns(Integer) }
  def group_id; end

  sig { params(value: Integer).void }
  def group_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def group_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def group_status=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def group_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def group_type=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(Integer) }
  def retry_count; end

  sig { params(value: Integer).void }
  def retry_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def scope; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def scope=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `secure_headers` gem.
# Please instead update this file by running `bin/tapioca gem secure_headers`.

# Provide SecureHeaders::OPT_OUT as a config value to disable a given header
#
# source://secure_headers//lib/secure_headers/hash_helper.rb#4
module SecureHeaders
  # source://secure_headers//lib/secure_headers.rb#265
  def append_content_security_policy_directives(additions); end

  # source://secure_headers//lib/secure_headers.rb#253
  def content_security_policy_script_nonce; end

  # source://secure_headers//lib/secure_headers.rb#257
  def content_security_policy_style_nonce; end

  # source://secure_headers//lib/secure_headers.rb#261
  def opt_out_of_header(header_key); end

  # source://secure_headers//lib/secure_headers.rb#269
  def override_content_security_policy_directives(additions); end

  # source://secure_headers//lib/secure_headers.rb#273
  def override_x_frame_options(value); end

  # source://secure_headers//lib/secure_headers.rb#277
  def use_content_security_policy_named_append(name); end

  # These methods are mixed into controllers and delegate to the class method
  # with the same name.
  #
  # source://secure_headers//lib/secure_headers.rb#249
  def use_secure_headers_override(name); end

  class << self
    # Public: appends source values to the current configuration. If no value
    # is set for a given directive, the value will be merged with the default-src
    # value. If a value exists for the given directive, the values will be combined.
    #
    # additions - a hash containing directives. e.g.
    #    script_src: %w(another-host.com)
    #
    # source://secure_headers//lib/secure_headers.rb#88
    def append_content_security_policy_directives(request, additions, target = T.unsafe(nil)); end

    # Public: Retreives the config for a given header type:
    #
    # Checks to see if there is an override for this request, then
    # Checks to see if a named override is used for this request, then
    # Falls back to the global config
    #
    # source://secure_headers//lib/secure_headers.rb#186
    def config_for(request, prevent_dup = T.unsafe(nil)); end

    # Public: gets or creates a nonce for CSP.
    #
    # The nonce will be added to script_src
    #
    # Returns the nonce
    #
    # source://secure_headers//lib/secure_headers.rb#168
    def content_security_policy_script_nonce(request); end

    # Public: gets or creates a nonce for CSP.
    #
    # The nonce will be added to style_src
    #
    # Returns the nonce
    #
    # source://secure_headers//lib/secure_headers.rb#177
    def content_security_policy_style_nonce(request); end

    # Public: Builds the hash of headers that should be applied base on the
    # request.
    #
    # StrictTransportSecurity is not applied to http requests.
    # See #config_for to determine which config is used for a given request.
    #
    # Returns a hash of header names => header values. The value
    # returned is meant to be merged into the header value from `@app.call(env)`
    # in Rack middleware.
    #
    # source://secure_headers//lib/secure_headers.rb#141
    def header_hash_for(request); end

    # Public: opts out of setting all headers by telling secure_headers to use
    # the NOOP configuration.
    #
    # source://secure_headers//lib/secure_headers.rb#128
    def opt_out_of_all_protection(request); end

    # Public: opts out of setting a given header by creating a temporary config
    # and setting the given headers config to OPT_OUT.
    #
    # source://secure_headers//lib/secure_headers.rb#120
    def opt_out_of_header(request, header_key); end

    # Public: override a given set of directives for the current request. If a
    # value already exists for a given directive, it will be overridden.
    #
    # If CSP was previously OPT_OUT, a new blank policy is used.
    #
    # additions - a hash containing directives. e.g.
    #    script_src: %w(another-host.com)
    #
    # source://secure_headers//lib/secure_headers.rb#60
    def override_content_security_policy_directives(request, additions, target = T.unsafe(nil)); end

    # Public: override X-Frame-Options settings for this request.
    #
    # value - deny, sameorigin, or allowall
    #
    # Returns the current config
    #
    # source://secure_headers//lib/secure_headers.rb#112
    def override_x_frame_options(request, value); end

    # source://secure_headers//lib/secure_headers.rb#102
    def use_content_security_policy_named_append(request, name); end

    # Public: specify which named override will be used for this request.
    # Raises an argument error if no named override exists.
    #
    # name - the name of the previously configured override.
    #
    # source://secure_headers//lib/secure_headers.rb#157
    def use_secure_headers_override(request, name); end

    private

    # source://secure_headers//lib/secure_headers.rb#209
    def config_and_target(request, target); end

    # Private: gets or creates a nonce for CSP.
    #
    # Returns the nonce
    #
    # source://secure_headers//lib/secure_headers.rb#231
    def content_security_policy_nonce(request, script_or_style); end

    # source://secure_headers//lib/secure_headers.rb#216
    def guess_target(config); end

    # Private: convenience method for specifying which configuration object should
    # be used for this request.
    #
    # Returns the config.
    #
    # source://secure_headers//lib/secure_headers.rb#242
    def override_secure_headers_request_config(request, config); end

    # source://secure_headers//lib/secure_headers.rb#203
    def raise_on_unknown_target(target); end
  end
end

# source://secure_headers//lib/secure_headers.rb#50
SecureHeaders::CSP = SecureHeaders::ContentSecurityPolicy

# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#4
class SecureHeaders::ClearSiteData
  class << self
    # Public: make an Clear-Site-Data header name, value pair
    #
    # Returns nil if not configured, returns header name and value if configured.
    #
    # source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#18
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # Public: Transform a Clear-Site-Data config (an Array of Strings) into a
    # String that can be used as the value for the Clear-Site-Data header.
    #
    # types - An Array of String of types of data to clear.
    #
    # Returns a String of quoted values that are comma separated.
    #
    # source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#48
    def make_header_value(types); end

    # source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#29
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#12
SecureHeaders::ClearSiteData::ALL_TYPES = T.let(T.unsafe(nil), Array)

# Valid `types`
#
# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#8
SecureHeaders::ClearSiteData::CACHE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#9
SecureHeaders::ClearSiteData::COOKIES = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#11
SecureHeaders::ClearSiteData::EXECUTION_CONTEXTS = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#5
SecureHeaders::ClearSiteData::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#10
SecureHeaders::ClearSiteData::STORAGE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/clear_site_data.rb#3
class SecureHeaders::ClearSiteDataConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/configuration.rb#5
class SecureHeaders::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://secure_headers//lib/secure_headers/configuration.rb#158
  def initialize(&block); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def clear_site_data; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def clear_site_data=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def cookies; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def cookies=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def csp; end

  # source://secure_headers//lib/secure_headers/configuration.rb#246
  def csp=(new_csp); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def csp_report_only; end

  # Configures the Content-Security-Policy-Report-Only header. `new_csp` cannot
  # contain `report_only: false` or an error will be raised.
  #
  # NOTE: if csp has not been configured/has the default value when
  # configuring csp_report_only, the code will assume you mean to only use
  # report-only mode and you will be opted-out of enforce mode.
  #
  # source://secure_headers//lib/secure_headers/configuration.rb#265
  def csp_report_only=(new_csp); end

  # Public: copy everything
  #
  # Returns a deep-dup'd copy of this configuration.
  #
  # source://secure_headers//lib/secure_headers/configuration.rb#181
  def dup; end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def expect_certificate_transparency; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def expect_certificate_transparency=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#210
  def generate_headers; end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def hsts; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def hsts=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#222
  def opt_out(header); end

  # Public: Apply a named override to the current config
  #
  # Returns self
  #
  # source://secure_headers//lib/secure_headers/configuration.rb#201
  def override(name = T.unsafe(nil), &block); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def referrer_policy; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def referrer_policy=(_arg0); end

  # @raise [ArgumentError]
  #
  # source://secure_headers//lib/secure_headers/configuration.rb#242
  def secure_cookies=(secure_cookies); end

  # source://secure_headers//lib/secure_headers/configuration.rb#226
  def update_x_frame_options(value); end

  # Public: validates all configurations values.
  #
  # Raises various configuration errors if any invalid config is detected.
  #
  # Returns nothing
  #
  # source://secure_headers//lib/secure_headers/configuration.rb#235
  def validate_config!; end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def x_content_type_options; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def x_content_type_options=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def x_download_options; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def x_download_options=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def x_frame_options; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def x_frame_options=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def x_permitted_cross_domain_policies; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def x_permitted_cross_domain_policies=(_arg0); end

  # source://secure_headers//lib/secure_headers/configuration.rb#146
  def x_xss_protection; end

  # source://secure_headers//lib/secure_headers/configuration.rb#144
  def x_xss_protection=(_arg0); end

  class << self
    # Public: Set the global default configuration.
    #
    # Optionally supply a block to override the defaults set by this library.
    #
    # Returns the newly created config.
    #
    # source://secure_headers//lib/secure_headers/configuration.rb#17
    def configure(&block); end

    # Public: Set the global default configuration.
    #
    # Optionally supply a block to override the defaults set by this library.
    #
    # Returns the newly created config.
    #
    # source://secure_headers//lib/secure_headers/configuration.rb#17
    def default(&block); end

    # source://secure_headers//lib/secure_headers/configuration.rb#71
    def dup; end

    # source://secure_headers//lib/secure_headers/configuration.rb#62
    def named_append(name, &block); end

    # source://secure_headers//lib/secure_headers/configuration.rb#57
    def named_appends(name); end

    # Public: create a named configuration that overrides the default config.
    #
    # name - use an idenfier for the override config.
    # base - override another existing config, or override the default config
    # if no value is supplied.
    #
    # Returns: the newly created config
    #
    # source://secure_headers//lib/secure_headers/configuration.rb#43
    def override(name, &block); end

    # source://secure_headers//lib/secure_headers/configuration.rb#52
    def overrides(name); end

    private

    # Public: perform a basic deep dup. The shallow copy provided by dup/clone
    # can lead to modifying parent objects.
    #
    # source://secure_headers//lib/secure_headers/configuration.rb#84
    def deep_copy(config); end

    # Private: convenience method purely DRY things up. The value may not be a
    # hash (e.g. OPT_OUT, nil)
    #
    # source://secure_headers//lib/secure_headers/configuration.rb#112
    def deep_copy_if_hash(value); end

    # Private: Returns the internal default configuration. This should only
    # ever be called by internal callers (or tests) that know the semantics
    # of ensuring that the default config is never mutated and is dup(ed)
    # before it is used in a request.
    #
    # source://secure_headers//lib/secure_headers/configuration.rb#103
    def default_config; end

    # @return [Boolean]
    #
    # source://secure_headers//lib/secure_headers/configuration.rb#77
    def named_append_or_override_exists?(name); end
  end
end

# source://secure_headers//lib/secure_headers/configuration.rb#8
class SecureHeaders::Configuration::AlreadyConfiguredError < ::StandardError; end

# source://secure_headers//lib/secure_headers/configuration.rb#136
SecureHeaders::Configuration::CONFIG_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/configuration.rb#121
SecureHeaders::Configuration::CONFIG_ATTRIBUTES_TO_HEADER_CLASSES = T.let(T.unsafe(nil), Hash)

# source://secure_headers//lib/secure_headers/configuration.rb#6
SecureHeaders::Configuration::DEFAULT_CONFIG = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/configuration.rb#151
SecureHeaders::Configuration::HASH_CONFIG_FILE = T.let(T.unsafe(nil), String)

# The list of attributes that must respond to a `make_header` method
#
# source://secure_headers//lib/secure_headers/configuration.rb#142
SecureHeaders::Configuration::HEADERABLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/configuration.rb#10
class SecureHeaders::Configuration::IllegalPolicyModificationError < ::StandardError; end

# source://secure_headers//lib/secure_headers/configuration.rb#7
SecureHeaders::Configuration::NOOP_OVERRIDE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/configuration.rb#9
class SecureHeaders::Configuration::NotYetConfiguredError < ::StandardError; end

# The list of attributes that must respond to a `validate_config!` method
#
# source://secure_headers//lib/secure_headers/configuration.rb#139
SecureHeaders::Configuration::VALIDATABLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#6
class SecureHeaders::ContentSecurityPolicy
  include ::SecureHeaders::PolicyManagement
  extend ::SecureHeaders::PolicyManagement::ClassMethods

  # @return [ContentSecurityPolicy] a new instance of ContentSecurityPolicy
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#9
  def initialize(config = T.unsafe(nil)); end

  # Returns the name to use for the header. Either "Content-Security-Policy" or
  # "Content-Security-Policy-Report-Only"
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#31
  def name; end

  # Return the value of the CSP header
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#37
  def value; end

  private

  # Private: adds a nonce or 'unsafe-inline' depending on browser support.
  # If a nonce is populated, inline content is assumed.
  #
  # While CSP is backward compatible in that a policy with a nonce will ignore
  # unsafe-inline, this is more concise.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#172
  def append_nonce(source_list, nonce); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#93
  def build_media_type_list_directive(directive); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#70
  def build_sandbox_list_directive(directive); end

  # Private: builds a string that represents one directive in a minified form.
  #
  # directive_name - a symbol representing the various ALL_DIRECTIVES
  #
  # Returns a string representing a directive.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#108
  def build_source_list_directive(directive); end

  # Private: converts the config object into a string representing a policy.
  # Places default-src at the first directive and report-uri as the last. All
  # others are presented in alphabetical order.
  #
  # Returns a content security policy header value.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#53
  def build_value; end

  # Private: return the list of directives,
  # starting with default-src and ending with report-uri.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#183
  def directives; end

  # Discard trailing entries (excluding unsafe-*) since * accomplishes the same.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#141
  def keep_wildcard_sources(source_list); end

  # If a directive contains *, all other values are omitted.
  # If a directive contains 'none' but has other values, 'none' is ommitted.
  # Schemes are stripped (see http://www.w3.org/TR/CSP2/#match-source-expression)
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#125
  def minify_source_list(directive, source_list); end

  # Private: append a nonce to the script/style directories if script_nonce
  # or style_nonce are provided.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#156
  def populate_nonces(directive, source_list); end

  # Discard any 'none' values if more directives are supplied since none may override values.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#146
  def reject_all_values_if_none(source_list); end

  # Private: Remove scheme from source expressions.
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#192
  def strip_source_schemes(source_list); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy.rb#196
  def symbol_to_hyphen_case(sym); end
end

# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#80
class SecureHeaders::ContentSecurityPolicyConfig
  include ::SecureHeaders::DynamicConfig

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#104
  def make_report_only; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#100
  def report_only?; end

  class << self
    # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#84
    def attrs; end
  end
end

# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#83
SecureHeaders::ContentSecurityPolicyConfig::ATTRS = T.let(T.unsafe(nil), Set)

# based on what was suggested in https://github.com/rails/rails/pull/24961/files
#
# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#91
SecureHeaders::ContentSecurityPolicyConfig::DEFAULT = T.let(T.unsafe(nil), Hash)

# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#81
SecureHeaders::ContentSecurityPolicyConfig::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#79
class SecureHeaders::ContentSecurityPolicyConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#109
class SecureHeaders::ContentSecurityPolicyReportOnlyConfig < ::SecureHeaders::ContentSecurityPolicyConfig
  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#116
  def make_report_only; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#112
  def report_only?; end
end

# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#110
SecureHeaders::ContentSecurityPolicyReportOnlyConfig::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/cookie.rb#8
class SecureHeaders::Cookie
  # @return [Cookie] a new instance of Cookie
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#24
  def initialize(cookie, config); end

  # Returns the value of attribute config.
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#16
  def config; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#52
  def httponly?; end

  # Returns the value of attribute raw_cookie.
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#16
  def raw_cookie; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#56
  def samesite?; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#48
  def secure?; end

  # source://secure_headers//lib/secure_headers/headers/cookie.rb#40
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#66
  def already_flagged?(attribute); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#82
  def conditionally_flag?(configuration); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#70
  def flag_cookie?(attribute); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#102
  def flag_samesite?; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#119
  def flag_samesite_enforcement?(mode); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#107
  def flag_samesite_lax?; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#115
  def flag_samesite_none?; end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/cookie.rb#111
  def flag_samesite_strict?; end

  # source://secure_headers//lib/secure_headers/headers/cookie.rb#136
  def parse(cookie); end

  # source://secure_headers//lib/secure_headers/headers/cookie.rb#62
  def parsed_cookie; end

  # source://secure_headers//lib/secure_headers/headers/cookie.rb#92
  def samesite_cookie; end

  class << self
    # source://secure_headers//lib/secure_headers/headers/cookie.rb#11
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/cookie.rb#18
SecureHeaders::Cookie::COOKIE_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://secure_headers//lib/secure_headers/utils/cookies_config.rb#3
class SecureHeaders::CookiesConfig
  # @return [CookiesConfig] a new instance of CookiesConfig
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#7
  def initialize(config); end

  # Returns the value of attribute config.
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#5
  def config; end

  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#11
  def validate!; end

  private

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#89
  def is_hash?(obj); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#93
  def is_true_or_opt_out?(obj); end

  # @raise [CookiesConfigError]
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#22
  def validate_config!; end

  # validate exclusive use of only or except but not both at the same time
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#75
  def validate_exclusive_use_of_hash_constraints!(conf, attribute); end

  # validate exclusivity of only and except members within strict and lax
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#83
  def validate_exclusive_use_of_samesite_enforcement!(attribute); end

  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#68
  def validate_hash_or_true_or_opt_out!(attribute); end

  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#31
  def validate_httponly_config!; end

  # when configuring with booleans, only one enforcement is permitted
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#45
  def validate_samesite_boolean_config!; end

  # @raise [CookiesConfigError]
  #
  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#36
  def validate_samesite_config!; end

  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#55
  def validate_samesite_hash_config!; end

  # source://secure_headers//lib/secure_headers/utils/cookies_config.rb#26
  def validate_secure_config!; end
end

# source://secure_headers//lib/secure_headers/headers/cookie.rb#7
class SecureHeaders::CookiesConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#3
module SecureHeaders::DynamicConfig
  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#4
  def initialize(hash); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#49
  def ==(o); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#18
  def [](directive); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#14
  def []=(directive, value); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#33
  def append(new_hash); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#18
  def directive_value(directive); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#41
  def dup; end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#23
  def merge(new_hash); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#29
  def merge!(new_hash); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#45
  def opt_out?; end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#37
  def to_h; end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#14
  def update_directive(directive, value); end

  private

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#57
  def from_hash(hash); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#10
  def initialize_copy(hash); end

  # source://secure_headers//lib/secure_headers/headers/content_security_policy_config.rb#69
  def write_attribute(attr, value); end
end

# source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#5
class SecureHeaders::ExpectCertificateTransparency
  # @return [ExpectCertificateTransparency] a new instance of ExpectCertificateTransparency
  #
  # source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#40
  def initialize(config); end

  # source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#54
  def enforced_directive; end

  # source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#61
  def max_age_directive; end

  # source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#65
  def report_uri_directive; end

  # source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#46
  def value; end

  class << self
    # Public: Generate a Expect-CT header.
    #
    # Returns nil if not configured, returns header name and value if
    # configured.
    #
    # source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#17
    def make_header(config, use_agent = T.unsafe(nil)); end

    # @raise [ExpectCertificateTransparencyConfigError]
    #
    # source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#24
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#6
SecureHeaders::ExpectCertificateTransparency::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#7
SecureHeaders::ExpectCertificateTransparency::INVALID_CONFIGURATION_ERROR = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#8
SecureHeaders::ExpectCertificateTransparency::INVALID_ENFORCE_VALUE_ERROR = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#10
SecureHeaders::ExpectCertificateTransparency::INVALID_MAX_AGE_ERROR = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#9
SecureHeaders::ExpectCertificateTransparency::REQUIRED_MAX_AGE_ERROR = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/expect_certificate_transparency.rb#3
class SecureHeaders::ExpectCertificateTransparencyConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers.rb#49
SecureHeaders::HTTPS = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/hash_helper.rb#5
module SecureHeaders::HashHelper
  # source://secure_headers//lib/secure_headers/hash_helper.rb#6
  def hash_source(inline_script, digest = T.unsafe(nil)); end
end

# source://secure_headers//lib/secure_headers/middleware.rb#3
class SecureHeaders::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://secure_headers//lib/secure_headers/middleware.rb#4
  def initialize(app); end

  # merges the hash of headers into the current header set.
  #
  # source://secure_headers//lib/secure_headers/middleware.rb#9
  def call(env); end

  private

  # inspired by https://github.com/tobmatth/rack-ssl-enforcer/blob/6c014/lib/rack/ssl-enforcer.rb#L183-L194
  #
  # source://secure_headers//lib/secure_headers/middleware.rb#22
  def flag_cookies!(headers, config); end

  # disable Secure cookies for non-https requests
  #
  # source://secure_headers//lib/secure_headers/middleware.rb#34
  def override_secure(env, config = T.unsafe(nil)); end

  # derived from https://github.com/tobmatth/rack-ssl-enforcer/blob/6c014/lib/rack/ssl-enforcer.rb#L119
  #
  # source://secure_headers//lib/secure_headers/middleware.rb#43
  def scheme(env); end
end

# source://secure_headers//lib/secure_headers.rb#48
SecureHeaders::NONCE_KEY = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers.rb#22
class SecureHeaders::NoOpHeaderConfig
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://secure_headers//lib/secure_headers.rb#25
  def [](*args); end

  # source://secure_headers//lib/secure_headers.rb#25
  def []=(*args); end

  # source://secure_headers//lib/secure_headers.rb#25
  def boom(*args); end

  # source://secure_headers//lib/secure_headers.rb#33
  def dup; end

  # source://secure_headers//lib/secure_headers.rb#25
  def keys(*args); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers.rb#37
  def opt_out?; end

  # source://secure_headers//lib/secure_headers.rb#29
  def to_h; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://secure_headers//lib/secure_headers.rb#46
SecureHeaders::OPT_OUT = T.let(T.unsafe(nil), SecureHeaders::NoOpHeaderConfig)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#6
module SecureHeaders::PolicyManagement
  mixes_in_class_methods ::SecureHeaders::PolicyManagement::ClassMethods

  class << self
    # @private
    #
    # source://secure_headers//lib/secure_headers/headers/policy_management.rb#7
    def included(base); end
  end
end

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#111
SecureHeaders::PolicyManagement::ALL_DIRECTIVES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#57
SecureHeaders::PolicyManagement::BASE_URI = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#20
SecureHeaders::PolicyManagement::BLOB_PROTOCOL = T.let(T.unsafe(nil), String)

# Think of default-src and report-uri as the beginning and end respectively,
# everything else is in between.
#
# source://secure_headers//lib/secure_headers/headers/policy_management.rb#115
SecureHeaders::PolicyManagement::BODY_DIRECTIVES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#58
SecureHeaders::PolicyManagement::CHILD_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#32
SecureHeaders::PolicyManagement::CONNECT_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#191
module SecureHeaders::PolicyManagement::ClassMethods
  # Public: combine the values from two different configs.
  #
  # original - the main config
  # additions - values to be merged in
  #
  # raises an error if the original config is OPT_OUT
  #
  # 1. for non-source-list values (report_only, upgrade_insecure_requests),
  # additions will overwrite the original value.
  # 2. if a value in additions does not exist in the original config, the
  # default-src value is included to match original behavior.
  # 3. if a value in additions does exist in the original config, the two
  # values are joined.
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#247
  def combine_policies(original, additions); end

  # Public: generate a header name, value array that is user-agent-aware.
  #
  # Returns a default policy if no configuration is provided, or a
  # header name and value based on the config.
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#196
  def make_header(config); end

  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#257
  def ua_to_variation(user_agent); end

  # Public: Validates each source expression.
  #
  # Does not validate the invididual values of the source expression (e.g.
  # script_src => h*t*t*p: will not raise an exception)
  #
  # @raise [ContentSecurityPolicyConfigError]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#206
  def validate_config!(config); end

  private

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#435
  def boolean?(source_expression); end

  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#420
  def ensure_array_of_strings!(directive, value); end

  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#414
  def ensure_valid_directive!(directive); end

  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#426
  def ensure_valid_sources!(directive, source_expression); end

  # Returns True if a directive expects a list of values and False otherwise.
  #
  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#281
  def list_directive?(directive); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#316
  def media_type_list?(directive); end

  # merge the two hashes. combine (instead of overwrite) the array values
  # when each hash contains a value for a given key.
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#270
  def merge_policy_additions(original, additions); end

  # For each directive in additions that does not exist in the original config,
  # copy the default-src value to the original config. This modifies the original hash.
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#291
  def populate_fetch_source_with_default!(original, additions); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#320
  def require_sri_for_list?(directive); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#324
  def require_trusted_types_for_list?(directive); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#312
  def sandbox_list?(directive); end

  # @return [Boolean]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#308
  def source_list?(directive); end

  # Private: Validates that the configuration has a valid type, or that it is a valid
  # source expression.
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#330
  def validate_directive!(directive, value); end

  # Private: validates that a media type expression:
  # 1. is an array of strings
  # 2. each element is of the form type/subtype
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#370
  def validate_media_type_expression!(directive, media_type_expression); end

  # Private: validates that a require sri for expression:
  # 1. is an array of strings
  # 2. is a subset of ["string", "style"]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#384
  def validate_require_sri_source_expression!(directive, require_sri_for_expression); end

  # Private: validates that a require trusted types for expression:
  # 1. is an array of strings
  # 2. is a subset of ["'script'"]
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#394
  def validate_require_trusted_types_for_source_expression!(directive, require_trusted_types_for_expression); end

  # Private: validates that a sandbox token expression:
  # 1. is an array of strings or optionally `true` (to enable maximal sandboxing)
  # 2. For arrays, each element is of the form allow-*
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#355
  def validate_sandbox_expression!(directive, sandbox_token_expression); end

  # Private: validates that a source expression:
  # 1. is an array of strings
  # 2. does not contain any deprecated, now invalid values (inline, eval, self, none)
  #
  # Does not validate the invididual values of the source expression (e.g.
  # script_src => h*t*t*p: will not raise an exception)
  #
  # source://secure_headers//lib/secure_headers/headers/policy_management.rb#407
  def validate_source_expression!(directive, source_expression); end
end

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#19
SecureHeaders::PolicyManagement::DATA_PROTOCOL = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#11
SecureHeaders::PolicyManagement::DEFAULT_CONFIG = T.let(T.unsafe(nil), Hash)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#31
SecureHeaders::PolicyManagement::DEFAULT_SRC = T.let(T.unsafe(nil), Symbol)

# leftover deprecated values that will be in common use upon upgrading.
#
# source://secure_headers//lib/secure_headers/headers/policy_management.rb#29
SecureHeaders::PolicyManagement::DEPRECATED_SOURCE_VALUES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#43
SecureHeaders::PolicyManagement::DIRECTIVES_1_0 = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#63
SecureHeaders::PolicyManagement::DIRECTIVES_2_0 = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#85
SecureHeaders::PolicyManagement::DIRECTIVES_3_0 = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#106
SecureHeaders::PolicyManagement::DIRECTIVES_EXPERIMENTAL = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#117
SecureHeaders::PolicyManagement::DIRECTIVE_VALUE_TYPES = T.let(T.unsafe(nil), Hash)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#164
SecureHeaders::PolicyManagement::FETCH_SOURCES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#33
SecureHeaders::PolicyManagement::FONT_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#59
SecureHeaders::PolicyManagement::FORM_ACTION = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#60
SecureHeaders::PolicyManagement::FRAME_ANCESTORS = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#34
SecureHeaders::PolicyManagement::FRAME_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#167
SecureHeaders::PolicyManagement::HTTP_SCHEME_REGEX = T.let(T.unsafe(nil), Regexp)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#35
SecureHeaders::PolicyManagement::IMG_SRC = T.let(T.unsafe(nil), Symbol)

# All the directives currently under consideration for CSP level 3.
# https://w3c.github.io/webappsec/specs/CSP2/
#
# source://secure_headers//lib/secure_headers/headers/policy_management.rb#74
SecureHeaders::PolicyManagement::MANIFEST_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#36
SecureHeaders::PolicyManagement::MEDIA_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#177
SecureHeaders::PolicyManagement::META_CONFIGS = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#75
SecureHeaders::PolicyManagement::NAVIGATE_TO = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#183
SecureHeaders::PolicyManagement::NONCES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#22
SecureHeaders::PolicyManagement::NONE = T.let(T.unsafe(nil), String)

# These are directives that take a source list, but that do not inherit
# the default-src value.
#
# source://secure_headers//lib/secure_headers/headers/policy_management.rb#156
SecureHeaders::PolicyManagement::NON_FETCH_SOURCES = T.let(T.unsafe(nil), Array)

# These are directives that don't have use a source list, and hence do not
# inherit the default-src value.
#
# source://secure_headers//lib/secure_headers/headers/policy_management.rb#150
SecureHeaders::PolicyManagement::NON_SOURCE_LIST_SOURCES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#37
SecureHeaders::PolicyManagement::OBJECT_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#61
SecureHeaders::PolicyManagement::PLUGIN_TYPES = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#76
SecureHeaders::PolicyManagement::PREFETCH_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#41
SecureHeaders::PolicyManagement::REPORT_URI = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#77
SecureHeaders::PolicyManagement::REQUIRE_SRI_FOR = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#188
SecureHeaders::PolicyManagement::REQUIRE_SRI_FOR_VALUES = T.let(T.unsafe(nil), Set)

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/require-trusted-types-for
#
# source://secure_headers//lib/secure_headers/headers/policy_management.rb#104
SecureHeaders::PolicyManagement::REQUIRE_TRUSTED_TYPES_FOR = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#189
SecureHeaders::PolicyManagement::REQUIRE_TRUSTED_TYPES_FOR_VALUES = T.let(T.unsafe(nil), Set)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#38
SecureHeaders::PolicyManagement::SANDBOX = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#39
SecureHeaders::PolicyManagement::SCRIPT_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#81
SecureHeaders::PolicyManagement::SCRIPT_SRC_ATTR = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#80
SecureHeaders::PolicyManagement::SCRIPT_SRC_ELEM = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#21
SecureHeaders::PolicyManagement::SELF = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#23
SecureHeaders::PolicyManagement::STAR = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#166
SecureHeaders::PolicyManagement::STAR_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#26
SecureHeaders::PolicyManagement::STRICT_DYNAMIC = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#40
SecureHeaders::PolicyManagement::STYLE_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#83
SecureHeaders::PolicyManagement::STYLE_SRC_ATTR = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#82
SecureHeaders::PolicyManagement::STYLE_SRC_ELEM = T.let(T.unsafe(nil), Symbol)

# Experimental directives - these vary greatly in support
# See MDN for details.
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types
#
# source://secure_headers//lib/secure_headers/headers/policy_management.rb#102
SecureHeaders::PolicyManagement::TRUSTED_TYPES = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#25
SecureHeaders::PolicyManagement::UNSAFE_EVAL = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#24
SecureHeaders::PolicyManagement::UNSAFE_INLINE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#78
SecureHeaders::PolicyManagement::UPGRADE_INSECURE_REQUESTS = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#169
SecureHeaders::PolicyManagement::WILDCARD_SOURCES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/policy_management.rb#79
SecureHeaders::PolicyManagement::WORKER_SRC = T.let(T.unsafe(nil), Symbol)

# source://secure_headers//lib/secure_headers/railtie.rb#5
class SecureHeaders::Railtie < ::Rails::Railtie; end

# source://secure_headers//lib/secure_headers/headers/referrer_policy.rb#4
class SecureHeaders::ReferrerPolicy
  class << self
    # Public: generate an Referrer Policy header.
    #
    # Returns a default header if no configuration is provided, or a
    # header name and value based on the config.
    #
    # source://secure_headers//lib/secure_headers/headers/referrer_policy.rb#23
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # source://secure_headers//lib/secure_headers/headers/referrer_policy.rb#29
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/referrer_policy.rb#6
SecureHeaders::ReferrerPolicy::DEFAULT_VALUE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/referrer_policy.rb#5
SecureHeaders::ReferrerPolicy::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/referrer_policy.rb#7
SecureHeaders::ReferrerPolicy::VALID_POLICIES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/referrer_policy.rb#3
class SecureHeaders::ReferrerPolicyConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers.rb#47
SecureHeaders::SECURE_HEADERS_CONFIG = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#3
class SecureHeaders::STSConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#5
class SecureHeaders::StrictTransportSecurity
  class << self
    # Public: generate an hsts header name, value pair.
    #
    # Returns a default header if no configuration is provided, or a
    # header name and value based on the config.
    #
    # source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#17
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # @raise [TypeError]
    #
    # source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#22
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#8
SecureHeaders::StrictTransportSecurity::DEFAULT_VALUE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#6
SecureHeaders::StrictTransportSecurity::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#7
SecureHeaders::StrictTransportSecurity::HSTS_MAX_AGE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#10
SecureHeaders::StrictTransportSecurity::MESSAGE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/strict_transport_security.rb#9
SecureHeaders::StrictTransportSecurity::VALID_STS_HEADER = T.let(T.unsafe(nil), Regexp)

# source://secure_headers//lib/secure_headers/view_helper.rb#3
module SecureHeaders::ViewHelpers
  include ::SecureHeaders::HashHelper

  # Public: use the content security policy nonce for this request directly.
  # Instructs secure_headers to append a nonce to style/script-src directives.
  #
  # Returns a non-html-safe nonce value.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#69
  def _content_security_policy_nonce(type); end

  # Public: use the content security policy nonce for this request directly.
  # Instructs secure_headers to append a nonce to style/script-src directives.
  #
  # Returns a non-html-safe nonce value.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#69
  def content_security_policy_nonce(type); end

  # source://secure_headers//lib/secure_headers/view_helper.rb#79
  def content_security_policy_script_nonce; end

  # source://secure_headers//lib/secure_headers/view_helper.rb#83
  def content_security_policy_style_nonce; end

  # Checks to see if the hashed code is expected and adds the hash source
  # value to the current CSP.
  #
  # By default, in development/test/etc. an exception will be raised.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#92
  def hashed_javascript_tag(raise_error_on_unrecognized_hash = T.unsafe(nil), &block); end

  # source://secure_headers//lib/secure_headers/view_helper.rb#102
  def hashed_style_tag(raise_error_on_unrecognized_hash = T.unsafe(nil), &block); end

  # Public: create a script src tag using the content security policy nonce.
  # Instructs secure_headers to append a nonce to script-src directive.
  #
  # Returns an html-safe script tag with the nonce attribute.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#39
  def nonced_javascript_include_tag(*args, &block); end

  # Public: create a script Webpacker pack tag using the content security policy nonce.
  # Instructs secure_headers to append a nonce to script-src directive.
  #
  # Returns an html-safe script tag with the nonce attribute.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#49
  def nonced_javascript_pack_tag(*args, &block); end

  # Public: create a script tag using the content security policy nonce.
  # Instructs secure_headers to append a nonce to script-src directive.
  #
  # Returns an html-safe script tag with the nonce attribute.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#31
  def nonced_javascript_tag(content_or_options = T.unsafe(nil), &block); end

  # Public: create a style tag using the content security policy nonce.
  # Instructs secure_headers to append a nonce to style-src directive.
  #
  # Returns an html-safe style tag with the nonce attribute.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#13
  def nonced_style_tag(content_or_options = T.unsafe(nil), &block); end

  # Public: create a stylesheet link tag using the content security policy nonce.
  # Instructs secure_headers to append a nonce to style-src directive.
  #
  # Returns an html-safe link tag with the nonce attribute.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#21
  def nonced_stylesheet_link_tag(*args, &block); end

  # Public: create a stylesheet Webpacker link tag using the content security policy nonce.
  # Instructs secure_headers to append a nonce to style-src directive.
  #
  # Returns an html-safe link tag with the nonce attribute.
  #
  # source://secure_headers//lib/secure_headers/view_helper.rb#59
  def nonced_stylesheet_pack_tag(*args, &block); end

  private

  # source://secure_headers//lib/secure_headers/view_helper.rb#160
  def extract_options(args); end

  # source://secure_headers//lib/secure_headers/view_helper.rb#114
  def hashed_tag(type, directive, hashes, raise_error_on_unrecognized_hash, block); end

  # source://secure_headers//lib/secure_headers/view_helper.rb#148
  def nonced_tag(type, content_or_options, block); end

  # source://secure_headers//lib/secure_headers/view_helper.rb#136
  def unexpected_hash_error_message(file_path, content, hash_value); end
end

# source://secure_headers//lib/secure_headers/view_helper.rb#5
SecureHeaders::ViewHelpers::SECURE_HEADERS_RAKE_TASK = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/view_helper.rb#7
class SecureHeaders::ViewHelpers::UnexpectedHashedScriptException < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/x_content_type_options.rb#5
class SecureHeaders::XContentTypeOptions
  class << self
    # Public: generate an X-Content-Type-Options header.
    #
    # Returns a default header if no configuration is provided, or a
    # header name and value based on the config.
    #
    # source://secure_headers//lib/secure_headers/headers/x_content_type_options.rb#14
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # @raise [TypeError]
    #
    # source://secure_headers//lib/secure_headers/headers/x_content_type_options.rb#19
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/x_content_type_options.rb#7
SecureHeaders::XContentTypeOptions::DEFAULT_VALUE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_content_type_options.rb#6
SecureHeaders::XContentTypeOptions::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_content_type_options.rb#3
class SecureHeaders::XContentTypeOptionsConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/x_download_options.rb#3
class SecureHeaders::XDOConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/x_download_options.rb#4
class SecureHeaders::XDownloadOptions
  class << self
    # Public: generate an X-Download-Options header.
    #
    # Returns a default header if no configuration is provided, or a
    # header name and value based on the config.
    #
    # source://secure_headers//lib/secure_headers/headers/x_download_options.rb#13
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # @raise [TypeError]
    #
    # source://secure_headers//lib/secure_headers/headers/x_download_options.rb#18
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/x_download_options.rb#6
SecureHeaders::XDownloadOptions::DEFAULT_VALUE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_download_options.rb#5
SecureHeaders::XDownloadOptions::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#3
class SecureHeaders::XFOConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#4
class SecureHeaders::XFrameOptions
  class << self
    # Public: generate an X-Frame-Options header.
    #
    # Returns a default header if no configuration is provided, or a
    # header name and value based on the config.
    #
    # source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#18
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # @raise [TypeError]
    #
    # source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#23
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#9
SecureHeaders::XFrameOptions::ALLOW_ALL = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#8
SecureHeaders::XFrameOptions::ALLOW_FROM = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#10
SecureHeaders::XFrameOptions::DEFAULT_VALUE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#7
SecureHeaders::XFrameOptions::DENY = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#5
SecureHeaders::XFrameOptions::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#6
SecureHeaders::XFrameOptions::SAMEORIGIN = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_frame_options.rb#11
SecureHeaders::XFrameOptions::VALID_XFO_HEADER = T.let(T.unsafe(nil), Regexp)

# source://secure_headers//lib/secure_headers/headers/x_permitted_cross_domain_policies.rb#3
class SecureHeaders::XPCDPConfigError < ::StandardError; end

# source://secure_headers//lib/secure_headers/headers/x_permitted_cross_domain_policies.rb#4
class SecureHeaders::XPermittedCrossDomainPolicies
  class << self
    # Public: generate an X-Permitted-Cross-Domain-Policies header.
    #
    # Returns a default header if no configuration is provided, or a
    # header name and value based on the config.
    #
    # source://secure_headers//lib/secure_headers/headers/x_permitted_cross_domain_policies.rb#14
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # @raise [TypeError]
    #
    # source://secure_headers//lib/secure_headers/headers/x_permitted_cross_domain_policies.rb#19
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/x_permitted_cross_domain_policies.rb#6
SecureHeaders::XPermittedCrossDomainPolicies::DEFAULT_VALUE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_permitted_cross_domain_policies.rb#5
SecureHeaders::XPermittedCrossDomainPolicies::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_permitted_cross_domain_policies.rb#7
SecureHeaders::XPermittedCrossDomainPolicies::VALID_POLICIES = T.let(T.unsafe(nil), Array)

# source://secure_headers//lib/secure_headers/headers/x_xss_protection.rb#4
class SecureHeaders::XXssProtection
  class << self
    # Public: generate an X-Xss-Protection header.
    #
    # Returns a default header if no configuration is provided, or a
    # header name and value based on the config.
    #
    # source://secure_headers//lib/secure_headers/headers/x_xss_protection.rb#14
    def make_header(config = T.unsafe(nil), user_agent = T.unsafe(nil)); end

    # @raise [TypeError]
    #
    # source://secure_headers//lib/secure_headers/headers/x_xss_protection.rb#19
    def validate_config!(config); end
  end
end

# source://secure_headers//lib/secure_headers/headers/x_xss_protection.rb#6
SecureHeaders::XXssProtection::DEFAULT_VALUE = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_xss_protection.rb#5
SecureHeaders::XXssProtection::HEADER_NAME = T.let(T.unsafe(nil), String)

# source://secure_headers//lib/secure_headers/headers/x_xss_protection.rb#7
SecureHeaders::XXssProtection::VALID_X_XSS_HEADER = T.let(T.unsafe(nil), Regexp)

# source://secure_headers//lib/secure_headers/headers/x_xss_protection.rb#3
class SecureHeaders::XXssProtectionConfigError < ::StandardError; end

#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"

def matches?(pattern, file)
  File.fnmatch?(pattern, file, File::FNM_EXTGLOB)
end

def filter_files(options)
  file_list = options[:file_list]
  include_globs = options[:include_globs].flatten
  exclude_globs = options[:exclude_globs].flatten

  filtered_list = file_list.select do |file|
    is_included = include_globs.any? { |glob| matches?(glob, file) }
    is_excluded = exclude_globs.any? { |glob| matches?(glob, file) }

    is_included && !is_excluded
  end

  filtered_list
end

def parse_options
  options = {
    include_globs: [],
    exclude_globs: [],
  }

  OptionParser.new do |parser|
    parser.banner = "Usage: script/filter-file-list [OPTIONS] file-1.ext file-2.ext file-n.ext"
    parser.separator ""
    parser.separator "IMPORTANT NOTE: File exclusion takes precedence over file inclusion"

    parser.on("-i", "--include-files 'GLOB'", String, "Include files that match the specified glob pattern. Supports multiple params.") do |glob|
      options[:include_globs] << glob
    end

    parser.on("-x", "--exclude-files 'GLOB'", String, "Exclude files that match the specified glob pattern. Supports multiple params.") do |glob|
      options[:exclude_globs] << glob
    end

    parser.on("-h", "--help", "Displays help info") do
      puts parser
      exit
    end

    if ARGV.length == 0
      puts parser
      exit
    end
  end.parse!

  options[:file_list] = ARGV

  options
end

# run it and return the file list
# -------------------------------

filtered_files = filter_files(parse_options)
$stdout.puts filtered_files

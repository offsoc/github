# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::TokenScanNotify::TokenGroup::Token::TokenLocation`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::TokenScanNotify::TokenGroup::Token::TokenLocation`.

class Hydro::Schemas::Github::V1::TokenScanNotify::TokenGroup::Token::TokenLocation
  sig do
    params(
      commit_oid: T.nilable(String),
      content_id: T.nilable(Integer),
      content_number: T.nilable(Integer),
      content_type: T.nilable(T.any(Symbol, Integer)),
      path: T.nilable(String),
      start_line: T.nilable(Integer)
    ).void
  end
  def initialize(commit_oid: nil, content_id: nil, content_number: nil, content_type: nil, path: nil, start_line: nil); end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_content_id; end

  sig { void }
  def clear_content_number; end

  sig { void }
  def clear_content_type; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_start_line; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(Integer) }
  def content_id; end

  sig { params(value: Integer).void }
  def content_id=(value); end

  sig { returns(Integer) }
  def content_number; end

  sig { params(value: Integer).void }
  def content_number=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def content_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def content_type=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(Integer) }
  def start_line; end

  sig { params(value: Integer).void }
  def start_line=(value); end
end

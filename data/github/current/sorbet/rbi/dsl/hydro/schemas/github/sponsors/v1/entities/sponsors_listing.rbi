# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing`.

class Hydro::Schemas::Github::Sponsors::V1::Entities::SponsorsListing
  sig do
    params(
      billing_country: T.nilable(String),
      country_of_residence: T.nilable(String),
      current_state: T.nilable(T.any(Symbol, Integer)),
      custom_tiers_allowed: T.nilable(T::Boolean),
      featured_state: T.nilable(T.any(Symbol, Integer)),
      fiscal_host: T.nilable(T.any(Symbol, Integer)),
      id: T.nilable(Integer),
      published_one_time_tier_count: T.nilable(Integer),
      published_recurring_tier_count: T.nilable(Integer),
      slug: T.nilable(String),
      sponsorable_id: T.nilable(Integer),
      suggested_custom_tier_amount_in_cents: T.nilable(Integer)
    ).void
  end
  def initialize(billing_country: nil, country_of_residence: nil, current_state: nil, custom_tiers_allowed: nil, featured_state: nil, fiscal_host: nil, id: nil, published_one_time_tier_count: nil, published_recurring_tier_count: nil, slug: nil, sponsorable_id: nil, suggested_custom_tier_amount_in_cents: nil); end

  sig { returns(String) }
  def billing_country; end

  sig { params(value: String).void }
  def billing_country=(value); end

  sig { void }
  def clear_billing_country; end

  sig { void }
  def clear_country_of_residence; end

  sig { void }
  def clear_current_state; end

  sig { void }
  def clear_custom_tiers_allowed; end

  sig { void }
  def clear_featured_state; end

  sig { void }
  def clear_fiscal_host; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_published_one_time_tier_count; end

  sig { void }
  def clear_published_recurring_tier_count; end

  sig { void }
  def clear_slug; end

  sig { void }
  def clear_sponsorable_id; end

  sig { void }
  def clear_suggested_custom_tier_amount_in_cents; end

  sig { returns(String) }
  def country_of_residence; end

  sig { params(value: String).void }
  def country_of_residence=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def current_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def current_state=(value); end

  sig { returns(T::Boolean) }
  def custom_tiers_allowed; end

  sig { params(value: T::Boolean).void }
  def custom_tiers_allowed=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def featured_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def featured_state=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def fiscal_host; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def fiscal_host=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Integer) }
  def published_one_time_tier_count; end

  sig { params(value: Integer).void }
  def published_one_time_tier_count=(value); end

  sig { returns(Integer) }
  def published_recurring_tier_count; end

  sig { params(value: Integer).void }
  def published_recurring_tier_count=(value); end

  sig { returns(String) }
  def slug; end

  sig { params(value: String).void }
  def slug=(value); end

  sig { returns(Integer) }
  def sponsorable_id; end

  sig { params(value: Integer).void }
  def sponsorable_id=(value); end

  sig { returns(Integer) }
  def suggested_custom_tier_amount_in_cents; end

  sig { params(value: Integer).void }
  def suggested_custom_tier_amount_in_cents=(value); end
end

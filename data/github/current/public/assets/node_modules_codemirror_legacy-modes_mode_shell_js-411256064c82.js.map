{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_shell_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/shell.js"],"sourcesContent":["var words = {};\nfunction define(style, dict) {\n  for(var i = 0; i < dict.length; i++) {\n    words[dict[i]] = style;\n  }\n};\n\nvar commonAtoms = [\"true\", \"false\"];\nvar commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\",\n                      \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\nvar commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\",\n                      \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\",\n                      \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\",\n                      \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\",\n                      \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\",\n                      \"yes\", \"zsh\"];\n\ndefine('atom', commonAtoms);\ndefine('keyword', commonKeywords);\ndefine('builtin', commonCommands);\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) return null;\n\n  var sol = stream.sol();\n  var ch = stream.next();\n\n  if (ch === '\\\\') {\n    stream.next();\n    return null;\n  }\n  if (ch === '\\'' || ch === '\"' || ch === '`') {\n    state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n    return tokenize(stream, state);\n  }\n  if (ch === '#') {\n    if (sol && stream.eat('!')) {\n      stream.skipToEnd();\n      return 'meta'; // 'comment'?\n    }\n    stream.skipToEnd();\n    return 'comment';\n  }\n  if (ch === '$') {\n    state.tokens.unshift(tokenDollar);\n    return tokenize(stream, state);\n  }\n  if (ch === '+' || ch === '=') {\n    return 'operator';\n  }\n  if (ch === '-') {\n    stream.eat('-');\n    stream.eatWhile(/\\w/);\n    return 'attribute';\n  }\n  if (ch == \"<\") {\n    if (stream.match(\"<<\")) return \"operator\"\n    var heredoc = stream.match(/^<-?\\s*['\"]?([^'\"]*)['\"]?/)\n    if (heredoc) {\n      state.tokens.unshift(tokenHeredoc(heredoc[1]))\n      return 'string.special'\n    }\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/\\d/);\n    if(stream.eol() || !/\\w/.test(stream.peek())) {\n      return 'number';\n    }\n  }\n  stream.eatWhile(/[\\w-]/);\n  var cur = stream.current();\n  if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n  return words.hasOwnProperty(cur) ? words[cur] : null;\n}\n\nfunction tokenString(quote, style) {\n  var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n  return function(stream, state) {\n    var next, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === close && !escaped) {\n        state.tokens.shift();\n        break;\n      } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n        escaped = true;\n        stream.backUp(1);\n        state.tokens.unshift(tokenDollar);\n        break;\n      } else if (!escaped && quote !== close && next === quote) {\n        state.tokens.unshift(tokenString(quote, style))\n        return tokenize(stream, state)\n      } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n        state.tokens.unshift(tokenStringStart(next, \"string\"));\n        stream.backUp(1);\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    return style;\n  };\n};\n\nfunction tokenStringStart(quote, style) {\n  return function(stream, state) {\n    state.tokens[0] = tokenString(quote, style)\n    stream.next()\n    return tokenize(stream, state)\n  }\n}\n\nvar tokenDollar = function(stream, state) {\n  if (state.tokens.length > 1) stream.eat('$');\n  var ch = stream.next()\n  if (/['\"({]/.test(ch)) {\n    state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n    return tokenize(stream, state);\n  }\n  if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n  state.tokens.shift();\n  return 'def';\n};\n\nfunction tokenHeredoc(delim) {\n  return function(stream, state) {\n    if (stream.sol() && stream.string == delim) state.tokens.shift()\n    stream.skipToEnd()\n    return \"string.special\"\n  }\n}\n\nfunction tokenize(stream, state) {\n  return (state.tokens[0] || tokenBase) (stream, state);\n};\n\nexport const shell = {\n  name: \"shell\",\n  startState: function() {return {tokens:[]};},\n  token: function(stream, state) {\n    return tokenize(stream, state);\n  },\n  languageData: {\n    autocomplete: commonAtoms.concat(commonKeywords, commonCommands),\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["words","define","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenString","quote","close","stream","state","next","escaped","peek","tokens","unshift","tokenize","test","tokenStringStart","backUp","tokenDollar","shift","eat","ch","eatWhile","eatSpace","sol","skipToEnd","match","delim","heredoc","string","eol","cur","current","hasOwnProperty","shell","name","startState","token","languageData","autocomplete","concat","closeBrackets","brackets","commentTokens","line"],"sourceRoot":""}
export const Resources = {
  settingsPageHeader: 'Issue types',
  descriptionLabel: 'Description',
  descriptionPlaceholder: 'What is this type for?',
  nameLabel: 'Type name',
  namePlaceholder: 'Unique name for your issue type',
  nameCaption:
    'Be careful not to change the meaning of a type. All existing types will be renamed and may no longer be relevant.',
  colorLabel: 'Color',
  newTitle: 'Create new',
  revertButton: 'Revert changes',
  deleteButton: 'Delete',
  saveAfterEditingButton: 'Save',
  cancelButton: 'Cancel',
  saveCreatedIssueTypeButton: 'Create',
  applyButton: 'Apply',
  dangerZoneDeleteIssueTypeHeading: 'Delete issue type',
  dangerZoneDeleteIssueTypeInfo:
    'Deleting an issue type will remove it from all existing issues. This action cannot be undone.',
  dangerZoneDisableIssueTypeHeading: 'Disable issue type',
  dangerZoneDisableIssueTypeInfo:
    'This will prevent the issue type from being used on new or existing issues across the organization.',
  dangerZoneEnableIssueTypeHeading: 'Enable issue type',
  dangerZoneEnableIssueTypeInfo: 'Re-enable the issue type to allow it to be added to new repositories and issues.',
  infoBlockTextOrg:
    'Customize the issue types for this organization. Issue types can be used to classify and manage issues in repositories across the organization.',
  createButton: 'Create new type',
  blankslateHeadingOrg: `You don't seem to have any types defined`,
  blankslateBodyOrg: 'Types are applied to issues and help keep your issues standardised across the organization.',
  disableButton: 'Disable',
  enableButton: 'Enable',
  editButton: 'Edit',
  disableConfirmationDialogHeader: 'Disable issue type',
  disableConfirmationDialogBody: (issueTypeName: string) =>
    `The "${issueTypeName}" issue type will no longer be available to use in the organization.
    If it is re-enabled in the future, it will be preserved on existing issues of this type unless a different type has been added.`,
  deleteDialogHeader: 'Delete issue type',
  deleteDialogBody: (issueTypeName: string) =>
    `This will remove the "${issueTypeName}" issue type from all issues across the organization. This action cannot be undone.`,
  editingIssueTypeError: 'Something went wrong when editing the issue type',
  editingIssueTypeSuccess: 'Issue type updated',
  disabledIssueTypeError: 'Something went wrong when disabling the issue type. Please reload and try again.',
  disabledIssueTypeSuccess: 'The issue type has been disabled',
  enabledIssueTypeError: 'Something went wrong when enabling the issue type. Please reload and try again.',
  enabledIssueTypeSuccess: 'The issue type has been enabled',
  deletedIssueTypeError: 'Something went wrong when deleting the issue type',
  deletedIssueTypeSuccess: 'The issue type has been deleted',
  creatingIssueTypeSuccess: 'Issue type created',
  creatingIssueTypeError: 'Something went wrong when creating the issue type',
  nameTakenError: 'Name has already been taken',
  nameTakenErrorMessage: 'Name is already taken',
  nameEmptyErrorMessage: "Name can't be blank",
  nameNotAllowed: `Name is reserved`,
  nameTooLongErrorMessage: (limit: number) => `Name is too long (maximum is ${limit} characters)`,
  mutationError: (mutation: string, message: string) => `${mutation} mutation failed with error: ${message}`,
  descriptionTooLongErrorMessage: (limit: number) => `Description is too long (maximum is ${limit} characters)`,
  limitReachedDialogTitle: 'Maximum number of issue types reached (max 10)',
  limitReachedDialogBody: 'Please remove an existing issue type to create a new one',
  limitReachedFlashText: 'Reached max of 10 types',
  changesSavedText: 'Changes saved',
  issueTypesListHeading: (amount: number) => `${amount} types`,
  issueTypesListHeadingSuffix: (limit: number) => `(max ${limit})`,
  ariaLabel: {
    issueTypeList: 'List of issue types available in the organization',
    issueTypeListHeading: 'Issue types list heading',
    issueTypeListItem: (name: string) => `"${name}" Issue type list item`,
  },
}

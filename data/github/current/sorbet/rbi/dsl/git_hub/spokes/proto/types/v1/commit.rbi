# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Types::V1::Commit`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Types::V1::Commit`.

class GitHub::Spokes::Proto::Types::V1::Commit
  sig do
    params(
      author: T.nilable(GitHub::Spokes::Proto::Types::V1::Attribution),
      committer: T.nilable(GitHub::Spokes::Proto::Types::V1::Attribution),
      gpg_signature: T.nilable(String),
      message: T.nilable(String),
      parents: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Spokes::Proto::Types::V1::ObjectID], T::Array[GitHub::Spokes::Proto::Types::V1::ObjectID])),
      tree: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)
    ).void
  end
  def initialize(author: nil, committer: nil, gpg_signature: nil, message: nil, parents: T.unsafe(nil), tree: nil); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Attribution)) }
  def author; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Attribution)).void }
  def author=(value); end

  sig { void }
  def clear_author; end

  sig { void }
  def clear_committer; end

  sig { void }
  def clear_gpg_signature; end

  sig { void }
  def clear_message; end

  sig { void }
  def clear_parents; end

  sig { void }
  def clear_tree; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Attribution)) }
  def committer; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Attribution)).void }
  def committer=(value); end

  sig { returns(String) }
  def gpg_signature; end

  sig { params(value: String).void }
  def gpg_signature=(value); end

  sig { returns(String) }
  def message; end

  sig { params(value: String).void }
  def message=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Spokes::Proto::Types::V1::ObjectID]) }
  def parents; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Spokes::Proto::Types::V1::ObjectID]).void }
  def parents=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)) }
  def tree; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)).void }
  def tree=(value); end
end

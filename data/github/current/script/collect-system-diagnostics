#!/usr/bin/env ruby
# frozen_string_literal: true
#/ Usage: collect-system-diagnostics
#/ Collects system info to help debug bootstrapping issues.
#/ Example
#/ ./script/collect-system-diagnostics

require "open3"
require "securerandom"

# Show usage
if ARGV.include?("--help")
  system "grep ^#/ '#{__FILE__}' |cut -c3-"
  exit 1
end

module DiagnosticHelper
  DIAGNOSTIC_FILE_PATH = File.join("/", "tmp", "gh-system-diagnostics-#{SecureRandom.urlsafe_base64}")

  def self.run_system_diagnostic
    time = Time.new.utc
    DiagnosticHelper::log("System Diagnostic: #{time.inspect}")

    if ENV["CODESPACES"]
      DiagnosticHelper::log("========== This is a codespaces environment!  ==========")
    end

    DiagnosticHelper::log(collect_data_from_command("uname -a"))
    DiagnosticHelper::log(collect_data_from_command("git fetch origin master"))
    DiagnosticHelper::log(collect_data_from_command("git rev-list --count HEAD..master"))
    DiagnosticHelper::log(collect_data_from_command("df -h"))

    log(collect_data_from_command("systemctl list-units --type=service"))

    puts File.read(DIAGNOSTIC_FILE_PATH)
    puts "DONE! You can view your completed diagnostic again by running \`cat #{DIAGNOSTIC_FILE_PATH}\`"
  end

  def self.collect_data_from_command(command)
    log("\n========== \`#{command}\` ==========\n")
    stdout, stderr, _status = Open3.capture3(command)
    log(stdout, stderr)
  end

  def self.collect_last_run_data
    log("\n========== Collecting data on last bootstrap and setup runs ==========\n")
    ["setup-last-run", "bootstrap-last-run" "bootstrap-pristine-last-run"].each do |file|
      last_run_file = File.join(__dir__, file)
      if File.exist?(last_run_file)
        log(stat_file(last_run_file))
      else
        log("#{last_run_file} not found")
      end
    end
  end

  def self.stat_file(path)
    `stat -c %y #{path}`
  end

  def self.log(stdout = "", stderr = "")
    open(DIAGNOSTIC_FILE_PATH, "a") do |f|
      f.puts stdout if stdout
      f.puts stderr if stderr
    end
  end
end

DiagnosticHelper::run_system_diagnostic

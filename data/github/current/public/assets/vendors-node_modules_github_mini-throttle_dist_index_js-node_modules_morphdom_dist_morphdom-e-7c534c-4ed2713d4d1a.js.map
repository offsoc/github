{"version":3,"file":"vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_morphdom_dist_morphdom-e-7c534c-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@github/mini-throttle/dist/index.js","node_modules/morphdom/dist/morphdom-esm.js","node_modules/@github/memoize/dist/esm/index.js"],"sourcesContent":["export function throttle(callback, wait = 0, { start = true, middle = true, once = false } = {}) {\n    let innerStart = start;\n    let last = 0;\n    let timer;\n    let cancelled = false;\n    function fn(...args) {\n        if (cancelled)\n            return;\n        const delta = Date.now() - last;\n        last = Date.now();\n        if (start && middle && delta >= wait) {\n            innerStart = true;\n        }\n        if (innerStart) {\n            innerStart = false;\n            callback.apply(this, args);\n            if (once)\n                fn.cancel();\n        }\n        else if ((middle && delta < wait) || !middle) {\n            clearTimeout(timer);\n            timer = setTimeout(() => {\n                last = Date.now();\n                callback.apply(this, args);\n                if (once)\n                    fn.cancel();\n            }, !middle ? wait : wait - delta);\n        }\n    }\n    fn.cancel = () => {\n        clearTimeout(timer);\n        cancelled = true;\n    };\n    return fn;\n}\nexport function debounce(callback, wait = 0, { start = false, middle = false, once = false } = {}) {\n    return throttle(callback, wait, { start, middle, once });\n}\n","var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n      return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = Object.create(null);\n        var keyedRemovalList = [];\n\n        function addKeyedRemoval(key) {\n            keyedRemovalList.push(key);\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    // if we find a duplicate #id node in cache, replace `el` with cache value\n                    // and morph it to the child node.\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    } else {\n                      handleNodeAdded(curChild);\n                    }\n                } else {\n                  // recursively call for curChild and it's children to see if we find something in\n                  // fromNodesLookup\n                  handleNodeAdded(curChild);\n                }\n\n                curChild = nextSibling;\n            }\n        }\n\n        function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n            // We have processed all of the \"to nodes\". If curFromNodeChild is\n            // non-null then we still have some from nodes left over that need\n            // to be removed\n            while (curFromNodeChild) {\n                var fromNextSibling = curFromNodeChild.nextSibling;\n                if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                    // Since the node is keyed it might be matched up later so we defer\n                    // the actual removal to later\n                    addKeyedRemoval(curFromNodeKey);\n                } else {\n                    // NOTE: we skip nested keyed nodes from being removed since there is\n                    //       still a chance they will be matched up later\n                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                }\n                curFromNodeChild = fromNextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (!childrenOnly) {\n                // optional\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                // update attributes on original DOM element first\n                morphAttrs(fromEl, toEl);\n                // optional\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n              morphChildren(fromEl, toEl);\n            } else {\n              specialElHandlers.TEXTAREA(fromEl, toEl);\n            }\n        }\n\n        function morphChildren(fromEl, toEl) {\n            var curToNodeChild = toEl.firstChild;\n            var curFromNodeChild = fromEl.firstChild;\n            var curToNodeKey;\n            var curFromNodeKey;\n\n            var fromNextSibling;\n            var toNextSibling;\n            var matchingFromEl;\n\n            // walk the children\n            outer: while (curToNodeChild) {\n                toNextSibling = curToNodeChild.nextSibling;\n                curToNodeKey = getNodeKey(curToNodeChild);\n\n                // walk the fromNode children all the way through\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n\n                    if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                    var curFromNodeType = curFromNodeChild.nodeType;\n\n                    // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n                    var isCompatible = undefined;\n\n                    if (curFromNodeType === curToNodeChild.nodeType) {\n                        if (curFromNodeType === ELEMENT_NODE) {\n                            // Both nodes being compared are Element nodes\n\n                            if (curToNodeKey) {\n                                // The target node has a key so we want to match it up with the correct element\n                                // in the original DOM tree\n                                if (curToNodeKey !== curFromNodeKey) {\n                                    // The current element in the original DOM tree does not have a matching key so\n                                    // let's check our lookup to see if there is a matching element in the original\n                                    // DOM tree\n                                    if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                        if (fromNextSibling === matchingFromEl) {\n                                            // Special case for single element removals. To avoid removing the original\n                                            // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                            // we will instead discard the current node and wait until the next\n                                            // iteration to properly match up the keyed target element with its matching\n                                            // element in the original tree\n                                            isCompatible = false;\n                                        } else {\n                                            // We found a matching keyed element somewhere in the original DOM tree.\n                                            // Let's move the original DOM node into the current position and morph\n                                            // it.\n\n                                            // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                            // the `removeNode()` function for the node that is being discarded so that\n                                            // all lifecycle hooks are correctly invoked\n                                            fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                            // fromNextSibling = curFromNodeChild.nextSibling;\n\n                                            if (curFromNodeKey) {\n                                                // Since the node is keyed it might be matched up later so we defer\n                                                // the actual removal to later\n                                                addKeyedRemoval(curFromNodeKey);\n                                            } else {\n                                                // NOTE: we skip nested keyed nodes from being removed since there is\n                                                //       still a chance they will be matched up later\n                                                removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                            }\n\n                                            curFromNodeChild = matchingFromEl;\n                                        }\n                                    } else {\n                                        // The nodes are not compatible since the \"to\" node has a key and there\n                                        // is no matching keyed node in the source tree\n                                        isCompatible = false;\n                                    }\n                                }\n                            } else if (curFromNodeKey) {\n                                // The original has a key\n                                isCompatible = false;\n                            }\n\n                            isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                            if (isCompatible) {\n                                // We found compatible DOM elements so transform\n                                // the current \"from\" node to match the current\n                                // target DOM node.\n                                // MORPH\n                                morphEl(curFromNodeChild, curToNodeChild);\n                            }\n\n                        } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                            // Both nodes being compared are Text or Comment nodes\n                            isCompatible = true;\n                            // Simply update nodeValue on the original node to\n                            // change the text value\n                            if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                            }\n\n                        }\n                    }\n\n                    if (isCompatible) {\n                        // Advance both the \"to\" child and the \"from\" child since we found a match\n                        // Nothing else to do as we already recursively called morphChildren above\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    // No compatible match so remove the old node from the DOM and continue trying to find a\n                    // match in the original DOM. However, we only do this if the from node is not keyed\n                    // since it is possible that a keyed node might match up with a node somewhere else in the\n                    // target tree and we don't want to discard it just yet since it still might find a\n                    // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                    // that didn't find a home\n                    if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n\n                    curFromNodeChild = fromNextSibling;\n                } // END: while(curFromNodeChild) {}\n\n                // If we got this far then we did not find a candidate match for\n                // our \"to node\" and we exhausted all of the children \"from\"\n                // nodes. Therefore, we will just append the current \"to\" node\n                // to the end\n                if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                    fromEl.appendChild(matchingFromEl);\n                    // MORPH\n                    morphEl(matchingFromEl, curToNodeChild);\n                } else {\n                    var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                    if (onBeforeNodeAddedResult !== false) {\n                        if (onBeforeNodeAddedResult) {\n                            curToNodeChild = onBeforeNodeAddedResult;\n                        }\n\n                        if (curToNodeChild.actualize) {\n                            curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                        }\n                        fromEl.appendChild(curToNodeChild);\n                        handleNodeAdded(curToNodeChild);\n                    }\n                }\n\n                curToNodeChild = toNextSibling;\n                curFromNodeChild = fromNextSibling;\n            }\n\n            cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphChildren(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n                return;\n            }\n\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n","export function defaultHash(...args) {\n    // JSON.stringify ellides `undefined` and function values by default. We do not want that.\n    return JSON.stringify(args, (_, v) => (typeof v === 'object' ? v : String(v)));\n}\nexport default function memoize(fn, opts = {}) {\n    const { hash = defaultHash, cache = new Map() } = opts;\n    return function (...args) {\n        const id = hash.apply(this, args);\n        if (cache.has(id))\n            return cache.get(id);\n        let result = fn.apply(this, args);\n        if (result instanceof Promise) {\n            // eslint-disable-next-line github/no-then\n            result = result.catch(error => {\n                cache.delete(id);\n                throw error;\n            });\n        }\n        cache.set(id, result);\n        return result;\n    };\n}\n"],"names":["throttle","callback","wait","start","middle","once","timer","innerStart","last","cancelled","fn","args","delta","Date","now","apply","cancel","clearTimeout","setTimeout","debounce","range","morphAttrs","doc","document","undefined","HAS_TEMPLATE_SUPPORT","createElement","HAS_RANGE_SUPPORT","createRange","compareNodeNames","fromEl","toEl","fromCodeStart","toCodeStart","fromNodeName","nodeName","toNodeName","charCodeAt","toUpperCase","syncBooleanAttrProp","name","setAttribute","removeAttribute","specialElHandlers","OPTION","parentNode","parentName","hasAttribute","selected","selectedIndex","INPUT","value","TEXTAREA","newValue","firstChild","oldValue","nodeValue","placeholder","SELECT","optgroup","i","curChild","nextSibling","noop","defaultGetNodeKey","node","getAttribute","id","fromNode","toNode","attr","attrName","attrNamespaceURI","attrValue","toNodeAttrs","attributes","nodeType","length","namespaceURI","localName","getAttributeNS","prefix","setAttributeNS","fromNodeAttrs","d","hasAttributeNS","removeAttributeNS","options","str","template","fragment","toNodeHtml","innerHTML","trim","content","childNodes","selectNode","body","createContextualFragment","getNodeKey","onBeforeNodeAdded","onNodeAdded","onBeforeElUpdated","onElUpdated","onBeforeNodeDiscarded","onNodeDiscarded","onBeforeElChildrenUpdated","childrenOnly","fromNodesLookup","Object","create","keyedRemovalList","addKeyedRemoval","key","push","removeNode","skipKeyedNodes","removeChild","walkDiscardedChildNodes","indexTree","morphedNode","morphedNodeType","toNodeType","moveChildren","nextChild","appendChild","createElementNS","isSameNode","morphEl","toElKey","morphChildren","curToNodeKey","curFromNodeKey","fromNextSibling","toNextSibling","matchingFromEl","curToNodeChild","curFromNodeChild","outer","curFromNodeType","isCompatible","insertBefore","onBeforeNodeAddedResult","actualize","ownerDocument","handleNodeAdded","el","unmatchedFromEl","replaceChild","cleanupFromEl","specialElHandler","len","elToRemove","defaultHash","JSON","stringify","_","v","String","memoize","opts","hash","cache","Map","has","get","result","Promise","catch","error","delete","set"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Sponsors::V1::Entities::StripeInvoice`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Sponsors::V1::Entities::StripeInvoice`.

class Hydro::Schemas::Github::Sponsors::V1::Entities::StripeInvoice
  sig do
    params(
      amount_due_in_subunits: T.nilable(Integer),
      amount_paid_in_subunits: T.nilable(Integer),
      created: T.nilable(Google::Protobuf::Timestamp),
      creator: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      currency: T.nilable(String),
      fee_amount_in_subunits: T.nilable(Integer),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      paid: T.nilable(T::Boolean),
      status: T.nilable(T.any(Symbol, Integer)),
      stripe_customer_id: T.nilable(String),
      stripe_invoice_id: T.nilable(String),
      total_amount_in_subunits: T.nilable(Integer)
    ).void
  end
  def initialize(amount_due_in_subunits: nil, amount_paid_in_subunits: nil, created: nil, creator: nil, currency: nil, fee_amount_in_subunits: nil, organization: nil, paid: nil, status: nil, stripe_customer_id: nil, stripe_invoice_id: nil, total_amount_in_subunits: nil); end

  sig { returns(Integer) }
  def amount_due_in_subunits; end

  sig { params(value: Integer).void }
  def amount_due_in_subunits=(value); end

  sig { returns(Integer) }
  def amount_paid_in_subunits; end

  sig { params(value: Integer).void }
  def amount_paid_in_subunits=(value); end

  sig { void }
  def clear_amount_due_in_subunits; end

  sig { void }
  def clear_amount_paid_in_subunits; end

  sig { void }
  def clear_created; end

  sig { void }
  def clear_creator; end

  sig { void }
  def clear_currency; end

  sig { void }
  def clear_fee_amount_in_subunits; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_paid; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_stripe_customer_id; end

  sig { void }
  def clear_stripe_invoice_id; end

  sig { void }
  def clear_total_amount_in_subunits; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def creator; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def creator=(value); end

  sig { returns(String) }
  def currency; end

  sig { params(value: String).void }
  def currency=(value); end

  sig { returns(Integer) }
  def fee_amount_in_subunits; end

  sig { params(value: Integer).void }
  def fee_amount_in_subunits=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(T::Boolean) }
  def paid; end

  sig { params(value: T::Boolean).void }
  def paid=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(String) }
  def stripe_customer_id; end

  sig { params(value: String).void }
  def stripe_customer_id=(value); end

  sig { returns(String) }
  def stripe_invoice_id; end

  sig { params(value: String).void }
  def stripe_invoice_id=(value); end

  sig { returns(Integer) }
  def total_amount_in_subunits; end

  sig { params(value: Integer).void }
  def total_amount_in_subunits=(value); end
end

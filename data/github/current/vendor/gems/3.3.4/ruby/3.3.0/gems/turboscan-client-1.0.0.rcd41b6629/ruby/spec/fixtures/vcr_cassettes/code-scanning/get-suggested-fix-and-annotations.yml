# generated by turbocassette ts/cassettes/sessions/suggested_fixes_test.go
---
http_interactions:
  - request:
      method: post
      uri: http://localhost:8888/twirp/github.turboscan.SuggestedFixes/GetSuggestedFix
      body:
        encoding: UTF-8
        string: |-
          {
            "alertNumbers": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "headCommitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
            "ref_names_bytes": [
              "cmVmcy9wdWxsLzQyL21lcmdl",
              "cmVmcy9oZWFkcy9wcm90ZWN0ZWRfYQ=="
            ],
            "repositoryId": "351"
          }
      headers:
        Content-Type:
          - application/json
    response:
      status:
        code: 200
        message: null
      headers:
        Content-Length:
          - "9506"
        Content-Type:
          - application/json
      body:
        encoding: UTF-8
        string: |-
          {
            "suggestedFixAlerts": {
              "1": {
                "alertNumber": 1,
                "createdAt": "0001-01-01T00:00:00Z",
                "ruleSarifIdentifier": "js/reflected-xss",
                "state": "SUGGESTED_FIX_ALERT_STATE_VALID",
                "stateUpdatedActorId": "0",
                "stateUpdatedAt": "0001-01-01T00:00:00Z",
                "suggestedFix": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "dependencyMetadata": [],
                  "description": "To fix this vulnerability, we need to sanitize the user input before incorporating it into the response. We can use the `escape-html` library to escape any potentially harmful characters in the user input.\n\nThe best way to fix the vulnerability without changing existing functionality is to add an import for the `escape-html` library at the top of the file and then use the `escape` function to sanitize the `req.query.name` before incorporating it into the response.\n\nHere's what needs to be changed in the index.js file:\n\n1. Add an import for the `escape-html` library at the top of the file.\n2. Replace the line that incorporates the user input into the response with a sanitized version of the input.\n",
                  "dismissed": false,
                  "files": [
                    {
                      "createdAt": "0001-01-01T00:00:00Z",
                      "diffContent": "ZGlmZiAtLWdpdCBhL3BhY2thZ2UuanNvbiBiL3BhY2thZ2UuanNvbgotLS0gYS9wYWNrYWdlLmpzb24KKysrIGIvcGFja2FnZS5qc29uCkBAIC05LDMgKzksNCBAQAogICAiZGVwZW5kZW5jaWVzIjogewotICAgICJleHByZXNzIjogIl40LjE3LjEiCisgICAgImV4cHJlc3MiOiAiXjQuMTcuMSIsCisgICAgImVzY2FwZS1odG1sIjogIl4xLjAuMyIKICAgfSwK",
                      "filePath": "package.json",
                      "updatedAt": "0001-01-01T00:00:00Z"
                    },
                    {
                      "createdAt": "0001-01-01T00:00:00Z",
                      "diffContent": "ZGlmZiAtLWdpdCBhL2luZGV4LmpzIGIvaW5kZXguanMKLS0tIGEvaW5kZXguanMKKysrIGIvaW5kZXguanMKQEAgLTEgKzEsMiBAQAorY29uc3QgZXNjYXBlID0gcmVxdWlyZSgnZXNjYXBlLWh0bWwnKTsKIGNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7CkBAIC0zLDIgKzQsMiBAQAogY29uc3QgYXBwID0gZXhwcmVzcygpOwotYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoYEhlbGxvLCAke3JlcS5xdWVyeS5uYW1lfSFgKSk7ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQorYXBwLmdldCgnLycsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoYEhlbGxvLCAke2VzY2FwZShyZXEucXVlcnkubmFtZSl9IWApKTsKXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCg==",
                      "filePath": "index.js",
                      "updatedAt": "0001-01-01T00:00:00Z"
                    }
                  ],
                  "outdated": false,
                  "updatedAt": "0001-01-01T00:00:00Z"
                },
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              "2": {
                "alertNumber": 2,
                "createdAt": "0001-01-01T00:00:00Z",
                "ruleSarifIdentifier": "js/a-custom-rule",
                "state": "SUGGESTED_FIX_ALERT_STATE_VALID",
                "stateUpdatedActorId": "0",
                "stateUpdatedAt": "0001-01-01T00:00:00Z",
                "suggestedFix": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "dependencyMetadata": [],
                  "description": "To fix this vulnerability, we need to remove the logging of sensitive information, specifically the `password` variable on line 99. The best way to fix this vulnerability is to simply remove the `console.log` statement that logs the sensitive data.\n",
                  "dismissed": false,
                  "files": [
                    {
                      "createdAt": "0001-01-01T00:00:00Z",
                      "diffContent": "ZGlmZiAtLWdpdCBhL3NyYy9zZXJ2ZXIvcGFzc3BvcnQuanMgYi9zcmMvc2VydmVyL3Bhc3Nwb3J0LmpzCi0tLSBhL3NyYy9zZXJ2ZXIvcGFzc3BvcnQuanMKKysrIGIvc3JjL3NlcnZlci9wYXNzcG9ydC5qcwpAQCAtOTUsOSArOTUsOSBAQAogCQkJZGIucXVlcnkoYHNlbGVjdCAqIGZyb20gYWNjb3VudHMgd2hlcmUgZW1haWwgPSA/YCwgW3VzZXJuYW1lXSwgKGVyciwgdXNlcikgPT4gewogCQkJCWlmIChlcnIpIGNvbnNvbGUubG9nKGVycikKIAkJCQlpZiAoIXVzZXIubGVuZ3RoKSBkb25lKG51bGwsIGZhbHNlLCB7bWVzc2FnZTogJ0luY29ycmVjdCB1c2VyIG5hbWUnfSkKIAkJCQlpZiAodXNlci5sZW5ndGgpIHsKLQkJCQkJY29uc29sZS5sb2coIHBhc3N3b3JkLCB1c2VyWzBdLmVuY3J5cHRlZF9jcmVkZW50aWFscyApCisJCQkJCS8vIGNvbnNvbGUubG9nKCBwYXNzd29yZCwgdXNlclswXS5lbmNyeXB0ZWRfY3JlZGVudGlhbHMgKQogCQkJCQliY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlclswXS5lbmNyeXB0ZWRfY3JlZGVudGlhbHMsIChlcnIsIHJlc3VsdCkgPT4gewogCQkJCQkJaWYgKGVycikgY29uc29sZS5sb2coZXJyKQogCQkJCQkJY29uc29sZS5sb2cocmVzdWx0KQogCQkJCQkJcmV0dXJuIHJlc3VsdCA/IGRvbmUobnVsbCwgdXNlcikgOiBkb25lKG51bGwsIGZhbHNlLCB7bWVzc2FnZTogJ1dyb25nIHBhc3N3b3JkJ30pCg==",
                      "filePath": "src/server/passport.js",
                      "updatedAt": "0001-01-01T00:00:00Z"
                    }
                  ],
                  "outdated": false,
                  "updatedAt": "0001-01-01T00:00:00Z"
                },
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              "3": {
                "alertNumber": 3,
                "createdAt": "0001-01-01T00:00:00Z",
                "ruleSarifIdentifier": "js/hardcoded-credentials",
                "state": "SUGGESTED_FIX_ALERT_STATE_VALID",
                "stateUpdatedActorId": "0",
                "stateUpdatedAt": "0001-01-01T00:00:00Z",
                "suggestedFix": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "dependencyMetadata": [],
                  "description": "To fix this vulnerability, we need to remove the logging of sensitive information, specifically the `password` variable on line 99. The best way to fix this vulnerability is to simply remove the `console.log` statement that logs the sensitive data.\n",
                  "dismissed": false,
                  "files": [
                    {
                      "createdAt": "0001-01-01T00:00:00Z",
                      "diffContent": "ZGlmZiAtLWdpdCBhL3NyYy9zZXJ2ZXIvcGFzc3BvcnQuanMgYi9zcmMvc2VydmVyL3Bhc3Nwb3J0LmpzCi0tLSBhL3NyYy9zZXJ2ZXIvcGFzc3BvcnQuanMKKysrIGIvc3JjL3NlcnZlci9wYXNzcG9ydC5qcwpAQCAtOTUsOSArOTUsOSBAQAogCQkJZGIucXVlcnkoYHNlbGVjdCAqIGZyb20gYWNjb3VudHMgd2hlcmUgZW1haWwgPSA/YCwgW3VzZXJuYW1lXSwgKGVyciwgdXNlcikgPT4gewogCQkJCWlmIChlcnIpIGNvbnNvbGUubG9nKGVycikKIAkJCQlpZiAoIXVzZXIubGVuZ3RoKSBkb25lKG51bGwsIGZhbHNlLCB7bWVzc2FnZTogJ0luY29ycmVjdCB1c2VyIG5hbWUnfSkKIAkJCQlpZiAodXNlci5sZW5ndGgpIHsKLQkJCQkJY29uc29sZS5sb2coIHBhc3N3b3JkLCB1c2VyWzBdLmVuY3J5cHRlZF9jcmVkZW50aWFscyApCisJCQkJCS8vIGNvbnNvbGUubG9nKCBwYXNzd29yZCwgdXNlclswXS5lbmNyeXB0ZWRfY3JlZGVudGlhbHMgKQogCQkJCQliY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlclswXS5lbmNyeXB0ZWRfY3JlZGVudGlhbHMsIChlcnIsIHJlc3VsdCkgPT4gewogCQkJCQkJaWYgKGVycikgY29uc29sZS5sb2coZXJyKQogCQkJCQkJY29uc29sZS5sb2cocmVzdWx0KQogCQkJCQkJcmV0dXJuIHJlc3VsdCA/IGRvbmUobnVsbCwgdXNlcikgOiBkb25lKG51bGwsIGZhbHNlLCB7bWVzc2FnZTogJ1dyb25nIHBhc3N3b3JkJ30pCg==",
                      "filePath": "src/server/passport.js",
                      "updatedAt": "0001-01-01T00:00:00Z"
                    }
                  ],
                  "outdated": false,
                  "updatedAt": "0001-01-01T00:00:00Z"
                },
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              "4": {
                "alertNumber": 4,
                "createdAt": "0001-01-01T00:00:00Z",
                "ruleSarifIdentifier": "js/hardcoded-credentials",
                "state": "SUGGESTED_FIX_ALERT_STATE_DISMISSED",
                "stateUpdatedActorId": "0",
                "stateUpdatedAt": "0001-01-01T00:00:00Z",
                "suggestedFix": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "dependencyMetadata": [],
                  "description": "To fix this vulnerability, we need to remove the logging of sensitive information, specifically the `password` variable on line 99. The best way to fix this vulnerability is to simply remove the `console.log` statement that logs the sensitive data.\n",
                  "dismissed": true,
                  "files": [
                    {
                      "createdAt": "0001-01-01T00:00:00Z",
                      "diffContent": "ZGlmZiAtLWdpdCBhL3NyYy9zZXJ2ZXIvcGFzc3BvcnQuanMgYi9zcmMvc2VydmVyL3Bhc3Nwb3J0LmpzCi0tLSBhL3NyYy9zZXJ2ZXIvcGFzc3BvcnQuanMKKysrIGIvc3JjL3NlcnZlci9wYXNzcG9ydC5qcwpAQCAtOTUsOSArOTUsOSBAQAogCQkJZGIucXVlcnkoYHNlbGVjdCAqIGZyb20gYWNjb3VudHMgd2hlcmUgZW1haWwgPSA/YCwgW3VzZXJuYW1lXSwgKGVyciwgdXNlcikgPT4gewogCQkJCWlmIChlcnIpIGNvbnNvbGUubG9nKGVycikKIAkJCQlpZiAoIXVzZXIubGVuZ3RoKSBkb25lKG51bGwsIGZhbHNlLCB7bWVzc2FnZTogJ0luY29ycmVjdCB1c2VyIG5hbWUnfSkKIAkJCQlpZiAodXNlci5sZW5ndGgpIHsKLQkJCQkJY29uc29sZS5sb2coIHBhc3N3b3JkLCB1c2VyWzBdLmVuY3J5cHRlZF9jcmVkZW50aWFscyApCisJCQkJCS8vIGNvbnNvbGUubG9nKCBwYXNzd29yZCwgdXNlclswXS5lbmNyeXB0ZWRfY3JlZGVudGlhbHMgKQogCQkJCQliY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlclswXS5lbmNyeXB0ZWRfY3JlZGVudGlhbHMsIChlcnIsIHJlc3VsdCkgPT4gewogCQkJCQkJaWYgKGVycikgY29uc29sZS5sb2coZXJyKQogCQkJCQkJY29uc29sZS5sb2cocmVzdWx0KQogCQkJCQkJcmV0dXJuIHJlc3VsdCA/IGRvbmUobnVsbCwgdXNlcikgOiBkb25lKG51bGwsIGZhbHNlLCB7bWVzc2FnZTogJ1dyb25nIHBhc3N3b3JkJ30pCg==",
                      "filePath": "src/server/passport.js",
                      "updatedAt": "0001-01-01T00:00:00Z"
                    }
                  ],
                  "outdated": false,
                  "updatedAt": "0001-01-01T00:00:00Z"
                },
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              "5": {
                "alertNumber": 5,
                "createdAt": "0001-01-01T00:00:00Z",
                "ruleSarifIdentifier": "js/hardcoded-credentials",
                "state": "SUGGESTED_FIX_ALERT_STATE_PENDING",
                "stateUpdatedActorId": "0",
                "stateUpdatedAt": "0001-01-01T00:00:00Z",
                "suggestedFix": null,
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              "6": {
                "alertNumber": 6,
                "createdAt": "0001-01-01T00:00:00Z",
                "ruleSarifIdentifier": "js/unused-local-variable",
                "state": "SUGGESTED_FIX_ALERT_STATE_LANGUAGE_NOT_SUPPORTED",
                "stateUpdatedActorId": "0",
                "stateUpdatedAt": "0001-01-01T00:00:00Z",
                "suggestedFix": null,
                "updatedAt": "0001-01-01T00:00:00Z"
              },
              "7": {
                "alertNumber": 7,
                "createdAt": "0001-01-01T00:00:00Z",
                "ruleSarifIdentifier": "auto-generated-rule-kghw3ywi",
                "state": "SUGGESTED_FIX_ALERT_STATE_RULE_NOT_SUPPORTED",
                "stateUpdatedActorId": "0",
                "stateUpdatedAt": "0001-01-01T00:00:00Z",
                "suggestedFix": null,
                "updatedAt": "0001-01-01T00:00:00Z"
              }
            }
          }
      http_version: null
    recorded_at: Wed, 31 Jul 2024 15:09:43 GMT
  - request:
      method: post
      uri: http://localhost:8888/twirp/github.turboscan.Results/Annotations
      body:
        encoding: UTF-8
        string: |-
          {
            "headCommitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
            "numbers": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "repositoryId": 351
          }
      headers:
        Content-Type:
          - application/json
    response:
      status:
        code: 200
        message: null
      headers:
        Content-Length:
          - "30814"
        Content-Type:
          - application/json
      body:
        encoding: UTF-8
        string: |-
          {
            "results": [
              {
                "hasCodePaths": false,
                "relatedLocations": [],
                "result": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "fixedAt": null,
                  "guid": "11111111-2222-3333-4444-000000000000",
                  "isFixed": false,
                  "messageMarkdown": "Cross-site scripting vulnerability due to a [user-provided value](1).",
                  "messageText": "Cross-site scripting vulnerability due to a user-provided value.",
                  "mostRecentInstance": {
                    "analysisKey": {
                      "analysisKey": "a",
                      "category": "a",
                      "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                      "environment": "{}",
                      "id": "1",
                      "tool": "CodeQL"
                    },
                    "classification": [],
                    "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                    "createdAt": "0001-01-01T00:00:00Z",
                    "hasFileClassification": false,
                    "isFixed": false,
                    "isOutdated": false,
                    "location": {
                      "endColumn": 64,
                      "endLine": 4,
                      "filePath": "index.js",
                      "startColumn": 37,
                      "startLine": 4
                    },
                    "messageText": "Cross-site scripting vulnerability due to a user-provided value.",
                    "refNameBytes": "cmVmcy9wdWxsLzQyL21lcmdl"
                  },
                  "number": 1,
                  "resolution": "NO_RESOLUTION",
                  "resolutionNote": "",
                  "resolvedAt": null,
                  "resolverId": 0,
                  "rule": {
                    "fullDescription": "Writing user input directly to an HTTP response allows for a cross-site scripting vulnerability.",
                    "help": "# Reflected cross-site scripting\nDirectly writing user input (for example, an HTTP request parameter) to an HTTP response without properly sanitizing the input first, allows for a cross-site scripting vulnerability.\n\nThis kind of vulnerability is also called *reflected* cross-site scripting, to distinguish it from other types of cross-site scripting.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing user input to the response, or one of the other solutions that are mentioned in the references.\n\n\n## Example\nThe following example code writes part of an HTTP request (which is controlled by the user) directly to the response. This leaves the website vulnerable to cross-site scripting.\n\n\n```javascript\nvar app = require('express')();\n\napp.get('/user/:id', function(req, res) {\n  if (!isValidUserId(req.params.id))\n    // BAD: a request parameter is incorporated without validation into the response\n    res.send(\"Unknown user: \" + req.params.id);\n  else\n    // TODO: do something exciting\n    ;\n});\n\n```\nSanitizing the user-controlled data prevents the vulnerability:\n\n\n```javascript\nvar escape = require('escape-html');\n\nvar app = require('express')();\n\napp.get('/user/:id', function(req, res) {\n  if (!isValidUserId(req.params.id))\n    // GOOD: request parameter is sanitized before incorporating it into the response\n    res.send(\"Unknown user: \" + escape(req.params.id));\n  else\n    // TODO: do something exciting\n    ;\n});\n\n```\n\n## References\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [Types of Cross-Site Scripting](https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n",
                    "helpUri": "",
                    "name": "js/reflected-xss",
                    "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Security/CWE-079/ReflectedXss.ql",
                    "sarifIdentifier": "js/reflected-xss",
                    "severity": "ERROR",
                    "shortDescription": "Reflected cross-site scripting",
                    "tags": [
                      "external/cwe/cwe-079",
                      "external/cwe/cwe-116",
                      "security"
                    ]
                  },
                  "ruleSeverity": "ERROR",
                  "securitySeverity": "HIGH",
                  "tool": {
                    "alertCount": "0",
                    "guid": "",
                    "name": "CodeQL",
                    "version": "2.16.2"
                  },
                  "updatedAt": "0001-01-01T00:00:00Z"
                }
              },
              {
                "hasCodePaths": false,
                "relatedLocations": [],
                "result": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "fixedAt": null,
                  "guid": "11111111-2222-3333-4444-000000000000",
                  "isFixed": false,
                  "messageMarkdown": "",
                  "messageText": "Result from custom rule",
                  "mostRecentInstance": {
                    "analysisKey": {
                      "analysisKey": "b",
                      "category": "b",
                      "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                      "environment": "{}",
                      "id": "2",
                      "tool": "CodeQL"
                    },
                    "classification": [],
                    "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                    "createdAt": "0001-01-01T00:00:00Z",
                    "hasFileClassification": false,
                    "isFixed": false,
                    "isOutdated": false,
                    "location": {
                      "endColumn": 64,
                      "endLine": 4,
                      "filePath": "index.js",
                      "startColumn": 37,
                      "startLine": 4
                    },
                    "messageText": "Result from custom rule",
                    "refNameBytes": "cmVmcy9wdWxsLzQyL21lcmdl"
                  },
                  "number": 2,
                  "resolution": "NO_RESOLUTION",
                  "resolutionNote": "",
                  "resolvedAt": null,
                  "resolverId": 0,
                  "rule": {
                    "fullDescription": "A made-up rule for testing purposes.",
                    "help": "",
                    "helpUri": "",
                    "name": "Custom rule",
                    "queryUri": "",
                    "sarifIdentifier": "js/a-custom-rule",
                    "severity": "ERROR",
                    "shortDescription": "A custom rule",
                    "tags": []
                  },
                  "ruleSeverity": "ERROR",
                  "securitySeverity": "MEDIUM",
                  "tool": {
                    "alertCount": "0",
                    "guid": "",
                    "name": "CodeQL",
                    "version": "2.13.4"
                  },
                  "updatedAt": "0001-01-01T00:00:00Z"
                }
              },
              {
                "hasCodePaths": true,
                "relatedLocations": [
                  {
                    "createdAt": "0001-01-01T00:00:00Z",
                    "id": "1",
                    "location": {
                      "endColumn": 19,
                      "endLine": 7,
                      "filePath": "main.js",
                      "startColumn": 11,
                      "startLine": 7
                    },
                    "message": "user name",
                    "physicalAlertId": "3",
                    "replacementIndex": 1,
                    "updatedAt": "0001-01-01T00:00:00Z"
                  }
                ],
                "result": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "fixedAt": null,
                  "guid": "11111111-2222-3333-4444-000000000000",
                  "isFixed": false,
                  "messageMarkdown": "",
                  "messageText": "The hard-coded value \"dbuser\" is used as [user name](1).",
                  "mostRecentInstance": {
                    "analysisKey": {
                      "analysisKey": "c",
                      "category": "c",
                      "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                      "environment": "{}",
                      "id": "3",
                      "tool": "CodeQL"
                    },
                    "classification": [],
                    "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                    "createdAt": "0001-01-01T00:00:00Z",
                    "hasFileClassification": false,
                    "isFixed": false,
                    "isOutdated": false,
                    "location": {
                      "endColumn": 19,
                      "endLine": 7,
                      "filePath": "main.js",
                      "startColumn": 11,
                      "startLine": 7
                    },
                    "messageText": "The hard-coded value \"dbuser\" is used as [user name](1).",
                    "refNameBytes": "cmVmcy9wdWxsLzQyL21lcmdl"
                  },
                  "number": 3,
                  "resolution": "FALSE_POSITIVE",
                  "resolutionNote": "",
                  "resolvedAt": null,
                  "resolverId": 0,
                  "rule": {
                    "fullDescription": "Hard-coding credentials in source code may enable an attacker to gain unauthorized access.",
                    "help": "# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n",
                    "helpUri": "",
                    "name": "js/hardcoded-credentials",
                    "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Security/CWE-798/HardcodedCredentials.ql",
                    "sarifIdentifier": "js/hardcoded-credentials",
                    "severity": "WARNING",
                    "shortDescription": "Hard-coded credentials",
                    "tags": [
                      "external/cwe/cwe-259",
                      "external/cwe/cwe-321",
                      "external/cwe/cwe-798",
                      "security"
                    ]
                  },
                  "ruleSeverity": "WARNING",
                  "securitySeverity": "CRITICAL",
                  "tool": {
                    "alertCount": "0",
                    "guid": "",
                    "name": "CodeQL",
                    "version": "2.4.1"
                  },
                  "updatedAt": "0001-01-01T00:00:00Z"
                }
              },
              {
                "hasCodePaths": true,
                "relatedLocations": [
                  {
                    "createdAt": "0001-01-01T00:00:00Z",
                    "id": "2",
                    "location": {
                      "endColumn": 25,
                      "endLine": 10,
                      "filePath": "main.js",
                      "startColumn": 15,
                      "startLine": 10
                    },
                    "message": "password",
                    "physicalAlertId": "4",
                    "replacementIndex": 1,
                    "updatedAt": "0001-01-01T00:00:00Z"
                  }
                ],
                "result": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "fixedAt": null,
                  "guid": "11111111-2222-3333-4444-000000000000",
                  "isFixed": false,
                  "messageMarkdown": "",
                  "messageText": "The hard-coded value \"abcdefgh\" is used as [password](1).",
                  "mostRecentInstance": {
                    "analysisKey": {
                      "analysisKey": "c",
                      "category": "c",
                      "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                      "environment": "{}",
                      "id": "3",
                      "tool": "CodeQL"
                    },
                    "classification": [],
                    "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                    "createdAt": "0001-01-01T00:00:00Z",
                    "hasFileClassification": false,
                    "isFixed": false,
                    "isOutdated": false,
                    "location": {
                      "endColumn": 25,
                      "endLine": 10,
                      "filePath": "main.js",
                      "startColumn": 15,
                      "startLine": 10
                    },
                    "messageText": "The hard-coded value \"abcdefgh\" is used as [password](1).",
                    "refNameBytes": "cmVmcy9wdWxsLzQyL21lcmdl"
                  },
                  "number": 4,
                  "resolution": "NO_RESOLUTION",
                  "resolutionNote": "",
                  "resolvedAt": null,
                  "resolverId": 0,
                  "rule": {
                    "fullDescription": "Hard-coding credentials in source code may enable an attacker to gain unauthorized access.",
                    "help": "# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n",
                    "helpUri": "",
                    "name": "js/hardcoded-credentials",
                    "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Security/CWE-798/HardcodedCredentials.ql",
                    "sarifIdentifier": "js/hardcoded-credentials",
                    "severity": "WARNING",
                    "shortDescription": "Hard-coded credentials",
                    "tags": [
                      "external/cwe/cwe-259",
                      "external/cwe/cwe-321",
                      "external/cwe/cwe-798",
                      "security"
                    ]
                  },
                  "ruleSeverity": "WARNING",
                  "securitySeverity": "CRITICAL",
                  "tool": {
                    "alertCount": "0",
                    "guid": "",
                    "name": "CodeQL",
                    "version": "2.4.1"
                  },
                  "updatedAt": "0001-01-01T00:00:00Z"
                }
              },
              {
                "hasCodePaths": true,
                "relatedLocations": [
                  {
                    "createdAt": "0001-01-01T00:00:00Z",
                    "id": "3",
                    "location": {
                      "endColumn": 49,
                      "endLine": 15,
                      "filePath": "main.js",
                      "startColumn": 34,
                      "startLine": 15
                    },
                    "message": "credentials",
                    "physicalAlertId": "5",
                    "replacementIndex": 1,
                    "updatedAt": "0001-01-01T00:00:00Z"
                  }
                ],
                "result": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "fixedAt": null,
                  "guid": "11111111-2222-3333-4444-000000000000",
                  "isFixed": false,
                  "messageMarkdown": "",
                  "messageText": "The hard-coded value \"user:abcdefgh\" is used as [credentials](1).",
                  "mostRecentInstance": {
                    "analysisKey": {
                      "analysisKey": "c",
                      "category": "c",
                      "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                      "environment": "{}",
                      "id": "3",
                      "tool": "CodeQL"
                    },
                    "classification": [],
                    "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                    "createdAt": "0001-01-01T00:00:00Z",
                    "hasFileClassification": false,
                    "isFixed": false,
                    "isOutdated": false,
                    "location": {
                      "endColumn": 49,
                      "endLine": 15,
                      "filePath": "main.js",
                      "startColumn": 34,
                      "startLine": 15
                    },
                    "messageText": "The hard-coded value \"user:abcdefgh\" is used as [credentials](1).",
                    "refNameBytes": "cmVmcy9wdWxsLzQyL21lcmdl"
                  },
                  "number": 5,
                  "resolution": "NO_RESOLUTION",
                  "resolutionNote": "",
                  "resolvedAt": null,
                  "resolverId": 0,
                  "rule": {
                    "fullDescription": "Hard-coding credentials in source code may enable an attacker to gain unauthorized access.",
                    "help": "# Hard-coded credentials\nIncluding unencrypted hard-coded authentication credentials in source code is dangerous because the credentials may be easily discovered. For example, the code may be open source, or it may be leaked or accidentally revealed, making the credentials visible to an attacker. This, in turn, might enable them to gain unauthorized access, or to obtain privileged information.\n\n\n## Recommendation\nRemove hard-coded credentials, such as user names, passwords and certificates, from source code. Instead, place them in configuration files, environment variables or other data stores if necessary. If possible, store configuration files including credential data separately from the source code, in a secure location with restricted access.\n\nIf the credentials are a placeholder value, make sure the value is obviously a placeholder by using a name such as `\"SampleToken\"` or `\"MyPassword\"`.\n\n\n## Example\nThe following code example connects to an HTTP request using an hard-codes authentication header:\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = 'user';\nlet password = 'passwd';\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n          method:'GET',\n          headers: headers\n       })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\nInstead, user name and password can be supplied through the environment variables `username` and `password`, which can be set externally without hard-coding credentials in the source code.\n\n\n```javascript\nlet base64 = require('base-64');\n\nlet url = 'http://example.org/auth';\nlet username = process.env.USERNAME;\nlet password = process.env.PASSWORD;\n\nlet headers = new Headers();\n\nheaders.append('Content-Type', 'text/json');\nheaders.append('Authorization', 'Basic' + base64.encode(username + \":\" + password));\n\nfetch(url, {\n        method:'GET',\n        headers: headers\n     })\n.then(response =\u003e response.json())\n.then(json =\u003e console.log(json))\n.done();\n\n```\n\n## Example\nThe following code example connects to a Postgres database using the `pg` package and hard-codes user name and password:\n\n\n```javascript\nconst pg = require(\"pg\");\n\nconst client = new pg.Client({\n  user: \"bob\",\n  host: \"database.server.com\",\n  database: \"mydb\",\n  password: \"correct-horse-battery-staple\",\n  port: 3211\n});\nclient.connect();\n\n```\nInstead, user name and password can be supplied through the environment variables `PGUSER` and `PGPASSWORD`, which can be set externally without hard-coding credentials in the source code.\n\n\n## References\n* OWASP: [Use of hard-coded password](https://www.owasp.org/index.php/Use_of_hard-coded_password).\n* Common Weakness Enumeration: [CWE-259](https://cwe.mitre.org/data/definitions/259.html).\n* Common Weakness Enumeration: [CWE-321](https://cwe.mitre.org/data/definitions/321.html).\n* Common Weakness Enumeration: [CWE-798](https://cwe.mitre.org/data/definitions/798.html).\n",
                    "helpUri": "",
                    "name": "js/hardcoded-credentials",
                    "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Security/CWE-798/HardcodedCredentials.ql",
                    "sarifIdentifier": "js/hardcoded-credentials",
                    "severity": "WARNING",
                    "shortDescription": "Hard-coded credentials",
                    "tags": [
                      "external/cwe/cwe-259",
                      "external/cwe/cwe-321",
                      "external/cwe/cwe-798",
                      "security"
                    ]
                  },
                  "ruleSeverity": "WARNING",
                  "securitySeverity": "CRITICAL",
                  "tool": {
                    "alertCount": "0",
                    "guid": "",
                    "name": "CodeQL",
                    "version": "2.4.1"
                  },
                  "updatedAt": "0001-01-01T00:00:00Z"
                }
              },
              {
                "hasCodePaths": false,
                "relatedLocations": [],
                "result": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "fixedAt": null,
                  "guid": "11111111-2222-3333-4444-000000000000",
                  "isFixed": false,
                  "messageMarkdown": "",
                  "messageText": "Unused variable user.",
                  "mostRecentInstance": {
                    "analysisKey": {
                      "analysisKey": "c",
                      "category": "c",
                      "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                      "environment": "{}",
                      "id": "3",
                      "tool": "CodeQL"
                    },
                    "classification": [],
                    "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                    "createdAt": "0001-01-01T00:00:00Z",
                    "hasFileClassification": false,
                    "isFixed": false,
                    "isOutdated": false,
                    "location": {
                      "endColumn": 11,
                      "endLine": 4,
                      "filePath": "main.js",
                      "startColumn": 7,
                      "startLine": 4
                    },
                    "messageText": "Unused variable user.",
                    "refNameBytes": "cmVmcy9wdWxsLzQyL21lcmdl"
                  },
                  "number": 6,
                  "resolution": "NO_RESOLUTION",
                  "resolutionNote": "",
                  "resolvedAt": null,
                  "resolverId": 0,
                  "rule": {
                    "fullDescription": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
                    "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n",
                    "helpUri": "",
                    "name": "js/unused-local-variable",
                    "queryUri": "https://github.com/github/codeql/blob/0000000000000000000000000000000000000000/javascript/ql/src/Declarations/UnusedVariable.ql",
                    "sarifIdentifier": "js/unused-local-variable",
                    "severity": "NOTE",
                    "shortDescription": "Unused variable, import, function or class",
                    "tags": [
                      "maintainability"
                    ]
                  },
                  "ruleSeverity": "NOTE",
                  "securitySeverity": "NO_SECURITY_SEVERITY",
                  "tool": {
                    "alertCount": "0",
                    "guid": "",
                    "name": "CodeQL",
                    "version": "2.4.1"
                  },
                  "updatedAt": "0001-01-01T00:00:00Z"
                }
              },
              {
                "hasCodePaths": false,
                "relatedLocations": [],
                "result": {
                  "createdAt": "0001-01-01T00:00:00Z",
                  "fixedAt": null,
                  "guid": "11111111-2222-3333-4444-000000000000",
                  "isFixed": false,
                  "messageMarkdown": "",
                  "messageText": "A plain-text message for auto-generated result vcv3n6m2.",
                  "mostRecentInstance": {
                    "analysisKey": {
                      "analysisKey": "d",
                      "category": "d",
                      "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                      "environment": "{}",
                      "id": "4",
                      "tool": "Some other tool"
                    },
                    "classification": [],
                    "commitOid": "a270ea0fdfba2bd5a33934e5184784cddce87f38",
                    "createdAt": "0001-01-01T00:00:00Z",
                    "hasFileClassification": false,
                    "isFixed": false,
                    "isOutdated": false,
                    "location": {
                      "endColumn": 0,
                      "endLine": 1,
                      "filePath": "file.js",
                      "startColumn": 1,
                      "startLine": 1
                    },
                    "messageText": "A plain-text message for auto-generated result vcv3n6m2.",
                    "refNameBytes": "cmVmcy9wdWxsLzQyL21lcmdl"
                  },
                  "number": 7,
                  "resolution": "NO_RESOLUTION",
                  "resolutionNote": "",
                  "resolvedAt": null,
                  "resolverId": 0,
                  "rule": {
                    "fullDescription": "",
                    "help": "",
                    "helpUri": "",
                    "name": "Auto-Generated Rule kghw3ywi",
                    "queryUri": "",
                    "sarifIdentifier": "auto-generated-rule-kghw3ywi",
                    "severity": "WARNING",
                    "shortDescription": "",
                    "tags": []
                  },
                  "ruleSeverity": "WARNING",
                  "securitySeverity": "NO_SECURITY_SEVERITY",
                  "tool": {
                    "alertCount": "0",
                    "guid": "",
                    "name": "Some other tool",
                    "version": "1.0.0"
                  },
                  "updatedAt": "0001-01-01T00:00:00Z"
                }
              }
            ]
          }
      http_version: null
    recorded_at: Mon, 20 May 2024 18:11:06 GMT
recorded_with: ""

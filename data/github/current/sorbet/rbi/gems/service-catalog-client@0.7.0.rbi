# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `service-catalog-client` gem.
# Please instead update this file by running `bin/tapioca gem service-catalog-client`.

# source://service-catalog-client//lib/service-catalog/client.rb#8
module ServiceCatalog; end

# Client is the class for executing GraphQL requests against a Service Catalog API.
#
# source://service-catalog-client//lib/service-catalog/client.rb#10
class ServiceCatalog::Client
  # Create a new Client.
  #
  # @param endpoint [String] Full HTTP URL to the GraphQL API endpoint
  # @param token [String] Authorization token
  # @param options [Hash] Further options with symbol keys (+sleep_duration+ can be set this way)
  # @return [Client] a new instance of Client
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#57
  def initialize(endpoint:, token:, options: T.unsafe(nil)); end

  # Return the HTTP connection to the endpoint
  #
  # @return [Net::HTTP] HTTP client
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#82
  def connection; end

  # The full HTTPS URL to the Service Catalog GraphQL API.
  #
  # @return [String] the full endpoint
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#34
  def endpoint; end

  # Access the Groups-related API calls.
  #
  # @return [GroupsQueryBuilder]
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#159
  def groups; end

  # Build HTTP headers for API call.
  #
  # @param context [Hash] (optional) list of additional headers to add
  # @return [Hash] HTTP headers
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#70
  def headers(context = T.unsafe(nil)); end

  # Additional options passed during creation of the Client.
  #
  # @return [Hash] the options
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#50
  def options; end

  # Access the Owners-related API calls.
  #
  # @return [OwnersQueryBuilder]
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#166
  def owners; end

  # Execute GraphQL query against server.
  #
  # @param query [String] GraphQL query
  # @param variables [Hash] (optional) Variables for GraphQL query
  # @param context [Hash] (optional) Additional headers
  # @return [Hash] GraphQL response, along with HTTP response as +"raw_response"+ key
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#98
  def query(query:, variables: T.unsafe(nil), context: T.unsafe(nil)); end

  # Run a query and retry on non-success responses.
  #
  # @param query [String] GraphQL query
  # @param variables [Hash] (optional) Variables for GraphQL query
  # @param context [Hash] (optional) Additional headers
  # @param max_retries [Integer] (optional) Maximum number of times to retry this query if it fails
  # @param retriable_error_classes [Array<Exception>] (optional) Acceptable error classes to retry from.
  # @return [Hash] GraphQL response, along with HTTP response as +"raw_response"+ key
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#137
  def query_with_retries(query:, variables: T.unsafe(nil), context: T.unsafe(nil), max_retries: T.unsafe(nil), retriable_error_classes: T.unsafe(nil)); end

  # Access the Scorecards-related API calls.
  #
  # @return [ScorecardsQueryBinder]
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#173
  def scorecards; end

  # Access the Services-related API calls.
  #
  # @return [ServicesQueryBinder]
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#180
  def services; end

  # A global sleep duration setting for all requests this client will execute.
  #
  # @return [Float] the sleep duration in seconds
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#46
  def sleep_duration; end

  # Access the SLO-related API calls.
  #
  # @return [SlosQueryBinder]
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#187
  def slos; end

  # Access the Task Lock-related API calls.
  #
  # @return [TaskLocksQueryBinder]
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#194
  def task_locks; end

  # The Authorization token for accessing the endpoint.
  #
  # @return [String] the authorization token
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#38
  def token; end

  # A URI class representation of the endpoint attribute.
  #
  # @return [URI] the endpoint as a URI
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#42
  def uri; end

  # Access the User-related API calls.
  #
  # @return [UsersQueryBinder]
  #
  # source://service-catalog-client//lib/service-catalog/client.rb#201
  def users; end
end

# List of Ruby error classes to retry by default.
#
# @return [Array] default list of exceptions to rescue
#
# source://service-catalog-client//lib/service-catalog/client.rb#19
ServiceCatalog::Client::DEFAULT_ERROR_CLASSES_TO_RETRY = T.let(T.unsafe(nil), Array)

# Seconds for the process to sleep between retries after encountering an error.
#
# source://service-catalog-client//lib/service-catalog/client.rb#15
ServiceCatalog::Client::DEFAULT_SLEEP_BETWEEN_RETRIES = T.let(T.unsafe(nil), Integer)

# Error is a generic error class when something goes wrong.
#
# source://service-catalog-client//lib/service-catalog/client.rb#12
class ServiceCatalog::Client::Error < ::StandardError; end

# GraphqlQuerySemantics is a module with class methods for handling GraphQL query semantics,
# such as defining variables and their types.
#
# source://service-catalog-client//lib/service-catalog/client/graphql_query_semantics.rb#10
module ServiceCatalog::Client::GraphqlQuerySemantics
  class << self
    # Creates a GraphQL query declaration for the given variables.
    # This might look like:
    #   $after: String, $serviceName: String
    #
    # @param variables [Hash] GraphQL variables
    # @param strict [Boolean] True if the fields are required (deprecated, prefer +variable_types+)
    # @param variable_types [Hash] Map of GraphQL variable name to GraphQL type as string
    # @param include_parens [Boolean] True will wrap the output in opening and closing parentheses
    # @return [String] GraphQL variable declaration
    #
    # source://service-catalog-client//lib/service-catalog/client/graphql_query_semantics.rb#65
    def graphql_variable_declaration(variables, strict: T.unsafe(nil), variable_types: T.unsafe(nil), include_parens: T.unsafe(nil)); end

    # Converts a Ruby variable name into a GraphQL variable name.
    #
    # @param ruby_variable_name [String or Symbol] Ruby variable name
    # @return [String] GraphQL variable name
    #
    # source://service-catalog-client//lib/service-catalog/client/graphql_query_semantics.rb#17
    def graphql_variable_name(ruby_variable_name); end

    # Creates a GraphQL query passing for all variables.
    # This might look like:
    #   after: $after, serviceName: $serviceName
    #
    # @param variables [Hash] GraphQL variables
    # @param include_parens [Boolean] True will wrap the output in opening and closing parentheses
    # @return [String] GraphQL variable passing
    #
    # source://service-catalog-client//lib/service-catalog/client/graphql_query_semantics.rb#80
    def graphql_variable_passing(variables, include_parens: T.unsafe(nil)); end

    # Converts a Ruby object to a GraphQL variable type.
    #
    # @param ruby_object [Object] Ruby object
    # @param strict [Boolean] (optional) Whether the type is non-nullable (true for non-nullable)
    # @param key [String] (optional) The GraphQL variable key
    # @return [String] GraphQL variable type
    #
    # source://service-catalog-client//lib/service-catalog/client/graphql_query_semantics.rb#28
    def graphql_variable_type(ruby_object, strict: T.unsafe(nil), key: T.unsafe(nil)); end

    # Converts a Hash of Ruby keyword arguments into a Hash of GraphQL variables by converting the key to a GraphQL variable.
    #
    # @param kwargs [Hash] Ruby keyword arguments
    # @return [Hash] GraphQL variables
    #
    # source://service-catalog-client//lib/service-catalog/client/graphql_query_semantics.rb#51
    def kwargs_to_graphql_variables(kwargs); end
  end
end

# source://service-catalog-client//lib/service-catalog/client/groups/delete_group_mutation.rb#5
module ServiceCatalog::Client::Groups; end

# Delete a group.
#
# source://service-catalog-client//lib/service-catalog/client/groups/delete_group_mutation.rb#7
module ServiceCatalog::Client::Groups::DeleteGroupMutation
  class << self
    # Build query for this mutation.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/delete_group_mutation.rb#37
    def build_query(variables); end

    # Delete a group.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param name [String] The name of the group (exact)
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/delete_group_mutation.rb#18
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/groups/delete_group_mutation.rb#9
ServiceCatalog::Client::Groups::DeleteGroupMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Find a group by name.
#
# source://service-catalog-client//lib/service-catalog/client/groups/find_group_query.rb#7
module ServiceCatalog::Client::Groups::FindGroupQuery
  class << self
    # Build the query to find a group.
    #
    # @param variables - Hash of variables to send (camelCased keys)
    # @param group_detail_fragment [optional] - a String containing a GraphQL fragment called `GroupDetail`
    # @return [String] The query
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/find_group_query.rb#38
    def build_query(variables, group_detail_fragment: T.unsafe(nil)); end

    # Execute the Find Group query to fetch a specific group.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param name [String] The name of the group to search for (exact)
    # @return Hash with "errors" and "data" keys.
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/find_group_query.rb#18
    def execute(client:, name:, context: T.unsafe(nil), group_detail_fragment: T.unsafe(nil)); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/groups/find_group_query.rb#9
ServiceCatalog::Client::Groups::FindGroupQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# List all groups meeting optional criteria.
#
# source://service-catalog-client//lib/service-catalog/client/groups/list_groups_query.rb#7
module ServiceCatalog::Client::Groups::ListGroupsQuery
  class << self
    # Build the query to list groups (paginated)
    #
    # Pass keyword arguments corresponding to the `groups` top-level query on the GraphQL API.
    #
    # Injects pagination field `after`.
    #
    # @param variables [Hash] GraphQL-formatted variables.
    # @return [String] The query
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/list_groups_query.rb#53
    def build_query(variables, group_detail_fragment: T.unsafe(nil)); end

    # Execute the List Groups query to list all groups.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param tag [String] (optional) A tag to filter by
    # @return Hash with "errors" and "groups" keys.
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/list_groups_query.rb#18
    def execute(client:, context: T.unsafe(nil), group_detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/groups/list_groups_query.rb#9
ServiceCatalog::Client::Groups::ListGroupsQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Update or create a group.
#
# source://service-catalog-client//lib/service-catalog/client/groups/update_group_mutation.rb#7
module ServiceCatalog::Client::Groups::UpdateGroupMutation
  class << self
    # Build query for this mutation.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/update_group_mutation.rb#41
    def build_query(variables, group_detail_fragment: T.unsafe(nil)); end

    # Update or create a group.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param name [String] The name of the group (exact)
    # @param description [String] A description of the group.
    # @param groups [Array<String>] Groups to include in the group. Send EITHER +groups+ or +services+.
    # @param services [Array<String>] Services to include in the group. Send EITHER +groups+ or +services+.
    # @param tags [Array<String>] Tags associated with the group
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/groups/update_group_mutation.rb#22
    def execute(client:, context: T.unsafe(nil), group_detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/groups/update_group_mutation.rb#9
ServiceCatalog::Client::Groups::UpdateGroupMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GroupsQueryBinder contains methods for accessing groups.
#
# source://service-catalog-client//lib/service-catalog/client/groups_query_binder.rb#9
class ServiceCatalog::Client::GroupsQueryBinder < ::ServiceCatalog::Client::QueryBinder
  # Delete a group.
  #
  # @param name [String] The name of the group to delete (exact)
  # @param context [Hash] Added context to add to the request as headers
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/groups_query_binder.rb#85
  def delete(name:, context: T.unsafe(nil)); end

  # Find a single group.
  #
  # @param name [String] The name of the group (exact)
  # @param context [Hash] (optional) Optional headers to add to the request
  # @return [Response] The matching group.
  #
  # source://service-catalog-client//lib/service-catalog/client/groups_query_binder.rb#59
  def find(**kwargs); end

  # List all Groups in the Service Catalog.
  #
  # @param tag [String] (optional) Filter by tag
  # @param context [Hash] (optional) Optional headers to add to the request
  # @return [Response] All services matching the criteria
  #
  # source://service-catalog-client//lib/service-catalog/client/groups_query_binder.rb#49
  def list(**kwargs); end

  # Update a group.
  #
  # @param context [Hash] Added context to add to the request as headers
  # @param name [String] The name of the group (exact)
  # @param description [String] A description of the group.
  # @param groups [Array<String>] Groups to include in the group. Send EITHER +groups+ or +services+.
  # @param services [Array<String>] Services to include in the group. Send EITHER +groups+ or +services+.
  # @param tags [Array<String>] Tags associated with the group
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/groups_query_binder.rb#75
  def update(**kwargs); end
end

# source://service-catalog-client//lib/service-catalog/client/groups_query_binder.rb#10
ServiceCatalog::Client::GroupsQueryBinder::GROUP_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#5
module ServiceCatalog::Client::Owners; end

# A list of owners.
#
# source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#7
module ServiceCatalog::Client::Owners::ListOwnersQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#59
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # A list of owners.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param after [String] Returns the elements in the list that come after the specified cursor.
    # @param before [String] Returns the elements in the list that come before the specified cursor.
    # @param first [Integer] Returns the first _n_ elements from the list.
    # @param last [Integer] Returns the last _n_ elements from the list.
    # @param detail_fragment [String] GraphQL detail fragment for the model
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#30
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#9
ServiceCatalog::Client::Owners::ListOwnersQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#12
ServiceCatalog::Client::Owners::ListOwnersQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Update an Owner.
#
# source://service-catalog-client//lib/service-catalog/client/owners/update_owner_mutation.rb#7
module ServiceCatalog::Client::Owners::UpdateOwnerMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/owners/update_owner_mutation.rb#46
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # Update an Owner.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param active [Boolean] Active status of the Owner.
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param name [String] The name of the Owner.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/owners/update_owner_mutation.rb#27
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/owners/update_owner_mutation.rb#9
ServiceCatalog::Client::Owners::UpdateOwnerMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/owners/update_owner_mutation.rb#12
ServiceCatalog::Client::Owners::UpdateOwnerMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# OwnersQueryBinder contains methods for accessing Owners.
#
# source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#78
class ServiceCatalog::Client::OwnersQueryBinder < ::ServiceCatalog::Client::QueryBinder
  # A list of owners.
  #
  # @param after [String] Returns the elements in the list that come after the specified cursor.
  # @param before [String] Returns the elements in the list that come before the specified cursor.
  # @param first [Integer] Returns the first _n_ elements from the list.
  # @param last [Integer] Returns the last _n_ elements from the list.
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/owners/list_owners_query.rb#89
  def list(**kwargs); end

  # Update an Owner.
  #
  # @param active [Boolean] Active status of the Owner.
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param name [String] The name of the Owner.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/owners/update_owner_mutation.rb#71
  def update(**kwargs); end
end

# source://service-catalog-client//lib/service-catalog/client/owners_query_binder.rb#10
ServiceCatalog::Client::OwnersQueryBinder::DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# QueryBinder is an abstract base class for making query binders.
#
# source://service-catalog-client//lib/service-catalog/client/query_binder.rb#6
class ServiceCatalog::Client::QueryBinder
  # Create a new QueryBinder (call the QueryBinder subclass's .new method directly).
  #
  # @param client [Client] Your Client instance
  # @return [QueryBinder]
  #
  # source://service-catalog-client//lib/service-catalog/client/query_binder.rb#16
  def initialize(client:); end

  # The client to use when executing queries.
  #
  # @return [Client]
  #
  # source://service-catalog-client//lib/service-catalog/client/query_binder.rb#9
  def client; end
end

# Response encapsulates the query response JSON into a Ruby class for easier introspection and code readability.
#
# source://service-catalog-client//lib/service-catalog/client/response.rb#8
class ServiceCatalog::Client::Response
  # Create a new Response.
  #
  # @param data_hash A Hash of data containing at most two keys, one "errors", and one corresponding to your response data.
  # @raise [PartialSuccessError]
  # @return nil
  #
  # source://service-catalog-client//lib/service-catalog/client/response.rb#32
  def initialize(data_hash = T.unsafe(nil)); end

  # Read the data from the response. Access properties from the GraphQL query as lower_snake_case attributes.
  #
  # @return [Struct]
  #
  # source://service-catalog-client//lib/service-catalog/client/response.rb#11
  def data; end

  # @return [Boolean]
  #
  # source://service-catalog-client//lib/service-catalog/client/response.rb#38
  def errored?; end

  # Any errors the server may have returned. Usually a malformed query.
  #
  # @return [Array]
  #
  # source://service-catalog-client//lib/service-catalog/client/response.rb#15
  def errors; end

  private

  # source://service-catalog-client//lib/service-catalog/client/response.rb#43
  def convert_to_rubyish(data); end
end

# source://service-catalog-client//lib/service-catalog/client/response.rb#21
ServiceCatalog::Client::Response::KEY_TRANSFORMATIONS = T.let(T.unsafe(nil), Hash)

# PartialSuccessError denotes a 200 response from the GraphQL server with values in the +"errors"+ key in the response.
#
# source://service-catalog-client//lib/service-catalog/client/response.rb#18
class ServiceCatalog::Client::Response::PartialSuccessError < ::ServiceCatalog::Client::Error; end

# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#5
module ServiceCatalog::Client::Scorecards; end

# Delete all scores from a scorecard for a service.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#7
module ServiceCatalog::Client::Scorecards::DeleteScorecardFromServiceMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#46
    def build_query(variables, **kwargs); end

    # Delete all scores from a scorecard for a service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param scorecard_name [String] Name of the Scorecard
    # @param service_name [String] Name of the Service
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#27
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#9
ServiceCatalog::Client::Scorecards::DeleteScorecardFromServiceMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#12
ServiceCatalog::Client::Scorecards::DeleteScorecardFromServiceMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Delete a scorecard and all its score histories.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_mutation.rb#7
module ServiceCatalog::Client::Scorecards::DeleteScorecardMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_mutation.rb#44
    def build_query(variables, **kwargs); end

    # Delete a scorecard and all its score histories.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param name [String] The scorecard name.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_mutation.rb#25
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_mutation.rb#9
ServiceCatalog::Client::Scorecards::DeleteScorecardMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_mutation.rb#12
ServiceCatalog::Client::Scorecards::DeleteScorecardMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Look up a scorecard by name.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/find_scorecard_query.rb#7
module ServiceCatalog::Client::Scorecards::FindScorecardQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/find_scorecard_query.rb#43
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # Look up a scorecard by name.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param name [String] The scorecard's name.
    # @param detail_fragment [String] GraphQL detail fragment for the model
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/find_scorecard_query.rb#24
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/find_scorecard_query.rb#9
ServiceCatalog::Client::Scorecards::FindScorecardQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/find_scorecard_query.rb#12
ServiceCatalog::Client::Scorecards::FindScorecardQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# List scorecard summaries for a service.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecard_summaries_query.rb#7
module ServiceCatalog::Client::Scorecards::ListScorecardSummariesQuery
  class << self
    # Build the query to list scorecard summaries.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The GraphQL query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecard_summaries_query.rb#48
    def build_query(variables); end

    # List scorecard summaries for a given service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service whose scores you want to look up (exact)
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecard_summaries_query.rb#18
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecard_summaries_query.rb#9
ServiceCatalog::Client::Scorecards::ListScorecardSummariesQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# A list of scorecards.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecards_query.rb#7
module ServiceCatalog::Client::Scorecards::ListScorecardsQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecards_query.rb#59
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # A list of scorecards.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param after [String] Returns the elements in the list that come after the specified cursor.
    # @param before [String] Returns the elements in the list that come before the specified cursor.
    # @param first [Integer] Returns the first _n_ elements from the list.
    # @param last [Integer] Returns the last _n_ elements from the list.
    # @param detail_fragment [String] GraphQL detail fragment for the model
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecards_query.rb#30
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecards_query.rb#9
ServiceCatalog::Client::Scorecards::ListScorecardsQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecards_query.rb#12
ServiceCatalog::Client::Scorecards::ListScorecardsQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Update or create a scorecard.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_mutation.rb#7
module ServiceCatalog::Client::Scorecards::UpdateScorecardMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_mutation.rb#52
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # Update or create a scorecard.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param description [String] A description of the scorecard.
    # @param editors [Array] User logins who can submit scores for the scorecard.
    # @param milestones [Array] Milestones for the scorecard.
    # @param name [String] The scorecard name.
    # @param objectives [Array] Objectives for the scorecard.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_mutation.rb#33
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_mutation.rb#9
ServiceCatalog::Client::Scorecards::UpdateScorecardMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_mutation.rb#12
ServiceCatalog::Client::Scorecards::UpdateScorecardMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Update a scorecard score for a service.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_score_mutation.rb#7
module ServiceCatalog::Client::Scorecards::UpdateScorecardScoreMutation
  class << self
    # Build query for updating a scoreccard score given the input variables (in GraphQL form).
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_score_mutation.rb#43
    def build_query(variables); end

    # Update a Scorecard Score for a given service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param scorecard_name [String] The name of the scorecard
    # @param service_name [String] The name of the service to score (exact)
    # @param objective_name [String] The name of the objective
    # @param requirement_name [String] The name of the requirement
    # @param score [Integer] The new score
    # @param notes [String] Any notes for the new score
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_score_mutation.rb#23
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_score_mutation.rb#9
ServiceCatalog::Client::Scorecards::UpdateScorecardScoreMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Update a scorecard score for a service.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_scores_batch_mutation.rb#7
module ServiceCatalog::Client::Scorecards::UpdateScorecardScoresBatchMutation
  class << self
    # Build query for updating a scoreccard score given the input variables (in GraphQL form).
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @param detail_fragment [String] GraphQL detail fragment defining `RequirementScoreDetail` (optional)
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_scores_batch_mutation.rb#45
    def build_query(variables, detail_fragment: T.unsafe(nil)); end

    # Submit batch scorecard score updates.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param detail_fragment [String] GraphQL detail fragment defining `RequirementScoreDetail` (optional)
    # @param scores [Array] Array of Hash scores containing keys:
    #   - scorecard_name [String] The name of the scorecard
    #   - service_name [String] The name of the service to score (exact)
    #   - objective_name [String] The name of the objective
    #   - requirement_name [String] The name of the requirement
    #   - score [Integer] The new score
    #   - notes [String] Any notes for the new score
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_scores_batch_mutation.rb#25
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end

    # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_scores_batch_mutation.rb#66
    def prepare_batch_input(scores:); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_scores_batch_mutation.rb#9
ServiceCatalog::Client::Scorecards::UpdateScorecardScoresBatchMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# ScorecardsQueryBinder contains methods for accessing scorecards and scorecard summaries.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#58
class ServiceCatalog::Client::ScorecardsQueryBinder < ::ServiceCatalog::Client::QueryBinder
  # Submit batch scorecard score updates.
  #
  # @param context [Hash] Additional headers to add to the request (optional)
  # @param detail_fragment [String] GraphQL detail fragment defining `RequirementScoreDetail` (optional)
  # @param scores [Array] Array of Hash scores containing keys:
  #   - scorecard_name [String] The name of the scorecard
  #   - service_name [String] The name of the service to score (exact)
  #   - objective_name [String] The name of the objective
  #   - requirement_name [String] The name of the requirement
  #   - score [Integer] The new score
  #   - notes [String] Any notes for the new score
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_scores_batch_mutation.rb#93
  def batch_update_scores(**kwargs); end

  # Delete a scorecard and all its score histories.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param name [String] The scorecard name.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_mutation.rb#64
  def delete(**kwargs); end

  # Delete all scores from a scorecard for a service.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param scorecard_name [String] Name of the Scorecard
  # @param service_name [String] Name of the Service
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards/delete_scorecard_from_service_mutation.rb#67
  def delete_scorecard_from_service(**kwargs); end

  # Look up a scorecard by name.
  #
  # @param name [String] The scorecard's name.
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards/find_scorecard_query.rb#64
  def find(**kwargs); end

  # A list of scorecards.
  #
  # @param after [String] Returns the elements in the list that come after the specified cursor.
  # @param before [String] Returns the elements in the list that come before the specified cursor.
  # @param first [Integer] Returns the first _n_ elements from the list.
  # @param last [Integer] Returns the last _n_ elements from the list.
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards/list_scorecards_query.rb#89
  def list(**kwargs); end

  # List all Scorecard Summaries for a given service.
  #
  # @param service_name [String] the name of the Service
  # @return [Response] #data is populated with an Array of scorecard summaries for the service
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards_query_binder.rb#97
  def summaries(**kwargs); end

  # Update or create a scorecard.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param description [String] A description of the scorecard.
  # @param editors [Array] User logins who can submit scores for the scorecard.
  # @param milestones [Array] Milestones for the scorecard.
  # @param name [String] The scorecard name.
  # @param objectives [Array] Objectives for the scorecard.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards/update_scorecard_mutation.rb#80
  def update(**kwargs); end

  # Update a score for a scorecard on a given service.
  #
  # @param context [Hash] (optional) Added context to add to the request as headers
  # @param scorecard_name [String] The name of the scorecard
  # @param service_name [String] The name of the service to score
  # @param objective_name [String] The name of the objective
  # @param requirement_name [String] The name of the requirement
  # @param score [Integer] The new score
  # @param notes [String] Any notes for the new score
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/scorecards_query_binder.rb#112
  def update_score(**kwargs); end
end

# A default RequirementScoreDetail fragment.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards_query_binder.rb#71
ServiceCatalog::Client::ScorecardsQueryBinder::REQUIREMENT_SCORE_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# A default scorecard detail fragment.
#
# source://service-catalog-client//lib/service-catalog/client/scorecards_query_binder.rb#11
ServiceCatalog::Client::ScorecardsQueryBinder::SCORECARD_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# source://service-catalog-client//lib/service-catalog/client/services/add_service_dependency_mutation.rb#5
module ServiceCatalog::Client::Services; end

# Add a dependency for a given service.
#
# source://service-catalog-client//lib/service-catalog/client/services/add_service_dependency_mutation.rb#7
module ServiceCatalog::Client::Services::AddServiceDependencyMutation
  class << self
    # Build query for adding a service dependency given the input variables (in GraphQL form).
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/add_service_dependency_mutation.rb#38
    def build_query(variables); end

    # Add a dependency for a given service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service that requires the dependency (exact)
    # @param dependency_name [String] The name of the service that provides the dependency (exact)
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/add_service_dependency_mutation.rb#19
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/add_service_dependency_mutation.rb#9
ServiceCatalog::Client::Services::AddServiceDependencyMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Execute the createServiceMetadataValue Mutation.
#
# source://service-catalog-client//lib/service-catalog/client/services/create_service_metadata_value_mutation.rb#7
module ServiceCatalog::Client::Services::CreateServiceMetadataValueMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/create_service_metadata_value_mutation.rb#48
    def build_query(variables, **kwargs); end

    # Execute the createServiceMetadataValue Mutation.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param service_metadata_kind_name [String]
    # @param service_name [String]
    # @param value [String]
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/create_service_metadata_value_mutation.rb#29
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/create_service_metadata_value_mutation.rb#9
ServiceCatalog::Client::Services::CreateServiceMetadataValueMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/services/create_service_metadata_value_mutation.rb#12
ServiceCatalog::Client::Services::CreateServiceMetadataValueMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Delete a service link.
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_link_mutation.rb#7
module ServiceCatalog::Client::Services::DeleteServiceLinkMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/delete_service_link_mutation.rb#46
    def build_query(variables, **kwargs); end

    # Delete a service link.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param name [String] The title of the link
    # @param service_name [String] The name of the service
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/delete_service_link_mutation.rb#27
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_link_mutation.rb#9
ServiceCatalog::Client::Services::DeleteServiceLinkMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_link_mutation.rb#12
ServiceCatalog::Client::Services::DeleteServiceLinkMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Execute the deleteServiceMetadataValue Mutation.
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_metadata_value_mutation.rb#7
module ServiceCatalog::Client::Services::DeleteServiceMetadataValueMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/delete_service_metadata_value_mutation.rb#48
    def build_query(variables, **kwargs); end

    # Execute the deleteServiceMetadataValue Mutation.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param service_metadata_kind_name [String]
    # @param service_name [String]
    # @param value [String]
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/delete_service_metadata_value_mutation.rb#29
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_metadata_value_mutation.rb#9
ServiceCatalog::Client::Services::DeleteServiceMetadataValueMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_metadata_value_mutation.rb#12
ServiceCatalog::Client::Services::DeleteServiceMetadataValueMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Delete a service.
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_mutation.rb#7
module ServiceCatalog::Client::Services::DeleteServiceMutation
  class << self
    # Build query for removing a service dependency given the input variables (in GraphQL form).
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/delete_service_mutation.rb#37
    def build_query(variables); end

    # Delete a service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service to delete
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/delete_service_mutation.rb#18
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/delete_service_mutation.rb#9
ServiceCatalog::Client::Services::DeleteServiceMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Find a service by name.
#
# source://service-catalog-client//lib/service-catalog/client/services/find_service_query.rb#7
module ServiceCatalog::Client::Services::FindServiceQuery
  class << self
    # Build the query to find a service.
    #
    # Returns the query given the kwargs.
    #
    # @param variables - Hash of variables to send (camelCased keys)
    # @param service_detail_fragment [optional] - a String containing a GraphQL fragment called `ServiceDetail`
    #
    # source://service-catalog-client//lib/service-catalog/client/services/find_service_query.rb#39
    def build_query(variables, service_detail_fragment: T.unsafe(nil)); end

    # Execute the Find Service query to fetch a specific service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param name [String] The name of the service to search for (exact)
    # @param service_detail_fragment [optional] - a String containing a GraphQL fragment called `ServiceDetail`
    # @return Hash with "errors" and "services" keys.
    #
    # source://service-catalog-client//lib/service-catalog/client/services/find_service_query.rb#19
    def execute(client:, name:, service_detail_fragment: T.unsafe(nil), context: T.unsafe(nil)); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/find_service_query.rb#9
ServiceCatalog::Client::Services::FindServiceQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# List all service dependencies for a service.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_service_dependencies_query.rb#7
module ServiceCatalog::Client::Services::ListServiceDependenciesQuery
  class << self
    # Build the query to list service dependencies with pagination.
    #
    # @return [String] the GraphQL query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_service_dependencies_query.rb#49
    def build_query; end

    # Execute the List Service Dependencies query to list all service dependencies for a service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service whose dependencies you're requesting (exact)
    # @return Hash with "errors" and "services" keys.
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_service_dependencies_query.rb#18
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_service_dependencies_query.rb#9
ServiceCatalog::Client::Services::ListServiceDependenciesQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# List all services meeting optional criteria.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_service_links_query.rb#7
module ServiceCatalog::Client::Services::ListServiceLinksQuery
  class << self
    # Build the query to list service links with pagination.
    #
    # @param service_link_detail_fragment [String] (optional) A GraphQL fragment defining 'ServiceLinkDetail' to fetch the link fields desired
    # @return [String] the GraphQL query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_service_links_query.rb#48
    def build_query(service_link_detail_fragment: T.unsafe(nil)); end

    # Execute the List Service Links query to list all service links for a service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service whose links you're requesting (exact)
    # @param service_link_detail_fragment [String] (optional) A GraphQL fragment defining 'ServiceLinkDetail' to fetch the link fields desired
    # @return Hash with "errors" and "services" keys.
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_service_links_query.rb#19
    def execute(client:, context: T.unsafe(nil), service_link_detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_service_links_query.rb#9
ServiceCatalog::Client::Services::ListServiceLinksQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# List all service metadata values meeting optional criteria.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_service_metadata_values_query.rb#7
module ServiceCatalog::Client::Services::ListServiceMetadataValuesQuery
  class << self
    # Build the query to list service links with pagination.
    #
    # @param service_metadata_value_detail_fragment [String] (optional) A GraphQL fragment defining 'ServiceMetadataValueDetail' to fetch the metadata value fields desired
    # @return [String] the GraphQL query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_service_metadata_values_query.rb#55
    def build_query(service_metadata_value_detail_fragment: T.unsafe(nil)); end

    # Execute the List Service Metadata Values query to list all service metadata values for a service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service whose metadata values you're requesting (exact)
    # @param service_metadata_kind_names [Array<String>] A list of metadata kinds to retrieve. If set to nil, metadata values of any kind are returned. (optional)
    # @param service_metadata_value_detail_fragment [String] (optional) A GraphQL fragment defining 'ServiceMetadataValueDetail' to fetch the metadata value fields desired
    # @return Hash with "errors" and "services" keys.
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_service_metadata_values_query.rb#20
    def execute(client:, context: T.unsafe(nil), service_metadata_value_detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_service_metadata_values_query.rb#9
ServiceCatalog::Client::Services::ListServiceMetadataValuesQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# A list of services.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#7
module ServiceCatalog::Client::Services::ListServicesQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#116
    def build_query(variables, service_detail_fragment: T.unsafe(nil), **kwargs); end

    # Convert deprecated arguments to a search query.
    #
    # @param kwargs [Hash] Hash of all kwargs given to the #execute method.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#92
    def convert_kwargs_to_service_filter_query(kwargs); end

    # A list of services.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param after [String] Returns the elements in the list that come after the specified cursor.
    # @param before [String] Returns the elements in the list that come before the specified cursor.
    # @param filter_id [String] [deprecated] A ServiceFilter ID to filter services with. Overrides `query` argument.
    # @param filter_selection [ServiceFilterSelectionInput] A selection for filtering services.
    # @param first [Integer] Returns the first _n_ elements from the list.
    # @param has_maintainer [Boolean] [deprecated] Use `query` argument instead. For example: `maintainer.active:true` or `maintainer.active:false`
    # @param has_slos [Boolean] [deprecated] This filter is deprecated. Reach out to #service-catalog if this impacts your workflow.
    # @param kind [String] [deprecated] Use `query` argument instead. For example: `kind:logical`
    # @param last [Integer] Returns the last _n_ elements from the list.
    # @param name [String] [deprecated] Use `query` argument instead. For example: `name:test-service`
    # @param name_with_owner [String] [deprecated] This filter is deprecated. Reach out to #service-catalog if this impacts your workflow.
    # @param offset [Integer] The number of records to skip when returning results. Useful for pagination.
    # @param query [String] [deprecated] A search query to filter services. For example: `kind: logical`
    # @param search [String] [deprecated] Use `query` argument instead.
    # @param service_detail_fragment [String] GraphQL detail fragment for the model, defining 'ServiceDetail'
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#61
    def execute(client:, context: T.unsafe(nil), service_detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# Convert given query arguments to a search query by invoking its lambda value.
# Each lambda value takes the arg name and its passed-in value to the method.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#31
ServiceCatalog::Client::Services::ListServicesQuery::DEPRECATED_QUERY_ARGUMENTS = T.let(T.unsafe(nil), Hash)

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#9
ServiceCatalog::Client::Services::ListServicesQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#12
ServiceCatalog::Client::Services::ListServicesQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# List all support levels for a service.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_support_levels_query.rb#7
module ServiceCatalog::Client::Services::ListSupportLevelsQuery
  class << self
    # Build the query to list support levels with pagination.
    #
    # @return [String] the GraphQL query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_support_levels_query.rb#49
    def build_query; end

    # Execute the List Service Support Levels query to list all support levels for a service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service whose support levels you're requesting (exact)
    # @return Hash with "errors" and "data" keys.
    #
    # source://service-catalog-client//lib/service-catalog/client/services/list_support_levels_query.rb#18
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/list_support_levels_query.rb#9
ServiceCatalog::Client::Services::ListSupportLevelsQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Remove a dependency from a given service.
#
# source://service-catalog-client//lib/service-catalog/client/services/remove_service_dependency_mutation.rb#7
module ServiceCatalog::Client::Services::RemoveServiceDependencyMutation
  class << self
    # Build query for removing a service dependency given the input variables (in GraphQL form).
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/remove_service_dependency_mutation.rb#37
    def build_query(variables); end

    # Remove a dependency from a given service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_dependency_id [String] The ID of the service dependency to remove
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/remove_service_dependency_mutation.rb#18
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/remove_service_dependency_mutation.rb#9
ServiceCatalog::Client::Services::RemoveServiceDependencyMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Remove a support level from a given service.
#
# source://service-catalog-client//lib/service-catalog/client/services/remove_support_level_mutation.rb#7
module ServiceCatalog::Client::Services::RemoveSupportLevelMutation
  class << self
    # Build query for removing a support level given the input variables (in GraphQL form).
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/remove_support_level_mutation.rb#38
    def build_query(variables); end

    # Remove a support level from a given service.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param service_name [String] The name of the service whose support level you're removing (exact)
    # @param level [String] The level attribute of the support level you're removing e.g. sev1, sev2, sev3
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/remove_support_level_mutation.rb#19
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/remove_support_level_mutation.rb#9
ServiceCatalog::Client::Services::RemoveSupportLevelMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Search for services.
#
# source://service-catalog-client//lib/service-catalog/client/services/search_services_query.rb#7
module ServiceCatalog::Client::Services::SearchServicesQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/search_services_query.rb#61
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # Search for services.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param after [String] Returns the elements in the list that come after the specified cursor.
    # @param before [String] Returns the elements in the list that come before the specified cursor.
    # @param first [Integer] Returns the first _n_ elements from the list.
    # @param last [Integer] Returns the last _n_ elements from the list.
    # @param query [String] Search query
    # @param detail_fragment [String] GraphQL detail fragment for the model
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/search_services_query.rb#32
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/search_services_query.rb#9
ServiceCatalog::Client::Services::SearchServicesQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/services/search_services_query.rb#12
ServiceCatalog::Client::Services::SearchServicesQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Update or create a service link.
#
# source://service-catalog-client//lib/service-catalog/client/services/update_service_link_mutation.rb#7
module ServiceCatalog::Client::Services::UpdateServiceLinkMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/update_service_link_mutation.rb#52
    def build_query(variables, **kwargs); end

    # Update or create a service link.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param description [String] The description of the link
    # @param kind [String] The kind of the link
    # @param name [String] The title of the link
    # @param service_name [String] The name of the service
    # @param url [String] The link URL
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/update_service_link_mutation.rb#33
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/update_service_link_mutation.rb#9
ServiceCatalog::Client::Services::UpdateServiceLinkMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/services/update_service_link_mutation.rb#12
ServiceCatalog::Client::Services::UpdateServiceLinkMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Create or update a service.
#
# source://service-catalog-client//lib/service-catalog/client/services/update_service_mutation.rb#7
module ServiceCatalog::Client::Services::UpdateServiceMutation
  class << self
    # Build query for updating a service given the input variables (in GraphQL form).
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/update_service_mutation.rb#62
    def build_query(variables, service_detail_fragment: T.unsafe(nil)); end

    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/update_service_mutation.rb#43
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/update_service_mutation.rb#9
ServiceCatalog::Client::Services::UpdateServiceMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for all the arguments in this
#
# source://service-catalog-client//lib/service-catalog/client/services/update_service_mutation.rb#12
ServiceCatalog::Client::Services::UpdateServiceMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Update a support level for a given service. If it does not exist, it will be created.
#
# source://service-catalog-client//lib/service-catalog/client/services/update_support_level_mutation.rb#7
module ServiceCatalog::Client::Services::UpdateSupportLevelMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/services/update_support_level_mutation.rb#54
    def build_query(variables, **kwargs); end

    # Update a support level for a given service. If it does not exist, it will be created.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param issue [String] The GitHub issue URL associated with this Service
    # @param level [String] The severity of a support request
    # @param pagerduty [String] The Pagerduty escalation policy URL associated with this Service
    # @param service_name [String] The name of the service whose support level you're removing (exact)
    # @param slack [String] The Slack channel associated with this Service
    # @param tta [String] How long to wait for an acknowledgement
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/services/update_support_level_mutation.rb#35
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/services/update_support_level_mutation.rb#9
ServiceCatalog::Client::Services::UpdateSupportLevelMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/services/update_support_level_mutation.rb#12
ServiceCatalog::Client::Services::UpdateSupportLevelMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# ServicesQueryBinder contains methods for accessing services.
#
# source://service-catalog-client//lib/service-catalog/client/services/create_service_metadata_value_mutation.rb#60
class ServiceCatalog::Client::ServicesQueryBinder < ::ServiceCatalog::Client::QueryBinder
  # Add a dependency for a given service.
  #
  # @param client [Client] The client to use to query
  # @param context [Hash] Added context to add to the request as headers
  # @param service_name [String] The name of the service that requires the dependency
  # @param dependency_name [String] The name of the service that provides the dependency
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#143
  def add_service_dependency(**kwargs); end

  # Execute the createServiceMetadataValue Mutation.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param service_metadata_kind_name [String]
  # @param service_name [String]
  # @param value [String]
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services/create_service_metadata_value_mutation.rb#70
  def create_service_metadata_value(**kwargs); end

  # Delete a service link.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param name [String] The title of the link
  # @param service_name [String] The name of the service
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services/delete_service_link_mutation.rb#67
  def delete_link(**kwargs); end

  # Delete a service.
  #
  # @param client [Client] The client to use to query
  # @param context [Hash] Added context to add to the request as headers
  # @param service_name [String] The name of the service to delete (exact)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#185
  def delete_service(**kwargs); end

  # Execute the deleteServiceMetadataValue Mutation.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param service_metadata_kind_name [String]
  # @param service_name [String]
  # @param value [String]
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services/delete_service_metadata_value_mutation.rb#70
  def delete_service_metadata_value(**kwargs); end

  # List all Service Dependencies for a given Service.
  #
  # @param service_name [String] The name of the service (exact)
  # @param context [Hash] (optional) Optional headers to add to the request
  # @return [Response] All service dependencies for the service
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#97
  def dependencies(service_name:, context: T.unsafe(nil)); end

  # Find a single Service.
  #
  # @param name [String] The name of the service (exact)
  # @param context [Hash] (optional) Optional headers to add to the request
  # @return [Response] The matching service.
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#87
  def find(**kwargs); end

  # List all Service Links for a given Service.
  #
  # @param service_name [String] The name of the service (exact)
  # @param context [Hash] (optional) Optional headers to add to the request
  # @return [Response] All service links for the service
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#107
  def links(service_name:, context: T.unsafe(nil)); end

  # A list of services.
  #
  # @param after [String] Returns the elements in the list that come after the specified cursor.
  # @param before [String] Returns the elements in the list that come before the specified cursor.
  # @param filter_id [String] [deprecated] A ServiceFilter ID to filter services with. Overrides `query` argument.
  # @param filter_selection [ServiceFilterSelectionInput] A selection for filtering services.
  # @param first [Integer] Returns the first _n_ elements from the list.
  # @param has_maintainer [Boolean] [deprecated] Use `query` argument instead. For example: `maintainer.active:true` or `maintainer.active:false`
  # @param has_slos [Boolean] [deprecated] This filter is deprecated. Reach out to #service-catalog if this impacts your workflow.
  # @param kind [String] [deprecated] Use `query` argument instead. For example: `kind:logical`
  # @param last [Integer] Returns the last _n_ elements from the list.
  # @param name [String] [deprecated] Use `query` argument instead. For example: `name:test-service`
  # @param name_with_owner [String] [deprecated] This filter is deprecated. Reach out to #service-catalog if this impacts your workflow.
  # @param offset [Integer] The number of records to skip when returning results. Useful for pagination.
  # @param query [String] [deprecated] A search query to filter services. For example: `kind: logical`
  # @param search [String] [deprecated] Use `query` argument instead.
  # @param service_detail_fragment [String] GraphQL detail fragment for the model, defining 'ServiceDetail'
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services/list_services_query.rb#156
  def list(**kwargs); end

  # Remove a dependency from given service.
  #
  # @param client [Client] The client to use to query
  # @param context [Hash] Added context to add to the request as headers
  # @param service_dependency_id [String] The ID of the service dependency to remove
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#154
  def remove_service_dependency(**kwargs); end

  # Remove a support level from given service.
  #
  # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
  # @param context [Hash] Additional headers to add to the request (optional)
  # @param service_name [String] The name of the service whose support level you're removing (exact)
  # @param level [String] The level attribute of the support level you're removing e.g. sev1, sev2, sev3
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#197
  def remove_support_level(**kwargs); end

  # Search for services.
  #
  # @param after [String] Returns the elements in the list that come after the specified cursor.
  # @param before [String] Returns the elements in the list that come before the specified cursor.
  # @param first [Integer] Returns the first _n_ elements from the list.
  # @param last [Integer] Returns the last _n_ elements from the list.
  # @param query [String] Search query
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services/search_services_query.rb#98
  def search(**kwargs); end

  # List all Service Metadata Values for a given Service.
  #
  # @param context [Hash] Additional headers to add to the request (optional)
  # @param service_name [String] The name of the service whose metadata values you're requesting (exact)
  # @param service_metadata_kind_names [Array<String>] A list of metadata kinds to retrieve. If set to nil, metadata values of any kind are returned. (optional)
  # @param service_metadata_value_detail_fragment [String] (optional) A GraphQL fragment defining 'ServiceMetadataValueDetail' to fetch the metadata value fields desired
  # @return [Response] All support levels for the service
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#119
  def service_metadata_values(service_name:, service_metadata_kind_names: T.unsafe(nil), context: T.unsafe(nil)); end

  # List all Support Levels for a given Service.
  #
  # @param service_name [String] The name of the service (exact)
  # @param context [Hash] (optional) Optional headers to add to the request
  # @return [Response] All support levels for the service
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#129
  def support_levels(service_name:, context: T.unsafe(nil)); end

  # Update or create a service link.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param description [String] The description of the link
  # @param kind [String] The kind of the link
  # @param name [String] The title of the link
  # @param service_name [String] The name of the service
  # @param url [String] The link URL
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services/update_service_link_mutation.rb#84
  def update_link(**kwargs); end

  # Create or update a service.
  #
  # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
  # @param context [Hash] Additional headers to add to the request (optional)
  # @param name [String] The name of the service (no spaces)
  # @param long_name [String] The friendly name of the service (Title Case)
  # @param description [String] A sentence that describes what the service does.
  # @param kind [String] A sentence that describes what the service does.
  # @param repository_url [String] A link to the service's project or code repository.
  # @param qos [String] The Quality of Service provided (e.g. critical, experimental, deprecated)
  # @param owners [ServiceOwner] A list of ServiceOwner objects describing an owner and their relationship to the service. {ownerName: "hubot", kind: "maintainer"}
  # @param source_kind [String] The source responsible for populating this information (e.g. a background job, web)
  # @param source_last_updated [Time] The time the ownership source data last changed.
  # @param source_url [String] A URL pointing to the source of the ownership information.
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#174
  def update_service(**kwargs); end

  # Update a support level for a given service. If it does not exist, it will be created.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param issue [String] The GitHub issue URL associated with this Service
  # @param level [String] The severity of a support request
  # @param pagerduty [String] The Pagerduty escalation policy URL associated with this Service
  # @param service_name [String] The name of the service whose support level you're removing (exact)
  # @param slack [String] The Slack channel associated with this Service
  # @param tta [String] How long to wait for an acknowledgement
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/services/update_support_level_mutation.rb#87
  def update_support_level(**kwargs); end
end

# Default service detail fragment. This defines what fields to return for the service.
#
# @return [String]
#
# source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#12
ServiceCatalog::Client::ServicesQueryBinder::SERVICE_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# Default service link detail fragment. This defines what fields to return for the ServiceLink.
#
# @return [String]
#
# source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#58
ServiceCatalog::Client::ServicesQueryBinder::SERVICE_LINK_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# source://service-catalog-client//lib/service-catalog/client/services_query_binder.rb#69
ServiceCatalog::Client::ServicesQueryBinder::SERVICE_METADATA_VALUE_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#5
module ServiceCatalog::Client::Slos; end

# Delete an SLO.
#
# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#7
module ServiceCatalog::Client::Slos::DeleteSloMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#46
    def build_query(variables, **kwargs); end

    # Delete an SLO.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param service_name [String] The name of the service to which the SLO belongs.
    # @param slo_name [String] The name of the SLO.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#27
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#9
ServiceCatalog::Client::Slos::DeleteSloMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for all the arguments in this
#
# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#12
ServiceCatalog::Client::Slos::DeleteSloMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Execute the deleteSloSummary Mutation.
#
# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_summary_mutation.rb#7
module ServiceCatalog::Client::Slos::DeleteSloSummaryMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_summary_mutation.rb#44
    def build_query(variables, **kwargs); end

    # Execute the deleteSloSummary Mutation.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param id [String] The SLO summary ID to remove.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_summary_mutation.rb#25
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_summary_mutation.rb#9
ServiceCatalog::Client::Slos::DeleteSloSummaryMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for all the arguments in this
#
# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_summary_mutation.rb#12
ServiceCatalog::Client::Slos::DeleteSloSummaryMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Look up an SLO by service & name.
#
# source://service-catalog-client//lib/service-catalog/client/slos/find_slo_query.rb#7
module ServiceCatalog::Client::Slos::FindSloQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/find_slo_query.rb#45
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # Look up an SLO by service & name.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param name [String] The SLO's name
    # @param service_name [String] The SLO's service name
    # @param detail_fragment [String] GraphQL detail fragment for the model
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/find_slo_query.rb#26
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/slos/find_slo_query.rb#9
ServiceCatalog::Client::Slos::FindSloQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/slos/find_slo_query.rb#12
ServiceCatalog::Client::Slos::FindSloQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# A list of reporting windows that describe if the SLO was met
#
# source://service-catalog-client//lib/service-catalog/client/slos/list_slo_summaries.rb#7
module ServiceCatalog::Client::Slos::ListSloSummariesQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/list_slo_summaries.rb#81
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # A list of reporting windows that describe if the SLO was met
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param after [String] Returns the elements in the list that come after the specified cursor.
    # @param before [String] Returns the elements in the list that come before the specified cursor.
    # @param first [Integer] Returns the first _n_ elements from the list.
    # @param last [Integer] Returns the last _n_ elements from the list.
    # @param maximum_end_time [Time] The last instant for SLO summaries to be included.
    # @param minimum_start_time [Time] The first instant for SLO summaries to be included.
    # @param service_name [String] The name of the service the SLO belongs to.
    # @param name [String] The name of the SLO
    # @param detail_fragment [String] GraphQL detail fragment for the model
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/list_slo_summaries.rb#38
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/slos/list_slo_summaries.rb#9
ServiceCatalog::Client::Slos::ListSloSummariesQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# Variable keys which are passed to the `slo` field instead of the `sloSummaries` field.
#
# source://service-catalog-client//lib/service-catalog/client/slos/list_slo_summaries.rb#74
ServiceCatalog::Client::Slos::ListSloSummariesQuery::NON_SUMMARY_VARIABLE_KEYS = T.let(T.unsafe(nil), Array)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/slos/list_slo_summaries.rb#12
ServiceCatalog::Client::Slos::ListSloSummariesQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# A list of SLOs.
#
# source://service-catalog-client//lib/service-catalog/client/slos/list_slos_query.rb#7
module ServiceCatalog::Client::Slos::ListSlosQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/list_slos_query.rb#61
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # A list of SLOs.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param after [String] Returns the elements in the list that come after the specified cursor.
    # @param before [String] Returns the elements in the list that come before the specified cursor.
    # @param first [Integer] Returns the first _n_ elements from the list.
    # @param last [Integer] Returns the last _n_ elements from the list.
    # @param provider [String] Filter returned SLOs by provider name.
    # @param detail_fragment [String] GraphQL detail fragment for the model
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/list_slos_query.rb#32
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/slos/list_slos_query.rb#9
ServiceCatalog::Client::Slos::ListSlosQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/slos/list_slos_query.rb#12
ServiceCatalog::Client::Slos::ListSlosQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Update an SLO's metadata.
#
# source://service-catalog-client//lib/service-catalog/client/slos/update_slo_mutation.rb#7
module ServiceCatalog::Client::Slos::UpdateSloMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/update_slo_mutation.rb#54
    def build_query(variables, **kwargs); end

    # Update an SLO's metadata.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param name [String] The name of the SLO.
    # @param percent_target [Float] The objective percentage the SLO should be green.
    # @param playbook_url [String] The URL to a document describing how to understand and remediate this SLO.
    # @param provider [String] The provider for the SLO.
    # @param provider_url [String] The HTML URL for the SLO.
    # @param service_name [String] The Service this SLO belongs to.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/update_slo_mutation.rb#35
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/slos/update_slo_mutation.rb#9
ServiceCatalog::Client::Slos::UpdateSloMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/slos/update_slo_mutation.rb#12
ServiceCatalog::Client::Slos::UpdateSloMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Execute the updateSloSummary Mutation.
#
# source://service-catalog-client//lib/service-catalog/client/slos/update_slo_summary_mutation.rb#7
module ServiceCatalog::Client::Slos::UpdateSloSummaryMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/update_slo_summary_mutation.rb#56
    def build_query(variables, **kwargs); end

    # Execute the updateSloSummary Mutation.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param end_time [Time] The end time for the summary.
    # @param percent_met13w [Float] The percent this SLO was met in a 13-week period.
    # @param percent_met24h [Float] The percent this SLO was met in a 24-hour period.
    # @param percent_met28d [Float] The percent this SLO was met in a 28-day period.
    # @param service_name [String] The Service this SLO summary belongs to.
    # @param slo_name [String] The SLO this summary belongs to.
    # @param start_time [Time] The start time for the summary.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/slos/update_slo_summary_mutation.rb#37
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/slos/update_slo_summary_mutation.rb#9
ServiceCatalog::Client::Slos::UpdateSloSummaryMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for all the arguments in this
#
# source://service-catalog-client//lib/service-catalog/client/slos/update_slo_summary_mutation.rb#12
ServiceCatalog::Client::Slos::UpdateSloSummaryMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# SlosQueryBinder contains methods for accessing slos.
#
# source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#58
class ServiceCatalog::Client::SlosQueryBinder < ::ServiceCatalog::Client::QueryBinder
  # Delete an SLO.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param service_name [String] The name of the service to which the SLO belongs.
  # @param slo_name [String] The name of the SLO.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_mutation.rb#67
  def delete(**kwargs); end

  # Execute the deleteSloSummary Mutation.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param id [String] The SLO summary ID to remove.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/slos/delete_slo_summary_mutation.rb#64
  def delete_slo_summary(**kwargs); end

  # Look up an SLO by service & name.
  #
  # @param name [String] The SLO's name
  # @param service_name [String] The SLO's service name
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/slos/find_slo_query.rb#69
  def find(**kwargs); end

  # A list of SLOs.
  #
  # @param after [String] Returns the elements in the list that come after the specified cursor.
  # @param before [String] Returns the elements in the list that come before the specified cursor.
  # @param first [Integer] Returns the first _n_ elements from the list.
  # @param last [Integer] Returns the last _n_ elements from the list.
  # @param provider [String] Filter returned SLOs by provider name.
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/slos/list_slos_query.rb#92
  def list(**kwargs); end

  # A list of reporting windows that describe if the SLO was met
  #
  # @param after [String] Returns the elements in the list that come after the specified cursor.
  # @param before [String] Returns the elements in the list that come before the specified cursor.
  # @param first [Integer] Returns the first _n_ elements from the list.
  # @param last [Integer] Returns the last _n_ elements from the list.
  # @param maximum_end_time [Time] The last instant for SLO summaries to be included.
  # @param minimum_start_time [Time] The first instant for SLO summaries to be included.
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/slos/list_slo_summaries.rb#119
  def list_slo_summaries(**kwargs); end

  # Update an SLO's metadata.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param name [String] The name of the SLO.
  # @param percent_target [Float] The objective percentage the SLO should be green.
  # @param playbook_url [String] The URL to a document describing how to understand and remediate this SLO.
  # @param provider [String] The provider for the SLO.
  # @param provider_url [String] The HTML URL for the SLO.
  # @param service_name [String] The Service this SLO belongs to.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/slos/update_slo_mutation.rb#89
  def update(**kwargs); end

  # Execute the updateSloSummary Mutation.
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param end_time [Time] The end time for the summary.
  # @param percent_met13w [Float] The percent this SLO was met in a 13-week period.
  # @param percent_met24h [Float] The percent this SLO was met in a 24-hour period.
  # @param percent_met28d [Float] The percent this SLO was met in a 28-day period.
  # @param service_name [String] The Service this SLO summary belongs to.
  # @param slo_name [String] The SLO this summary belongs to.
  # @param start_time [Time] The start time for the summary.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/slos/update_slo_summary_mutation.rb#82
  def update_slo_summary(**kwargs); end
end

# source://service-catalog-client//lib/service-catalog/client/slos_query_binder.rb#10
ServiceCatalog::Client::SlosQueryBinder::SLO_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# source://service-catalog-client//lib/service-catalog/client/slos_query_binder.rb#24
ServiceCatalog::Client::SlosQueryBinder::SLO_SUMMARY_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# source://service-catalog-client//lib/service-catalog/client/task_locks/acquire_task_lock_mutation.rb#5
module ServiceCatalog::Client::TaskLocks; end

# Acquire a task lock to prevent concurrent operations between discrete processes.
#
# source://service-catalog-client//lib/service-catalog/client/task_locks/acquire_task_lock_mutation.rb#7
module ServiceCatalog::Client::TaskLocks::AcquireTaskLockMutation
  class << self
    # Build query for acquiring a task lock.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/task_locks/acquire_task_lock_mutation.rb#37
    def build_query(variables); end

    # Acquire a task lock.
    #
    # @param name [String] The lock name
    # @param ttl [Integer] How long the lock should be live for
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/task_locks/acquire_task_lock_mutation.rb#18
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# @return [String]
#
# source://service-catalog-client//lib/service-catalog/client/task_locks/acquire_task_lock_mutation.rb#10
ServiceCatalog::Client::TaskLocks::AcquireTaskLockMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# TaskLocksQueryBinder contains methods for accessing task locks.
#
# source://service-catalog-client//lib/service-catalog/client/task_locks_query_binder.rb#9
class ServiceCatalog::Client::TaskLocksQueryBinder < ::ServiceCatalog::Client::QueryBinder
  # Acquire a task lock.
  #
  # @param name [String] The name, or key, of the task lock.
  # @param ttl [Integer] The number of seconds until the lock should be auto-released.
  # @return [Response] The task lock. Access via +Response#data#task_lock+.
  #
  # source://service-catalog-client//lib/service-catalog/client/task_locks_query_binder.rb#17
  def acquire(**kwargs); end
end

# source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#5
module ServiceCatalog::Client::Users; end

# Create a service filter
#
# source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#7
module ServiceCatalog::Client::Users::CreateServiceFilterMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#48
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # Create a service filter
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param name [String] A name for the filter.
    # @param public [Boolean] Public filters can be viewed and modified by other users.
    # @param query [String] The service filter query.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#29
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#9
ServiceCatalog::Client::Users::CreateServiceFilterMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#12
ServiceCatalog::Client::Users::CreateServiceFilterMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# Delete a service filter
#
# source://service-catalog-client//lib/service-catalog/client/users/delete_service_filter_mutation.rb#7
module ServiceCatalog::Client::Users::DeleteServiceFilterMutation
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/users/delete_service_filter_mutation.rb#44
    def build_query(variables, **kwargs); end

    # Delete a service filter
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
    # @param service_filter_id [String] The `id` of the service filter to delete.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/users/delete_service_filter_mutation.rb#25
    def execute(client:, context: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/users/delete_service_filter_mutation.rb#9
ServiceCatalog::Client::Users::DeleteServiceFilterMutation::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/users/delete_service_filter_mutation.rb#12
ServiceCatalog::Client::Users::DeleteServiceFilterMutation::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# List service filters for the viewer.
#
# source://service-catalog-client//lib/service-catalog/client/users/list_service_filters_query.rb#7
module ServiceCatalog::Client::Users::ListServiceFiltersQuery
  class << self
    # Build query for this query.
    #
    # @param variables [Hash] Input variables in GraphQL variable format as keys.
    # @return [String] The mutation query
    #
    # source://service-catalog-client//lib/service-catalog/client/users/list_service_filters_query.rb#61
    def build_query(variables, detail_fragment: T.unsafe(nil), **kwargs); end

    # List service filters for viewer.
    #
    # @param client [ServiceCatalog::Client] The ServiceCatalog::Client
    # @param context [Hash] Additional headers to add to the request (optional)
    # @param after [String] Returns the elements in the list that come after the specified cursor.
    # @param before [String] Returns the elements in the list that come before the specified cursor.
    # @param first [Integer] Returns the first _n_ elements from the list.
    # @param last [Integer] Returns the last _n_ elements from the list.
    # @param include_public [Boolean] Include filters shared by other users.
    # @param detail_fragment [String] GraphQL detail fragment for the model.
    # @return [Hash]
    #
    # source://service-catalog-client//lib/service-catalog/client/users/list_service_filters_query.rb#32
    def execute(client:, context: T.unsafe(nil), detail_fragment: T.unsafe(nil), **kwargs); end
  end
end

# The instrumentation key for this query used by ActiveSupport::Notifications.
#
# source://service-catalog-client//lib/service-catalog/client/users/list_service_filters_query.rb#9
ServiceCatalog::Client::Users::ListServiceFiltersQuery::INSTRUMENTATION_KEY = T.let(T.unsafe(nil), String)

# GraphQL types for the known GraphQL arguments
#
# source://service-catalog-client//lib/service-catalog/client/users/list_service_filters_query.rb#12
ServiceCatalog::Client::Users::ListServiceFiltersQuery::VARIABLE_GRAPHQL_TYPES = T.let(T.unsafe(nil), Hash)

# UsersQueryBinder contains methods for accessing user-related resources.
#
# source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#64
class ServiceCatalog::Client::UsersQueryBinder < ::ServiceCatalog::Client::QueryBinder
  # Create a service filter
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param name [String] A name for the filter.
  # @param public [Boolean] Public filters can be viewed and modified by other users.
  # @param query [String] The service filter query.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/users/create_service_filter_mutation.rb#74
  def create_service_filter(**kwargs); end

  # Delete a service filter
  #
  # @param client_mutation_id [String] A unique identifier for the client performing the mutation.
  # @param service_filter_id [String] The `id` of the service filter to delete.
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/users/delete_service_filter_mutation.rb#64
  def delete_service_filter(**kwargs); end

  # List service filters for the viewer.
  #
  # @param after [String] Returns the elements in the list that come after the specified cursor.
  # @param before [String] Returns the elements in the list that come before the specified cursor.
  # @param first [Integer] Returns the first _n_ elements from the list.
  # @param last [Integer] Returns the last _n_ elements from the list.
  # @param include_public [Boolean] Include filters shared by other users.
  # @param detail_fragment [String] GraphQL detail fragment for the model
  # @param context [Hash] Additional headers to add to the request (optional)
  # @return [Response]
  #
  # source://service-catalog-client//lib/service-catalog/client/users/list_service_filters_query.rb#97
  def service_filters(**kwargs); end
end

# Default service filter detail fragment.
#
# @return [String]
#
# source://service-catalog-client//lib/service-catalog/client/users_query_binder.rb#12
ServiceCatalog::Client::UsersQueryBinder::SERVICE_FILTER_DETAIL_FRAGMENT = T.let(T.unsafe(nil), String)

# Current gem version.
#
# @return [String] Current gem version in SemVer notation.
#
# source://service-catalog-client//lib/service-catalog/client/version.rb#7
ServiceCatalog::Client::VERSION = T.let(T.unsafe(nil), String)

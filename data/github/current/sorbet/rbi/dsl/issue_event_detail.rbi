# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `IssueEventDetail`.
# Please instead update this file by running `bin/tapioca dsl IssueEventDetail`.

class IssueEventDetail
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def state_reasons; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::IssueEventDetail).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::IssueEventDetail]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::IssueEventDetail)) }
    def fifth; end

    sig { returns(::IssueEventDetail) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::IssueEventDetail)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::IssueEventDetail) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(T.nilable(T::Enumerator[::IssueEventDetail]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::IssueEventDetail]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::IssueEventDetail]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::IssueEventDetail)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::IssueEventDetail) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::IssueEventDetail) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::IssueEventDetail) }
    def first!; end

    sig { returns(T.nilable(::IssueEventDetail)) }
    def forty_two; end

    sig { returns(::IssueEventDetail) }
    def forty_two!; end

    sig { returns(T.nilable(::IssueEventDetail)) }
    def fourth; end

    sig { returns(::IssueEventDetail) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::IssueEventDetail) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::IssueEventDetail).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IssueEventDetail).void)
      ).returns(::IssueEventDetail)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::IssueEventDetail).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::IssueEventDetail).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::IssueEventDetail)) }
    def second; end

    sig { returns(::IssueEventDetail) }
    def second!; end

    sig { returns(T.nilable(::IssueEventDetail)) }
    def second_to_last; end

    sig { returns(::IssueEventDetail) }
    def second_to_last!; end

    sig { returns(::IssueEventDetail) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::IssueEventDetail) }
    def take!; end

    sig { returns(T.nilable(::IssueEventDetail)) }
    def third; end

    sig { returns(::IssueEventDetail) }
    def third!; end

    sig { returns(T.nilable(::IssueEventDetail)) }
    def third_to_last; end

    sig { returns(::IssueEventDetail) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def state_reason_not_planned!; end

    sig { returns(T::Boolean) }
    def state_reason_not_planned?; end

    sig { void }
    def state_reason_reopened!; end

    sig { returns(T::Boolean) }
    def state_reason_reopened?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueEvent) }
    def build_issue_event(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueEvent) }
    def create_issue_event(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IssueEvent) }
    def create_issue_event!(*args, &blk); end

    sig { returns(T.nilable(::IssueEvent)) }
    def issue_event; end

    sig { params(value: T.nilable(::IssueEvent)).void }
    def issue_event=(value); end

    sig { returns(T.nilable(::IssueEvent)) }
    def reload_issue_event; end

    sig { returns(T.untyped) }
    def reload_subject; end

    sig { returns(T.untyped) }
    def subject; end

    sig { params(value: T.untyped).void }
    def subject=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_issue_event; end

    sig { returns(Promise[T.untyped]) }
    def async_subject; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def after_commit_oid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def after_commit_oid=(value); end

    sig { returns(T::Boolean) }
    def after_commit_oid?; end

    sig { returns(T.nilable(::String)) }
    def after_commit_oid_before_last_save; end

    sig { returns(T.untyped) }
    def after_commit_oid_before_type_cast; end

    sig { returns(T::Boolean) }
    def after_commit_oid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def after_commit_oid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def after_commit_oid_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def after_commit_oid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def after_commit_oid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def after_commit_oid_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def after_commit_oid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def after_commit_oid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def after_commit_oid_was; end

    sig { void }
    def after_commit_oid_will_change!; end

    sig { returns(T.nilable(::String)) }
    def before_commit_oid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def before_commit_oid=(value); end

    sig { returns(T::Boolean) }
    def before_commit_oid?; end

    sig { returns(T.nilable(::String)) }
    def before_commit_oid_before_last_save; end

    sig { returns(T.untyped) }
    def before_commit_oid_before_type_cast; end

    sig { returns(T::Boolean) }
    def before_commit_oid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def before_commit_oid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def before_commit_oid_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def before_commit_oid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def before_commit_oid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def before_commit_oid_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def before_commit_oid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def before_commit_oid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def before_commit_oid_was; end

    sig { void }
    def before_commit_oid_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def block_duration_days; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def block_duration_days=(value); end

    sig { returns(T::Boolean) }
    def block_duration_days?; end

    sig { returns(T.nilable(::Integer)) }
    def block_duration_days_before_last_save; end

    sig { returns(T.untyped) }
    def block_duration_days_before_type_cast; end

    sig { returns(T::Boolean) }
    def block_duration_days_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def block_duration_days_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def block_duration_days_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def block_duration_days_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def block_duration_days_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def block_duration_days_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def block_duration_days_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def block_duration_days_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def block_duration_days_was; end

    sig { void }
    def block_duration_days_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def card_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def card_id=(value); end

    sig { returns(T::Boolean) }
    def card_id?; end

    sig { returns(T.nilable(::Integer)) }
    def card_id_before_last_save; end

    sig { returns(T.untyped) }
    def card_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def card_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def card_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def card_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def card_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def card_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def card_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def card_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def card_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def card_id_was; end

    sig { void }
    def card_id_will_change!; end

    sig { returns(T.untyped) }
    def column_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def column_name=(value); end

    sig { returns(T::Boolean) }
    def column_name?; end

    sig { returns(T.untyped) }
    def column_name_before_last_save; end

    sig { returns(T.untyped) }
    def column_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def column_name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def column_name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def column_name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def column_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def column_name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def column_name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def column_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def column_name_previously_was; end

    sig { returns(T.untyped) }
    def column_name_was; end

    sig { void }
    def column_name_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def deployment_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def deployment_id=(value); end

    sig { returns(T::Boolean) }
    def deployment_id?; end

    sig { returns(T.nilable(::Integer)) }
    def deployment_id_before_last_save; end

    sig { returns(T.untyped) }
    def deployment_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def deployment_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deployment_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deployment_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def deployment_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def deployment_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deployment_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def deployment_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def deployment_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def deployment_id_was; end

    sig { void }
    def deployment_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def deployment_status_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def deployment_status_id=(value); end

    sig { returns(T::Boolean) }
    def deployment_status_id?; end

    sig { returns(T.nilable(::Integer)) }
    def deployment_status_id_before_last_save; end

    sig { returns(T.untyped) }
    def deployment_status_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def deployment_status_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deployment_status_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deployment_status_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def deployment_status_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def deployment_status_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deployment_status_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def deployment_status_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def deployment_status_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def deployment_status_id_was; end

    sig { void }
    def deployment_status_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def issue_event_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def issue_event_id=(value); end

    sig { returns(T::Boolean) }
    def issue_event_id?; end

    sig { returns(T.nilable(::Integer)) }
    def issue_event_id_before_last_save; end

    sig { returns(T.untyped) }
    def issue_event_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def issue_event_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def issue_event_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def issue_event_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def issue_event_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_event_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def issue_event_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def issue_event_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_event_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def issue_event_id_was; end

    sig { void }
    def issue_event_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def label_color; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def label_color=(value); end

    sig { returns(T::Boolean) }
    def label_color?; end

    sig { returns(T.nilable(::String)) }
    def label_color_before_last_save; end

    sig { returns(T.untyped) }
    def label_color_before_type_cast; end

    sig { returns(T::Boolean) }
    def label_color_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def label_color_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def label_color_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def label_color_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def label_color_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def label_color_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def label_color_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def label_color_previously_was; end

    sig { returns(T.nilable(::String)) }
    def label_color_was; end

    sig { void }
    def label_color_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def label_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def label_id=(value); end

    sig { returns(T::Boolean) }
    def label_id?; end

    sig { returns(T.nilable(::Integer)) }
    def label_id_before_last_save; end

    sig { returns(T.untyped) }
    def label_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def label_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def label_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def label_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def label_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def label_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def label_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def label_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def label_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def label_id_was; end

    sig { void }
    def label_id_will_change!; end

    sig { returns(T.untyped) }
    def label_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def label_name=(value); end

    sig { returns(T::Boolean) }
    def label_name?; end

    sig { returns(T.untyped) }
    def label_name_before_last_save; end

    sig { returns(T.untyped) }
    def label_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def label_name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def label_name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def label_name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def label_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def label_name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def label_name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def label_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def label_name_previously_was; end

    sig { returns(T.untyped) }
    def label_name_was; end

    sig { void }
    def label_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def label_text_color; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def label_text_color=(value); end

    sig { returns(T::Boolean) }
    def label_text_color?; end

    sig { returns(T.nilable(::String)) }
    def label_text_color_before_last_save; end

    sig { returns(T.untyped) }
    def label_text_color_before_type_cast; end

    sig { returns(T::Boolean) }
    def label_text_color_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def label_text_color_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def label_text_color_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def label_text_color_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def label_text_color_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def label_text_color_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def label_text_color_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def label_text_color_previously_was; end

    sig { returns(T.nilable(::String)) }
    def label_text_color_was; end

    sig { void }
    def label_text_color_will_change!; end

    sig { returns(T.nilable(::String)) }
    def lock_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def lock_reason=(value); end

    sig { returns(T::Boolean) }
    def lock_reason?; end

    sig { returns(T.nilable(::String)) }
    def lock_reason_before_last_save; end

    sig { returns(T.untyped) }
    def lock_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def lock_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def lock_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def lock_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def lock_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def lock_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def lock_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def lock_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def lock_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def lock_reason_was; end

    sig { void }
    def lock_reason_will_change!; end

    sig { returns(T.untyped) }
    def message; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def message=(value); end

    sig { returns(T::Boolean) }
    def message?; end

    sig { returns(T.untyped) }
    def message_before_last_save; end

    sig { returns(T.untyped) }
    def message_before_type_cast; end

    sig { returns(T::Boolean) }
    def message_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def message_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def message_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def message_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def message_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def message_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def message_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def message_previously_was; end

    sig { returns(T.untyped) }
    def message_was; end

    sig { void }
    def message_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def milestone_id=(value); end

    sig { returns(T::Boolean) }
    def milestone_id?; end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_before_last_save; end

    sig { returns(T.untyped) }
    def milestone_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def milestone_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def milestone_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def milestone_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def milestone_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def milestone_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def milestone_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def milestone_id_was; end

    sig { void }
    def milestone_id_will_change!; end

    sig { returns(T.untyped) }
    def milestone_title; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def milestone_title=(value); end

    sig { returns(T::Boolean) }
    def milestone_title?; end

    sig { returns(T.untyped) }
    def milestone_title_before_last_save; end

    sig { returns(T.untyped) }
    def milestone_title_before_type_cast; end

    sig { returns(T::Boolean) }
    def milestone_title_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def milestone_title_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def milestone_title_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def milestone_title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def milestone_title_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def milestone_title_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def milestone_title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def milestone_title_previously_was; end

    sig { returns(T.untyped) }
    def milestone_title_was; end

    sig { void }
    def milestone_title_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_project_workflow_action_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def performed_by_project_workflow_action_id=(value); end

    sig { returns(T::Boolean) }
    def performed_by_project_workflow_action_id?; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_project_workflow_action_id_before_last_save; end

    sig { returns(T.untyped) }
    def performed_by_project_workflow_action_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def performed_by_project_workflow_action_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_project_workflow_action_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_project_workflow_action_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_project_workflow_action_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_project_workflow_action_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_project_workflow_action_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_project_workflow_action_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_project_workflow_action_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_project_workflow_action_id_was; end

    sig { void }
    def performed_by_project_workflow_action_id_will_change!; end

    sig { returns(T.untyped) }
    def previous_column_name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def previous_column_name=(value); end

    sig { returns(T::Boolean) }
    def previous_column_name?; end

    sig { returns(T.untyped) }
    def previous_column_name_before_last_save; end

    sig { returns(T.untyped) }
    def previous_column_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def previous_column_name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def previous_column_name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def previous_column_name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def previous_column_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def previous_column_name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def previous_column_name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def previous_column_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def previous_column_name_previously_was; end

    sig { returns(T.untyped) }
    def previous_column_name_was; end

    sig { void }
    def previous_column_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def project_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def project_id=(value); end

    sig { returns(T::Boolean) }
    def project_id?; end

    sig { returns(T.nilable(::Integer)) }
    def project_id_before_last_save; end

    sig { returns(T.untyped) }
    def project_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def project_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def project_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def project_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def project_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def project_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def project_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def project_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def project_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def project_id_was; end

    sig { void }
    def project_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def project_previous_status; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def project_previous_status=(value); end

    sig { returns(T::Boolean) }
    def project_previous_status?; end

    sig { returns(T.nilable(::String)) }
    def project_previous_status_before_last_save; end

    sig { returns(T.untyped) }
    def project_previous_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def project_previous_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def project_previous_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def project_previous_status_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def project_previous_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def project_previous_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def project_previous_status_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def project_previous_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def project_previous_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def project_previous_status_was; end

    sig { void }
    def project_previous_status_will_change!; end

    sig { returns(T.nilable(::String)) }
    def project_status; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def project_status=(value); end

    sig { returns(T::Boolean) }
    def project_status?; end

    sig { returns(T.nilable(::String)) }
    def project_status_before_last_save; end

    sig { returns(T.untyped) }
    def project_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def project_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def project_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def project_status_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def project_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def project_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def project_status_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def project_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def project_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def project_status_was; end

    sig { void }
    def project_status_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def pull_request_review_id=(value); end

    sig { returns(T::Boolean) }
    def pull_request_review_id?; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_id_before_last_save; end

    sig { returns(T.untyped) }
    def pull_request_review_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def pull_request_review_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_review_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_review_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pull_request_review_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_review_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pull_request_review_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_id_was; end

    sig { void }
    def pull_request_review_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_state_was; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def pull_request_review_state_was=(value); end

    sig { returns(T::Boolean) }
    def pull_request_review_state_was?; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_state_was_before_last_save; end

    sig { returns(T.untyped) }
    def pull_request_review_state_was_before_type_cast; end

    sig { returns(T::Boolean) }
    def pull_request_review_state_was_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_review_state_was_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_review_state_was_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pull_request_review_state_was_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_state_was_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def pull_request_review_state_was_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def pull_request_review_state_was_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_state_was_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pull_request_review_state_was_was; end

    sig { void }
    def pull_request_review_state_was_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ref; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ref=(value); end

    sig { returns(T::Boolean) }
    def ref?; end

    sig { returns(T.nilable(::String)) }
    def ref_before_last_save; end

    sig { returns(T.untyped) }
    def ref_before_type_cast; end

    sig { returns(T::Boolean) }
    def ref_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ref_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ref_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ref_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def ref_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def ref_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ref_was; end

    sig { void }
    def ref_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_after_commit_oid!; end

    sig { void }
    def restore_before_commit_oid!; end

    sig { void }
    def restore_block_duration_days!; end

    sig { void }
    def restore_card_id!; end

    sig { void }
    def restore_column_name!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_deployment_id!; end

    sig { void }
    def restore_deployment_status_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_issue_event_id!; end

    sig { void }
    def restore_label_color!; end

    sig { void }
    def restore_label_id!; end

    sig { void }
    def restore_label_name!; end

    sig { void }
    def restore_label_text_color!; end

    sig { void }
    def restore_lock_reason!; end

    sig { void }
    def restore_message!; end

    sig { void }
    def restore_milestone_id!; end

    sig { void }
    def restore_milestone_title!; end

    sig { void }
    def restore_performed_by_project_workflow_action_id!; end

    sig { void }
    def restore_previous_column_name!; end

    sig { void }
    def restore_project_id!; end

    sig { void }
    def restore_project_previous_status!; end

    sig { void }
    def restore_project_status!; end

    sig { void }
    def restore_pull_request_review_id!; end

    sig { void }
    def restore_pull_request_review_state_was!; end

    sig { void }
    def restore_ref!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_review_request_id!; end

    sig { void }
    def restore_state_reason!; end

    sig { void }
    def restore_subject_id!; end

    sig { void }
    def restore_subject_type!; end

    sig { void }
    def restore_title_is!; end

    sig { void }
    def restore_title_was!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable(::Integer)) }
    def review_request_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def review_request_id=(value); end

    sig { returns(T::Boolean) }
    def review_request_id?; end

    sig { returns(T.nilable(::Integer)) }
    def review_request_id_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_request_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_request_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def review_request_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def review_request_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_request_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def review_request_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def review_request_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def review_request_id_was; end

    sig { void }
    def review_request_id_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_after_commit_oid; end

    sig { returns(T::Boolean) }
    def saved_change_to_after_commit_oid?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_before_commit_oid; end

    sig { returns(T::Boolean) }
    def saved_change_to_before_commit_oid?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_block_duration_days; end

    sig { returns(T::Boolean) }
    def saved_change_to_block_duration_days?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_card_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_card_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_column_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_column_name?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_deployment_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_deployment_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_deployment_status_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_deployment_status_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_issue_event_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_issue_event_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_label_color; end

    sig { returns(T::Boolean) }
    def saved_change_to_label_color?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_label_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_label_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_label_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_label_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_label_text_color; end

    sig { returns(T::Boolean) }
    def saved_change_to_label_text_color?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_lock_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_lock_reason?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_message; end

    sig { returns(T::Boolean) }
    def saved_change_to_message?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_milestone_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_milestone_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_milestone_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_milestone_title?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_performed_by_project_workflow_action_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_performed_by_project_workflow_action_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_previous_column_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_previous_column_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_project_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_project_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_project_previous_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_project_previous_status?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_project_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_project_status?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_pull_request_review_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_pull_request_review_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_pull_request_review_state_was; end

    sig { returns(T::Boolean) }
    def saved_change_to_pull_request_review_state_was?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ref; end

    sig { returns(T::Boolean) }
    def saved_change_to_ref?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_review_request_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_state_reason?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_subject_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_subject_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_subject_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_subject_type?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_title_is; end

    sig { returns(T::Boolean) }
    def saved_change_to_title_is?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_title_was; end

    sig { returns(T::Boolean) }
    def saved_change_to_title_was?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def state_reason; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def state_reason=(value); end

    sig { returns(T::Boolean) }
    def state_reason?; end

    sig { returns(T.nilable(::String)) }
    def state_reason_before_last_save; end

    sig { returns(T.untyped) }
    def state_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_reason_was; end

    sig { void }
    def state_reason_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def subject_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def subject_id=(value); end

    sig { returns(T::Boolean) }
    def subject_id?; end

    sig { returns(T.nilable(::Integer)) }
    def subject_id_before_last_save; end

    sig { returns(T.untyped) }
    def subject_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def subject_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subject_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subject_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subject_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subject_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subject_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subject_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subject_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def subject_id_was; end

    sig { void }
    def subject_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def subject_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def subject_type=(value); end

    sig { returns(T::Boolean) }
    def subject_type?; end

    sig { returns(T.nilable(::String)) }
    def subject_type_before_last_save; end

    sig { returns(T.untyped) }
    def subject_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def subject_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subject_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subject_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def subject_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subject_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subject_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def subject_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subject_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def subject_type_was; end

    sig { void }
    def subject_type_will_change!; end

    sig { returns(T.untyped) }
    def title_is; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def title_is=(value); end

    sig { returns(T::Boolean) }
    def title_is?; end

    sig { returns(T.untyped) }
    def title_is_before_last_save; end

    sig { returns(T.untyped) }
    def title_is_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_is_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_is_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_is_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_is_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_is_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_is_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_is_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_is_previously_was; end

    sig { returns(T.untyped) }
    def title_is_was; end

    sig { void }
    def title_is_will_change!; end

    sig { returns(T.untyped) }
    def title_was; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def title_was=(value); end

    sig { returns(T::Boolean) }
    def title_was?; end

    sig { returns(T.untyped) }
    def title_was_before_last_save; end

    sig { returns(T.untyped) }
    def title_was_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_was_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_was_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_was_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_was_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_was_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_was_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_was_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_was_previously_was; end

    sig { returns(T.untyped) }
    def title_was_was; end

    sig { void }
    def title_was_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_after_commit_oid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_before_commit_oid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_block_duration_days?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_card_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_column_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deployment_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deployment_status_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issue_event_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_label_color?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_label_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_label_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_label_text_color?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lock_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_message?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_milestone_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_milestone_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_performed_by_project_workflow_action_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_previous_column_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_project_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_project_previous_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_project_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pull_request_review_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pull_request_review_state_was?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ref?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subject_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subject_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title_is?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title_was?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_not_planned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::IssueEventDetail } }

    sig { returns(T::Array[::IssueEventDetail]) }
    def to_a; end

    sig { returns(T::Array[::IssueEventDetail]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::IssueEventDetail } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::IssueEventDetail } }

    sig do
      params(
        records: T.any(::IssueEventDetail, T::Enumerable[T.any(::IssueEventDetail, T::Enumerable[::IssueEventDetail])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::IssueEventDetail, T::Enumerable[T.any(::IssueEventDetail, T::Enumerable[::IssueEventDetail])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::IssueEventDetail, T::Enumerable[T.any(::IssueEventDetail, T::Enumerable[::IssueEventDetail])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::IssueEventDetail]) }
    def load_target; end

    sig do
      params(
        records: T.any(::IssueEventDetail, T::Enumerable[T.any(::IssueEventDetail, T::Enumerable[::IssueEventDetail])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::IssueEventDetail, T::Enumerable[T.any(::IssueEventDetail, T::Enumerable[::IssueEventDetail])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::IssueEventDetail, T::Enumerable[T.any(::IssueEventDetail, T::Enumerable[::IssueEventDetail])])
      ).returns(T::Array[::IssueEventDetail])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::IssueEventDetail]) }
    def target; end

    sig { returns(T::Array[::IssueEventDetail]) }
    def to_a; end

    sig { returns(T::Array[::IssueEventDetail]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::IssueEventDetail } }

    sig { returns(T::Array[::IssueEventDetail]) }
    def to_a; end

    sig { returns(T::Array[::IssueEventDetail]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::IssueEventDetail } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

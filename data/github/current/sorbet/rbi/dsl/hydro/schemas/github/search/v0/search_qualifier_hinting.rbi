# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Search::V0::SearchQualifierHinting`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Search::V0::SearchQualifierHinting`.

class Hydro::Schemas::Github::Search::V0::SearchQualifierHinting
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      client_timestamp: T.nilable(Google::Protobuf::Timestamp),
      event_type: T.nilable(T.any(Symbol, Integer)),
      filter: T.nilable(String),
      filter_value: T.nilable(String),
      query: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      search_type: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, client_timestamp: nil, event_type: nil, filter: nil, filter_value: nil, query: nil, request_context: nil, search_type: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_client_timestamp; end

  sig { void }
  def clear_event_type; end

  sig { void }
  def clear_filter; end

  sig { void }
  def clear_filter_value; end

  sig { void }
  def clear_query; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_search_type; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def client_timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def client_timestamp=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def event_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event_type=(value); end

  sig { returns(String) }
  def filter; end

  sig { params(value: String).void }
  def filter=(value); end

  sig { returns(String) }
  def filter_value; end

  sig { params(value: String).void }
  def filter_value=(value); end

  sig { returns(String) }
  def query; end

  sig { params(value: String).void }
  def query=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def search_type; end

  sig { params(value: String).void }
  def search_type=(value); end
end

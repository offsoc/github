syntax = "proto3";

package billing_platform.api.v1;

option go_package = "lib/twirp/proto";
option ruby_package = "BillingPlatform::Api::V1";

import "proto/base.proto";

service CustomerApi {
    rpc UpsertCustomer(CreateCustomerRequest) returns (CreateCustomerResponse);
    rpc PatchCustomer(PatchCustomerRequest) returns (PatchCustomerResponse);
    rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse);
    rpc GetCustomers(GetCustomersRequest) returns (GetCustomersResponse);
    rpc UpsertBudget(UpsertBudgetRequest) returns (UpsertBudgetResponse);
    rpc GetBudget(GetBudgetRequest) returns (GetBudgetResponse);
    rpc GetBudgetByUuid(GetBudgetByUuidRequest) returns (GetBudgetByUuidResponse);
    rpc DeleteBudget(DeleteBudgetRequest) returns (DeleteBudgetResponse);
    rpc GetAllBudgets(GetAllBudgetsRequest) returns (GetAllBudgetsResponse);
    rpc GetBudgetState(GetBudgetStateRequest) returns (GetBudgetStateResponse);
    rpc CanProceedWithUsage(CanProceedWithUsageRequest) returns (CanProceedWithUsageResponse);
    rpc GetDiscount(GetDiscountRequest) returns (GetDiscountResponse);
    rpc GetAllDiscounts(GetAllDiscountsRequest) returns (GetAllDiscountsResponse);
    rpc CreateDiscount(CreateDiscountRequest) returns (CreateDiscountResponse);
    rpc GetDiscountState(GetDiscountStateRequest) returns (GetDiscountStateResponse);
    rpc GetAllDiscountStates(GetAllDiscountStatesRequest) returns (GetAllDiscountStatesResponse);
}

message CreateCustomerRequest {
    Customer customer = 1;
}

message CreateCustomerResponse {
}

message PatchCustomerRequest {
    Customer customer = 1;
}

message PatchCustomerResponse {
}

message GetCustomerRequest {
    string customerId = 1;
}

message GetCustomerResponse {
    Customer customer = 1;
}

message GetCustomersRequest {
    repeated string customerIds = 1;
}


message GetCustomersResponse {
    repeated Customer customers = 1;
}


message UpsertBudgetRequest {
    Budget budget = 1;
}

message UpsertBudgetResponse {
}

message DeleteBudgetRequest {
    string customerId = 1;
    string uuid = 2;
}

message DeleteBudgetResponse {
}

message GetBudgetRequest {
    BudgetKey key = 1;
}

message GetBudgetResponse {
    Budget budget = 1;
}

message GetBudgetByUuidRequest {
    string customerId = 1;
    string uuid = 2;
}

message GetBudgetByUuidResponse {
    Budget budget = 1;
}

message GetAllBudgetsRequest {
    string customerId = 1;
}

message GetAllBudgetsResponse {
    repeated BudgetInfo budgets = 1;
}

message BudgetInfo {
    Budget budget = 1;
    BudgetState budgetState = 2;
}

message GetBudgetStateRequest {
    BudgetKey key = 1;
    int64 year = 2;
    int64 month = 3;
}

message GetBudgetStateResponse {
    BudgetState budgetState = 1;
}

message CanProceedWithUsageRequest {
    UsageKey usageKey = 1;
}

message CanProceedWithUsageResponse {
    bool canProceed = 1;
    repeated CanProceedWithUsageInfo applicableBudgets = 2;
    repeated CanProceedWithUsagePlanDiscount planDiscounts = 3;
    CanProceedWithUsageStatus status = 4;
    string planName = 5;
}

message GetAllDiscountsRequest {
    string customerId = 1;
}

message GetAllDiscountStatesRequest {
    string customerId = 1;
    int64 year = 2;
    int64 month = 3;
}

message GetAllDiscountsResponse {
    repeated Discount discounts = 1;
}

message GetAllDiscountStatesResponse {
    repeated DiscountState discounts = 1;
}

message GetDiscountRequest {
    DiscountKey key = 1;
}

message GetDiscountResponse {
    Discount discount = 1;
}

message CreateDiscountRequest {
    Discount discount = 1;
}

message CreateDiscountResponse {
    string uuid = 1;
}

message GetDiscountStateRequest {
    DiscountKey key = 1;
    int64 year = 3;
    int64 month = 4;
}

message GetDiscountStateResponse {
    DiscountState discountState = 1;
}

message Customer {
    string customerId = 1;
    string CostCenterUUID = 2;
    bool IsCostCenterProxy = 3;
    BillingTarget billingTarget = 4;
    string azureAccountId = 5;
    string zuoraAccountId = 6;
    string enterpriseCustomerId = 7;
    bool enableUsageEmission = 8;
    string zuoraAccountNumber = 9;
    string discountPlanName = 10;
    bool billForPublicRepoUsage = 11;
    int64 effectiveAt = 12;
    repeated string enabledProducts = 13;
    bool hasPaymentMethod = 14;
    bool hasZuoraSubscription = 15;
    bool isBillingLocked = 16;
    TradeScreening tradeScreening = 17;
    base.CostCenterState costCenterState = 18;
    bool isStaffOwned = 19;
}

message TradeScreening {
    bool hasAnyTradeRestrictions = 1;
    bool hasFullTradeRestrictions = 2;
    repeated string featuresWithCommercialInteractionRestrictions = 3;
}

message Budget {
    BudgetKey key = 1;
    double targetAmount = 2;
    BudgetLimitType budgetLimitType = 3;
    BudgetAlerting budgetAlerting = 4;
    string uuid = 5;
}

message BudgetKey {
    string customerId = 1;
    base.ResourceType targetType = 2;
    string targetId = 3;
    PricingTargetType pricingTargetType = 4;
    string pricingTargetId = 5;
}

enum PricingTargetType {
    NoPricingTarget = 0;
    ProductPricing = 1;
    SkuPricing = 2;
}

enum BudgetLimitType {
    IgnoreLimit = 0;
    AlertingOnly = 1;
    PreventFurtherUsage = 2;
    StopActiveUsage = 3;
}

message BudgetState {
    bool isFullyFunded = 1;
    double currentAmount = 2;
    double targetAmount = 3;
    double quantity = 4;
    BudgetThreshold thresholdMet = 5;
}

message BudgetAlerting {
    bool willAlert = 1;
    repeated string recipientUserIds = 2;
}

message BudgetThreshold {
    string name = 1;
    double minimumUsagePercentage = 2;
    bool alertable = 3;
}

message CanProceedWithUsageInfo {
    BudgetKey budgetKey = 1;
    BudgetState budgetState = 2;
    BudgetLimitType budgetLimitType = 3;
}

message CanProceedWithUsagePlanDiscount {
    bool isFullyApplied = 1;
    double currentAmount = 2;
    double targetAmount = 3;
    string uuid = 5;
}

enum CanProceedWithUsageStatus {
    UsageAllowed = 0;
    BillingLocked = 1;
    FullTradeRestrictionsApplied = 2;
    AnyTradeRestrictionsApplied = 3;
    CommercialInteractionRestrictionApplied = 4;
    NotBillable = 5;
    BudgetLimitReached = 6;
    OnTrial = 7;
}

message UsageKey {
    string sku = 1;
    string product = 2;
    double quantity = 3;
    int64 usageAt = 4;
    base.EntityDetail entityDetail = 5;
}

enum BillingTarget {
    NoBillingTarget = 0;
    Zuora = 1;
    Azure = 2;
}

message Discount {
    string customerId = 1;
    repeated DiscountTarget targets = 2;
    double percentage = 3;
    double targetAmount = 4;
    string uuid = 5;
    int64 startDate = 6;
    int64 endDate = 7;
}

message DiscountKey {
    string customerId = 1;
    string uuid = 2;
}

enum DiscountTargetType {
    NoDiscountTarget = 0;
    SkuDiscount = 1;
    ProductDiscount = 2;
    RepoDiscount = 3;
    OrgDiscount = 4;
    EnterpriseDiscount = 5;
}

message DiscountTarget {
    string id = 1;
    DiscountTargetType type = 2;
}

message DiscountState {
    bool isFullyApplied = 1;
    double currentAmount = 2;
    double targetAmount = 3;
    double percentage = 4;
    string uuid = 5;
    repeated DiscountTarget targets = 6;
}

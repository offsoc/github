syntax = "proto3";
package git_hub.launch.services.token;

option go_package = "github.com/github/launch/services/pb/deploy/token";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service LaunchTokenService {
  // GetToken is used to get an API token for a given workflow build
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);
  // RefreshToken is used to expend the expiry time of an access token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  // RevokeToken is used to revoke an access token
  rpc RevokeToken(RevokeTokenRequest) returns (google.protobuf.Empty);
  // GetJobPermissions is used to get the permissions for a job without minting a token
  rpc GetJobPermissions(GetJobPermissionsRequest) returns (GetJobPermissionsResponse);
}

// GetTokenRequest is an incoming request for a new token
message GetTokenRequest {
  string workflow_id = 1;
  string job_id = 2;
  map<string, string> permissions = 3;
  map<string, string> workflow_run_permissions = 4;
}

// GetTokenResponse is a response to a request for a token
message GetTokenResponse {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2;
  map<string, string> permissions = 3;
}

// RefreshTokenRequest is an incoming request to refresh a token
message RefreshTokenRequest {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2;
  string workflow_id = 3;
}

// RefreshTokenResponse is a response to a request to refresh a token
message RefreshTokenResponse {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2;
}

// RevokeTokenRequest is an incoming request to revoke a token
message RevokeTokenRequest {
  string token = 1;
  string workflow_id = 2;
}

// GetJobPermissionsRequest is an incoming request to get job permissions without minting a token
message GetJobPermissionsRequest {
  string plan_id = 1;
  map<string, string> requested_permissions = 2;
}

// GetJobPermissionsResponse is a response to a request to get job permissions without minting a token
message GetJobPermissionsResponse {
  map<string, string> effective_permissions = 1;
}

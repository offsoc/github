# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::EmailDomainReputationRecordCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::EmailDomainReputationRecordCreate`.

class Hydro::Schemas::Github::V1::EmailDomainReputationRecordCreate
  sig do
    params(
      a_records: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      calculation_ms: T.nilable(Integer),
      domain: T.nilable(String),
      email_domains: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      has_valid_public_suffix: T.nilable(T::Boolean),
      maximum_reputation: T.nilable(Float),
      minimum_reputation: T.nilable(Float),
      mx_exchanges: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      not_spammy_sample_size: T.nilable(Integer),
      plus_minus: T.nilable(Float),
      recent_users: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::User], T::Array[Hydro::Schemas::Github::V1::Entities::User])),
      reputation: T.nilable(Float),
      reputation_lower_bound: T.nilable(Float),
      sample_size: T.nilable(Integer),
      spammy_sample_size: T.nilable(Integer)
    ).void
  end
  def initialize(a_records: T.unsafe(nil), calculation_ms: nil, domain: nil, email_domains: T.unsafe(nil), has_valid_public_suffix: nil, maximum_reputation: nil, minimum_reputation: nil, mx_exchanges: T.unsafe(nil), not_spammy_sample_size: nil, plus_minus: nil, recent_users: T.unsafe(nil), reputation: nil, reputation_lower_bound: nil, sample_size: nil, spammy_sample_size: nil); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def a_records; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def a_records=(value); end

  sig { returns(Integer) }
  def calculation_ms; end

  sig { params(value: Integer).void }
  def calculation_ms=(value); end

  sig { void }
  def clear_a_records; end

  sig { void }
  def clear_calculation_ms; end

  sig { void }
  def clear_domain; end

  sig { void }
  def clear_email_domains; end

  sig { void }
  def clear_has_valid_public_suffix; end

  sig { void }
  def clear_maximum_reputation; end

  sig { void }
  def clear_minimum_reputation; end

  sig { void }
  def clear_mx_exchanges; end

  sig { void }
  def clear_not_spammy_sample_size; end

  sig { void }
  def clear_plus_minus; end

  sig { void }
  def clear_recent_users; end

  sig { void }
  def clear_reputation; end

  sig { void }
  def clear_reputation_lower_bound; end

  sig { void }
  def clear_sample_size; end

  sig { void }
  def clear_spammy_sample_size; end

  sig { returns(String) }
  def domain; end

  sig { params(value: String).void }
  def domain=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def email_domains; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def email_domains=(value); end

  sig { returns(T::Boolean) }
  def has_valid_public_suffix; end

  sig { params(value: T::Boolean).void }
  def has_valid_public_suffix=(value); end

  sig { returns(Float) }
  def maximum_reputation; end

  sig { params(value: Float).void }
  def maximum_reputation=(value); end

  sig { returns(Float) }
  def minimum_reputation; end

  sig { params(value: Float).void }
  def minimum_reputation=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def mx_exchanges; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def mx_exchanges=(value); end

  sig { returns(Integer) }
  def not_spammy_sample_size; end

  sig { params(value: Integer).void }
  def not_spammy_sample_size=(value); end

  sig { returns(Float) }
  def plus_minus; end

  sig { params(value: Float).void }
  def plus_minus=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::User]) }
  def recent_users; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::Entities::User]).void }
  def recent_users=(value); end

  sig { returns(Float) }
  def reputation; end

  sig { params(value: Float).void }
  def reputation=(value); end

  sig { returns(Float) }
  def reputation_lower_bound; end

  sig { params(value: Float).void }
  def reputation_lower_bound=(value); end

  sig { returns(Integer) }
  def sample_size; end

  sig { params(value: Integer).void }
  def sample_size=(value); end

  sig { returns(Integer) }
  def spammy_sample_size; end

  sig { params(value: Integer).void }
  def spammy_sample_size=(value); end
end

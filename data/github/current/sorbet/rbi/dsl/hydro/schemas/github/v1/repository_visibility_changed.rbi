# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryVisibilityChanged`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryVisibilityChanged`.

class Hydro::Schemas::Github::V1::RepositoryVisibilityChanged
  sig do
    params(
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      is_fork: T.nilable(T::Boolean),
      is_private: T.nilable(T::Boolean),
      is_trade_restricted: T.nilable(T::Boolean),
      name_with_owner: T.nilable(String),
      repository_id: T.nilable(Integer),
      visibility: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(feature_flags: T.unsafe(nil), is_fork: nil, is_private: nil, is_trade_restricted: nil, name_with_owner: nil, repository_id: nil, visibility: nil); end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_is_fork; end

  sig { void }
  def clear_is_private; end

  sig { void }
  def clear_is_trade_restricted; end

  sig { void }
  def clear_name_with_owner; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_visibility; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T::Boolean) }
  def is_fork; end

  sig { params(value: T::Boolean).void }
  def is_fork=(value); end

  sig { returns(T::Boolean) }
  def is_private; end

  sig { params(value: T::Boolean).void }
  def is_private=(value); end

  sig { returns(T::Boolean) }
  def is_trade_restricted; end

  sig { params(value: T::Boolean).void }
  def is_trade_restricted=(value); end

  sig { returns(String) }
  def name_with_owner; end

  sig { params(value: String).void }
  def name_with_owner=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def visibility; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def visibility=(value); end
end

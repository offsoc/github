<%# erblint:counter DeprecatedInPrimerCounter 1 %>
<div class="<%= state_classes %>">
  <div
    id="<%= anchor %>"
    class="<%=class_names("js-comment js-updatable-content js-socket-channel js-targetable-element", "js-minimize-container": !render_if_minimized) %>"
    data-gid="<%= pull_request_review.global_relay_id %>"
    data-channel="<%= live_update_view_channel(live_update_channel) %>"
    data-url="<%= live_update_url %>"
  >
    <% if render_minimized_header? %>
      <%= render Primer::Beta::TimelineItem.new do |component| %>
        <% component.with_avatar(src: avatar_url_for(author), href: user_path(author), alt: author&.display_login, shape: :circle, data: hovercard_data_attributes_for_user(author)) %>
        <% component.with_badge(icon: badge_icon, bg: badge_background_color, color: badge_color, "aria-label": badge_tooltip, "aria-role": "image") %>
        <% component.with_body(display: :flex, direction: [:column, nil, :row], justify_content: :space_between, mt: 0) do %>
          <%= render PullRequests::MinimizedCommentComponent.new(comment: pull_request_review, details_classes: "width-full", path: show_path) %>
        <% end %>
      <% end %>
    <% else %>
      <%= render Primer::Beta::TimelineItem.new do |component| %>
        <% component.with_avatar(src: avatar_url_for(author), href: user_path(author), alt: author&.display_login, shape: :circle, data: hovercard_data_attributes_for_user(author), display: [(:none if pull_request_review.minimized?)]) %>
        <% component.with_badge(icon: badge_icon, bg: badge_background_color, color: badge_color, "aria-label": badge_tooltip, "aria-role": "image") %>
        <% component.with_body(display: :flex, direction: [:column, nil, :row], justify_content: :flex_start) do %>
          <div class="flex-auto flex-md-self-center">
            <strong>
              <% if author_is_copilot? %>
                <%= render Comments::Copilot::CommentActorComponent.new %>
              <% else %>
                <%= render Comments::CommentActorComponent.new(actor: author) %>
              <% end %>
            </strong>

            <%= state_action_string %>

            <% if on_behalf_of_teams.count.positive? %>
              on behalf of
              <%= on_behalf_of %>
            <% end %>

            <span class="color-fg-muted">
              <% if pull_request_review.submitted_at %>
                <a href="#<%= anchor %>" class="js-timestamp Link--secondary" id="<%= "#{dom_id}-permalink" %>">
                  <%= time_ago_in_words_js pull_request_review.submitted_at %>
                </a>
              <% end %>
            </span>
            <%= render Comments::CommentEditHistoryComponent.new(comment: pull_request_review, author: author) if pull_request_review.approved? && pull_request_review.body.blank? %>
          </div>

          <div class="ml-md-2 mt-md-0 mt-2 flex-shrink-0">
            <% if pull_request_review.spammy? %>
              <%= render(Primer::Beta::Label.new(scheme: :danger, classes: "tooltipped tooltipped-multiline tooltipped-s", aria: { label: "This user is marked as spammy. Their comments will only show in staff mode." } )) do %><%# erblint:disable Primer::Accessibility::TooltippedMigration %>
                Spammy
              <% end %>
            <% end %>

            <% if pull_request_review.pending? %>
              <%= render Primer::Beta::Label.new(scheme: :warning, title: "Label: Pending").with_content("Pending") %>
            <% end %>

            <%= render Primer::Beta::Button.new(tag: :a, ml: [0, nil, 2], href: diff_path, scheme: :invisible, size: :small).with_content("View reviewed changes") %>
          </div>
        <% end %>
      <% end %>

      <% if body_html.present? %>
        <%= render Primer::Beta::TimelineItem.new(pt: 0) do |component| %>
          <% component.with_body do %>
            <%= render Comments::CommentComponent.new(comment: pull_request_review, classes: "timeline-comment--caret timeline-comment--caret-nw timeline-comment ml-n3") do |component| %>
              <% component.with_header do %>
                <%= render Comments::CommentHeaderComponent.new(
                  comment: pull_request_review,
                  repository: pull_request.repository,
                  classes: "timeline-comment-header",
                  action_text: "left a comment",
                  action_menu_path: action_menu_path
                ) do |header_component| %>
                  <%= header_component.with_avatar(display: [:inline_block, nil, :none]) %>
                <% end %>
                <%# This empty anchor element allows the Quote Reply action to construct a backlink to this review properly. %>
                <a href="#<%= anchor %>" class="d-none"></a>
              <% end %>
              <% component.with_body do %>
                <%= render PullRequests::CommentBodyComponent.new(comment: pull_request_review, body_html: body_html) %>
              <% end %>
              <% component.with_reactions do %>
                <div class="pr-review-reactions">
                  <%= render PullRequests::ReactionsComponent.new(target: pull_request_review, popover_direction: "se") %>
                </div>
              <% end %>
              <% component.with_edit_form do %>
                <%= form_tag update_path, method: :put, class: "js-comment-update", id: nil, "data-type" => "json" do %>
                  <%= render Comments::DeferredEditFormComponent.new(form_path: update_path, comment_context: :discussion, textarea_id: "#{comment_dom_id(pull_request_review)}-body") %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
      <% end %>

      <%= render Primer::Beta::TimelineItem.new(py: 0, pl: 4) do |component| %>
        <% component.with_body(my: 0) do %>
          <%= render PullRequests::ReviewPagedThreadsComponent.new(pull_request_review: pull_request_review, page_info: page_info, pull_request: pull_request) %>
        <% end %>
      <% end %>
    <% end %>
  </div>
</div>

{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_elm_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/elm.js"],"sourcesContent":["function switchState(source, setState, f)\n{\n  setState(f);\n  return f(source, setState);\n}\n\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\n\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal()\n{\n  return function(source, setState)\n  {\n    if (source.eatWhile(spacesRE))\n    {\n      return null;\n    }\n\n    var char = source.next();\n\n    if (specialRE.test(char))\n    {\n      return (char === '{' && source.eat('-'))\n        ? switchState(source, setState, chompMultiComment(1))\n        : (char === '[' && source.match('glsl|'))\n        ? switchState(source, setState, chompGlsl)\n        : 'builtin';\n    }\n\n    if (char === '\\'')\n    {\n      return switchState(source, setState, chompChar);\n    }\n\n    if (char === '\"')\n    {\n      return source.eat('\"')\n        ? source.eat('\"')\n        ? switchState(source, setState, chompMultiString)\n        : 'string'\n      : switchState(source, setState, chompSingleString);\n    }\n\n    if (upperRE.test(char))\n    {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n\n    if (lowerRE.test(char))\n    {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n\n    if (digitRE.test(char))\n    {\n      if (char === '0')\n      {\n        if (source.eat(/[xX]/))\n        {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      else\n      {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.'))\n      {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      if (source.eat(/[eE]/))\n      {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return \"number\";\n    }\n\n    if (symbolRE.test(char))\n    {\n      if (char === '-' && source.eat('-'))\n      {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n\n    if (char === '_')\n    {\n      return \"keyword\";\n    }\n\n    return \"error\";\n  }\n}\n\nfunction chompMultiComment(nest)\n{\n  if (nest == 0)\n  {\n    return normal();\n  }\n  return function(source, setState)\n  {\n    while (!source.eol())\n    {\n      var char = source.next();\n      if (char == '{' && source.eat('-'))\n      {\n        ++nest;\n      }\n      else if (char == '-' && source.eat('}'))\n      {\n        --nest;\n        if (nest === 0)\n        {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  }\n}\n\nfunction chompMultiString(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nfunction chompSingleString(source, setState)\n{\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n  if (source.skipTo('\"'))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompChar(source, setState)\n{\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n  if (source.skipTo(\"'\"))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompGlsl(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '|' && source.eat(']'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n    in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\n\nexport const elm = {\n  name: \"elm\",\n  startState: function ()  { return { f: normal() }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var type = state.f(stream, function(s) { state.f = s; });\n    var word = stream.current();\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\"}\n  }\n};\n"],"names":["switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","nest","eol","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","module","where","import","exposing","port","elm","name","startState","copyState","s","token","stream","state","word","current","hasOwnProperty","languageData","commentTokens","line"],"sourceRoot":""}
# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `monolith-twirp-copilot-organizations` gem.
# Please instead update this file by running `bin/tapioca gem monolith-twirp-copilot-organizations`.

module Google::Protobuf::MessageExts::ClassMethods; end

# source://monolith-twirp-copilot-organizations//lib/monolith-twirp-copilot-organizations.rb#7
module Monolith; end

# source://monolith-twirp-copilot-organizations//lib/monolith-twirp-copilot-organizations.rb#8
module Monolith::Twirp; end

# source://monolith-twirp-copilot-organizations//lib/monolith-twirp-copilot-organizations.rb#9
module Monolith::Twirp::Copilot; end

# source://monolith-twirp-copilot-organizations//lib/monolith-twirp-copilot-organizations.rb#10
module Monolith::Twirp::Copilot::Organizations; end

# source://monolith-twirp-copilot-organizations//lib/monolith-twirp-copilot-organizations.rb#11
class Monolith::Twirp::Copilot::Organizations::Error < ::StandardError; end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/version.rb#3
module MonolithTwirp; end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/version.rb#4
module MonolithTwirp::Copilot; end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/version.rb#5
module MonolithTwirp::Copilot::Organizations; end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#92
module MonolithTwirp::Copilot::Organizations::V1; end

module MonolithTwirp::Copilot::Organizations::V1::Chat
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#102
MonolithTwirp::Copilot::Organizations::V1::Chat::CHAT_DISABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#102
MonolithTwirp::Copilot::Organizations::V1::Chat::CHAT_ENABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#102
MonolithTwirp::Copilot::Organizations::V1::Chat::CHAT_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#102
MonolithTwirp::Copilot::Organizations::V1::Chat::CHAT_NO_POLICY = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#102
MonolithTwirp::Copilot::Organizations::V1::Chat::CHAT_UNCONFIGURED = T.let(T.unsafe(nil), Integer)

module MonolithTwirp::Copilot::Organizations::V1::Codequote
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#101
MonolithTwirp::Copilot::Organizations::V1::Codequote::CODEQUOTE_DISABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#101
MonolithTwirp::Copilot::Organizations::V1::Codequote::CODEQUOTE_ENABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#101
MonolithTwirp::Copilot::Organizations::V1::Codequote::CODEQUOTE_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#101
MonolithTwirp::Copilot::Organizations::V1::Codequote::CODEQUOTE_UNCONFIGURED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_twirp.rb#16
class MonolithTwirp::Copilot::Organizations::V1::CopilotOrganizationDetailAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_copilot_organization(input, req_opts = T.unsafe(nil)); end

  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def get_copilot_organizations_by_analytic_tracking_ids(input, req_opts = T.unsafe(nil)); end
end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_twirp.rb#9
class MonolithTwirp::Copilot::Organizations::V1::CopilotOrganizationDetailAPIService < ::Twirp::Service; end

class MonolithTwirp::Copilot::Organizations::V1::CopilotOrganizationDetails
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Copilot::Organizations::V1::CopilotOrganizationMinimalDetails
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Copilot::Organizations::V1::CopilotSetting
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#105
MonolithTwirp::Copilot::Organizations::V1::CopilotSetting::COPILOT_SETTING_DISABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#105
MonolithTwirp::Copilot::Organizations::V1::CopilotSetting::COPILOT_SETTING_ENABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#105
MonolithTwirp::Copilot::Organizations::V1::CopilotSetting::COPILOT_SETTING_INVALID = T.let(T.unsafe(nil), Integer)

class MonolithTwirp::Copilot::Organizations::V1::GetCopilotOrganizationRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Copilot::Organizations::V1::GetCopilotOrganizationResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Copilot::Organizations::V1::GetCopilotOrganizationsByAnalyticTrackingIdsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class MonolithTwirp::Copilot::Organizations::V1::GetCopilotOrganizationsByAnalyticTrackingIdsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Copilot::Organizations::V1::MobileChat
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#103
MonolithTwirp::Copilot::Organizations::V1::MobileChat::MOBILE_CHAT_DISABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#103
MonolithTwirp::Copilot::Organizations::V1::MobileChat::MOBILE_CHAT_ENABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#103
MonolithTwirp::Copilot::Organizations::V1::MobileChat::MOBILE_CHAT_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#103
MonolithTwirp::Copilot::Organizations::V1::MobileChat::MOBILE_CHAT_NO_POLICY = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#103
MonolithTwirp::Copilot::Organizations::V1::MobileChat::MOBILE_CHAT_UNCONFIGURED = T.let(T.unsafe(nil), Integer)

module MonolithTwirp::Copilot::Organizations::V1::PublicCodeSuggestions
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#100
MonolithTwirp::Copilot::Organizations::V1::PublicCodeSuggestions::PUBLIC_CODE_SUGGESTIONS_ALLOWED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#100
MonolithTwirp::Copilot::Organizations::V1::PublicCodeSuggestions::PUBLIC_CODE_SUGGESTIONS_BLOCKED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#100
MonolithTwirp::Copilot::Organizations::V1::PublicCodeSuggestions::PUBLIC_CODE_SUGGESTIONS_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#100
MonolithTwirp::Copilot::Organizations::V1::PublicCodeSuggestions::PUBLIC_CODE_SUGGESTIONS_UNCONFIGURED = T.let(T.unsafe(nil), Integer)

class MonolithTwirp::Copilot::Organizations::V1::SeatBreakDown
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

module MonolithTwirp::Copilot::Organizations::V1::SeatManagement
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#104
MonolithTwirp::Copilot::Organizations::V1::SeatManagement::SEAT_MANAGEMENT_DISABLED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#104
MonolithTwirp::Copilot::Organizations::V1::SeatManagement::SEAT_MANAGEMENT_ENABLED_FOR_ALL = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#104
MonolithTwirp::Copilot::Organizations::V1::SeatManagement::SEAT_MANAGEMENT_ENABLED_FOR_SELECTED = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/v1/copilot_organization_detail_api_pb.rb#104
MonolithTwirp::Copilot::Organizations::V1::SeatManagement::SEAT_MANAGEMENT_INVALID = T.let(T.unsafe(nil), Integer)

# source://monolith-twirp-copilot-organizations//lib/monolith_twirp/copilot/organizations/version.rb#6
MonolithTwirp::Copilot::Organizations::VERSION = T.let(T.unsafe(nil), String)

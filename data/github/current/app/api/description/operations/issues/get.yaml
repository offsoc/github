---
summary: Get an issue
description: |-
  The API returns a [`301 Moved Permanently` status](${externalDocsUrl}/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
  [transferred](${externalDocsUrl}/articles/transferring-an-issue-to-another-repository/) to another repository. If
  the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
  returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
  access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
  to the [`issues`](${externalDocsUrl}/webhooks/event-payloads/#issues) webhook.

  > [!NOTE]
  > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](${externalDocsUrl}/rest/pulls/pulls#list-pull-requests)" endpoint.

  This endpoint supports the following custom media types. For more information, see "[Media types](${externalDocsUrl}/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."

  - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
  - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
  - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
  - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
tags:
  - issues
operationId: issues/get
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/issues/issues#get-an-issue'
parameters:
  - $ref: '../../components/parameters/owner.yaml'
  - $ref: '../../components/parameters/repo.yaml'
  - $ref: '../../components/parameters/issue-number.yaml'
responses:
  '200':
    description: Response
    content:
      application/json:
        schema:
          $ref: '../../components/schemas/issue.yaml'
        examples:
          default:
            $ref: '../../components/examples/issue.yaml'
  '301':
    $ref: '../../components/responses/moved_permanently.yaml'
  '404':
    $ref: '../../components/responses/not_found.yaml'
  '410':
    $ref: '../../components/responses/gone.yaml'
  '304':
    $ref: '../../components/responses/not_modified.yaml'
x-github-releases:
  - ghec
  - ghes: '>= 2.18'
  - api.github.com
x-github:
  githubCloudOnly: false
  enabledForGitHubApps: true
  category: issues
  subcategory: issues
x-githubEnterpriseOverlays:
  '<= 3.2':
    x-github:
      previews:
        - $ref: '../../components/x-previews/squirrel-girl.yaml'
          required: false
x-github-internal:
  path: '/repos/{owner}/{repo}/issues/{issue_number}'
  http-method: get
  service-tier: 1
  owner: '@github/issues'
  published: true

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Admin::V1::SnapshotEntry`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Admin::V1::SnapshotEntry`.

class Blackbird::Admin::V1::SnapshotEntry
  sig do
    params(
      base_oid: T.nilable(String),
      crawl_finished_at: T.nilable(Google::Protobuf::Timestamp),
      crawl_started_at: T.nilable(Google::Protobuf::Timestamp),
      entry_id: T.nilable(Integer),
      entry_state: T.nilable(String),
      experiments: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      head_oid: T.nilable(String),
      is_repo_archived: T.nilable(T::Boolean),
      is_repo_public: T.nilable(T::Boolean),
      network_id: T.nilable(Integer),
      nwo: T.nilable(String),
      owner_id: T.nilable(Integer),
      parent_entry_id: T.nilable(Integer),
      permanent_error: T.nilable(String),
      ref_name: T.nilable(String),
      repo_id: T.nilable(Integer),
      repo_score: T.nilable(Float),
      serving_offset: T.nilable(Integer),
      serving_ts: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(base_oid: nil, crawl_finished_at: nil, crawl_started_at: nil, entry_id: nil, entry_state: nil, experiments: T.unsafe(nil), head_oid: nil, is_repo_archived: nil, is_repo_public: nil, network_id: nil, nwo: nil, owner_id: nil, parent_entry_id: nil, permanent_error: nil, ref_name: nil, repo_id: nil, repo_score: nil, serving_offset: nil, serving_ts: nil); end

  sig { returns(String) }
  def base_oid; end

  sig { params(value: String).void }
  def base_oid=(value); end

  sig { void }
  def clear_base_oid; end

  sig { void }
  def clear_crawl_finished_at; end

  sig { void }
  def clear_crawl_started_at; end

  sig { void }
  def clear_entry_id; end

  sig { void }
  def clear_entry_state; end

  sig { void }
  def clear_experiments; end

  sig { void }
  def clear_head_oid; end

  sig { void }
  def clear_is_repo_archived; end

  sig { void }
  def clear_is_repo_public; end

  sig { void }
  def clear_network_id; end

  sig { void }
  def clear_nwo; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_parent_entry_id; end

  sig { void }
  def clear_permanent_error; end

  sig { void }
  def clear_ref_name; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_repo_score; end

  sig { void }
  def clear_serving_offset; end

  sig { void }
  def clear_serving_ts; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def crawl_finished_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def crawl_finished_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def crawl_started_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def crawl_started_at=(value); end

  sig { returns(Integer) }
  def entry_id; end

  sig { params(value: Integer).void }
  def entry_id=(value); end

  sig { returns(String) }
  def entry_state; end

  sig { params(value: String).void }
  def entry_state=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def experiments; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def experiments=(value); end

  sig { returns(String) }
  def head_oid; end

  sig { params(value: String).void }
  def head_oid=(value); end

  sig { returns(T::Boolean) }
  def is_repo_archived; end

  sig { params(value: T::Boolean).void }
  def is_repo_archived=(value); end

  sig { returns(T::Boolean) }
  def is_repo_public; end

  sig { params(value: T::Boolean).void }
  def is_repo_public=(value); end

  sig { returns(Integer) }
  def network_id; end

  sig { params(value: Integer).void }
  def network_id=(value); end

  sig { returns(String) }
  def nwo; end

  sig { params(value: String).void }
  def nwo=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(Integer) }
  def parent_entry_id; end

  sig { params(value: Integer).void }
  def parent_entry_id=(value); end

  sig { returns(String) }
  def permanent_error; end

  sig { params(value: String).void }
  def permanent_error=(value); end

  sig { returns(String) }
  def ref_name; end

  sig { params(value: String).void }
  def ref_name=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(Float) }
  def repo_score; end

  sig { params(value: Float).void }
  def repo_score=(value); end

  sig { returns(Integer) }
  def serving_offset; end

  sig { params(value: Integer).void }
  def serving_offset=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def serving_ts; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def serving_ts=(value); end
end

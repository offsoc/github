# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Spokes::Replica`.
# Please instead update this file by running `bin/tapioca dsl Spokes::Replica`.

class Spokes::Replica
  sig do
    params(
      checksum: T.nilable(String),
      created_at: T.nilable(Integer),
      db_name: T.nilable(String),
      expected_checksum: T.nilable(String),
      file_server: T.nilable(Spokes::FileServer),
      network_replica_id: T.nilable(Integer),
      quiescing: T.nilable(T::Boolean),
      read_weight: T.nilable(Integer),
      replica_state: T.nilable(Integer),
      updated_at: T.nilable(Integer)
    ).void
  end
  def initialize(checksum: nil, created_at: nil, db_name: nil, expected_checksum: nil, file_server: nil, network_replica_id: nil, quiescing: nil, read_weight: nil, replica_state: nil, updated_at: nil); end

  sig { returns(String) }
  def checksum; end

  sig { params(value: String).void }
  def checksum=(value); end

  sig { void }
  def clear_checksum; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_db_name; end

  sig { void }
  def clear_expected_checksum; end

  sig { void }
  def clear_file_server; end

  sig { void }
  def clear_network_replica_id; end

  sig { void }
  def clear_quiescing; end

  sig { void }
  def clear_read_weight; end

  sig { void }
  def clear_replica_state; end

  sig { void }
  def clear_updated_at; end

  sig { returns(Integer) }
  def created_at; end

  sig { params(value: Integer).void }
  def created_at=(value); end

  sig { returns(String) }
  def db_name; end

  sig { params(value: String).void }
  def db_name=(value); end

  sig { returns(String) }
  def expected_checksum; end

  sig { params(value: String).void }
  def expected_checksum=(value); end

  sig { returns(T.nilable(Spokes::FileServer)) }
  def file_server; end

  sig { params(value: T.nilable(Spokes::FileServer)).void }
  def file_server=(value); end

  sig { returns(Integer) }
  def network_replica_id; end

  sig { params(value: Integer).void }
  def network_replica_id=(value); end

  sig { returns(T::Boolean) }
  def quiescing; end

  sig { params(value: T::Boolean).void }
  def quiescing=(value); end

  sig { returns(Integer) }
  def read_weight; end

  sig { params(value: Integer).void }
  def read_weight=(value); end

  sig { returns(Integer) }
  def replica_state; end

  sig { params(value: Integer).void }
  def replica_state=(value); end

  sig { returns(Integer) }
  def updated_at; end

  sig { params(value: Integer).void }
  def updated_at=(value); end
end

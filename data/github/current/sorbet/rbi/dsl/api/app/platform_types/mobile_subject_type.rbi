# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Api::App::PlatformTypes::MobileSubjectType`.
# Please instead update this file by running `bin/tapioca dsl Api::App::PlatformTypes::MobileSubjectType`.

module Api::App::PlatformTypes::MobileSubjectType
  sig { returns(T::Boolean) }
  def check_suite?; end

  sig { returns(T::Boolean) }
  def code?; end

  sig { returns(T::Boolean) }
  def commit?; end

  sig { returns(T::Boolean) }
  def commits?; end

  sig { returns(T::Boolean) }
  def copilot_paywall?; end

  sig { returns(T::Boolean) }
  def copilot_settings?; end

  sig { returns(T::Boolean) }
  def copilot_upsell?; end

  sig { returns(T::Boolean) }
  def deep_link?; end

  sig { returns(T::Boolean) }
  def deployment_review?; end

  sig { returns(T::Boolean) }
  def diff?; end

  sig { returns(T::Boolean) }
  def discussion?; end

  sig { returns(T::Boolean) }
  def discussions?; end

  sig { returns(T::Boolean) }
  def draft_issue?; end

  sig { returns(T::Boolean) }
  def feed?; end

  sig { returns(T::Boolean) }
  def file?; end

  sig { returns(T::Boolean) }
  def filter_assignee?; end

  sig { returns(T::Boolean) }
  def filter_author?; end

  sig { returns(T::Boolean) }
  def filter_discussion_category?; end

  sig { returns(T::Boolean) }
  def filter_discussion_is_unanswered?; end

  sig { returns(T::Boolean) }
  def filter_discussion_top?; end

  sig { returns(T::Boolean) }
  def filter_discussion_viewer?; end

  sig { returns(T::Boolean) }
  def filter_issue_status?; end

  sig { returns(T::Boolean) }
  def filter_issue_viewer?; end

  sig { returns(T::Boolean) }
  def filter_label?; end

  sig { returns(T::Boolean) }
  def filter_language?; end

  sig { returns(T::Boolean) }
  def filter_milestone?; end

  sig { returns(T::Boolean) }
  def filter_notification_filter?; end

  sig { returns(T::Boolean) }
  def filter_notification_focused?; end

  sig { returns(T::Boolean) }
  def filter_notification_is_unread?; end

  sig { returns(T::Boolean) }
  def filter_notification_status?; end

  sig { returns(T::Boolean) }
  def filter_organization?; end

  sig { returns(T::Boolean) }
  def filter_project?; end

  sig { returns(T::Boolean) }
  def filter_pull_request_review_status?; end

  sig { returns(T::Boolean) }
  def filter_pull_request_status?; end

  sig { returns(T::Boolean) }
  def filter_pull_request_viewer?; end

  sig { returns(T::Boolean) }
  def filter_repository?; end

  sig { returns(T::Boolean) }
  def filter_repository_type?; end

  sig { returns(T::Boolean) }
  def filter_repository_visibility?; end

  sig { returns(T::Boolean) }
  def filter_sort?; end

  sig { returns(T::Boolean) }
  def filter_trending_date_range?; end

  sig { returns(T::Boolean) }
  def filter_trending_language?; end

  sig { returns(T::Boolean) }
  def filter_trending_spoken_language?; end

  sig { returns(T::Boolean) }
  def gist?; end

  sig { returns(T::Boolean) }
  def global_search?; end

  sig { returns(T::Boolean) }
  def home?; end

  sig { returns(T::Boolean) }
  def issue?; end

  sig { returns(T::Boolean) }
  def issues?; end

  sig { returns(T::Boolean) }
  def jump_to?; end

  sig { returns(T::Boolean) }
  def navigation_bar?; end

  sig { returns(T::Boolean) }
  def notifications?; end

  sig { returns(T::Boolean) }
  def organization?; end

  sig { returns(T::Boolean) }
  def organizations?; end

  sig { returns(T::Boolean) }
  def project?; end

  sig { returns(T::Boolean) }
  def projects?; end

  sig { returns(T::Boolean) }
  def pull_request?; end

  sig { returns(T::Boolean) }
  def pull_requests?; end

  sig { returns(T::Boolean) }
  def push_notification_action?; end

  sig { returns(T::Boolean) }
  def push_notification_assign?; end

  sig { returns(T::Boolean) }
  def push_notification_deployment_approval?; end

  sig { returns(T::Boolean) }
  def push_notification_mention?; end

  sig { returns(T::Boolean) }
  def push_notification_mobile_auth_request?; end

  sig { returns(T::Boolean) }
  def push_notification_pull_request_review?; end

  sig { returns(T::Boolean) }
  def push_notification_release?; end

  sig { returns(T::Boolean) }
  def push_notification_review_request?; end

  sig { returns(T::Boolean) }
  def push_notifications?; end

  sig { returns(T::Boolean) }
  def release?; end

  sig { returns(T::Boolean) }
  def releases?; end

  sig { returns(T::Boolean) }
  def repositories?; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(T::Boolean) }
  def repository_advisory?; end

  sig { returns(T::Boolean) }
  def repository_dependabot_thread_alert?; end

  sig { returns(T::Boolean) }
  def repository_vulnerability_alert?; end

  sig { returns(T::Boolean) }
  def security_advisory?; end

  sig { returns(T::Boolean) }
  def settings?; end

  sig { returns(T::Boolean) }
  def shortcut?; end

  sig { returns(T::Boolean) }
  def submit_review_sheet?; end

  sig { returns(T::Boolean) }
  def swipe_actions?; end

  sig { returns(T::Boolean) }
  def team_discussion?; end

  sig { returns(T::Boolean) }
  def toast?; end

  sig { returns(T::Boolean) }
  def user?; end

  sig { returns(T::Boolean) }
  def users?; end

  sig { returns(T::Boolean) }
  def workflow_run?; end

  CHECK_SUITE = T.let("CHECK_SUITE", String)
  CODE = T.let("CODE", String)
  COMMIT = T.let("COMMIT", String)
  COMMITS = T.let("COMMITS", String)
  COPILOT_PAYWALL = T.let("COPILOT_PAYWALL", String)
  COPILOT_SETTINGS = T.let("COPILOT_SETTINGS", String)
  COPILOT_UPSELL = T.let("COPILOT_UPSELL", String)
  DEEP_LINK = T.let("DEEP_LINK", String)
  DEPLOYMENT_REVIEW = T.let("DEPLOYMENT_REVIEW", String)
  DIFF = T.let("DIFF", String)
  DISCUSSION = T.let("DISCUSSION", String)
  DISCUSSIONS = T.let("DISCUSSIONS", String)
  DRAFT_ISSUE = T.let("DRAFT_ISSUE", String)
  FEED = T.let("FEED", String)
  FILE = T.let("FILE", String)
  FILTER_ASSIGNEE = T.let("FILTER_ASSIGNEE", String)
  FILTER_AUTHOR = T.let("FILTER_AUTHOR", String)
  FILTER_DISCUSSION_CATEGORY = T.let("FILTER_DISCUSSION_CATEGORY", String)
  FILTER_DISCUSSION_IS_UNANSWERED = T.let("FILTER_DISCUSSION_IS_UNANSWERED", String)
  FILTER_DISCUSSION_TOP = T.let("FILTER_DISCUSSION_TOP", String)
  FILTER_DISCUSSION_VIEWER = T.let("FILTER_DISCUSSION_VIEWER", String)
  FILTER_ISSUE_STATUS = T.let("FILTER_ISSUE_STATUS", String)
  FILTER_ISSUE_VIEWER = T.let("FILTER_ISSUE_VIEWER", String)
  FILTER_LABEL = T.let("FILTER_LABEL", String)
  FILTER_LANGUAGE = T.let("FILTER_LANGUAGE", String)
  FILTER_MILESTONE = T.let("FILTER_MILESTONE", String)
  FILTER_NOTIFICATION_FILTER = T.let("FILTER_NOTIFICATION_FILTER", String)
  FILTER_NOTIFICATION_FOCUSED = T.let("FILTER_NOTIFICATION_FOCUSED", String)
  FILTER_NOTIFICATION_IS_UNREAD = T.let("FILTER_NOTIFICATION_IS_UNREAD", String)
  FILTER_NOTIFICATION_STATUS = T.let("FILTER_NOTIFICATION_STATUS", String)
  FILTER_ORGANIZATION = T.let("FILTER_ORGANIZATION", String)
  FILTER_PROJECT = T.let("FILTER_PROJECT", String)
  FILTER_PULL_REQUEST_REVIEW_STATUS = T.let("FILTER_PULL_REQUEST_REVIEW_STATUS", String)
  FILTER_PULL_REQUEST_STATUS = T.let("FILTER_PULL_REQUEST_STATUS", String)
  FILTER_PULL_REQUEST_VIEWER = T.let("FILTER_PULL_REQUEST_VIEWER", String)
  FILTER_REPOSITORY = T.let("FILTER_REPOSITORY", String)
  FILTER_REPOSITORY_TYPE = T.let("FILTER_REPOSITORY_TYPE", String)
  FILTER_REPOSITORY_VISIBILITY = T.let("FILTER_REPOSITORY_VISIBILITY", String)
  FILTER_SORT = T.let("FILTER_SORT", String)
  FILTER_TRENDING_DATE_RANGE = T.let("FILTER_TRENDING_DATE_RANGE", String)
  FILTER_TRENDING_LANGUAGE = T.let("FILTER_TRENDING_LANGUAGE", String)
  FILTER_TRENDING_SPOKEN_LANGUAGE = T.let("FILTER_TRENDING_SPOKEN_LANGUAGE", String)
  GIST = T.let("GIST", String)
  GLOBAL_SEARCH = T.let("GLOBAL_SEARCH", String)
  HOME = T.let("HOME", String)
  ISSUE = T.let("ISSUE", String)
  ISSUES = T.let("ISSUES", String)
  JUMP_TO = T.let("JUMP_TO", String)
  NAVIGATION_BAR = T.let("NAVIGATION_BAR", String)
  NOTIFICATIONS = T.let("NOTIFICATIONS", String)
  ORGANIZATION = T.let("ORGANIZATION", String)
  ORGANIZATIONS = T.let("ORGANIZATIONS", String)
  PROJECT = T.let("PROJECT", String)
  PROJECTS = T.let("PROJECTS", String)
  PULL_REQUEST = T.let("PULL_REQUEST", String)
  PULL_REQUESTS = T.let("PULL_REQUESTS", String)
  PUSH_NOTIFICATIONS = T.let("PUSH_NOTIFICATIONS", String)
  PUSH_NOTIFICATION_ACTION = T.let("PUSH_NOTIFICATION_ACTION", String)
  PUSH_NOTIFICATION_ASSIGN = T.let("PUSH_NOTIFICATION_ASSIGN", String)
  PUSH_NOTIFICATION_DEPLOYMENT_APPROVAL = T.let("PUSH_NOTIFICATION_DEPLOYMENT_APPROVAL", String)
  PUSH_NOTIFICATION_MENTION = T.let("PUSH_NOTIFICATION_MENTION", String)
  PUSH_NOTIFICATION_MOBILE_AUTH_REQUEST = T.let("PUSH_NOTIFICATION_MOBILE_AUTH_REQUEST", String)
  PUSH_NOTIFICATION_PULL_REQUEST_REVIEW = T.let("PUSH_NOTIFICATION_PULL_REQUEST_REVIEW", String)
  PUSH_NOTIFICATION_RELEASE = T.let("PUSH_NOTIFICATION_RELEASE", String)
  PUSH_NOTIFICATION_REVIEW_REQUEST = T.let("PUSH_NOTIFICATION_REVIEW_REQUEST", String)
  RELEASE = T.let("RELEASE", String)
  RELEASES = T.let("RELEASES", String)
  REPOSITORIES = T.let("REPOSITORIES", String)
  REPOSITORY = T.let("REPOSITORY", String)
  REPOSITORY_ADVISORY = T.let("REPOSITORY_ADVISORY", String)
  REPOSITORY_DEPENDABOT_THREAD_ALERT = T.let("REPOSITORY_DEPENDABOT_THREAD_ALERT", String)
  REPOSITORY_VULNERABILITY_ALERT = T.let("REPOSITORY_VULNERABILITY_ALERT", String)
  SECURITY_ADVISORY = T.let("SECURITY_ADVISORY", String)
  SETTINGS = T.let("SETTINGS", String)
  SHORTCUT = T.let("SHORTCUT", String)
  SUBMIT_REVIEW_SHEET = T.let("SUBMIT_REVIEW_SHEET", String)
  SWIPE_ACTIONS = T.let("SWIPE_ACTIONS", String)
  TEAM_DISCUSSION = T.let("TEAM_DISCUSSION", String)
  TOAST = T.let("TOAST", String)
  USER = T.let("USER", String)
  USERS = T.let("USERS", String)
  WORKFLOW_RUN = T.let("WORKFLOW_RUN", String)
end

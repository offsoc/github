# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::ReactionCreate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::ReactionCreate`.

class Hydro::Schemas::Github::V1::ReactionCreate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      content: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      spamurai_form_signals: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals),
      subject_id: T.nilable(Integer),
      subject_type: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, content: nil, repository: nil, repository_owner: nil, request_context: nil, spamurai_form_signals: nil, subject_id: nil, subject_type: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_content; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_spamurai_form_signals; end

  sig { void }
  def clear_subject_id; end

  sig { void }
  def clear_subject_type; end

  sig { returns(String) }
  def content; end

  sig { params(value: String).void }
  def content=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V2::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)) }
  def spamurai_form_signals; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpamuraiFormSignals)).void }
  def spamurai_form_signals=(value); end

  sig { returns(Integer) }
  def subject_id; end

  sig { params(value: Integer).void }
  def subject_id=(value); end

  sig { returns(String) }
  def subject_type; end

  sig { params(value: String).void }
  def subject_type=(value); end
end

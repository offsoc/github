# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::PackageRegistry::V0::PackageEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::PackageRegistry::V0::PackageEvent`.

class Hydro::Schemas::Github::PackageRegistry::V0::PackageEvent
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      package_size: T.nilable(Integer),
      package_version: T.nilable(String),
      registry_package_id: T.nilable(Integer),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user_agent: T.nilable(String)
    ).void
  end
  def initialize(action: nil, actor: nil, package_size: nil, package_version: nil, registry_package_id: nil, repository: nil, request_context: nil, user_agent: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_package_size; end

  sig { void }
  def clear_package_version; end

  sig { void }
  def clear_registry_package_id; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user_agent; end

  sig { returns(Integer) }
  def package_size; end

  sig { params(value: Integer).void }
  def package_size=(value); end

  sig { returns(String) }
  def package_version; end

  sig { params(value: String).void }
  def package_version=(value); end

  sig { returns(Integer) }
  def registry_package_id; end

  sig { params(value: Integer).void }
  def registry_package_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(String) }
  def user_agent; end

  sig { params(value: String).void }
  def user_agent=(value); end
end

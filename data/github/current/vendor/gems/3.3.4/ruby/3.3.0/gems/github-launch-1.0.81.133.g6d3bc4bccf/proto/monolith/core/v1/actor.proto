syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "core/v1/identity.proto";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

// Actor models the information needed to identify a specific entity or gather additional context about it (by
// database ID, global ID, or slug identifier).
message Actor {
  // Type is an enumeration that identifies the type of actor.
  enum Type {
    // TYPE_INVALID should never be provided. Enums require a zero value and it's
    // safer to make this something that should indicate bad input instead of
    // defaulting to a valid value like TYPE_USER, etc.
    TYPE_INVALID = 0;
    // TYPE_USER represents a GitHub user.
    TYPE_USER = 1;
    // TYPE_TEAM represents a team in an organization on GitHub.
    // (deprecated: feature flags cannot be flipped for a team)
    TYPE_TEAM = 2;
    // TYPE_BUSINESS represents a business on GitHub.
    // (deprecated: feature flags cannot be flipped for a business)
    TYPE_BUSINESS = 3;
    // TYPE_ORGANIZATION represents an organization on GitHub.
    TYPE_ORGANIZATION = 4;
    // TYPE_REPOSITORY represents a repository on GitHub.
    TYPE_REPOSITORY = 5;
  }
  // type is the kind of entity for the ID. (required)
  Type type = 1;
  // id is the database ID for the entity. (required if id_string is not provided)
  int64 id = 2;
  // id_string is a string identifier (name, slug, or other value) that can be
  // used to identify the entity. (required if id is not provided)
  string id_string = 3;
  // The billing plan belonging to the actor
  string plan_name = 4;
  // only applies to repos, this will be null in other cases
  google.protobuf.BoolValue is_private = 5;
  // time actor was created
  google.protobuf.Timestamp created_at = 6;
  // global_id of actor
  Identity global_id = 7;
  // is the actor hammy? (may be null, as this does not apply to enterprises, for example)
  google.protobuf.BoolValue is_hammy = 8;
}

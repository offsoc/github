# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-linguist` gem.
# Please instead update this file by running `bin/tapioca gem github-linguist`.

# source://github-linguist//lib/linguist/generated.rb#1
module Linguist
  class << self
    # Public: Detects the Language of the blob.
    #
    # blob - an object that includes the Linguist `BlobHelper` interface;
    #       see Linguist::LazyBlob and Linguist::FileBlob for examples
    #
    # Returns Language or nil.
    #
    # source://github-linguist//lib/linguist.rb#20
    def detect(blob, allow_empty: T.unsafe(nil)); end

    # Internal: Perform instrumentation on a block
    #
    #     Linguist.instrument("linguist.dosomething", :blob => blob) do
    #       # logic to instrument here.
    #     end
    #
    # source://github-linguist//lib/linguist.rb#96
    def instrument(*args, &bk); end

    # Public: Set an instrumenter.
    #
    #     class CustomInstrumenter
    #       def instrument(name, payload = {})
    #         warn "Instrumenting #{name}: #{payload[:blob]}"
    #       end
    #     end
    #
    #     Linguist.instrumenter = CustomInstrumenter.new
    #
    # The instrumenter must conform to the `ActiveSupport::Notifications`
    # interface, which defines `#instrument` and accepts:
    #
    # name    - the String name of the event (e.g. "linguist.detected")
    # payload - a Hash of the exception context.
    #
    # source://github-linguist//lib/linguist.rb#88
    def instrumenter; end

    # Public: Set an instrumenter.
    #
    #     class CustomInstrumenter
    #       def instrument(name, payload = {})
    #         warn "Instrumenting #{name}: #{payload[:blob]}"
    #       end
    #     end
    #
    #     Linguist.instrumenter = CustomInstrumenter.new
    #
    # The instrumenter must conform to the `ActiveSupport::Notifications`
    # interface, which defines `#instrument` and accepts:
    #
    # name    - the String name of the event (e.g. "linguist.detected")
    # payload - a Hash of the exception context.
    #
    # source://github-linguist//lib/linguist.rb#88
    def instrumenter=(_arg0); end
  end
end

# source://github-linguist//lib/linguist/heuristics.rb#154
class Linguist::AlwaysMatch
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/heuristics.rb#155
  def match?(input); end
end

# source://github-linguist//lib/linguist/heuristics.rb#142
class Linguist::And
  # @return [And] a new instance of And
  #
  # source://github-linguist//lib/linguist/heuristics.rb#144
  def initialize(pats); end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/heuristics.rb#148
  def match?(input); end
end

# A Blob is a wrapper around the content of a file to make it quack
# like a Grit::Blob. It provides the basic interface: `name`,
# `data`, `path` and `size`.
#
# source://github-linguist//lib/linguist/blob.rb#7
class Linguist::Blob
  include ::Linguist::BlobHelper

  # Public: Initialize a new Blob.
  #
  # path    - A path String (does not necessarily exists on the file system).
  # content - Content of the file.
  # symlink - Whether the file is a symlink.
  #
  # Returns a Blob.
  #
  # @return [Blob] a new instance of Blob
  #
  # source://github-linguist//lib/linguist/blob.rb#17
  def initialize(path, content, symlink: T.unsafe(nil)); end

  # Public: File contents.
  #
  # Returns a String.
  #
  # source://github-linguist//lib/linguist/blob.rb#43
  def data; end

  # Public: Get file extension.
  #
  # Returns a String.
  #
  # source://github-linguist//lib/linguist/blob.rb#57
  def extension; end

  # Public: Return an array of the file extensions
  #
  #     >> Linguist::Blob.new("app/views/things/index.html.erb").extensions
  #     => [".html.erb", ".erb"]
  #
  # Returns an Array
  #
  # source://github-linguist//lib/linguist/blob.rb#67
  def extensions; end

  # Public: File name
  #
  # Returns a String
  #
  # source://github-linguist//lib/linguist/blob.rb#36
  def name; end

  # Public: Filename
  #
  # Examples
  #
  #   Blob.new("/path/to/linguist/lib/linguist.rb", "").path
  #   # =>  "/path/to/linguist/lib/linguist.rb"
  #
  # Returns a String
  #
  # source://github-linguist//lib/linguist/blob.rb#31
  def path; end

  # Public: Get byte size
  #
  # Returns an Integer.
  #
  # source://github-linguist//lib/linguist/blob.rb#50
  def size; end

  # Public: Is this a symlink?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob.rb#78
  def symlink?; end
end

# DEPRECATED Avoid mixing into Blob classes. Prefer functional interfaces
# like `Linguist.detect` over `Blob#language`. Functions are much easier to
# cache and compose.
#
# Avoid adding additional bloat to this module.
#
# BlobHelper is a mixin for Blobish classes that respond to "name",
# "data" and "size" such as Grit::Blob.
#
# source://github-linguist//lib/linguist/blob_helper.rb#16
module Linguist::BlobHelper
  # Internal: Lookup mime type for filename.
  #
  # Returns a MIME::Type
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#32
  def _mime_type; end

  # Public: Is the blob binary?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#125
  def binary?; end

  # Internal: Is the blob binary according to its mime type
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#55
  def binary_mime_type?; end

  # Public: Get the Content-Type header value
  #
  # This value is used when serving raw blobs.
  #
  # Examples
  #
  #   # => 'text/plain; charset=utf-8'
  #   # => 'application/octet-stream'
  #
  # Returns a content type String.
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#78
  def content_type; end

  # Public: Is this blob a CSV file?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#175
  def csv?; end

  # Try to guess the encoding
  #
  # Returns: a Hash, with :encoding, :confidence, :type
  #          this will return nil if an error occurred during detection or
  #          no valid encoding could be found
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#118
  def detect_encoding; end

  # Public: Get the Content-Disposition header value
  #
  # This value is used when serving raw blobs.
  #
  #   # => "attachment; filename=file.tar"
  #   # => "inline"
  #
  # Returns a content disposition String.
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#91
  def disposition; end

  # Public: Is the blob in a documentation directory?
  #
  # Documentation files are ignored by language statistics.
  #
  # See "documentation.yml" for a list of documentation conventions that match
  # this pattern.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#245
  def documentation?; end

  # Public: Is the blob empty?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#147
  def empty?; end

  # source://github-linguist//lib/linguist/blob_helper.rb#287
  def encoded_newlines_re; end

  # source://github-linguist//lib/linguist/blob_helper.rb#101
  def encoding; end

  # Public: Get the extname of the path
  #
  # Examples
  #
  #   blob(name='foo.rb').extname
  #   # => '.rb'
  #
  # Returns a String
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#25
  def extname; end

  # source://github-linguist//lib/linguist/blob_helper.rb#293
  def first_lines(n); end

  # Public: Is the blob a generated file?
  #
  # Generated source code is suppressed in diffs and is ignored by
  # language statistics.
  #
  # May load Blob#data
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#358
  def generated?; end

  # Internal: Does the blob have a ratio of long lines?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#205
  def high_ratio_of_long_lines?; end

  # Public: Is the blob a supported image format?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#161
  def image?; end

  # Internal: Should this blob be included in repository language statistics?
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#379
  def include_in_language_stats?; end

  # Public: Detects the Language of the blob.
  #
  # May load Blob#data
  #
  # Returns a Language or nil if none is detected
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#367
  def language; end

  # Public: Is the blob too big to load?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#191
  def large?; end

  # source://github-linguist//lib/linguist/blob_helper.rb#305
  def last_lines(n); end

  # Internal: Is the blob binary according to its mime type,
  # overriding it if we have better data from the languages.yml
  # database.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#64
  def likely_binary?; end

  # Public: Get each line of data
  #
  # Requires Blob#data
  #
  # Returns an Array of lines
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#254
  def lines; end

  # Public: Get number of lines of code
  #
  # Requires Blob#data
  #
  # Returns Integer
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#337
  def loc; end

  # Public: Get the actual blob mime type
  #
  # Examples
  #
  #   # => 'text/plain'
  #   # => 'text/html'
  #
  # Returns a mime type String.
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#48
  def mime_type; end

  # Public: Is the blob a PDF?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#182
  def pdf?; end

  # source://github-linguist//lib/linguist/blob_helper.rb#107
  def ruby_encoding; end

  # Public: Is the blob safe to colorize?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#198
  def safe_to_colorize?; end

  # Public: Get number of source lines of code
  #
  # Requires Blob#data
  #
  # Returns Integer
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#346
  def sloc; end

  # Public: Is the blob a supported 3D model format?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#168
  def solid?; end

  # Public: Is the blob text?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#154
  def text?; end

  # Internal: Get the TextMate compatible scope for the blob
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#372
  def tm_scope; end

  # Public: Is the blob in a vendored directory?
  #
  # Vendored files are ignored by language statistics.
  #
  # See "vendor.yml" for a list of vendored conventions that match
  # this pattern.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#230
  def vendored?; end

  # Public: Is the blob viewable?
  #
  # Non-viewable blobs will just show a "View Raw" link
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/blob_helper.rb#215
  def viewable?; end
end

# source://github-linguist//lib/linguist/blob_helper.rb#376
Linguist::BlobHelper::DETECTABLE_TYPES = T.let(T.unsafe(nil), Array)

# source://github-linguist//lib/linguist/blob_helper.rb#235
Linguist::BlobHelper::DocumentationRegexp = T.let(T.unsafe(nil), Regexp)

# source://github-linguist//lib/linguist/blob_helper.rb#186
Linguist::BlobHelper::MEGABYTE = T.let(T.unsafe(nil), Integer)

# source://github-linguist//lib/linguist/blob_helper.rb#220
Linguist::BlobHelper::VendoredRegexp = T.let(T.unsafe(nil), Regexp)

# Language content classifier.
#
# source://github-linguist//lib/linguist/classifier.rb#6
class Linguist::Classifier
  # Internal: Initialize a Classifier.
  #
  # @return [Classifier] a new instance of Classifier
  #
  # source://github-linguist//lib/linguist/classifier.rb#110
  def initialize(db = T.unsafe(nil)); end

  # Internal: Guess language of data
  #
  # data      - Array of tokens or String data to analyze.
  # languages - Array of language name Strings to restrict to.
  #
  # Returns sorted Array of result pairs. Each pair contains the
  # String language name and a Float score between 0.0 and 1.0.
  #
  # source://github-linguist//lib/linguist/classifier.rb#123
  def classify(tokens, languages); end

  private

  # Internal: show a table of probabilities for each <token,language> pair.
  #
  # The number in each table entry is the number of "points" that each
  # token contributes toward the belief that the file under test is a
  # particular language.  Points are additive.
  #
  # source://github-linguist//lib/linguist/classifier.rb#193
  def debug_dump_all_tokens(tokens, scores); end

  # source://github-linguist//lib/linguist/classifier.rb#158
  def debug_dump_scores(scores); end

  # source://github-linguist//lib/linguist/classifier.rb#164
  def debug_dump_tokens(tokens); end

  # source://github-linguist//lib/linguist/classifier.rb#244
  def dump_table(header, rows, legend = T.unsafe(nil)); end

  # source://github-linguist//lib/linguist/classifier.rb#154
  def verbosity; end

  class << self
    # Public: Use the classifier to detect language of the blob.
    #
    # blob               - An object that quacks like a blob.
    # possible_languages - Array of Language objects
    #
    # Examples
    #
    #   Classifier.call(FileBlob.new("path/to/file"), [
    #     Language["Ruby"], Language["Python"]
    #   ])
    #
    # Returns an Array of Language objects, most probable first.
    #
    # source://github-linguist//lib/linguist/classifier.rb#24
    def call(blob, possible_languages); end

    # Public: Guess language of data.
    #
    # db        - Hash of classifier tokens database.
    # data      - Array of tokens or String data to analyze.
    # languages - Array of language name Strings to restrict to.
    #
    # Examples
    #
    #   Classifier.classify(db, "def hello; end")
    #   # => [ 'Ruby', 0.90], ['Python', 0.2], ... ]
    #
    # Returns sorted Array of result pairs. Each pair contains the
    # String language name and a Float score between 0.0 and 1.0.
    #
    # source://github-linguist//lib/linguist/classifier.rb#104
    def classify(db, tokens, languages = T.unsafe(nil)); end

    # Filter vocabulary by minimum document frequency.
    #
    # source://github-linguist//lib/linguist/classifier.rb#320
    def filter_vocab_by_freq!(db, min_freq); end

    # Public: Finalize training.
    #
    # db - Hash classifier database object
    #
    # Examples:
    #   Classifier.finalize_train!(db)
    #
    # Returns nil.
    #
    # This method must be called after the last #train! call.
    #
    # source://github-linguist//lib/linguist/classifier.rb#75
    def finalize_train!(db); end

    # source://github-linguist//lib/linguist/classifier.rb#393
    def get_centroids(db); end

    # Compute inverse class frequency (ICF) for every term.
    #
    # source://github-linguist//lib/linguist/classifier.rb#363
    def inverse_class_freqs(db); end

    # source://github-linguist//lib/linguist/classifier.rb#296
    def l2_norm(vec); end

    # source://github-linguist//lib/linguist/classifier.rb#301
    def l2_normalize!(vec); end

    # source://github-linguist//lib/linguist/classifier.rb#380
    def normalize_samples!(db); end

    # source://github-linguist//lib/linguist/classifier.rb#309
    def similarity(a, b); end

    # Sort vocabulary lexicographically.
    #
    # source://github-linguist//lib/linguist/classifier.rb#341
    def sort_vocab!(db); end

    # source://github-linguist//lib/linguist/classifier.rb#276
    def to_vocabulary_index_termfreq(vocab, tokens); end

    # source://github-linguist//lib/linguist/classifier.rb#285
    def to_vocabulary_index_termfreq_gaps(vocab, tokens); end

    # Public: Train classifier that data is a certain language.
    #
    # db       - Hash classifier database object
    # language - String language of data
    # data     - String contents of file or array of tokens.
    #
    # Examples
    #
    #   Classifier.train!(db, 'Ruby', "def hello; end")
    #
    # Returns nil.
    #
    # Set LINGUIST_DEBUG=1, =2 or =3 to print internal statistics.
    #
    # source://github-linguist//lib/linguist/classifier.rb#44
    def train!(db, language, data); end
  end
end

# Maximum number of bytes to consider for classification.
# This is only used at evaluation time. During training, full content of
# samples is used.
#
# source://github-linguist//lib/linguist/classifier.rb#10
Linguist::Classifier::CLASSIFIER_CONSIDER_BYTES = T.let(T.unsafe(nil), Integer)

# source://github-linguist//lib/linguist/classifier.rb#152
Linguist::Classifier::MIN_DOCUMENT_FREQUENCY = T.let(T.unsafe(nil), Integer)

# A FileBlob is a wrapper around a File object to make it quack
# like a Grit::Blob. It provides the basic interface: `name`,
# `data`, `path` and `size`.
#
# source://github-linguist//lib/linguist/file_blob.rb#8
class Linguist::FileBlob < ::Linguist::Blob
  # Public: Initialize a new FileBlob from a path
  #
  # path      - A path String that exists on the file system.
  # base_path - Optional base to relativize the path
  #
  # Returns a FileBlob.
  #
  # @return [FileBlob] a new instance of FileBlob
  #
  # source://github-linguist//lib/linguist/file_blob.rb#17
  def initialize(path, base_path = T.unsafe(nil)); end

  # Public: Read file contents.
  #
  # Returns a String.
  #
  # source://github-linguist//lib/linguist/file_blob.rb#37
  def data; end

  # Public: Read file permissions
  #
  # Returns a String like '100644'
  #
  # source://github-linguist//lib/linguist/file_blob.rb#25
  def mode; end

  # Public: Get byte size
  #
  # Returns an Integer.
  #
  # source://github-linguist//lib/linguist/file_blob.rb#44
  def size; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/file_blob.rb#29
  def symlink?; end
end

# source://github-linguist//lib/linguist/generated.rb#2
class Linguist::Generated
  # Internal: Initialize Generated instance
  #
  # name - String filename
  # data - String blob data
  #
  # @return [Generated] a new instance of Generated
  #
  # source://github-linguist//lib/linguist/generated.rb#19
  def initialize(name, data); end

  # Internal: Is the blob a Bazel generated bzlmod lockfile?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#515
  def bazel_lock?; end

  # Internal: Is the blob a generated Rust Cargo lock file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#494
  def cargo_lock?; end

  # Internal: Is the blob a generated Rust Cargo original file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#501
  def cargo_orig?; end

  # Internal: Is the blob part of Carthage/Build/, which contains dependencies not meant for humans in pull requests.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#149
  def carthage_build?; end

  # Internal: Is the blob part of Pods/, which contains dependencies not meant for humans in pull requests.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#142
  def cocoapods?; end

  # Internal: Is the blob of JS generated by CoffeeScript?
  #
  # CoffeeScript is meant to output JS that would be difficult to
  # tell if it was generated or not. Look for a number of patterns
  # output by the CS compiler.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#210
  def compiled_coffeescript?; end

  # Internal: Is this a compiled C/C++ file from Cython?
  #
  # Cython-compiled C/C++ files typically contain:
  # /* Generated by Cython x.x.x on ... */
  # on the first line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#545
  def compiled_cython_file?; end

  # Internal: Is the blob a generated php composer lock file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#480
  def composer_lock?; end

  # Lazy load blob data if block was passed in.
  #
  # Awful, awful stuff happening here.
  #
  # Returns String data.
  #
  # source://github-linguist//lib/linguist/generated.rb#32
  def data; end

  # Internal: Is the blob a generated deno lockfile, which are not meant for humans in pull requests.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#444
  def deno_lock?; end

  # Internal: Is the blob a generated esy lock file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#437
  def esy_lock?; end

  # Returns the value of attribute extname.
  #
  # source://github-linguist//lib/linguist/generated.rb#25
  def extname; end

  # Internal: Extract a Hash of name/content pairs from an HTML <meta> tag
  #
  # source://github-linguist//lib/linguist/generated.rb#849
  def extract_html_meta(match); end

  # Internal: Is the blob a generated Nix flakes lock file?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#508
  def flake_lock?; end

  # Internal: Is the blob a generated file?
  #
  # Generated source code is suppressed in diffs and is ignored by
  # language statistics.
  #
  # Please add additional test coverage to
  # `test/test_blob.rb#test_generated` if you make any changes.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#53
  def generated?; end

  # Is this a generated ANTLR file?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#532
  def generated_antlr?; end

  # Internal: Is the blob generated by Apache Thrift compiler?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#375
  def generated_apache_thrift?; end

  # Internal: Is the blob generated by Zephir?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#487
  def generated_by_zephir?; end

  # Internal: Is this a generated Dart file?
  #
  # A dart-lang/appengine generated file contains:
  # // Generated code. Do not modify.
  # on the first line.
  #
  # An owl generated file contains:
  # // GENERATED CODE - DO NOT MODIFY
  # on the first line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#692
  def generated_dart?; end

  # Internal: Is this a generated Game Maker Studio (2) metadata file?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#717
  def generated_gamemakerstudio?; end

  # Internal: Is this a generated GIMP C image file?
  #
  # GIMP saves C sources with one of two comment forms:
  # * `/* GIMP RGB C-Source image dump (<filename>.c) */` (C source export)
  # * `/*  GIMP header image file format (RGB): <filename>.h  */` (Header export)
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#731
  def generated_gimp?; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#328
  def generated_go?; end

  # Internal: Is this a GrammarKit-generated file?
  #
  # A GrammarKit-generated file typically contain:
  # // This is a generated file. Not intended for manual editing.
  # on the first line. This is not always the case, as it's possible to
  # customize the class header.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#630
  def generated_grammarkit?; end

  # Internal: Is this a relay-compiler generated graphql file?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#710
  def generated_graphql_relay?; end

  # Internal: Is this a protobuf/grpc-generated C++ file?
  #
  # A generated file contains:
  # // Generated by the gRPC C++ plugin.
  # on the first line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#675
  def generated_grpc_cpp?; end

  # Internal: Is this a generated Haxe-generated source file?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#751
  def generated_haxe?; end

  # Internal: Is this a generated HTML file?
  #
  # HTML documents generated by authoring tools often include a
  # a <meta> tag in the header of the form:
  #
  #    <meta name="generator" content="DocGen v5.0.1" />
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#764
  def generated_html?; end

  # Internal: Is the blob a Javascript source file generated by the
  # Protocol Buffer compiler?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#363
  def generated_javascript_protocol_buffer?; end

  # Internal: Is this a JFlex-generated file?
  #
  # A JFlex-generated file contains:
  # /* The following code was generated by JFlex x.y.z on d/at/e ti:me */
  # on the first line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#616
  def generated_jflex?; end

  # Internal: Is this a Jison-generated file?
  #
  # Jison-generated parsers typically contain:
  # /* parser generated by jison
  # on the first line.
  #
  # Jison-generated lexers typically contain:
  # /* generated by jison-lex
  # on the first line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#661
  def generated_jison?; end

  # Internal: Is the blob a C/C++ header generated by the Java JNI tool javah?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#383
  def generated_jni_header?; end

  # Internal: Is this a generated jOOQ file?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#804
  def generated_jooq?; end

  # Internal: Is it a KiCAD or GFortran module file?
  #
  # KiCAD module files contain:
  # PCBNEW-LibModule-V1  yyyy-mm-dd h:mm:ss XM
  # on the first line.
  #
  # GFortran module files contain:
  # GFORTRAN module version 'x' created from
  # on the first line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#576
  def generated_module?; end

  # Internal: Is this a codegen file for a .NET project?
  #
  # Visual Studio often uses code generation to generate partial classes, and
  # these files can be quite unwieldy. Let's hide them.
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#267
  def generated_net_designer_file?; end

  # Internal: Is this a generated documentation file for a .NET assembly?
  #
  # .NET developers often check in the XML Intellisense file along with an
  # assembly - however, these don't have a special extension, so we have to
  # dig into the contents to determine if it's a docfile. Luckily, these files
  # are extremely structured, so recognizing them is easy.
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#250
  def generated_net_docfile?; end

  # Internal: Is this a codegen file for Specflow feature file?
  #
  # Visual Studio's SpecFlow extension generates *.feature.cs files
  # from *.feature files, they are not meant to be consumed by humans.
  # Let's hide them.
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#278
  def generated_net_specflow_feature_file?; end

  # Internal: Is the blob of JS a parser generated by PEG.js?
  #
  # PEG.js-generated parsers are not meant to be consumed by humans.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#287
  def generated_parser?; end

  # Internal: Is this a generated Delphi Interface file for a type library?
  #
  # Delphi Type Library Import tool generates *_TLB.pas files based on .ridl files.
  # They are not meant to be altered by humans.
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#815
  def generated_pascal_tlb?; end

  # Internal: Is the file a generated Perl/Pollution/Portability header file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#701
  def generated_perl_ppport_header?; end

  # Internal: Is the blob of PostScript generated?
  #
  # PostScript files are often generated by other programs. If they tell us so,
  # we can detect them.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#305
  def generated_postscript?; end

  # Internal: Is the blob a C++, Java or Python source file generated by the
  # Protocol Buffer compiler?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#352
  def generated_protocol_buffer?; end

  # Internal: Is the blob a protocol buffer file generated by the
  # go-to-protobuf tool?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#339
  def generated_protocol_buffer_from_go?; end

  # Internal: Is this a Racc-generated file?
  #
  # A Racc-generated file contains:
  # # This file is automatically generated by Racc x.y.z
  # on the third line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#603
  def generated_racc?; end

  # Internal: Is this a roxygen2-generated file?
  #
  # A roxygen2-generated file typically contain:
  # % Generated by roxygen2: do not edit by hand
  # on the first line.
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#643
  def generated_roxygen2?; end

  # Internal: Is this a Sorbet RBI file generated by Tapioca?
  #
  # Tapioca generates non-human-editable .rbi files in several different
  # ways:
  #
  # 1. `tapioca gem` uses reflection to generate generic .rbi for gems.
  # 2. `tapioca dsl` uses DSL compilers to generate .rbi for modules/classes.
  # 3. `tapioca annotations` pulls .rbi from remote sources.
  #
  # All are marked with similar wording.
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#831
  def generated_sorbet_rbi?; end

  # Internal: Is this a generated SQLx query file?
  #
  # SQLx is a Rust SQL library which generates `**/.sqlx/query-*.json` files
  # in offline mode (enabled by default).
  #
  # These are used to be able to compile a project without requiring
  # the development database to be online.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#876
  def generated_sqlx_query?; end

  # Internal: Is this a metadata file from Unity3D?
  #
  # Unity3D Meta files start with:
  #   fileFormatVersion: X
  #   guid: XXXXXXXXXXXXXXX
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#590
  def generated_unity3d_meta?; end

  # Internal: Is this a generated Microsoft Visual Studio 6.0 build file?
  #
  # Return true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#741
  def generated_visualstudio6?; end

  # Internal: Is the blob a generated Yarn Plug'n'Play?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#465
  def generated_yarn_plugnplay?; end

  # Internal: Is the blob a generated Go dep or glide lock file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#409
  def go_lock?; end

  # Internal: Is the blob part of the Go vendor/ tree,
  # not meant for humans in pull requests.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#402
  def go_vendor?; end

  # Internal: Is the blob part of Godeps/,
  # which are not meant for humans in pull requests.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#473
  def godeps?; end

  # Internal: Does the blob contain a source-map reference?
  #
  # We assume that if one of the last 2 lines starts with a source-map
  # reference, then the current file was generated from other files.
  #
  # We use the last 2 lines because the last line might be empty.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#184
  def has_source_map?; end

  # Internal: Is this an HTML coverage report?
  #
  # Tools like coverage.py generate HTML reports under an `htmlcov` directory.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#844
  def htmlcov?; end

  # Internal: Is the blob an IntelliJ IDEA project file?
  #
  # JetBrains IDEs generate project files under an `.idea` directory
  # that are sometimes checked into version control.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#135
  def intellij_file?; end

  # Public: Get each line of data
  #
  # Returns an Array of lines
  #
  # source://github-linguist//lib/linguist/generated.rb#39
  def lines; end

  # Internal: Does extname indicate a filetype which is commonly minified?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#156
  def maybe_minified?; end

  # Internal: Is the blob a minified file?
  #
  # Consider a file minified if the average line length is
  # greater then 110c.
  #
  # Currently, only JS and CSS files are detected by this method.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#168
  def minified_files?; end

  # Returns the value of attribute name.
  #
  # source://github-linguist//lib/linguist/generated.rb#25
  def name; end

  # Internal: Is the blob part of node_modules/, which are not meant for humans in pull requests.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#394
  def node_modules?; end

  # Internal: Is the blob a generated npm shrinkwrap or package lock file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#451
  def npm_shrinkwrap_or_package_lock?; end

  # Internal: Is the blob a generated pdm.lock?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#423
  def pdm_lock?; end

  # Internal: Is this a Pipenv lock file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#554
  def pipenv_lock?; end

  # Internal: Is the blob a generated pnpm lockfile?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#458
  def pnpm_lock?; end

  # Internal: Is the blob a generated poetry.lock?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#416
  def poetry_lock?; end

  # Internal: Is the blob a generated source-map?
  #
  # Source-maps usually have .css.map or .js.map extensions. In case they
  # are not following the name convention, detect them based on the content.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#195
  def source_map?; end

  # Internal: Is this a Terraform lock file?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#561
  def terraform_lock?; end

  # Internal: Is the blob a generated uv.lock?
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#430
  def uv_lock?; end

  # Is the blob a VCR Cassette file?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#522
  def vcr_cassette?; end

  # Internal: Is the blob an Xcode file?
  #
  # Generated if the file extension is an Xcode
  # file extension.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/generated.rb#125
  def xcode_file?; end

  class << self
    # Public: Is the blob a generated file?
    #
    # name - String filename
    # data - String blob data. A block also may be passed in for lazy
    #        loading. This behavior is deprecated and you should always
    #        pass in a String.
    #
    # Return true or false
    #
    # @return [Boolean]
    #
    # source://github-linguist//lib/linguist/generated.rb#11
    def generated?(name, data); end
  end
end

# source://github-linguist//lib/linguist/generated.rb#370
Linguist::Generated::APACHE_THRIFT_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://github-linguist//lib/linguist/generated.rb#746
Linguist::Generated::HAXE_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://github-linguist//lib/linguist/generated.rb#346
Linguist::Generated::PROTOBUF_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://github-linguist//lib/linguist/grammars.rb#2
module Linguist::Grammars
  class << self
    # Get the path to the directory containing the language grammar JSON files.
    #
    # Returns a String.
    #
    # source://github-linguist//lib/linguist/grammars.rb#6
    def path; end
  end
end

# A collection of simple heuristics that can be used to better analyze languages.
#
# source://github-linguist//lib/linguist/heuristics.rb#5
class Linguist::Heuristics
  # Internal
  #
  # @return [Heuristics] a new instance of Heuristics
  #
  # source://github-linguist//lib/linguist/heuristics.rb#101
  def initialize(exts, rules); end

  # Internal: Perform the heuristic
  #
  # source://github-linguist//lib/linguist/heuristics.rb#127
  def call(data); end

  # Internal: Return the heuristic's target extensions
  #
  # source://github-linguist//lib/linguist/heuristics.rb#107
  def extensions; end

  # Internal: Return the heuristic's candidate languages
  #
  # source://github-linguist//lib/linguist/heuristics.rb#112
  def languages; end

  # Internal: Check if this heuristic matches the candidate filenames or
  # languages.
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/heuristics.rb#120
  def matches?(filename, candidates); end

  class << self
    # Public: Get all heuristic definitions
    #
    # Returns an Array of heuristic objects.
    #
    # source://github-linguist//lib/linguist/heuristics.rb#40
    def all; end

    # Public: Use heuristics to detect language of the blob.
    #
    # blob               - An object that quacks like a blob.
    # possible_languages - Array of Language objects
    #
    # Examples
    #
    #   Heuristics.call(FileBlob.new("path/to/file"), [
    #     Language["Ruby"], Language["Python"]
    #   ])
    #
    # Returns an Array of languages, or empty if none matched or were inconclusive.
    #
    # source://github-linguist//lib/linguist/heuristics.rb#20
    def call(blob, candidates); end

    # Internal: Load heuristics from 'heuristics.yml'.
    #
    # source://github-linguist//lib/linguist/heuristics.rb#46
    def load; end

    # source://github-linguist//lib/linguist/heuristics.rb#65
    def load_config; end

    # source://github-linguist//lib/linguist/heuristics.rb#69
    def parse_rule(named_patterns, rule); end

    # Internal: Converts a string or array of strings to regexp
    #
    # str: string or array of strings. If it is an array of strings,
    #      Regexp.union will be used.
    #
    # source://github-linguist//lib/linguist/heuristics.rb#89
    def to_regex(str); end
  end
end

# source://github-linguist//lib/linguist/heuristics.rb#6
Linguist::Heuristics::HEURISTICS_CONSIDER_BYTES = T.let(T.unsafe(nil), Integer)

# Language names that are recognizable by GitHub. Defined languages
# can be highlighted, searched and listed under the Top Languages page.
#
# Languages are defined in `lib/linguist/languages.yml`.
#
# source://github-linguist//lib/linguist/language.rb#24
class Linguist::Language
  # Internal: Initialize a new Language
  #
  # attributes - A hash of attributes
  #
  # @return [Language] a new instance of Language
  #
  # source://github-linguist//lib/linguist/language.rb#258
  def initialize(attributes = T.unsafe(nil)); end

  # source://github-linguist//lib/linguist/language.rb#473
  def ==(other); end

  # Public: Get Ace mode
  #
  # Examples
  #
  #  # => "text"
  #  # => "javascript"
  #  # => "c_cpp"
  #
  # Returns a String name or nil
  #
  # source://github-linguist//lib/linguist/language.rb#367
  def ace_mode; end

  # Public: Get aliases
  #
  # Examples
  #
  #   Language['C++'].aliases
  #   # => ["cpp"]
  #
  # Returns an Array of String names
  #
  # source://github-linguist//lib/linguist/language.rb#340
  def aliases; end

  # Public: Get CodeMirror MIME type mode
  #
  # Examples
  #
  #  # => "nil"
  #  # => "text/x-javascript"
  #  # => "text/x-csrc"
  #
  # Returns a String name or nil
  #
  # source://github-linguist//lib/linguist/language.rb#392
  def codemirror_mime_type; end

  # Public: Get CodeMirror mode
  #
  # Maps to a directory in the `mode/` source code.
  #   https://github.com/codemirror/CodeMirror/tree/master/mode
  #
  # Examples
  #
  #  # => "nil"
  #  # => "javascript"
  #  # => "clike"
  #
  # Returns a String name or nil
  #
  # source://github-linguist//lib/linguist/language.rb#381
  def codemirror_mode; end

  # Public: Get color.
  #
  # Returns a hex color String.
  #
  # source://github-linguist//lib/linguist/language.rb#330
  def color; end

  # Public: Get default alias name
  #
  # Returns the alias name String
  #
  # source://github-linguist//lib/linguist/language.rb#442
  def default_alias; end

  # Public: Get default alias name
  #
  # Returns the alias name String
  #
  # source://github-linguist//lib/linguist/language.rb#442
  def default_alias_name; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/language.rb#477
  def eql?(other); end

  # Public: Get URL escaped name.
  #
  # Examples
  #
  #   "C%23"
  #   "C%2B%2B"
  #   "Common%20Lisp"
  #
  # Returns the escaped String.
  #
  # source://github-linguist//lib/linguist/language.rb#435
  def escaped_name; end

  # Public: Get extensions
  #
  # Examples
  #
  #   # => ['.rb', '.rake', ...]
  #
  # Returns the extensions Array
  #
  # source://github-linguist//lib/linguist/language.rb#406
  def extensions; end

  # Public: Get filenames
  #
  # Examples
  #
  #   # => ['Rakefile', ...]
  #
  # Returns the extensions Array
  #
  # source://github-linguist//lib/linguist/language.rb#424
  def filenames; end

  # Public:
  #
  # source://github-linguist//lib/linguist/language.rb#320
  def fs_name; end

  # source://github-linguist//lib/linguist/language.rb#302
  def get_types; end

  # Public: Get Language group
  #
  # Returns a Language
  #
  # source://github-linguist//lib/linguist/language.rb#450
  def group; end

  # source://github-linguist//lib/linguist/language.rb#481
  def hash; end

  # source://github-linguist//lib/linguist/language.rb#485
  def inspect; end

  # Public: Get interpreters
  #
  # Examples
  #
  #   # => ['awk', 'gawk', 'mawk' ...]
  #
  # Returns the interpreters Array
  #
  # source://github-linguist//lib/linguist/language.rb#415
  def interpreters; end

  # Public: Get language_id (used in GitHub search)
  #
  # Examples
  #
  #   # => "1"
  #   # => "2"
  #   # => "3"
  #
  # Returns the integer language_id
  #
  # source://github-linguist//lib/linguist/language.rb#351
  def language_id; end

  # Public: Get proper name
  #
  # Examples
  #
  #   # => "Ruby"
  #   # => "Python"
  #   # => "Perl"
  #
  # Returns the name String
  #
  # source://github-linguist//lib/linguist/language.rb#316
  def name; end

  # Public: Is it popular?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/language.rb#457
  def popular?; end

  # Public: Get the name of a TextMate-compatible scope
  #
  # Returns the scope
  #
  # source://github-linguist//lib/linguist/language.rb#356
  def tm_scope; end

  # Public: Return name as String representation
  #
  # source://github-linguist//lib/linguist/language.rb#469
  def to_s; end

  # Public: Get type.
  #
  # Returns a type Symbol or nil.
  #
  # source://github-linguist//lib/linguist/language.rb#325
  def type; end

  # Public: Is it not popular?
  #
  # Returns true or false
  #
  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/language.rb#464
  def unpopular?; end

  # Public: Should language lines be wrapped
  #
  # Returns true or false
  #
  # source://github-linguist//lib/linguist/language.rb#397
  def wrap; end

  class << self
    # Public: Look up Language by its name.
    #
    # name - The String name of the Language
    #
    # Examples
    #
    #   Language['Ruby']
    #   # => #<Language name="Ruby">
    #
    #   Language['ruby']
    #   # => #<Language name="Ruby">
    #
    # Returns the Language or nil if none was found.
    #
    # source://github-linguist//lib/linguist/language.rb#215
    def [](name); end

    # Public: Get all Languages
    #
    # Returns an Array of Languages
    #
    # source://github-linguist//lib/linguist/language.rb#96
    def all; end

    # Detect languages by a specific type
    #
    # type - A symbol that exists within TYPES
    #
    # Returns an array
    #
    # source://github-linguist//lib/linguist/language.rb#41
    def by_type(type); end

    # Public: A List of languages with assigned colors.
    #
    # Returns an Array of Languages.
    #
    # source://github-linguist//lib/linguist/language.rb#251
    def colors; end

    # Internal: Create a new Language object
    #
    # attributes - A hash of attributes
    #
    # Returns a Language object
    #
    # source://github-linguist//lib/linguist/language.rb#50
    def create(attributes = T.unsafe(nil)); end

    # Public: Look up Language by one of its aliases.
    #
    # name - A String alias of the Language
    #
    # Examples
    #
    #   Language.find_by_alias('cpp')
    #   # => #<Language name="C++">
    #
    # Returns the Language or nil if none was found.
    #
    # source://github-linguist//lib/linguist/language.rb#125
    def find_by_alias(name); end

    # Public: Look up Languages by file extension.
    #
    # The behaviour of this method recently changed.
    # See the second example below.
    #
    # filename - The path String.
    #
    # Examples
    #
    #   Language.find_by_extension('dummy.rb')
    #   # => [#<Language name="Ruby">]
    #   Language.find_by_extension('rb')
    #   # => []
    #
    # Returns all matching Languages or [] if none were found.
    #
    # source://github-linguist//lib/linguist/language.rb#165
    def find_by_extension(filename); end

    # Public: Look up Languages by filename.
    #
    # The behaviour of this method recently changed.
    # See the second example below.
    #
    # filename - The path String.
    #
    # Examples
    #
    #   Language.find_by_filename('Cakefile')
    #   # => [#<Language name="CoffeeScript">]
    #   Language.find_by_filename('foo.rb')
    #   # => []
    #
    # Returns all matching Languages or [] if none were found.
    #
    # source://github-linguist//lib/linguist/language.rb#145
    def find_by_filename(filename); end

    # Public: Look up Languages by its language_id.
    #
    # language_id - Integer of language_id
    #
    # Examples
    #
    #   Language.find_by_id(100)
    #   # => [#<Language name="Elixir">]
    #
    # Returns the matching Language
    #
    # source://github-linguist//lib/linguist/language.rb#198
    def find_by_id(language_id); end

    # Public: Look up Languages by interpreter.
    #
    # interpreter - String of interpreter name
    #
    # Examples
    #
    #   Language.find_by_interpreter("bash")
    #   # => [#<Language name="Bash">]
    #
    # Returns the matching Language
    #
    # source://github-linguist//lib/linguist/language.rb#184
    def find_by_interpreter(interpreter); end

    # Public: Look up Language by its proper name.
    #
    # name - The String name of the Language
    #
    # Examples
    #
    #   Language.find_by_name('Ruby')
    #   # => #<Language name="Ruby">
    #
    # Returns the Language or nil if none was found.
    #
    # source://github-linguist//lib/linguist/language.rb#110
    def find_by_name(name); end

    # Public: A List of popular languages
    #
    # Popular languages are sorted to the top of language chooser
    # dropdowns.
    #
    # This list is configured in "popular.yml".
    #
    # Returns an Array of Languages.
    #
    # source://github-linguist//lib/linguist/language.rb#232
    def popular; end

    # Public: A List of non-popular languages
    #
    # Unpopular languages appear below popular ones in language
    # chooser dropdowns.
    #
    # This list is created from all the languages not listed in "popular.yml".
    #
    # Returns an Array of Languages.
    #
    # source://github-linguist//lib/linguist/language.rb#244
    def unpopular; end
  end
end

# source://github-linguist//lib/linguist/lazy_blob.rb#6
class Linguist::LazyBlob
  include ::Linguist::BlobHelper

  # @return [LazyBlob] a new instance of LazyBlob
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#27
  def initialize(repo, oid, path, mode = T.unsafe(nil)); end

  # source://github-linguist//lib/linguist/lazy_blob.rb#97
  def cleanup!; end

  # source://github-linguist//lib/linguist/lazy_blob.rb#82
  def data; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#74
  def detectable?; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#40
  def documentation?; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#48
  def generated?; end

  # source://github-linguist//lib/linguist/lazy_blob.rb#35
  def git_attributes; end

  # source://github-linguist//lib/linguist/lazy_blob.rb#64
  def language; end

  # Returns the value of attribute mode.
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#23
  def mode; end

  # Returns the value of attribute path.
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#22
  def name; end

  # Returns the value of attribute oid.
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#21
  def oid; end

  # Returns the value of attribute path.
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#22
  def path; end

  # Returns the value of attribute repository.
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#20
  def repository; end

  # source://github-linguist//lib/linguist/lazy_blob.rb#87
  def size; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#92
  def symlink?; end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#56
  def vendored?; end

  protected

  # Returns true if the attribute is present and not the string "false" and not the false boolean.
  #
  # source://github-linguist//lib/linguist/lazy_blob.rb#104
  def boolean_attribute(attribute); end

  # source://github-linguist//lib/linguist/lazy_blob.rb#108
  def load_blob!; end
end

# source://github-linguist//lib/linguist/lazy_blob.rb#7
Linguist::LazyBlob::GIT_ATTR = T.let(T.unsafe(nil), Array)

# source://github-linguist//lib/linguist/lazy_blob.rb#14
Linguist::LazyBlob::GIT_ATTR_FLAGS = T.let(T.unsafe(nil), Integer)

# source://github-linguist//lib/linguist/lazy_blob.rb#13
Linguist::LazyBlob::GIT_ATTR_OPTS = T.let(T.unsafe(nil), Hash)

# source://github-linguist//lib/linguist/lazy_blob.rb#18
Linguist::LazyBlob::MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://github-linguist//lib/linguist/heuristics.rb#160
class Linguist::NegativePattern
  # @return [NegativePattern] a new instance of NegativePattern
  #
  # source://github-linguist//lib/linguist/heuristics.rb#162
  def initialize(pat); end

  # @return [Boolean]
  #
  # source://github-linguist//lib/linguist/heuristics.rb#166
  def match?(input); end
end

# A Repository is an abstraction of a Grit::Repo or a basic file
# system tree. It holds a list of paths pointing to Blobish objects.
#
# Its primary purpose is for gathering language statistics across
# the entire project.
#
# source://github-linguist//lib/linguist/repository.rb#10
class Linguist::Repository
  # Public: Initialize a new Repository to be analyzed for language
  # data
  #
  # repo - a Rugged::Repository object
  # commit_oid - the sha1 of the commit that will be analyzed;
  #              this is usually the master branch
  # max_tree_size - the maximum tree size to consider for analysis (default: MAX_TREE_SIZE)
  #
  # Returns a Repository
  #
  # @raise [TypeError]
  # @return [Repository] a new instance of Repository
  #
  # source://github-linguist//lib/linguist/repository.rb#32
  def initialize(repo, commit_oid, max_tree_size = T.unsafe(nil)); end

  # Public: Return the language breakdown of this repository by file
  #
  # Returns a map of language names => [filenames...]
  #
  # source://github-linguist//lib/linguist/repository.rb#99
  def breakdown_by_file; end

  # Public: Return the cached results of the analysis
  #
  # This is a per-file breakdown that can be passed to other instances
  # of Linguist::Repository to perform incremental scans
  #
  # Returns a map of filename => [language, size]
  #
  # source://github-linguist//lib/linguist/repository.rb#115
  def cache; end

  # source://github-linguist//lib/linguist/repository.rb#131
  def current_tree; end

  # Public: Get primary Language of repository.
  #
  # Returns a language name
  #
  # source://github-linguist//lib/linguist/repository.rb#82
  def language; end

  # Public: Returns a breakdown of language stats.
  #
  # Examples
  #
  #   # => { 'Ruby' => 46319,
  #          'JavaScript' => 258 }
  #
  # Returns a Hash of language names and Integer size values.
  #
  # source://github-linguist//lib/linguist/repository.rb#69
  def languages; end

  # Public: Load the results of a previous analysis on this repository
  # to speed up the new scan.
  #
  # The new analysis will be performed incrementally as to only take
  # into account the file changes since the last time the repository
  # was scanned
  #
  # old_commit_oid - the sha1 of the commit that was previously analyzed
  # old_stats - the result of the previous analysis, obtained by calling
  #             Repository#cache on the old repository
  #
  # Returns nothing
  #
  # source://github-linguist//lib/linguist/repository.rb#55
  def load_existing_stats(old_commit_oid, old_stats); end

  # source://github-linguist//lib/linguist/repository.rb#125
  def read_index; end

  # Returns the value of attribute repository.
  #
  # source://github-linguist//lib/linguist/repository.rb#11
  def repository; end

  # Public: Get the total size of the repository.
  #
  # Returns a byte size Integer
  #
  # source://github-linguist//lib/linguist/repository.rb#92
  def size; end

  protected

  # source://github-linguist//lib/linguist/repository.rb#136
  def compute_stats(old_commit_oid, cache = T.unsafe(nil)); end

  # source://github-linguist//lib/linguist/repository.rb#175
  def update_file_map(blob, file_map, key); end

  class << self
    # Public: Create a new Repository based on the stats of
    # an existing one
    #
    # source://github-linguist//lib/linguist/repository.rb#17
    def incremental(repo, commit_oid, old_commit_oid, old_stats, max_tree_size = T.unsafe(nil)); end
  end
end

# source://github-linguist//lib/linguist/repository.rb#13
Linguist::Repository::MAX_TREE_SIZE = T.let(T.unsafe(nil), Integer)

# source://github-linguist//lib/linguist/sha256.rb#4
module Linguist::SHA256
  class << self
    # Public: Create deep nested digest of value object.
    #
    # Useful for object comparison.
    #
    # obj - Object to digest.
    #
    # Returns String hex digest
    #
    # source://github-linguist//lib/linguist/sha256.rb#12
    def hexdigest(obj); end
  end
end

# Model for accessing classifier training data.
#
# source://github-linguist//lib/linguist/samples.rb#13
module Linguist::Samples
  class << self
    # Hash of serialized samples object, cached in memory
    #
    # source://github-linguist//lib/linguist/samples.rb#21
    def cache; end

    # Public: Build Classifier from all samples.
    #
    # Returns trained Classifier.
    #
    # source://github-linguist//lib/linguist/samples.rb#81
    def data; end

    # Public: Iterate over each sample.
    #
    # &block - Yields Sample to block
    #
    # Returns nothing.
    #
    # source://github-linguist//lib/linguist/samples.rb#43
    def each(&block); end

    # Hash of serialized samples object, uncached
    #
    # source://github-linguist//lib/linguist/samples.rb#26
    def load_samples; end
  end
end

# Path for serialized samples db
#
# source://github-linguist//lib/linguist/samples.rb#18
Linguist::Samples::PATH = T.let(T.unsafe(nil), String)

# Path to samples root directory
#
# source://github-linguist//lib/linguist/samples.rb#15
Linguist::Samples::ROOT = T.let(T.unsafe(nil), String)

# source://github-linguist//lib/linguist/shebang.rb#4
class Linguist::Shebang
  class << self
    # Public: Use shebang to detect language of the blob.
    #
    # blob               - An object that quacks like a blob.
    # candidates         - A list of candidate languages.
    #
    # Examples
    #
    #   Shebang.call(FileBlob.new("path/to/file"))
    #
    # Returns an array of languages from the candidate list for which the
    # blob's shebang is valid. Returns an empty list if there is no shebang.
    # If the candidate list is empty, any language is a valid candidate.
    #
    # source://github-linguist//lib/linguist/shebang.rb#17
    def call(blob, candidates); end

    # Public: Get the interpreter from the shebang
    #
    # Returns a String or nil
    #
    # source://github-linguist//lib/linguist/shebang.rb#27
    def interpreter(data); end
  end
end

# source://github-linguist//lib/linguist/strategy/filename.rb#2
module Linguist::Strategy; end

# Detects language based on extension
#
# source://github-linguist//lib/linguist/strategy/extension.rb#7
class Linguist::Strategy::Extension
  class << self
    # Public: Use the file extension to detect the blob's language.
    #
    # blob               - An object that quacks like a blob.
    # candidates         - A list of candidate languages.
    #
    # Examples
    #
    #   Extension.call(FileBlob.new("path/to/file"))
    #
    # Returns an array of languages associated with a blob's file extension.
    # Selected languages must be in the candidate list, except if it's empty,
    # in which case any language is a valid candidate.
    #
    # source://github-linguist//lib/linguist/strategy/extension.rb#20
    def call(blob, candidates); end

    # Public: Return true if filename uses a generic extension.
    #
    # @return [Boolean]
    #
    # source://github-linguist//lib/linguist/strategy/extension.rb#27
    def generic?(filename); end

    # Internal: Load the contents of `generic.yml`
    #
    # source://github-linguist//lib/linguist/strategy/extension.rb#35
    def load; end
  end
end

# Detects language based on filename
#
# source://github-linguist//lib/linguist/strategy/filename.rb#4
class Linguist::Strategy::Filename
  class << self
    # Public: Use the filename to detect the blob's language.
    #
    # blob               - An object that quacks like a blob.
    # candidates         - A list of candidate languages.
    #
    # Examples
    #
    #   Filename.call(FileBlob.new("path/to/file"))
    #
    # Returns an array of languages with a associated blob's filename.
    # Selected languages must be in the candidate list, except if it's empty,
    # in which case any language is a valid candidate.
    #
    # source://github-linguist//lib/linguist/strategy/filename.rb#17
    def call(blob, candidates); end
  end
end

# Detects man pages based on numeric file extensions with group suffixes.
#
# source://github-linguist//lib/linguist/strategy/manpage.rb#4
class Linguist::Strategy::Manpage
  class << self
    # Public: Use the file extension to match a possible man page,
    # only if no other candidates were previously identified.
    #
    # blob               - An object that quacks like a blob.
    # candidates         - A list of candidate languages.
    #
    # Examples
    #
    #   Manpage.call(FileBlob.new("path/to/file"))
    #
    # Returns:
    #   1. The list of candidates if it wasn't empty
    #   2. An array of ["Roff", "Roff Manpage"] if the file's
    #      extension matches a valid-looking man(1) section
    #   3. An empty Array for anything else
    #
    # source://github-linguist//lib/linguist/strategy/manpage.rb#27
    def call(blob, candidates = T.unsafe(nil)); end
  end
end

# Public: RegExp for matching conventional manpage extensions
#
# This is the same expression as that used by `github/markup`
#
# source://github-linguist//lib/linguist/strategy/manpage.rb#9
Linguist::Strategy::Manpage::MANPAGE_EXTS = T.let(T.unsafe(nil), Regexp)

# source://github-linguist//lib/linguist/strategy/modeline.rb#3
class Linguist::Strategy::Modeline
  class << self
    # Public: Detects language based on Vim and Emacs modelines
    #
    # blob               - An object that quacks like a blob.
    #
    # Examples
    #
    #   Modeline.call(FileBlob.new("path/to/file"))
    #
    # Returns an Array with one Language if the blob has a Vim or Emacs modeline
    # that matches a Language name or alias. Returns an empty array if no match.
    #
    # source://github-linguist//lib/linguist/strategy/modeline.rb#144
    def call(blob, _ = T.unsafe(nil)); end

    # Public: Get the modeline from the first n-lines of the file
    #
    # Returns a String or nil
    #
    # source://github-linguist//lib/linguist/strategy/modeline.rb#158
    def modeline(data); end
  end
end

# source://github-linguist//lib/linguist/strategy/modeline.rb#4
Linguist::Strategy::Modeline::EMACS_MODELINE = T.let(T.unsafe(nil), Regexp)

# source://github-linguist//lib/linguist/strategy/modeline.rb#128
Linguist::Strategy::Modeline::MODELINES = T.let(T.unsafe(nil), Array)

# Scope of the search for modelines
# Number of lines to check at the beginning and at the end of the file
#
# source://github-linguist//lib/linguist/strategy/modeline.rb#132
Linguist::Strategy::Modeline::SEARCH_SCOPE = T.let(T.unsafe(nil), Integer)

# NOTE: When changing this regex, be sure to keep the Vim Help heuristic updated too (#5347)
#
# source://github-linguist//lib/linguist/strategy/modeline.rb#53
Linguist::Strategy::Modeline::VIM_MODELINE = T.let(T.unsafe(nil), Regexp)

# Detects XML files based on root tag.
#
# source://github-linguist//lib/linguist/strategy/xml.rb#4
class Linguist::Strategy::XML
  class << self
    # Public: Use the root tag to detect the XML blobs, only if no other
    # candidates were previously identified.
    #
    # blob               - An object that quacks like a blob.
    # candidates         - A list of candidate languages.
    #
    # Examples
    #
    #   XML.call(FileBlob.new("path/to/file"))
    #
    # Returns the list of candidates if it wasn't empty, an array with the
    # XML language as sole item if the root tag is detected, and an empty
    # Array otherwise.
    #
    # source://github-linguist//lib/linguist/strategy/xml.rb#22
    def call(blob, candidates = T.unsafe(nil)); end
  end
end

# Scope of the search for the root tag
# Number of lines to check at the beginning of the file
#
# source://github-linguist//lib/linguist/strategy/xml.rb#7
Linguist::Strategy::XML::SEARCH_SCOPE = T.let(T.unsafe(nil), Integer)

# Generic programming language tokenizer.
#
# Tokens are designed for use in the language bayes classifier.
# It strips any data strings or comments and preserves significant
# language symbols.
#
# source://github-linguist//lib/linguist/tokenizer.rb#10
class Linguist::Tokenizer
  def extract_tokens(_arg0); end

  class << self
    # Public: Extract tokens from data
    #
    # data - String to tokenize
    #
    # Returns Array of token Strings.
    #
    # source://github-linguist//lib/linguist/tokenizer.rb#16
    def tokenize(data); end
  end
end

# source://github-linguist//lib/linguist/version.rb#2
Linguist::VERSION = T.let(T.unsafe(nil), String)

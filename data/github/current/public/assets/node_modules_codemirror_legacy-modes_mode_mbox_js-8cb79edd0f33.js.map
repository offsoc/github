{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_mbox_js-xxxxxxxxxxxx.js","mappings":"2KAAA,IAAIA,EAAU,CACZ,OAAQ,SAAU,WAAY,KAAM,KAAM,MAAO,aACjD,cAAe,aAAc,cAAe,gBAAiB,YAC7D,YAAa,aAAc,oBAAqB,cAAe,WAChE,CACGC,EAAiB,CACnB,OAAQ,UAAW,WAAY,WAAY,cAC5C,CAEGC,EAAa,SACbC,EAAY,SACZC,EAAgB,OAAW,KAAOJ,EAAQK,IAAI,CAAC,KAAO,OACtDC,EAAuB,OAAW,KAAOL,EAAeI,IAAI,CAAC,KAAO,OACpEE,EAAS,UACTC,EAAQ,eACRC,EAAa,uBACbC,EAAiB,SACjBC,EAAsB,eAwEnB,IAAMC,EAAO,CAClBC,KAAM,OACNC,WAAY,WACV,MAAO,CAELC,YAAa,GAEbC,SAAU,GAEVC,eAAgB,GAEhBV,OAAQ,KAERW,UAAW,EACb,CACF,EACAC,MAjFF,SAAmBC,CAAM,CAAEC,CAAK,EAC9B,GAAID,EAAOE,GAAG,GAAI,CAGhB,GADAD,EAAMN,WAAW,CAAG,GAChBM,EAAML,QAAQ,EAAII,EAAOG,KAAK,CAACrB,GAEjC,OAAO,KAMT,GAJEmB,EAAML,QAAQ,CAAG,GACjBK,EAAMd,MAAM,CAAG,KAGba,EAAOG,KAAK,CAACpB,GAGf,OAFAkB,EAAMH,SAAS,CAAG,GAClBG,EAAMN,WAAW,CAAG,GACb,OAIT,IADIQ,EACAN,EAAiB,SACrB,CAAKM,EAAQH,EAAOG,KAAK,CAACjB,EAAoB,GAC1C,GAAkB,GAAUiB,EAAQH,EAAOG,KAAK,CAACnB,EAAc,GACjEiB,EAAMH,SAAS,CAAG,GAClBG,EAAML,QAAQ,CAAG,GACjBK,EAAMJ,cAAc,CAAGA,EACvBI,EAAMd,MAAM,CAAGgB,CAAK,CAAC,EAAE,CAChB,QAKLF,EAAMH,SAAS,EAAKK,CAAAA,EAAQH,EAAOG,KAAK,CAAChB,EAAM,GACjDc,EAAML,QAAQ,CAAG,GACjBK,EAAMJ,cAAc,CAAG,GACvBI,EAAMd,MAAM,CAAGgB,CAAK,CAAC,EAAE,CAChB,SAGTF,EAAMH,SAAS,CAAG,GAClBE,EAAOI,SAAS,GACT,KACT,CAEA,GAAIH,EAAMN,WAAW,QACnB,EAAWQ,KAAK,CAACf,GAAe,QAC5BY,EAAOG,KAAK,CAACd,IACjBW,EAAOI,SAAS,GADqB,QAKvC,GAAIH,EAAML,QAAQ,CAAE,CAClB,IAAIS,EAvDN,YAuD6BJ,EAAMd,MAAM,CAvDR,SAC1B,SAwDL,GAAIc,EAAMJ,cAAc,CAAE,CACxB,GAAIG,EAAOG,KAAK,CAACb,GAAiB,OAAOe,EAAQ,QACjD,GAAIL,EAAOG,KAAK,CAACZ,GAAsB,OAAOc,CAChD,CAEA,OADAL,EAAOI,SAAS,GACTC,CACT,CAGA,OADAL,EAAOI,SAAS,GACT,IACT,EAmBEE,UAAW,SAASL,CAAK,EACvBA,EAAMH,SAAS,CAAGG,EAAMN,WAAW,CAAGM,EAAML,QAAQ,CAAG,EACzD,EACAW,aAAc,CACZC,aAAc5B,EAAQ6B,MAAM,CAAC5B,EAC/B,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/mbox.js"],"sourcesContent":["var rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nexport const mbox = {\n  name: \"mbox\",\n  startState: function() {\n    return {\n      // Is in a mbox separator\n      inSeparator: false,\n      // Is in a mail header\n      inHeader: false,\n      // If bracketed email is permitted. Only applicable when inHeader\n      emailPermitted: false,\n      // Name of current header\n      header: null,\n      // Is in a region of mail headers\n      inHeaders: false\n    };\n  },\n  token: readToken,\n  blankLine: function(state) {\n    state.inHeaders = state.inSeparator = state.inHeader = false;\n  },\n  languageData: {\n    autocomplete: rfc2822.concat(rfc2822NoEmail)\n  }\n}\n\n"],"names":["rfc2822","rfc2822NoEmail","whitespace","separator","rfc2822Header","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","mbox","name","startState","inSeparator","inHeader","emailPermitted","inHeaders","token","stream","state","sol","match","skipToEnd","style","blankLine","languageData","autocomplete","concat"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::BlobExcerptLoaded`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::BlobExcerptLoaded`.

class Hydro::Schemas::Github::V1::BlobExcerptLoaded
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      blob_oid: T.nilable(String),
      direction: T.nilable(T.any(Symbol, Integer)),
      first_line: T.nilable(Integer),
      last_line: T.nilable(Integer),
      path: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, blob_oid: nil, direction: nil, first_line: nil, last_line: nil, path: nil, repository: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def blob_oid; end

  sig { params(value: String).void }
  def blob_oid=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_blob_oid; end

  sig { void }
  def clear_direction; end

  sig { void }
  def clear_first_line; end

  sig { void }
  def clear_last_line; end

  sig { void }
  def clear_path; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.any(Symbol, Integer)) }
  def direction; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def direction=(value); end

  sig { returns(Integer) }
  def first_line; end

  sig { params(value: Integer).void }
  def first_line=(value); end

  sig { returns(Integer) }
  def last_line; end

  sig { params(value: Integer).void }
  def last_line=(value); end

  sig { returns(String) }
  def path; end

  sig { params(value: String).void }
  def path=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

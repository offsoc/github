# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::Entities::BillingPlanOwner`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::Entities::BillingPlanOwner`.

class Hydro::Schemas::Github::V1::Entities::BillingPlanOwner
  sig do
    params(
      database_id: T.nilable(Integer),
      global_id: T.nilable(String),
      name: T.nilable(String),
      spammy: T.nilable(T::Boolean),
      spamurai_classification: T.nilable(T.any(Symbol, Integer)),
      suspended: T.nilable(T::Boolean),
      tier: T.nilable(Integer),
      type: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(database_id: nil, global_id: nil, name: nil, spammy: nil, spamurai_classification: nil, suspended: nil, tier: nil, type: nil); end

  sig { void }
  def clear_database_id; end

  sig { void }
  def clear_global_id; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_spammy; end

  sig { void }
  def clear_spamurai_classification; end

  sig { void }
  def clear_suspended; end

  sig { void }
  def clear_tier; end

  sig { void }
  def clear_type; end

  sig { returns(Integer) }
  def database_id; end

  sig { params(value: Integer).void }
  def database_id=(value); end

  sig { returns(String) }
  def global_id; end

  sig { params(value: String).void }
  def global_id=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def spammy; end

  sig { params(value: T::Boolean).void }
  def spammy=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def spamurai_classification; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def spamurai_classification=(value); end

  sig { returns(T::Boolean) }
  def suspended; end

  sig { params(value: T::Boolean).void }
  def suspended=(value); end

  sig { returns(Integer) }
  def tier; end

  sig { params(value: Integer).void }
  def tier=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end
end

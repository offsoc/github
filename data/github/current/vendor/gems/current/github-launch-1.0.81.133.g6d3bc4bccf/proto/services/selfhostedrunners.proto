syntax = "proto3";
package git_hub.launch.services.selfhostedrunners;

option go_package = "github.com/github/launch/services/deploy/selfhostedrunners";

import "pbtypes/github.proto";

service SelfHostedRunners {
    rpc ListRunnersV2(ListRunnersRequest) returns (ListRunnersResponse);
    rpc BulkReplaceRunnerLabels(BulkReplaceRunnerLabelsRequest) returns (ListRunnersResponse);
    rpc BulkUpdateRunnerLabels(BulkUpdateRunnerLabelsRequest) returns (ListRunnersResponse);
    rpc GetRunner(GetRunnerRequest) returns (GetRunnerResponse);
    rpc GenerateJitRunnerConfig(GenerateJitRunnerRequest) returns (GenerateJitRunnerResponse);
    rpc RegisterRunner(RegisterRunnerRequest) returns (RegisterRunnerResponse);
    rpc DeleteRunner(DeleteRunnerRequest) returns (DeleteRunnerResponse);
    rpc ListDownloads(ListDownloadsRequest) returns (ListDownloadsResponse);
    rpc GetAccessPolicy(GetAccessPolicyRequest) returns (GetAccessPolicyResponse);
    rpc UpdateAccessPolicy(UpdateAccessPolicyRequest) returns (GetAccessPolicyResponse);
    rpc ListLabels(ListLabelsRequest) returns (ListLabelsResponse);
    rpc DeleteLabel(DeleteLabelRequest) returns (DeleteLabelResponse);
    rpc CreateLabel(CreateLabelRequest) returns (CreateLabelResponse);
}

message GetAccessPolicyRequest {
    pbtypes.git_hub.Identity owner_id = 1;
}

enum PermissionType {
  ALL_REPOSITORIES = 0;
  PRIVATE_REPOSITORIES = 1;
  SELECTED_REPOSITORIES = 2;
}

message UpdateAccessPolicyRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    PermissionType permission_type = 2;
    repeated pbtypes.git_hub.Identity selected_repositories = 3;
}

message GetAccessPolicyResponse {
    PermissionType permission_type = 1;
    repeated pbtypes.git_hub.Identity selected_repositories = 2;
}

message ListRunnersRequest {
    pbtypes.git_hub.Identity repository_id = 1;
    int64 per_page = 2;
    int64 page = 3;
    bool include_assigned_request = 4;
    int64 pool_id = 5;
    string name = 6;
    bool exclude_elastic_runners = 7;
}

message ListRunnersResponse {
    repeated Runner runners = 1;
    int64 total_runners = 2;
}

message BulkReplaceRunnerLabelsRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    repeated RunnerLabelsUpdate updates = 2;

    message RunnerLabelsUpdate {
        int64 runner_id = 1;
        repeated int64 label_ids = 2;
    }
}

message BulkUpdateRunnerLabelsRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    repeated LabelOps updates = 2;

    message LabelOps {
        int64 runner_id = 1;
        repeated int64 additions = 2;
        repeated int64 removals = 3;
    }
}

message GetRunnerRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 runner_id = 2;
}

message GetRunnerResponse {
    Runner runner = 1;
}

message GenerateJitRunnerRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    string name = 2;
    int64 runner_group_id = 3;
    repeated string labels = 4;
    string work_folder = 5;

    // the url of the github entity the runner will be configured to run
    // against, e.g. https://github.com/ORG/REPO
    string github_url = 6;
}

message GenerateJitRunnerResponse {
    Runner runner = 1;
    string encoded_jit_config = 2;
}

message RegisterRunnerRequest {
    pbtypes.git_hub.Identity repository_id = 1;
    pbtypes.git_hub.Identity owner_id = 2; //identifies the tenant for the runner; replaces repository_id: https://github.com/github/c2c-actions-runtime/issues/1783
    pbtypes.git_hub.Identity billing_owner_id = 3; // the highest level entity in the hierarchy. this will be a next_global_id
}

message RegisterRunnerResponse {
    string url = 1;
    string token = 2;
    string token_schema = 3;
}

message DeleteRunnerRequest {
    pbtypes.git_hub.Identity repository_id = 1;
    int64 runner_id = 2;
}

message DeleteRunnerResponse {
    string status = 1;
}

message Runner {
    int64 id = 1;
    string name = 2;
    string os = 3;
    string arch = 4;
    string status = 5;
    AssignedRequest assigned_request = 6;
    repeated Label labels = 7;
    int64 current_parallelism = 8;
    int64 runner_group_id = 9;

    message AssignedRequest {
        string job_name = 1;
        string check_run_id = 2;
        string external_build_id = 3;
    }
}

message ListDownloadsRequest {
    pbtypes.git_hub.Identity repository_id = 1;
}

message ListDownloadsResponse {
    repeated Download downloads = 1;
}

message Download {
    string type = 1;
    string platform = 2;
    string version = 3;
    string download_url = 4;
    string filename = 5;
    string os = 6;
    string architecture = 7;
    string download_token = 8;
    string sha256_hash = 9;
}

message ListLabelsRequest {
    pbtypes.git_hub.Identity owner_id = 1;
}

message ListLabelsResponse {
    repeated Label labels = 1;
}

message DeleteLabelRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    int64 label_id = 2;
}

message DeleteLabelResponse {
    string status = 1;
}

message CreateLabelRequest {
    pbtypes.git_hub.Identity owner_id = 1;
    string name = 2;
}

message CreateLabelResponse {
    Label label = 1;
}

message Label {
    int64 id = 1;
    string name = 2;
    string type = 3;
}

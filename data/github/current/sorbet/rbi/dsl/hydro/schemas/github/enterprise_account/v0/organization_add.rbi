# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationAdd`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationAdd`.

class Hydro::Schemas::Github::EnterpriseAccount::V0::OrganizationAdd
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      enterprise: T.nilable(Hydro::Schemas::Github::V1::Entities::Business),
      enterprise_trial: T.nilable(T::Boolean),
      new_organization: T.nilable(T::Boolean),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      previous_plan: T.nilable(String)
    ).void
  end
  def initialize(actor: nil, enterprise: nil, enterprise_trial: nil, new_organization: nil, organization: nil, previous_plan: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_enterprise; end

  sig { void }
  def clear_enterprise_trial; end

  sig { void }
  def clear_new_organization; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_previous_plan; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Business)) }
  def enterprise; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Business)).void }
  def enterprise=(value); end

  sig { returns(T::Boolean) }
  def enterprise_trial; end

  sig { params(value: T::Boolean).void }
  def enterprise_trial=(value); end

  sig { returns(T::Boolean) }
  def new_organization; end

  sig { params(value: T::Boolean).void }
  def new_organization=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(String) }
  def previous_plan; end

  sig { params(value: String).void }
  def previous_plan=(value); end
end

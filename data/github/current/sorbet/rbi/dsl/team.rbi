# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Team`.
# Please instead update this file by running `bin/tapioca dsl Team`.

class Team
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def notification_settings; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def privacies; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def review_request_delegation_algorithms; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Team).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Team]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Team)) }
    def fifth; end

    sig { returns(::Team) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Team)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Team) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Team).void)
      ).returns(T.nilable(T::Enumerator[::Team]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Team]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Team]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Team)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Team) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Team) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Team) }
    def first!; end

    sig { returns(T.nilable(::Team)) }
    def forty_two; end

    sig { returns(::Team) }
    def forty_two!; end

    sig { returns(T.nilable(::Team)) }
    def fourth; end

    sig { returns(::Team) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Team) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Team).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Team).void)).returns(::Team) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Team).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Team).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Team)) }
    def second; end

    sig { returns(::Team) }
    def second!; end

    sig { returns(T.nilable(::Team)) }
    def second_to_last; end

    sig { returns(::Team) }
    def second_to_last!; end

    sig { returns(::Team) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Team) }
    def take!; end

    sig { returns(T.nilable(::Team)) }
    def third; end

    sig { returns(::Team) }
    def third!; end

    sig { returns(T.nilable(::Team)) }
    def third_to_last; end

    sig { returns(::Team) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def closed!; end

    sig { returns(T::Boolean) }
    def closed?; end

    sig { void }
    def load_balance!; end

    sig { returns(T::Boolean) }
    def load_balance?; end

    sig { void }
    def notifications_disabled!; end

    sig { returns(T::Boolean) }
    def notifications_disabled?; end

    sig { void }
    def notifications_enabled!; end

    sig { returns(T::Boolean) }
    def notifications_enabled?; end

    sig { void }
    def round_robin!; end

    sig { returns(T::Boolean) }
    def round_robin?; end

    sig { void }
    def secret!; end

    sig { returns(T::Boolean) }
    def secret?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def avatar_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def avatar_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :avatars`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Avatar::PrivateCollectionProxy) }
    def avatars; end

    sig { params(value: T::Enumerable[::Avatar]).void }
    def avatars=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TeamDashboard) }
    def build_dashboard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EnterpriseTeamOrganizationMapping) }
    def build_enterprise_team_organization_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ExternalGroupTeam) }
    def build_external_group_team(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LdapMapping) }
    def build_ldap_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def build_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :configuration_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Configuration::Entry::PrivateCollectionProxy) }
    def configuration_entries; end

    sig { params(value: T::Enumerable[::Configuration::Entry]).void }
    def configuration_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def configuration_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def configuration_entry_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_creator!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TeamDashboard) }
    def create_dashboard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TeamDashboard) }
    def create_dashboard!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EnterpriseTeamOrganizationMapping) }
    def create_enterprise_team_organization_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EnterpriseTeamOrganizationMapping) }
    def create_enterprise_team_organization_mapping!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ExternalGroupTeam) }
    def create_external_group_team(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ExternalGroupTeam) }
    def create_external_group_team!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LdapMapping) }
    def create_ldap_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LdapMapping) }
    def create_ldap_mapping!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Organization) }
    def create_organization!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def creator; end

    sig { params(value: T.nilable(::User)).void }
    def creator=(value); end

    sig { returns(T.nilable(::TeamDashboard)) }
    def dashboard; end

    sig { params(value: T.nilable(::TeamDashboard)).void }
    def dashboard=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_post_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :discussion_posts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionPost::PrivateCollectionProxy) }
    def discussion_posts; end

    sig { params(value: T::Enumerable[::DiscussionPost]).void }
    def discussion_posts=(value); end

    sig { returns(T.nilable(::EnterpriseTeamOrganizationMapping)) }
    def enterprise_team_organization_mapping; end

    sig { params(value: T.nilable(::EnterpriseTeamOrganizationMapping)).void }
    def enterprise_team_organization_mapping=(value); end

    sig { returns(T.nilable(::ExternalGroupTeam)) }
    def external_group_team; end

    sig { params(value: T.nilable(::ExternalGroupTeam)).void }
    def external_group_team=(value); end

    sig { returns(T::Array[T.untyped]) }
    def group_mapping_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def group_mapping_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :group_mappings`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Team::GroupMapping::PrivateCollectionProxy) }
    def group_mappings; end

    sig { params(value: T::Enumerable[::Team::GroupMapping]).void }
    def group_mappings=(value); end

    sig { returns(T.nilable(::LdapMapping)) }
    def ldap_mapping; end

    sig { params(value: T.nilable(::LdapMapping)).void }
    def ldap_mapping=(value); end

    sig { returns(T.nilable(::Organization)) }
    def organization; end

    sig { params(value: T.nilable(::Organization)).void }
    def organization=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_team_membership_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_team_membership_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :pending_team_membership_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TeamMembershipRequest::PrivateCollectionProxy) }
    def pending_team_membership_requests; end

    sig { params(value: T::Enumerable[::TeamMembershipRequest]).void }
    def pending_team_membership_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pinned_dashboard_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pinned_dashboard_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :pinned_dashboards, through: :user_dashboard_teams`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::TeamDashboard::PrivateCollectionProxy) }
    def pinned_dashboards; end

    sig { params(value: T::Enumerable[::TeamDashboard]).void }
    def pinned_dashboards=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reference_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CrossReference::PrivateCollectionProxy) }
    def references; end

    sig { params(value: T::Enumerable[::CrossReference]).void }
    def references=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_creator; end

    sig { returns(T.nilable(::TeamDashboard)) }
    def reload_dashboard; end

    sig { returns(T.nilable(::EnterpriseTeamOrganizationMapping)) }
    def reload_enterprise_team_organization_mapping; end

    sig { returns(T.nilable(::ExternalGroupTeam)) }
    def reload_external_group_team; end

    sig { returns(T.nilable(::LdapMapping)) }
    def reload_ldap_mapping; end

    sig { returns(T.nilable(::Organization)) }
    def reload_organization; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :requests_to_be_child`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TeamChangeParentRequest::PrivateCollectionProxy) }
    def requests_to_be_child; end

    sig { params(value: T::Enumerable[::TeamChangeParentRequest]).void }
    def requests_to_be_child=(value); end

    sig { returns(T::Array[T.untyped]) }
    def requests_to_be_child_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def requests_to_be_child_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :requests_to_parent`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TeamChangeParentRequest::PrivateCollectionProxy) }
    def requests_to_parent; end

    sig { params(value: T::Enumerable[::TeamChangeParentRequest]).void }
    def requests_to_parent=(value); end

    sig { returns(T::Array[T.untyped]) }
    def requests_to_parent_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def requests_to_parent_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def review_request_delegation_excluded_member_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_request_delegation_excluded_member_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :review_request_delegation_excluded_members`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReviewRequestDelegationExcludedMember::PrivateCollectionProxy) }
    def review_request_delegation_excluded_members; end

    sig { params(value: T::Enumerable[::ReviewRequestDelegationExcludedMember]).void }
    def review_request_delegation_excluded_members=(value); end

    sig { returns(T::Array[T.untyped]) }
    def team_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def team_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :team_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TeamInvitation::PrivateCollectionProxy) }
    def team_invitations; end

    sig { params(value: T::Enumerable[::TeamInvitation]).void }
    def team_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def team_membership_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def team_membership_request_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :team_membership_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TeamMembershipRequest::PrivateCollectionProxy) }
    def team_membership_requests; end

    sig { params(value: T::Enumerable[::TeamMembershipRequest]).void }
    def team_membership_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def team_pending_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def team_pending_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :team_pending_invitations, through: :team_invitations`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::OrganizationInvitation::PrivateCollectionProxy) }
    def team_pending_invitations; end

    sig { params(value: T::Enumerable[::OrganizationInvitation]).void }
    def team_pending_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_dashboard_team_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_dashboard_team_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :user_dashboard_teams`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserDashboardTeam::PrivateCollectionProxy) }
    def user_dashboard_teams; end

    sig { params(value: T::Enumerable[::UserDashboardTeam]).void }
    def user_dashboard_teams=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_role_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_role_ids=(ids); end

    # This method is created by ActiveRecord on the `Team` class because it declared `has_many :user_roles`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserRole::PrivateCollectionProxy) }
    def user_roles; end

    sig { params(value: T::Enumerable[::UserRole]).void }
    def user_roles=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_organization_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def legacy_admin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def like_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_externally_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_notifications_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_notifications_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_secret(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def notifications_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def notifications_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_by_name_asc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def secret(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_minimum_privacy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_no_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_avatars; end

    sig { returns(Promise[T.untyped]) }
    def async_configuration_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_creator; end

    sig { returns(Promise[T.untyped]) }
    def async_dashboard; end

    sig { returns(Promise[T.untyped]) }
    def async_discussion_posts; end

    sig { returns(Promise[T.untyped]) }
    def async_enterprise_team_organization_mapping; end

    sig { returns(Promise[T.untyped]) }
    def async_external_group_team; end

    sig { returns(Promise[T.untyped]) }
    def async_group_mappings; end

    sig { returns(Promise[T.untyped]) }
    def async_ldap_mapping; end

    sig { returns(Promise[T.untyped]) }
    def async_organization; end

    sig { returns(Promise[T.untyped]) }
    def async_pending_team_membership_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_pinned_dashboards; end

    sig { returns(Promise[T.untyped]) }
    def async_references; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_requests_to_be_child; end

    sig { returns(Promise[T.untyped]) }
    def async_requests_to_parent; end

    sig { returns(Promise[T.untyped]) }
    def async_review_request_delegation_excluded_members; end

    sig { returns(Promise[T.untyped]) }
    def async_team_invitations; end

    sig { returns(Promise[T.untyped]) }
    def async_team_membership_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_team_pending_invitations; end

    sig { returns(Promise[T.untyped]) }
    def async_user_dashboard_teams; end

    sig { returns(Promise[T.untyped]) }
    def async_user_roles; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def creator_id=(value); end

    sig { returns(T::Boolean) }
    def creator_id?; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_before_last_save; end

    sig { returns(T.untyped) }
    def creator_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def creator_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def creator_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def creator_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def creator_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def creator_id_was; end

    sig { void }
    def creator_id_will_change!; end

    sig { returns(T::Boolean) }
    def deleted; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def deleted=(value); end

    sig { returns(T::Boolean) }
    def deleted?; end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def deleted_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def deleted_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def deleted_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def deleted_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def deleted_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_was; end

    sig { void }
    def deleted_will_change!; end

    sig { returns(T.untyped) }
    def description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.untyped) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_previously_was; end

    sig { returns(T.untyped) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def migration_complete; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def migration_complete=(value); end

    sig { returns(T::Boolean) }
    def migration_complete?; end

    sig { returns(T.nilable(T::Boolean)) }
    def migration_complete_before_last_save; end

    sig { returns(T.untyped) }
    def migration_complete_before_type_cast; end

    sig { returns(T::Boolean) }
    def migration_complete_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def migration_complete_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def migration_complete_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def migration_complete_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def migration_complete_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def migration_complete_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def migration_complete_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def migration_complete_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def migration_complete_was; end

    sig { void }
    def migration_complete_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def notification_setting; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def notification_setting=(value); end

    sig { returns(T::Boolean) }
    def notification_setting?; end

    sig { returns(T.nilable(::String)) }
    def notification_setting_before_last_save; end

    sig { returns(T.untyped) }
    def notification_setting_before_type_cast; end

    sig { returns(T::Boolean) }
    def notification_setting_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def notification_setting_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def notification_setting_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def notification_setting_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def notification_setting_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def notification_setting_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def notification_setting_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def notification_setting_previously_was; end

    sig { returns(T.nilable(::String)) }
    def notification_setting_was; end

    sig { void }
    def notification_setting_will_change!; end

    sig { returns(::Integer) }
    def organization_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def organization_id=(value); end

    sig { returns(T::Boolean) }
    def organization_id?; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_before_last_save; end

    sig { returns(T.untyped) }
    def organization_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def organization_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def organization_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def organization_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def organization_id_was; end

    sig { void }
    def organization_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def permission; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def permission=(value); end

    sig { returns(T::Boolean) }
    def permission?; end

    sig { returns(T.nilable(::String)) }
    def permission_before_last_save; end

    sig { returns(T.untyped) }
    def permission_before_type_cast; end

    sig { returns(T::Boolean) }
    def permission_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def permission_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def permission_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def permission_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def permission_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def permission_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def permission_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def permission_previously_was; end

    sig { returns(T.nilable(::String)) }
    def permission_was; end

    sig { void }
    def permission_will_change!; end

    sig { returns(::String) }
    def privacy; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def privacy=(value); end

    sig { returns(T::Boolean) }
    def privacy?; end

    sig { returns(T.nilable(::String)) }
    def privacy_before_last_save; end

    sig { returns(T.untyped) }
    def privacy_before_type_cast; end

    sig { returns(T::Boolean) }
    def privacy_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def privacy_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def privacy_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_previously_was; end

    sig { returns(T.nilable(::String)) }
    def privacy_was; end

    sig { void }
    def privacy_will_change!; end

    sig { returns(T::Boolean) }
    def private_posts_migrated; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def private_posts_migrated=(value); end

    sig { returns(T::Boolean) }
    def private_posts_migrated?; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_posts_migrated_before_last_save; end

    sig { returns(T.untyped) }
    def private_posts_migrated_before_type_cast; end

    sig { returns(T::Boolean) }
    def private_posts_migrated_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_posts_migrated_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_posts_migrated_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def private_posts_migrated_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def private_posts_migrated_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_posts_migrated_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def private_posts_migrated_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def private_posts_migrated_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_posts_migrated_was; end

    sig { void }
    def private_posts_migrated_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def repository_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_creator_id!; end

    sig { void }
    def restore_deleted!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_migration_complete!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_notification_setting!; end

    sig { void }
    def restore_organization_id!; end

    sig { void }
    def restore_permission!; end

    sig { void }
    def restore_privacy!; end

    sig { void }
    def restore_private_posts_migrated!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_review_request_delegation_algorithm!; end

    sig { void }
    def restore_review_request_delegation_always_assign_team_members!; end

    sig { void }
    def restore_review_request_delegation_count_members_already_requested!; end

    sig { void }
    def restore_review_request_delegation_enabled!; end

    sig { void }
    def restore_review_request_delegation_include_child_team_members!; end

    sig { void }
    def restore_review_request_delegation_member_count!; end

    sig { void }
    def restore_review_request_delegation_notify_team!; end

    sig { void }
    def restore_review_request_delegation_remove_team_request!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_tree_path!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable(::String)) }
    def review_request_delegation_algorithm; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def review_request_delegation_algorithm=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_algorithm?; end

    sig { returns(T.nilable(::String)) }
    def review_request_delegation_algorithm_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_algorithm_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_algorithm_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def review_request_delegation_algorithm_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def review_request_delegation_algorithm_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def review_request_delegation_algorithm_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def review_request_delegation_algorithm_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def review_request_delegation_algorithm_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def review_request_delegation_algorithm_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def review_request_delegation_algorithm_previously_was; end

    sig { returns(T.nilable(::String)) }
    def review_request_delegation_algorithm_was; end

    sig { void }
    def review_request_delegation_algorithm_will_change!; end

    sig { returns(T::Boolean) }
    def review_request_delegation_always_assign_team_members; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_always_assign_team_members=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_always_assign_team_members?; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_always_assign_team_members_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_always_assign_team_members_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_always_assign_team_members_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_always_assign_team_members_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_always_assign_team_members_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_always_assign_team_members_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_always_assign_team_members_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_always_assign_team_members_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_always_assign_team_members_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_always_assign_team_members_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_always_assign_team_members_was; end

    sig { void }
    def review_request_delegation_always_assign_team_members_will_change!; end

    sig { returns(T::Boolean) }
    def review_request_delegation_count_members_already_requested; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_count_members_already_requested=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_count_members_already_requested?; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_count_members_already_requested_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_count_members_already_requested_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_count_members_already_requested_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_count_members_already_requested_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_count_members_already_requested_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_count_members_already_requested_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_count_members_already_requested_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_count_members_already_requested_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_count_members_already_requested_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_count_members_already_requested_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_count_members_already_requested_was; end

    sig { void }
    def review_request_delegation_count_members_already_requested_will_change!; end

    sig { returns(T::Boolean) }
    def review_request_delegation_enabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_enabled=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_enabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_enabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_enabled_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_enabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_enabled_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_enabled_was; end

    sig { void }
    def review_request_delegation_enabled_will_change!; end

    sig { returns(T::Boolean) }
    def review_request_delegation_include_child_team_members; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_include_child_team_members=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_include_child_team_members?; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_include_child_team_members_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_include_child_team_members_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_include_child_team_members_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_include_child_team_members_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_include_child_team_members_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_include_child_team_members_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_include_child_team_members_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_include_child_team_members_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_include_child_team_members_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_include_child_team_members_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_include_child_team_members_was; end

    sig { void }
    def review_request_delegation_include_child_team_members_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def review_request_delegation_member_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def review_request_delegation_member_count=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_member_count?; end

    sig { returns(T.nilable(::Integer)) }
    def review_request_delegation_member_count_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_member_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_member_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_request_delegation_member_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_request_delegation_member_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def review_request_delegation_member_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def review_request_delegation_member_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_request_delegation_member_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def review_request_delegation_member_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def review_request_delegation_member_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def review_request_delegation_member_count_was; end

    sig { void }
    def review_request_delegation_member_count_will_change!; end

    sig { returns(T::Boolean) }
    def review_request_delegation_notify_team; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_notify_team=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_notify_team?; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_notify_team_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_notify_team_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_notify_team_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_notify_team_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_notify_team_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_notify_team_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_notify_team_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_notify_team_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_notify_team_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_notify_team_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_notify_team_was; end

    sig { void }
    def review_request_delegation_notify_team_will_change!; end

    sig { returns(T::Boolean) }
    def review_request_delegation_remove_team_request; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_remove_team_request=(value); end

    sig { returns(T::Boolean) }
    def review_request_delegation_remove_team_request?; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_remove_team_request_before_last_save; end

    sig { returns(T.untyped) }
    def review_request_delegation_remove_team_request_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_request_delegation_remove_team_request_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_remove_team_request_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_remove_team_request_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_remove_team_request_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_remove_team_request_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def review_request_delegation_remove_team_request_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def review_request_delegation_remove_team_request_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_remove_team_request_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def review_request_delegation_remove_team_request_was; end

    sig { void }
    def review_request_delegation_remove_team_request_will_change!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_creator_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_creator_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_deleted; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_migration_complete; end

    sig { returns(T::Boolean) }
    def saved_change_to_migration_complete?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_notification_setting; end

    sig { returns(T::Boolean) }
    def saved_change_to_notification_setting?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_organization_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_permission; end

    sig { returns(T::Boolean) }
    def saved_change_to_permission?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_privacy; end

    sig { returns(T::Boolean) }
    def saved_change_to_privacy?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_private_posts_migrated; end

    sig { returns(T::Boolean) }
    def saved_change_to_private_posts_migrated?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_review_request_delegation_algorithm; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_algorithm?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_review_request_delegation_always_assign_team_members; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_always_assign_team_members?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_review_request_delegation_count_members_already_requested; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_count_members_already_requested?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_review_request_delegation_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_enabled?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_review_request_delegation_include_child_team_members; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_include_child_team_members?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_review_request_delegation_member_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_member_count?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_review_request_delegation_notify_team; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_notify_team?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_review_request_delegation_remove_team_request; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_request_delegation_remove_team_request?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_tree_path; end

    sig { returns(T::Boolean) }
    def saved_change_to_tree_path?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def slug; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T.untyped) }
    def tree_path; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def tree_path=(value); end

    sig { returns(T::Boolean) }
    def tree_path?; end

    sig { returns(T.untyped) }
    def tree_path_before_last_save; end

    sig { returns(T.untyped) }
    def tree_path_before_type_cast; end

    sig { returns(T::Boolean) }
    def tree_path_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tree_path_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tree_path_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def tree_path_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def tree_path_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tree_path_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def tree_path_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def tree_path_previously_was; end

    sig { returns(T.untyped) }
    def tree_path_was; end

    sig { void }
    def tree_path_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_creator_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_migration_complete?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_notification_setting?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_permission?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_privacy?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_private_posts_migrated?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_algorithm?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_always_assign_team_members?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_count_members_already_requested?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_include_child_team_members?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_member_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_notify_team?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_request_delegation_remove_team_request?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tree_path?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.untyped) }
    def org_roles; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_can_be_added_to_memex_project?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_org_roles; end

    sig { params(affiliation: T.untyped, order: T.untyped).returns(T.untyped) }
    def affiliated_abilities(affiliation, order); end

    sig { returns(T.untyped) }
    def can_be_added_to_memex_project?; end

    sig { params(affiliation: T.untyped, order: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_affiliated_abilities(affiliation, order); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_organization_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def legacy_admin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def like_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_externally_managed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_notifications_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_notifications_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_secret(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def notifications_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def notifications_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_by_name_asc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def owned_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def secret(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_minimum_privacy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_no_parent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Team } }

    sig { returns(T::Array[::Team]) }
    def to_a; end

    sig { returns(T::Array[::Team]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Team } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Team } }

    sig do
      params(
        records: T.any(::Team, T::Enumerable[T.any(::Team, T::Enumerable[::Team])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Team, T::Enumerable[T.any(::Team, T::Enumerable[::Team])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Team, T::Enumerable[T.any(::Team, T::Enumerable[::Team])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Team]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Team, T::Enumerable[T.any(::Team, T::Enumerable[::Team])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Team, T::Enumerable[T.any(::Team, T::Enumerable[::Team])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Team, T::Enumerable[T.any(::Team, T::Enumerable[::Team])])
      ).returns(T::Array[::Team])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Team]) }
    def target; end

    sig { returns(T::Array[::Team]) }
    def to_a; end

    sig { returns(T::Array[::Team]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Team } }

    sig { returns(T::Array[::Team]) }
    def to_a; end

    sig { returns(T::Array[::Team]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Team } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Orca::RateLimitDetails`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Orca::RateLimitDetails`.

class GitHub::Orca::RateLimitDetails
  sig do
    params(
      is_rate_limited: T.nilable(T::Boolean),
      reason: T.nilable(T.any(Symbol, Integer)),
      remaining: T.nilable(Integer),
      reset_at: T.nilable(Integer),
      training_limit: T.nilable(Integer),
      used: T.nilable(Integer)
    ).void
  end
  def initialize(is_rate_limited: nil, reason: nil, remaining: nil, reset_at: nil, training_limit: nil, used: nil); end

  sig { void }
  def clear_is_rate_limited; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_remaining; end

  sig { void }
  def clear_reset_at; end

  sig { void }
  def clear_training_limit; end

  sig { void }
  def clear_used; end

  sig { returns(T::Boolean) }
  def is_rate_limited; end

  sig { params(value: T::Boolean).void }
  def is_rate_limited=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(Integer) }
  def remaining; end

  sig { params(value: Integer).void }
  def remaining=(value); end

  sig { returns(Integer) }
  def reset_at; end

  sig { params(value: Integer).void }
  def reset_at=(value); end

  sig { returns(Integer) }
  def training_limit; end

  sig { params(value: Integer).void }
  def training_limit=(value); end

  sig { returns(Integer) }
  def used; end

  sig { params(value: Integer).void }
  def used=(value); end
end

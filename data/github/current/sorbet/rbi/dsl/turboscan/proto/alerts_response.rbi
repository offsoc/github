# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Turboscan::Proto::AlertsResponse`.
# Please instead update this file by running `bin/tapioca dsl Turboscan::Proto::AlertsResponse`.

class Turboscan::Proto::AlertsResponse
  sig do
    params(
      analysis_exists: T.nilable(T::Boolean),
      next_cursor: T.nilable(String),
      open_count: T.nilable(Integer),
      prev_cursor: T.nilable(String),
      resolved_count: T.nilable(Integer),
      results: T.nilable(T.any(Google::Protobuf::RepeatedField[Turboscan::Proto::Result], T::Array[Turboscan::Proto::Result])),
      search_status: T.nilable(T.any(Symbol, Integer)),
      total_count: T.nilable(Integer)
    ).void
  end
  def initialize(analysis_exists: nil, next_cursor: nil, open_count: nil, prev_cursor: nil, resolved_count: nil, results: T.unsafe(nil), search_status: nil, total_count: nil); end

  sig { returns(T::Boolean) }
  def analysis_exists; end

  sig { params(value: T::Boolean).void }
  def analysis_exists=(value); end

  sig { void }
  def clear_analysis_exists; end

  sig { void }
  def clear_next_cursor; end

  sig { void }
  def clear_open_count; end

  sig { void }
  def clear_prev_cursor; end

  sig { void }
  def clear_resolved_count; end

  sig { void }
  def clear_results; end

  sig { void }
  def clear_search_status; end

  sig { void }
  def clear_total_count; end

  sig { returns(String) }
  def next_cursor; end

  sig { params(value: String).void }
  def next_cursor=(value); end

  sig { returns(Integer) }
  def open_count; end

  sig { params(value: Integer).void }
  def open_count=(value); end

  sig { returns(String) }
  def prev_cursor; end

  sig { params(value: String).void }
  def prev_cursor=(value); end

  sig { returns(Integer) }
  def resolved_count; end

  sig { params(value: Integer).void }
  def resolved_count=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Turboscan::Proto::Result]) }
  def results; end

  sig { params(value: Google::Protobuf::RepeatedField[Turboscan::Proto::Result]).void }
  def results=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def search_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def search_status=(value); end

  sig { returns(Integer) }
  def total_count; end

  sig { params(value: Integer).void }
  def total_count=(value); end
end

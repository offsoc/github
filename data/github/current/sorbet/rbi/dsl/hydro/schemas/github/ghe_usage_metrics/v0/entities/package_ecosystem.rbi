# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::PackageEcosystem`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::PackageEcosystem`.

class Hydro::Schemas::Github::GheUsageMetrics::V0::Entities::PackageEcosystem
  sig do
    params(
      daily_create_count: T.nilable(Integer),
      daily_delete_count: T.nilable(Integer),
      daily_download_count: T.nilable(Integer),
      daily_update_count: T.nilable(Integer),
      enabled: T.nilable(T.any(Symbol, Integer)),
      internal_packages_count: T.nilable(Integer),
      name: T.nilable(String),
      organization_packages_count: T.nilable(Integer),
      private_packages_count: T.nilable(Integer),
      public_packages_count: T.nilable(Integer),
      published_packages_count: T.nilable(Integer),
      user_packages_count: T.nilable(Integer)
    ).void
  end
  def initialize(daily_create_count: nil, daily_delete_count: nil, daily_download_count: nil, daily_update_count: nil, enabled: nil, internal_packages_count: nil, name: nil, organization_packages_count: nil, private_packages_count: nil, public_packages_count: nil, published_packages_count: nil, user_packages_count: nil); end

  sig { void }
  def clear_daily_create_count; end

  sig { void }
  def clear_daily_delete_count; end

  sig { void }
  def clear_daily_download_count; end

  sig { void }
  def clear_daily_update_count; end

  sig { void }
  def clear_enabled; end

  sig { void }
  def clear_internal_packages_count; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_organization_packages_count; end

  sig { void }
  def clear_private_packages_count; end

  sig { void }
  def clear_public_packages_count; end

  sig { void }
  def clear_published_packages_count; end

  sig { void }
  def clear_user_packages_count; end

  sig { returns(Integer) }
  def daily_create_count; end

  sig { params(value: Integer).void }
  def daily_create_count=(value); end

  sig { returns(Integer) }
  def daily_delete_count; end

  sig { params(value: Integer).void }
  def daily_delete_count=(value); end

  sig { returns(Integer) }
  def daily_download_count; end

  sig { params(value: Integer).void }
  def daily_download_count=(value); end

  sig { returns(Integer) }
  def daily_update_count; end

  sig { params(value: Integer).void }
  def daily_update_count=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def enabled; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def enabled=(value); end

  sig { returns(Integer) }
  def internal_packages_count; end

  sig { params(value: Integer).void }
  def internal_packages_count=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def organization_packages_count; end

  sig { params(value: Integer).void }
  def organization_packages_count=(value); end

  sig { returns(Integer) }
  def private_packages_count; end

  sig { params(value: Integer).void }
  def private_packages_count=(value); end

  sig { returns(Integer) }
  def public_packages_count; end

  sig { params(value: Integer).void }
  def public_packages_count=(value); end

  sig { returns(Integer) }
  def published_packages_count; end

  sig { params(value: Integer).void }
  def published_packages_count=(value); end

  sig { returns(Integer) }
  def user_packages_count; end

  sig { params(value: Integer).void }
  def user_packages_count=(value); end
end

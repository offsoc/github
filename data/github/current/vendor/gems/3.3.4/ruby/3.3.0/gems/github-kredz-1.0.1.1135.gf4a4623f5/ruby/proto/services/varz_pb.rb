# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: services/varz.proto

require 'google/protobuf'

require 'google/protobuf/timestamp_pb'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("services/varz.proto", :syntax => :proto3) do
    add_message "git_hub.kredz.services.varz.Repository" do
      optional :global_id, :string, 1
    end
    add_message "git_hub.kredz.services.varz.User" do
      optional :global_id, :string, 1
    end
    add_message "git_hub.kredz.services.varz.Organization" do
      optional :global_id, :string, 1
    end
    add_message "git_hub.kredz.services.varz.Environment" do
      optional :global_id, :string, 1
    end
    add_message "git_hub.kredz.services.varz.Error" do
      optional :error_number, :int64, 1
      optional :error_message, :string, 2
      optional :backtrace, :string, 3
    end
    add_message "git_hub.kredz.services.varz.VariableOwner" do
      oneof :owner do
        optional :repository, :message, 1, "git_hub.kredz.services.varz.Repository"
        optional :user, :message, 2, "git_hub.kredz.services.varz.User"
        optional :organization, :message, 3, "git_hub.kredz.services.varz.Organization"
        optional :environment, :message, 4, "git_hub.kredz.services.varz.Environment"
      end
    end
    add_message "git_hub.kredz.services.varz.Variable" do
      optional :owner, :message, 1, "git_hub.kredz.services.varz.VariableOwner"
      optional :integration_global_id, :string, 2
      optional :name, :string, 3
      optional :value, :bytes, 4
      optional :length, :int64, 5
      optional :created_at, :message, 6, "google.protobuf.Timestamp"
      optional :updated_at, :message, 7, "google.protobuf.Timestamp"
      optional :visibility, :enum, 8, "git_hub.kredz.services.varz.Visibility"
      repeated :selected_repositories, :message, 9, "git_hub.kredz.services.varz.Repository"
      optional :selected_repositories_count, :int64, 10
      optional :truncated, :bool, 11
    end
    add_message "git_hub.kredz.services.varz.StoreRequest" do
      optional :variable, :message, 1, "git_hub.kredz.services.varz.Variable"
    end
    add_message "git_hub.kredz.services.varz.StoreResponse" do
      optional :stored, :bool, 1
      optional :variable, :message, 2, "git_hub.kredz.services.varz.Variable"
      optional :error, :message, 3, "git_hub.kredz.services.varz.Error"
    end
    add_message "git_hub.kredz.services.varz.UpdateRequest" do
      optional :variable, :message, 1, "git_hub.kredz.services.varz.Variable"
      optional :updated_name, :string, 2
    end
    add_message "git_hub.kredz.services.varz.UpdateResponse" do
      optional :updated, :bool, 1
      optional :variable, :message, 2, "git_hub.kredz.services.varz.Variable"
      optional :error, :message, 3, "git_hub.kredz.services.varz.Error"
    end
    add_message "git_hub.kredz.services.varz.FetchRequest" do
      optional :repository, :message, 1, "git_hub.kredz.services.varz.Repository"
      optional :variable, :message, 2, "git_hub.kredz.services.varz.Variable"
    end
    add_message "git_hub.kredz.services.varz.FetchResponse" do
      optional :variable, :message, 1, "git_hub.kredz.services.varz.Variable"
      optional :error, :message, 2, "git_hub.kredz.services.varz.Error"
    end
    add_message "git_hub.kredz.services.varz.DeleteRequest" do
      optional :repository, :message, 1, "git_hub.kredz.services.varz.Repository"
      optional :variable, :message, 2, "git_hub.kredz.services.varz.Variable"
    end
    add_message "git_hub.kredz.services.varz.DeleteResponse" do
      optional :success, :bool, 1
      optional :error, :message, 2, "git_hub.kredz.services.varz.Error"
    end
    add_message "git_hub.kredz.services.varz.ListRequest" do
      optional :owner, :message, 1, "git_hub.kredz.services.varz.VariableOwner"
      optional :integration_global_id, :string, 2
      optional :include_value, :bool, 3
      optional :include_truncated_value, :bool, 4
      optional :per_page, :int64, 5
      optional :page, :int64, 6
    end
    add_message "git_hub.kredz.services.varz.ListResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :variables, :message, 2, "git_hub.kredz.services.varz.Variable"
      optional :total_count, :int64, 3
    end
    add_message "git_hub.kredz.services.varz.ListByNamesRequest" do
      optional :owner, :message, 1, "git_hub.kredz.services.varz.VariableOwner"
      optional :integration_global_id, :string, 2
      repeated :names, :string, 3
    end
    add_message "git_hub.kredz.services.varz.ListByNamesResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :variables, :message, 2, "git_hub.kredz.services.varz.Variable"
    end
    add_message "git_hub.kredz.services.varz.ListVariablesForRepositoryRequest" do
      optional :repository, :message, 1, "git_hub.kredz.services.varz.RepositoryWithOwner"
      optional :integration_global_id, :string, 2
      optional :include_value, :bool, 3
      repeated :environments, :message, 4, "git_hub.kredz.services.varz.VariableOwner"
      optional :is_private, :bool, 5
      optional :include_truncated_value, :bool, 6
      optional :include_remaining_variable_names, :bool, 7
    end
    add_message "git_hub.kredz.services.varz.ListVariablesForRepositoryResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :repository_variables, :message, 2, "git_hub.kredz.services.varz.Variable"
      repeated :organization_variables, :message, 3, "git_hub.kredz.services.varz.Variable"
      repeated :environment_variables, :message, 4, "git_hub.kredz.services.varz.Variable"
      repeated :remaining_repo_var_names, :string, 5
      repeated :remaining_org_var_names, :string, 6
    end
    add_message "git_hub.kredz.services.varz.ListByNamesForRepoRequest" do
      optional :repository, :message, 1, "git_hub.kredz.services.varz.RepositoryWithOwner"
      optional :integration_global_id, :string, 2
      optional :is_private, :bool, 3
      repeated :names, :string, 4
    end
    add_message "git_hub.kredz.services.varz.ListByNamesForRepoResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :repository_variables, :message, 2, "git_hub.kredz.services.varz.Variable"
      repeated :organization_variables, :message, 3, "git_hub.kredz.services.varz.Variable"
    end
    add_message "git_hub.kredz.services.varz.DeleteVariablesForOwnerRequest" do
      optional :owner, :message, 1, "git_hub.kredz.services.varz.VariableOwner"
    end
    add_message "git_hub.kredz.services.varz.DeleteVariablesForOwnerResponse" do
      optional :deleted_variables_count, :int64, 1
    end
    add_message "git_hub.kredz.services.varz.VariableCount" do
      optional :owner_global_id, :string, 1
      optional :count, :int64, 2
    end
    add_message "git_hub.kredz.services.varz.VariableCountsRequest" do
      repeated :owner_global_ids, :string, 1
      optional :owner_type, :string, 2
      optional :integration_global_id, :string, 3
    end
    add_message "git_hub.kredz.services.varz.VariableCountsResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :variable_counts, :message, 2, "git_hub.kredz.services.varz.VariableCount"
    end
    add_message "git_hub.kredz.services.varz.RepositoryWithOwner" do
      optional :repository, :message, 1, "git_hub.kredz.services.varz.Repository"
      optional :owner, :message, 2, "git_hub.kredz.services.varz.VariableOwner"
    end
    add_message "git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryRequest" do
      optional :repository, :message, 1, "git_hub.kredz.services.varz.RepositoryWithOwner"
      optional :integration_global_id, :string, 2
      optional :include_truncated_value, :bool, 3
      optional :is_private, :bool, 4
      optional :per_page, :int64, 5
      optional :page, :int64, 6
    end
    add_message "git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryByNamesRequest" do
      optional :repository, :message, 1, "git_hub.kredz.services.varz.RepositoryWithOwner"
      optional :integration_global_id, :string, 2
      optional :is_private, :bool, 3
      repeated :names, :string, 4
    end
    add_message "git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryByNamesResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :organization_variables, :message, 2, "git_hub.kredz.services.varz.Variable"
    end
    add_message "git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :organization_variables, :message, 2, "git_hub.kredz.services.varz.Variable"
      optional :total_count, :int64, 3
    end
    add_message "git_hub.kredz.services.varz.ListVariablesForOwnersRequest" do
      repeated :owners, :message, 1, "git_hub.kredz.services.varz.VariableOwner"
      optional :integration_global_id, :string, 2
      optional :include_truncated_value, :bool, 3
      optional :per_page, :int64, 4
      optional :page, :int64, 5
    end
    add_message "git_hub.kredz.services.varz.ListVariablesForOwnersResponse" do
      optional :error, :message, 1, "git_hub.kredz.services.varz.Error"
      repeated :variables, :message, 2, "git_hub.kredz.services.varz.Variable"
      optional :total_count, :int64, 3
    end
    add_enum "git_hub.kredz.services.varz.Visibility" do
      value :VISIBILITY_OWNER, 0
      value :VISIBILITY_ALL_REPOSITORIES, 1
      value :VISIBILITY_PRIVATE_REPOSITORIES, 2
      value :VISIBILITY_SELECTED_REPOSITORIES, 3
    end
  end
end

module GitHub
  module Kredz
    module Services
      module Varz
        Repository = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.Repository").msgclass
        User = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.User").msgclass
        Organization = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.Organization").msgclass
        Environment = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.Environment").msgclass
        Error = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.Error").msgclass
        VariableOwner = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.VariableOwner").msgclass
        Variable = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.Variable").msgclass
        StoreRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.StoreRequest").msgclass
        StoreResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.StoreResponse").msgclass
        UpdateRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.UpdateRequest").msgclass
        UpdateResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.UpdateResponse").msgclass
        FetchRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.FetchRequest").msgclass
        FetchResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.FetchResponse").msgclass
        DeleteRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.DeleteRequest").msgclass
        DeleteResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.DeleteResponse").msgclass
        ListRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListRequest").msgclass
        ListResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListResponse").msgclass
        ListByNamesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListByNamesRequest").msgclass
        ListByNamesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListByNamesResponse").msgclass
        ListVariablesForRepositoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListVariablesForRepositoryRequest").msgclass
        ListVariablesForRepositoryResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListVariablesForRepositoryResponse").msgclass
        ListByNamesForRepoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListByNamesForRepoRequest").msgclass
        ListByNamesForRepoResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListByNamesForRepoResponse").msgclass
        DeleteVariablesForOwnerRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.DeleteVariablesForOwnerRequest").msgclass
        DeleteVariablesForOwnerResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.DeleteVariablesForOwnerResponse").msgclass
        VariableCount = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.VariableCount").msgclass
        VariableCountsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.VariableCountsRequest").msgclass
        VariableCountsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.VariableCountsResponse").msgclass
        RepositoryWithOwner = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.RepositoryWithOwner").msgclass
        ListOrganizationVariablesForRepositoryRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryRequest").msgclass
        ListOrganizationVariablesForRepositoryByNamesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryByNamesRequest").msgclass
        ListOrganizationVariablesForRepositoryByNamesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryByNamesResponse").msgclass
        ListOrganizationVariablesForRepositoryResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListOrganizationVariablesForRepositoryResponse").msgclass
        ListVariablesForOwnersRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListVariablesForOwnersRequest").msgclass
        ListVariablesForOwnersResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.ListVariablesForOwnersResponse").msgclass
        Visibility = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("git_hub.kredz.services.varz.Visibility").enummodule
      end
    end
  end
end

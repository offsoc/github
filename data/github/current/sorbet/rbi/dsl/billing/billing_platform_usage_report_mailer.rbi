# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Billing::BillingPlatformUsageReportMailer`.
# Please instead update this file by running `bin/tapioca dsl Billing::BillingPlatformUsageReportMailer`.

class Billing::BillingPlatformUsageReportMailer
  class << self
    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def admin_emails(account, except: T.unsafe(nil)); end

    sig do
      params(
        entity: T.nilable(T.any(::Business, ::Organization, ::User))
      ).returns(::ActionMailer::MessageDelivery)
    end
    def admin_roles(entity); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def apple_app_store_subscriptions_url; end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_url(source, options = T.unsafe(nil)); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        actor: T.nilable(::User)
      ).returns(::ActionMailer::MessageDelivery)
    end
    def available_plans(target, actor: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def bcc_log; end

    sig { params(account: T.untyped, include_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def billing_emails(account, include_name: T.unsafe(nil)); end

    sig { params(tab: T.nilable(::String)).returns(::ActionMailer::MessageDelivery) }
    def billing_page_title(tab); end

    sig { params(plan: ::GitHub::Plan, account_type: T.nilable(::String)).returns(::ActionMailer::MessageDelivery) }
    def branded_plan_name(plan, account_type: T.unsafe(nil)); end

    sig { params(account: T.untyped, admins: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def build_admin_recipients_list(account, admins); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def can_manage_munich_seats?(target); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def can_manage_seats?(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def can_purchase_data_packs?(target); end

    sig do
      params(
        target: ::User,
        seat_change: ::Billing::PlanChange::SeatChange
      ).returns(::ActionMailer::MessageDelivery)
    end
    def can_purchase_seats?(target, seat_change); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def client_side_feature_flags; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_extname(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_host(source = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(source: ::String, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(survey: ::Survey).returns(::ActionMailer::MessageDelivery) }
    def contact_opt_in_survey_question(survey); end

    sig { params(mail: T.untyped, premailer_options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def convert_to_premail(mail, premailer_options: T.unsafe(nil)); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def copilot_enabled_for_user?(target); end

    sig { params(entity: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def customer_payload(entity); end

    sig { params(migration_date: T.nilable(::ActiveSupport::TimeWithZone)).returns(::ActionMailer::MessageDelivery) }
    def days_since_migration(migration_date); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def default_url_options; end

    sig { params(survey: ::Survey).returns(::ActionMailer::MessageDelivery) }
    def downgrade_reason_survey_question(survey); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def downgrade_survey; end

    sig { params(feature_name: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_for_current_user?(feature_name:, subject: T.unsafe(nil)); end

    sig { params(feature_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_for_current_visitor?(feature_name:); end

    sig { params(feature_name: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_for_user_or_current_visitor?(feature_name:, subject: T.unsafe(nil)); end

    sig { params(feature_name: T.untyped, subject: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def feature_enabled_globally_or_for_user?(feature_name:, subject: T.unsafe(nil)); end

    sig { params(type: ::Symbol, actor: ::User).returns(::ActionMailer::MessageDelivery) }
    def feature_list(type, actor); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def features_datafile_tag; end

    sig do
      params(
        selections: T::Array[{type: ::Integer, displayText: ::String, dateText: ::String}],
        migration_date: ::Time
      ).returns(::ActionMailer::MessageDelivery)
    end
    def filter_period_selections(selections, migration_date); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_url(source, options = T.unsafe(nil)); end

    sig { params(period: ::Integer).returns(::ActionMailer::MessageDelivery) }
    def get_end_date_for_period(period); end

    sig { params(period: ::Integer).returns(::ActionMailer::MessageDelivery) }
    def get_start_date_for_period(period); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_guides; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_marketplace; end

    sig { params(from: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def github_noreply(from = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_opensource; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_partnerships; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_shop; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_appeals; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def github_trade_sap_bis; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def google_app_store_subscriptions_url; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def has_payment_details?; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def image_base_url; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_path(source, options = T.unsafe(nil)); end

    sig { params(path: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_url(path); end

    sig { params(business: ::Business).returns(::ActionMailer::MessageDelivery) }
    def is_legacy_report_an_option?(business); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_url(source, options = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def lfs_bandwidth_breakdown(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def lfs_repository_list(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def lfs_storage_breakdown(target); end

    sig { params(_arg0: T.untyped, _arg1: T.untyped, _arg2: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def mailer_asset_host_url(*_arg0, **_arg1, &_arg2); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def mailer_static_asset_path(path); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def microsoft_trade_help; end

    sig { params(business: ::Business).returns(::ActionMailer::MessageDelivery) }
    def migrated_meuse_customer?(business); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def no_payment_details?; end

    sig { params(url: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notification_signature(url); end

    sig { params(list: T.untyped, email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def notifications_list_email(list, email); end

    sig { params(target: ::Organization).returns(::ActionMailer::MessageDelivery) }
    def on_per_seat_pricing?(target); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def parse_payment_details; end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_video(source, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def payment_details; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def payment_details_includes_paypal?; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def payment_details_object; end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def pending_change_active_on(target); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def pending_cycle(target); end

    sig { params(business: ::Business).returns(::ActionMailer::MessageDelivery) }
    def pending_cycle_seat_change_payload(business); end

    sig { params(target: ::Organization).returns(::ActionMailer::MessageDelivery) }
    def pending_non_manager_invitations_count(target); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def premail(*args); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        product: ::Symbol
      ).returns(::ActionMailer::MessageDelivery)
    end
    def product_moved_to_vnext?(target, product); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def public_compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def purchase_button_aria_label(target); end

    sig { params(email: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_email_address(email); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def quote_user_name(user); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def redalert; end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_name?(name); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def sanctioned_by_ofac_message; end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def scrub_real_name(name); end

    sig do
      params(
        target: ::User,
        seat_change: ::Billing::PlanChange::SeatChange
      ).returns(::ActionMailer::MessageDelivery)
    end
    def seat_change_covered_by_coupon?(target, seat_change); end

    sig { params(plan: ::GitHub::Plan, account_type: T.nilable(::String)).returns(::ActionMailer::MessageDelivery) }
    def short_plan_name(plan, account_type: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def should_show_synchronous_payment_collection_upgrading_page?; end

    sig { params(request_url: ::String).returns(::ActionMailer::MessageDelivery) }
    def show_development_payment_form_warning?(request_url); end

    sig { params(target: ::User, plan: ::GitHub::Plan).returns(::ActionMailer::MessageDelivery) }
    def show_downgrade_survey?(target, plan); end

    sig { params(path: ::String).returns(::ActionMailer::MessageDelivery) }
    def static_asset_path(path); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_url(source, options = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def subscription_data_packs_can_be_changed?(target); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def synchronous_payment_collection_job_status; end

    sig { params(target: ::User, options: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_billing_data_plan_path(target, options = T.unsafe(nil)); end

    sig { params(target: ::User, options: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_billing_downgrade_data_plan_path(target, options = T.unsafe(nil)); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        query_params: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_billing_path(target, query_params = T.unsafe(nil)); end

    sig { params(target: ::User, options: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_billing_upgrade_data_plan_path(target, options = T.unsafe(nil)); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        tab: T.nilable(T.any(::String, ::Symbol))
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_billing_url(target, tab: T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_cc_update_path(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_cycle_update_path(target); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_downgrade_with_exit_survey_path(target); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        invoice_number: ::String
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_invoice_signature_path(target, invoice_number); end

    sig { params(target: ::Organization, arg: T::Hash[::Symbol, T.untyped]).returns(::ActionMailer::MessageDelivery) }
    def target_org_payment_method_path(target, arg); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        arg: T::Hash[::Symbol, T.untyped]
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_payment_method_path(target, arg = T.unsafe(nil)); end

    sig { params(target: ::User).returns(::ActionMailer::MessageDelivery) }
    def target_self_serve_invoicing_path(target); end

    sig do
      params(
        target: T.any(::Business, ::Organization, ::User),
        invoice_number: ::String
      ).returns(::ActionMailer::MessageDelivery)
    end
    def target_show_invoice_path(target, invoice_number); end

    sig { params(target: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def target_update_credit_card_path(target); end

    sig { params(target: ::User, plan: ::GitHub::Plan).returns(::ActionMailer::MessageDelivery) }
    def upgrade_downgrade_form_action_path(target, plan); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_video(source, options = T.unsafe(nil)); end

    sig { params(entity: T.any(::Business, ::Organization, ::User)).returns(::ActionMailer::MessageDelivery) }
    def usage_customer_selections(entity); end

    sig { params(use_usage_chart_data_endpoint: T::Boolean).returns(::ActionMailer::MessageDelivery) }
    def usage_group_selections(use_usage_chart_data_endpoint); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def usage_period_selections; end

    sig do
      params(
        metered_export_records: T.untyped,
        usage_period_text: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def usage_report_complete(metered_export_records, usage_period_text); end

    sig { params(to: T.untyped, billable_owner: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def usage_report_error(to, billable_owner); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def usage_report_legacy_selection; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def usage_report_selections; end

    sig { params(target: ::Organization).returns(::ActionMailer::MessageDelivery) }
    def use_pending_invitations_link_instead_of_dialog?(target); end

    sig do
      params(
        user: T.untyped,
        email: T.untyped,
        allow_private: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def user_email(user, email = T.unsafe(nil), allow_private: T.unsafe(nil)); end

    sig { params(account: T.untyped, except: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_admin_recipients(account, except: T.unsafe(nil)); end

    sig { params(account: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def user_or_billing_recipients(account); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_url(source, options = T.unsafe(nil)); end

    sig { params(question: ::SurveyQuestion).returns(::ActionMailer::MessageDelivery) }
    def yes_no_opt_in_choices(question); end
  end
end

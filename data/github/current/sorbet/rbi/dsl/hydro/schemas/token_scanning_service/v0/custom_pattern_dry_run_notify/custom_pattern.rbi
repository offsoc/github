# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify::CustomPattern`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify::CustomPattern`.

class Hydro::Schemas::TokenScanningService::V0::CustomPatternDryRunNotify::CustomPattern
  sig do
    params(
      created_by_id: T.nilable(Integer),
      id: T.nilable(Integer),
      name: T.nilable(String),
      owner_scope_id: T.nilable(Integer),
      scope: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(created_by_id: nil, id: nil, name: nil, owner_scope_id: nil, scope: nil); end

  sig { void }
  def clear_created_by_id; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_owner_scope_id; end

  sig { void }
  def clear_scope; end

  sig { returns(Integer) }
  def created_by_id; end

  sig { params(value: Integer).void }
  def created_by_id=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def owner_scope_id; end

  sig { params(value: Integer).void }
  def owner_scope_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def scope; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def scope=(value); end
end

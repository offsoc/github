# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `IntegrationInstallation`.
# Please instead update this file by running `bin/tapioca dsl IntegrationInstallation`.

class IntegrationInstallation
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::IntegrationInstallation).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::IntegrationInstallation]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def fifth; end

    sig { returns(::IntegrationInstallation) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::IntegrationInstallation)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::IntegrationInstallation) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(T.nilable(T::Enumerator[::IntegrationInstallation]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::IntegrationInstallation]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::IntegrationInstallation]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::IntegrationInstallation)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::IntegrationInstallation) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::IntegrationInstallation) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::IntegrationInstallation) }
    def first!; end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def forty_two; end

    sig { returns(::IntegrationInstallation) }
    def forty_two!; end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def fourth; end

    sig { returns(::IntegrationInstallation) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::IntegrationInstallation) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::IntegrationInstallation).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::IntegrationInstallation).void)
      ).returns(::IntegrationInstallation)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::IntegrationInstallation).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::IntegrationInstallation).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def second; end

    sig { returns(::IntegrationInstallation) }
    def second!; end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def second_to_last; end

    sig { returns(::IntegrationInstallation) }
    def second_to_last!; end

    sig { returns(::IntegrationInstallation) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::IntegrationInstallation) }
    def take!; end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def third; end

    sig { returns(::IntegrationInstallation) }
    def third!; end

    sig { returns(T.nilable(::IntegrationInstallation)) }
    def third_to_last; end

    sig { returns(::IntegrationInstallation) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def build_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationInstallTrigger) }
    def build_integration_install_trigger(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SubscriptionItem) }
    def build_subscription_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user_suspended_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationVersion) }
    def build_version(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def child_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def child_ids=(ids); end

    # This method is created by ActiveRecord on the `IntegrationInstallation` class because it declared `has_many :children`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ScopedIntegrationInstallation::PrivateCollectionProxy) }
    def children; end

    sig { params(value: T::Enumerable[::ScopedIntegrationInstallation]).void }
    def children=(value); end

    sig { returns(T::Array[T.untyped]) }
    def content_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def content_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `IntegrationInstallation` class because it declared `has_many :content_references, through: :version`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::IntegrationContentReference::PrivateCollectionProxy) }
    def content_references; end

    sig { params(value: T::Enumerable[::IntegrationContentReference]).void }
    def content_references=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_integration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationInstallTrigger) }
    def create_integration_install_trigger(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationInstallTrigger) }
    def create_integration_install_trigger!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SubscriptionItem) }
    def create_subscription_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::SubscriptionItem) }
    def create_subscription_item!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user_suspended_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user_suspended_by!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationVersion) }
    def create_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::IntegrationVersion) }
    def create_version!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def event_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_record_ids=(ids); end

    # This method is created by ActiveRecord on the `IntegrationInstallation` class because it declared `has_many :event_records`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::HookEventSubscription::PrivateCollectionProxy) }
    def event_records; end

    sig { params(value: T::Enumerable[::HookEventSubscription]).void }
    def event_records=(value); end

    sig { returns(T.nilable(::Integration)) }
    def integration; end

    sig { params(value: T.nilable(::Integration)).void }
    def integration=(value); end

    sig { returns(T.nilable(::IntegrationInstallTrigger)) }
    def integration_install_trigger; end

    sig { params(value: T.nilable(::IntegrationInstallTrigger)).void }
    def integration_install_trigger=(value); end

    sig { returns(T::Array[T.untyped]) }
    def permission_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def permission_record_ids=(ids); end

    # This method is created by ActiveRecord on the `IntegrationInstallation` class because it declared `has_many :permission_records`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Permission::PrivateCollectionProxy) }
    def permission_records; end

    sig { params(value: T::Enumerable[::Permission]).void }
    def permission_records=(value); end

    sig { returns(T.nilable(::Integration)) }
    def reload_integration; end

    sig { returns(T.nilable(::IntegrationInstallTrigger)) }
    def reload_integration_install_trigger; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def reload_subscription_item; end

    sig { returns(T.untyped) }
    def reload_target; end

    sig { returns(T.nilable(::User)) }
    def reload_user_suspended_by; end

    sig { returns(T.nilable(::IntegrationVersion)) }
    def reload_version; end

    sig { returns(T.nilable(::Billing::SubscriptionItem)) }
    def subscription_item; end

    sig { params(value: T.nilable(::Billing::SubscriptionItem)).void }
    def subscription_item=(value); end

    sig { returns(T.untyped) }
    def target; end

    sig { params(value: T.untyped).void }
    def target=(value); end

    sig { returns(T::Array[T.untyped]) }
    def token_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def token_ids=(ids); end

    # This method is created by ActiveRecord on the `IntegrationInstallation` class because it declared `has_many :tokens`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuthenticationToken::PrivateCollectionProxy) }
    def tokens; end

    sig { params(value: T::Enumerable[::AuthenticationToken]).void }
    def tokens=(value); end

    sig { returns(T.nilable(::User)) }
    def user_suspended_by; end

    sig { params(value: T.nilable(::User)).void }
    def user_suspended_by=(value); end

    sig { returns(T.nilable(::IntegrationVersion)) }
    def version; end

    sig { params(value: T.nilable(::IntegrationVersion)).void }
    def version=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_recent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_installable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_target(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_target_id_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_children; end

    sig { returns(Promise[T.untyped]) }
    def async_content_references; end

    sig { returns(Promise[T.untyped]) }
    def async_event_records; end

    sig { returns(Promise[T.untyped]) }
    def async_integration; end

    sig { returns(Promise[T.untyped]) }
    def async_integration_install_trigger; end

    sig { returns(Promise[T.untyped]) }
    def async_permission_records; end

    sig { returns(Promise[T.untyped]) }
    def async_subscription_item; end

    sig { returns(Promise[T.untyped]) }
    def async_target; end

    sig { returns(Promise[T.untyped]) }
    def async_tokens; end

    sig { returns(Promise[T.untyped]) }
    def async_user_suspended_by; end

    sig { returns(Promise[T.untyped]) }
    def async_version; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def contact_email_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def contact_email_id=(value); end

    sig { returns(T::Boolean) }
    def contact_email_id?; end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_before_last_save; end

    sig { returns(T.untyped) }
    def contact_email_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def contact_email_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contact_email_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contact_email_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contact_email_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contact_email_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contact_email_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def contact_email_id_was; end

    sig { void }
    def contact_email_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def dynamic_rate_limit; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def dynamic_rate_limit=(value); end

    sig { returns(T::Boolean) }
    def dynamic_rate_limit?; end

    sig { returns(T.nilable(::Integer)) }
    def dynamic_rate_limit_before_last_save; end

    sig { returns(T.untyped) }
    def dynamic_rate_limit_before_type_cast; end

    sig { returns(T::Boolean) }
    def dynamic_rate_limit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dynamic_rate_limit_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dynamic_rate_limit_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def dynamic_rate_limit_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dynamic_rate_limit_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dynamic_rate_limit_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def dynamic_rate_limit_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dynamic_rate_limit_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def dynamic_rate_limit_was; end

    sig { void }
    def dynamic_rate_limit_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def integration_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def integration_id=(value); end

    sig { returns(T::Boolean) }
    def integration_id?; end

    sig { returns(T.nilable(::Integer)) }
    def integration_id_before_last_save; end

    sig { returns(T.untyped) }
    def integration_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def integration_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def integration_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def integration_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def integration_id_was; end

    sig { void }
    def integration_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def integration_install_trigger_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def integration_install_trigger_id=(value); end

    sig { returns(T::Boolean) }
    def integration_install_trigger_id?; end

    sig { returns(T.nilable(::Integer)) }
    def integration_install_trigger_id_before_last_save; end

    sig { returns(T.untyped) }
    def integration_install_trigger_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def integration_install_trigger_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def integration_install_trigger_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def integration_install_trigger_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def integration_install_trigger_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_install_trigger_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def integration_install_trigger_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def integration_install_trigger_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_install_trigger_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def integration_install_trigger_id_was; end

    sig { void }
    def integration_install_trigger_id_will_change!; end

    sig { returns(::Integer) }
    def integration_version_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def integration_version_id=(value); end

    sig { returns(T::Boolean) }
    def integration_version_id?; end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_id_before_last_save; end

    sig { returns(T.untyped) }
    def integration_version_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def integration_version_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_version_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_version_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def integration_version_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_version_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def integration_version_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_id_was; end

    sig { void }
    def integration_version_id_will_change!; end

    sig { returns(::Integer) }
    def integration_version_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def integration_version_number=(value); end

    sig { returns(T::Boolean) }
    def integration_version_number?; end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_number_before_last_save; end

    sig { returns(T.untyped) }
    def integration_version_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def integration_version_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_version_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_version_number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def integration_version_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def integration_version_number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def integration_version_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def integration_version_number_was; end

    sig { void }
    def integration_version_number_will_change!; end

    sig { returns(T::Boolean) }
    def integrator_suspended; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def integrator_suspended=(value); end

    sig { returns(T::Boolean) }
    def integrator_suspended?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def integrator_suspended_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def integrator_suspended_at=(value); end

    sig { returns(T::Boolean) }
    def integrator_suspended_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def integrator_suspended_at_before_last_save; end

    sig { returns(T.untyped) }
    def integrator_suspended_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def integrator_suspended_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def integrator_suspended_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def integrator_suspended_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def integrator_suspended_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def integrator_suspended_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def integrator_suspended_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def integrator_suspended_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def integrator_suspended_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def integrator_suspended_at_was; end

    sig { void }
    def integrator_suspended_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def integrator_suspended_before_last_save; end

    sig { returns(T.untyped) }
    def integrator_suspended_before_type_cast; end

    sig { returns(T::Boolean) }
    def integrator_suspended_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def integrator_suspended_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def integrator_suspended_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def integrator_suspended_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def integrator_suspended_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def integrator_suspended_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def integrator_suspended_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def integrator_suspended_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def integrator_suspended_was; end

    sig { void }
    def integrator_suspended_will_change!; end

    sig { returns(T::Boolean) }
    def outdated; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def outdated=(value); end

    sig { returns(T::Boolean) }
    def outdated?; end

    sig { returns(T.nilable(T::Boolean)) }
    def outdated_before_last_save; end

    sig { returns(T.untyped) }
    def outdated_before_type_cast; end

    sig { returns(T::Boolean) }
    def outdated_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def outdated_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def outdated_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def outdated_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def outdated_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def outdated_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def outdated_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def outdated_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def outdated_was; end

    sig { void }
    def outdated_will_change!; end

    sig { returns(T.untyped) }
    def permissions_cache; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def permissions_cache=(value); end

    sig { returns(T::Boolean) }
    def permissions_cache?; end

    sig { returns(T.untyped) }
    def permissions_cache_before_last_save; end

    sig { returns(T.untyped) }
    def permissions_cache_before_type_cast; end

    sig { returns(T::Boolean) }
    def permissions_cache_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def permissions_cache_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def permissions_cache_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def permissions_cache_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def permissions_cache_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def permissions_cache_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def permissions_cache_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def permissions_cache_previously_was; end

    sig { returns(T.untyped) }
    def permissions_cache_was; end

    sig { void }
    def permissions_cache_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def rate_limit; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def rate_limit=(value); end

    sig { returns(T::Boolean) }
    def rate_limit?; end

    sig { returns(T.nilable(::Integer)) }
    def rate_limit_before_last_save; end

    sig { returns(T.untyped) }
    def rate_limit_before_type_cast; end

    sig { returns(T::Boolean) }
    def rate_limit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rate_limit_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rate_limit_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def rate_limit_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def rate_limit_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rate_limit_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def rate_limit_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def rate_limit_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def rate_limit_was; end

    sig { void }
    def rate_limit_will_change!; end

    sig { returns(T.nilable(::String)) }
    def repository_selection_cache; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def repository_selection_cache=(value); end

    sig { returns(T::Boolean) }
    def repository_selection_cache?; end

    sig { returns(T.nilable(::String)) }
    def repository_selection_cache_before_last_save; end

    sig { returns(T.untyped) }
    def repository_selection_cache_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_selection_cache_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def repository_selection_cache_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def repository_selection_cache_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def repository_selection_cache_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def repository_selection_cache_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def repository_selection_cache_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def repository_selection_cache_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def repository_selection_cache_previously_was; end

    sig { returns(T.nilable(::String)) }
    def repository_selection_cache_was; end

    sig { void }
    def repository_selection_cache_will_change!; end

    sig { void }
    def restore_contact_email_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_dynamic_rate_limit!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_integration_id!; end

    sig { void }
    def restore_integration_install_trigger_id!; end

    sig { void }
    def restore_integration_version_id!; end

    sig { void }
    def restore_integration_version_number!; end

    sig { void }
    def restore_integrator_suspended!; end

    sig { void }
    def restore_integrator_suspended_at!; end

    sig { void }
    def restore_outdated!; end

    sig { void }
    def restore_permissions_cache!; end

    sig { void }
    def restore_rate_limit!; end

    sig { void }
    def restore_repository_selection_cache!; end

    sig { void }
    def restore_subscription_item_id!; end

    sig { void }
    def restore_target_id!; end

    sig { void }
    def restore_target_type!; end

    sig { void }
    def restore_temporary_rate_limit!; end

    sig { void }
    def restore_temporary_rate_limit_expires_at!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_suspended_at!; end

    sig { void }
    def restore_user_suspended_by_id!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_contact_email_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_contact_email_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_dynamic_rate_limit; end

    sig { returns(T::Boolean) }
    def saved_change_to_dynamic_rate_limit?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_integration_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_integration_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_integration_install_trigger_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_integration_install_trigger_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_integration_version_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_integration_version_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_integration_version_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_integration_version_number?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_integrator_suspended; end

    sig { returns(T::Boolean) }
    def saved_change_to_integrator_suspended?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_integrator_suspended_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_integrator_suspended_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_outdated; end

    sig { returns(T::Boolean) }
    def saved_change_to_outdated?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_permissions_cache; end

    sig { returns(T::Boolean) }
    def saved_change_to_permissions_cache?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_rate_limit; end

    sig { returns(T::Boolean) }
    def saved_change_to_rate_limit?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_repository_selection_cache; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_selection_cache?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_subscription_item_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscription_item_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_target_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_target_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_target_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_target_type?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_temporary_rate_limit; end

    sig { returns(T::Boolean) }
    def saved_change_to_temporary_rate_limit?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_temporary_rate_limit_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_temporary_rate_limit_expires_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_user_suspended_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_suspended_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_suspended_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_suspended_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def subscription_item_id=(value); end

    sig { returns(T::Boolean) }
    def subscription_item_id?; end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_before_last_save; end

    sig { returns(T.untyped) }
    def subscription_item_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscription_item_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscription_item_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscription_item_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscription_item_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def subscription_item_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def subscription_item_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def subscription_item_id_was; end

    sig { void }
    def subscription_item_id_will_change!; end

    sig { returns(::Integer) }
    def target_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def target_id=(value); end

    sig { returns(T::Boolean) }
    def target_id?; end

    sig { returns(T.nilable(::Integer)) }
    def target_id_before_last_save; end

    sig { returns(T.untyped) }
    def target_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def target_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def target_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def target_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def target_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def target_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def target_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def target_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def target_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def target_id_was; end

    sig { void }
    def target_id_will_change!; end

    sig { returns(::String) }
    def target_type; end

    sig { params(value: ::String).returns(::String) }
    def target_type=(value); end

    sig { returns(T::Boolean) }
    def target_type?; end

    sig { returns(T.nilable(::String)) }
    def target_type_before_last_save; end

    sig { returns(T.untyped) }
    def target_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def target_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def target_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def target_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def target_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def target_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def target_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def target_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def target_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def target_type_was; end

    sig { void }
    def target_type_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def temporary_rate_limit; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def temporary_rate_limit=(value); end

    sig { returns(T::Boolean) }
    def temporary_rate_limit?; end

    sig { returns(T.nilable(::Integer)) }
    def temporary_rate_limit_before_last_save; end

    sig { returns(T.untyped) }
    def temporary_rate_limit_before_type_cast; end

    sig { returns(T::Boolean) }
    def temporary_rate_limit_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def temporary_rate_limit_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def temporary_rate_limit_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def temporary_rate_limit_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def temporary_rate_limit_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def temporary_rate_limit_expires_at=(value); end

    sig { returns(T::Boolean) }
    def temporary_rate_limit_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def temporary_rate_limit_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def temporary_rate_limit_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def temporary_rate_limit_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def temporary_rate_limit_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def temporary_rate_limit_expires_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def temporary_rate_limit_expires_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def temporary_rate_limit_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def temporary_rate_limit_expires_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def temporary_rate_limit_expires_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def temporary_rate_limit_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def temporary_rate_limit_expires_at_was; end

    sig { void }
    def temporary_rate_limit_expires_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def temporary_rate_limit_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def temporary_rate_limit_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def temporary_rate_limit_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def temporary_rate_limit_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def temporary_rate_limit_was; end

    sig { void }
    def temporary_rate_limit_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_suspended_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_suspended_at=(value); end

    sig { returns(T::Boolean) }
    def user_suspended_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_suspended_at_before_last_save; end

    sig { returns(T.untyped) }
    def user_suspended_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_suspended_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def user_suspended_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def user_suspended_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def user_suspended_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_suspended_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def user_suspended_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def user_suspended_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_suspended_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_suspended_at_was; end

    sig { void }
    def user_suspended_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_suspended_by_id=(value); end

    sig { returns(T::Boolean) }
    def user_suspended_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_suspended_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_suspended_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_suspended_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_suspended_by_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_suspended_by_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_suspended_by_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_suspended_by_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_suspended_by_id_was; end

    sig { void }
    def user_suspended_by_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contact_email_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dynamic_rate_limit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_integration_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_integration_install_trigger_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_integration_version_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_integration_version_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_integrator_suspended?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_integrator_suspended_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_outdated?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_permissions_cache?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rate_limit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_selection_cache?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscription_item_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_target_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_target_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_temporary_rate_limit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_temporary_rate_limit_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_suspended_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_suspended_by_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_recent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_installable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_target(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_target_id_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::IntegrationInstallation } }

    sig { returns(T::Array[::IntegrationInstallation]) }
    def to_a; end

    sig { returns(T::Array[::IntegrationInstallation]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::IntegrationInstallation } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::IntegrationInstallation } }

    sig do
      params(
        records: T.any(::IntegrationInstallation, T::Enumerable[T.any(::IntegrationInstallation, T::Enumerable[::IntegrationInstallation])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::IntegrationInstallation, T::Enumerable[T.any(::IntegrationInstallation, T::Enumerable[::IntegrationInstallation])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::IntegrationInstallation, T::Enumerable[T.any(::IntegrationInstallation, T::Enumerable[::IntegrationInstallation])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::IntegrationInstallation]) }
    def load_target; end

    sig do
      params(
        records: T.any(::IntegrationInstallation, T::Enumerable[T.any(::IntegrationInstallation, T::Enumerable[::IntegrationInstallation])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::IntegrationInstallation, T::Enumerable[T.any(::IntegrationInstallation, T::Enumerable[::IntegrationInstallation])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::IntegrationInstallation, T::Enumerable[T.any(::IntegrationInstallation, T::Enumerable[::IntegrationInstallation])])
      ).returns(T::Array[::IntegrationInstallation])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::IntegrationInstallation]) }
    def target; end

    sig { returns(T::Array[::IntegrationInstallation]) }
    def to_a; end

    sig { returns(T::Array[::IntegrationInstallation]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::IntegrationInstallation } }

    sig { returns(T::Array[::IntegrationInstallation]) }
    def to_a; end

    sig { returns(T::Array[::IntegrationInstallation]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::IntegrationInstallation } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Api::V2::ResolveTokenRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Api::V2::ResolveTokenRequest`.

class GitHub::Proto::SecretScanning::Api::V2::ResolveTokenRequest
  sig do
    params(
      default_branch_name: T.nilable(String),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      repository_id: T.nilable(Integer),
      resolution: T.nilable(T.any(Symbol, Integer)),
      resolution_comment: T.nilable(String),
      resolver_id: T.nilable(Integer),
      token_id: T.nilable(Integer)
    ).void
  end
  def initialize(default_branch_name: nil, feature_flags: T.unsafe(nil), repository_id: nil, resolution: nil, resolution_comment: nil, resolver_id: nil, token_id: nil); end

  sig { void }
  def clear_default_branch_name; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_resolution; end

  sig { void }
  def clear_resolution_comment; end

  sig { void }
  def clear_resolver_id; end

  sig { void }
  def clear_token_id; end

  sig { returns(String) }
  def default_branch_name; end

  sig { params(value: String).void }
  def default_branch_name=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def resolution; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def resolution=(value); end

  sig { returns(String) }
  def resolution_comment; end

  sig { params(value: String).void }
  def resolution_comment=(value); end

  sig { returns(Integer) }
  def resolver_id; end

  sig { params(value: Integer).void }
  def resolver_id=(value); end

  sig { returns(Integer) }
  def token_id; end

  sig { params(value: Integer).void }
  def token_id=(value); end
end

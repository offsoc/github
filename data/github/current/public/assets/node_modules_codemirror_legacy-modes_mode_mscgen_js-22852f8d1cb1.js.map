{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_mscgen_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/mscgen.js"],"sourcesContent":["function mkParser(lang) {\n  return {\n    name: \"mscgen\",\n    startState: startStateFn,\n    copyState: copyStateFn,\n    token: produceTokenFunction(lang),\n    languageData: {\n      commentTokens: {line: \"#\", block: {open: \"/*\", close: \"*/\"}}\n    }\n  }\n}\n\nexport const mscgen = mkParser({\n  \"keywords\" : [\"msc\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"], // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const msgenny = mkParser({\n  \"keywords\" : null,\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : null,\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const xu = mkParser({\n  \"keywords\" : [\"msc\", \"xu\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nfunction wordRegexpBoundary(pWords) {\n  return new RegExp(\"^\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n}\n\nfunction wordRegexp(pWords) {\n  return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n}\n\nfunction startStateFn() {\n  return {\n    inComment : false,\n    inString : false,\n    inAttributeList : false,\n    inScript : false\n  };\n}\n\nfunction copyStateFn(pState) {\n  return {\n    inComment : pState.inComment,\n    inString : pState.inString,\n    inAttributeList : pState.inAttributeList,\n    inScript : pState.inScript\n  };\n}\n\nfunction produceTokenFunction(pConfig) {\n  return function(pStream, pState) {\n    if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n      return \"bracket\";\n    }\n    /* comments */\n    if (!pState.inComment) {\n      if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n        pState.inComment = true;\n        return \"comment\";\n      }\n      if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n        pStream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (pState.inComment) {\n      if (pStream.match(/[^\\*\\/]*\\*\\//, true, true))\n        pState.inComment = false;\n      else\n        pStream.skipToEnd();\n      return \"comment\";\n    }\n    /* strings */\n    if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n      pState.inString = true;\n      return \"string\";\n    }\n    if (pState.inString) {\n      if (pStream.match(/[^\\\"]*\\\"/, true, true))\n        pState.inString = false;\n      else\n        pStream.skipToEnd();\n      return \"string\";\n    }\n    /* keywords & operators */\n    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))\n      return \"keyword\";\n\n    if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))\n      return \"operator\";\n\n    if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))\n      return \"variable\";\n\n    /* attribute lists */\n    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n      pConfig.inAttributeList = true;\n      return \"bracket\";\n    }\n    if (pConfig.inAttributeList) {\n      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n        return \"attribute\";\n      }\n      if (pStream.match(']', true, true)) {\n        pConfig.inAttributeList = false;\n        return \"bracket\";\n      }\n    }\n\n    pStream.next();\n    return null\n  };\n}\n"],"names":["mkParser","lang","name","startState","startStateFn","copyState","copyStateFn","token","pStream","pState","match","wordRegexp","pConfig","brackets","inComment","singlecomment","skipToEnd","inString","keywords","wordRegexpBoundary","options","arcsWords","arcsOthers","operators","constants","inAttributeList","attributes","next","languageData","commentTokens","line","block","open","close","mscgen","msgenny","xu","pWords","join","inScript"],"sourceRoot":""}
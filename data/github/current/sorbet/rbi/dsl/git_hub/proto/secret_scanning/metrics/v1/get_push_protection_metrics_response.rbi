# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Proto::SecretScanning::Metrics::V1::GetPushProtectionMetricsResponse`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Proto::SecretScanning::Metrics::V1::GetPushProtectionMetricsResponse`.

class GitHub::Proto::SecretScanning::Metrics::V1::GetPushProtectionMetricsResponse
  sig do
    params(
      blocks_by_repository_counts: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount], T::Array[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount])),
      blocks_by_token_type_counts: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount], T::Array[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount])),
      bypass_request_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      bypassed_alerts_count: T.nilable(Integer),
      bypasses_by_reason_counts: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::BypassReasonCount], T::Array[GitHub::Proto::SecretScanning::Metrics::V1::BypassReasonCount])),
      bypasses_by_repository_counts: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount], T::Array[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount])),
      bypasses_by_token_type_counts: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount], T::Array[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount])),
      successful_blocks_count: T.nilable(Integer),
      total_blocks_count: T.nilable(Integer)
    ).void
  end
  def initialize(blocks_by_repository_counts: T.unsafe(nil), blocks_by_token_type_counts: T.unsafe(nil), bypass_request_ids: T.unsafe(nil), bypassed_alerts_count: nil, bypasses_by_reason_counts: T.unsafe(nil), bypasses_by_repository_counts: T.unsafe(nil), bypasses_by_token_type_counts: T.unsafe(nil), successful_blocks_count: nil, total_blocks_count: nil); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount]) }
  def blocks_by_repository_counts; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount]).void }
  def blocks_by_repository_counts=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount]) }
  def blocks_by_token_type_counts; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount]
    ).void
  end
  def blocks_by_token_type_counts=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def bypass_request_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def bypass_request_ids=(value); end

  sig { returns(Integer) }
  def bypassed_alerts_count; end

  sig { params(value: Integer).void }
  def bypassed_alerts_count=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::BypassReasonCount]) }
  def bypasses_by_reason_counts; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::BypassReasonCount]
    ).void
  end
  def bypasses_by_reason_counts=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount]) }
  def bypasses_by_repository_counts; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::RepoCount]).void }
  def bypasses_by_repository_counts=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount]) }
  def bypasses_by_token_type_counts; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[GitHub::Proto::SecretScanning::Metrics::V1::TokenTypeCount]
    ).void
  end
  def bypasses_by_token_type_counts=(value); end

  sig { void }
  def clear_blocks_by_repository_counts; end

  sig { void }
  def clear_blocks_by_token_type_counts; end

  sig { void }
  def clear_bypass_request_ids; end

  sig { void }
  def clear_bypassed_alerts_count; end

  sig { void }
  def clear_bypasses_by_reason_counts; end

  sig { void }
  def clear_bypasses_by_repository_counts; end

  sig { void }
  def clear_bypasses_by_token_type_counts; end

  sig { void }
  def clear_successful_blocks_count; end

  sig { void }
  def clear_total_blocks_count; end

  sig { returns(Integer) }
  def successful_blocks_count; end

  sig { params(value: Integer).void }
  def successful_blocks_count=(value); end

  sig { returns(Integer) }
  def total_blocks_count; end

  sig { params(value: Integer).void }
  def total_blocks_count=(value); end
end

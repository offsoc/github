# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PullRequestReviewRequest`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PullRequestReviewRequest`.

class Hydro::Schemas::Github::V1::PullRequestReviewRequest
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      as_code_owner: T.nilable(T::Boolean),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      subject_team: T.nilable(Hydro::Schemas::Github::V1::Entities::Team),
      subject_user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(action: nil, actor: nil, as_code_owner: nil, pull_request: nil, repository: nil, request_context: nil, subject_team: nil, subject_user: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T::Boolean) }
  def as_code_owner; end

  sig { params(value: T::Boolean).void }
  def as_code_owner=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_as_code_owner; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_subject_team; end

  sig { void }
  def clear_subject_user; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Team)) }
  def subject_team; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Team)).void }
  def subject_team=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def subject_user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def subject_user=(value); end
end

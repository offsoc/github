{"version":3,"file":"octocaptcha-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/octocaptcha.ts"],"sourcesContent":["// Expose loadFunCaptcha callback function so funcaptcha js can call it\n// https://www.funcaptcha.com/advanced-setup/\n\nexport {}\n\ndeclare global {\n  interface Window {\n    loadFunCaptchaV2: LoadFunCaptchaV2\n  }\n}\ntype LoadFunCaptchaV2 = (myEnforcement: MyEnforcement) => void\ntype MyEnforcement = {\n  setConfig: (config: EnforcementConfig) => void\n}\ntype EnforcementConfig = {\n  selector: string\n  mode: 'inline'\n  onCompleted: (response: {token: string}) => void\n  onResize: (response: {height: string; width: string}) => void\n  onSuppress: () => void\n  data: {\n    origin_page: string | null\n    blob: string | null\n  }\n}\n\nwindow.loadFunCaptchaV2 = myEnforcement => {\n  const funcaptcha = document.querySelector<HTMLElement>('#funcaptcha')!\n  const targetOrigin = funcaptcha.getAttribute('data-target-origin')\n  const originPage = funcaptcha.getAttribute('data-origin-page')\n  const requireAck = funcaptcha.getAttribute('data-require-ack')\n  const captchaVersion = funcaptcha.getAttribute('data-version')\n  const dataExchangePayload = funcaptcha.getAttribute('data-data-exchange-payload')\n  const retrySendTimeout = 5000\n  const maxRetryCount = 15\n  const V1_BORDER_COLOR = '#BDBDBD'\n  const V2_BORDER_COLOR = '#202637'\n\n  myEnforcement.setConfig({\n    selector: '#funcaptcha',\n    mode: 'inline',\n    onCompleted: (response: {token: string}) => {\n      const sessionToken = response.token\n      parent.postMessage({event: 'captcha-complete', sessionToken}, targetOrigin || '')\n    },\n    onResize: response => {\n      const width = parseInt(response.width, 10)\n      const height = parseInt(response.height, 10)\n\n      const styles: Record<string, string> = {\n        border: `1px solid ${captchaVersion === '1' ? V1_BORDER_COLOR : V2_BORDER_COLOR}`,\n        'border-radius': '6px',\n        'box-sizing': 'border-box',\n        overflow: 'hidden',\n        height: '100%',\n        width: '100%',\n      }\n      for (const prop in styles) {\n        funcaptcha.style.setProperty(prop, styles[prop]!)\n      }\n\n      let acked = false\n      window.addEventListener('message', e => (acked = e?.data?.event === 'captcha-loaded-ack'))\n      const sendCaptchaLoaded = (retryCount: number) => {\n        if (!acked && retryCount < maxRetryCount) {\n          // we need to send the height and width to the parent to properly show all the contents of the captcha\n          parent.postMessage({event: 'captcha-loaded', height, width}, targetOrigin || '')\n          setTimeout(() => sendCaptchaLoaded(retryCount + 1), retrySendTimeout)\n        }\n      }\n      if (requireAck === 'true') {\n        setTimeout(() => sendCaptchaLoaded(0), retrySendTimeout)\n      }\n\n      parent.postMessage({event: 'captcha-loaded', height, width}, targetOrigin || '')\n    },\n    onSuppress: () => {\n      parent.postMessage({event: 'captcha-suppressed'}, targetOrigin || '')\n    },\n    data: {\n      origin_page: originPage,\n      blob: dataExchangePayload,\n    },\n  })\n}\n\nwindow.loadFunCaptcha = () => {\n  const funcaptcha = document.querySelector<HTMLElement>('#funcaptcha')!\n  const title = funcaptcha.getAttribute('data-title')!\n  const publicKey = funcaptcha.getAttribute('data-pkey')\n  const targetOrigin = funcaptcha.getAttribute('data-target-origin')\n  const originPage = funcaptcha.getAttribute('data-origin-page')\n  const requireAck = funcaptcha.getAttribute('data-require-ack')\n  const captchaVersion = funcaptcha.getAttribute('data-version')\n  const retrySendTimeout = 5000\n  const maxRetryCount = 15\n  const V1_BORDER_COLOR = '#BDBDBD'\n  const V2_BORDER_COLOR = '#202637'\n\n  new window.FunCaptcha({\n    public_key: publicKey,\n    loaded_callback: () => {\n      const width = funcaptcha.offsetWidth\n      const height = funcaptcha.offsetHeight\n      const iframeWrap = document.getElementById('fc-iframe-wrap')\n      iframeWrap?.style.setProperty('width', '100%')\n      iframeWrap?.setAttribute('title', title)\n\n      const styles: Record<string, string> = {\n        border: `1px solid ${captchaVersion === '1' ? V1_BORDER_COLOR : V2_BORDER_COLOR}`,\n        'border-radius': '6px',\n        'box-sizing': 'border-box',\n        overflow: 'hidden',\n        height: '100%',\n        width: '100%',\n      }\n      for (const prop in styles) {\n        funcaptcha.style.setProperty(prop, styles[prop]!)\n      }\n\n      let acked = false\n      window.addEventListener('message', e => (acked = e?.data?.event === 'captcha-loaded-ack'))\n      const sendCaptchaLoaded = (retryCount: number) => {\n        if (!acked && retryCount < maxRetryCount) {\n          // we need to send the height and width to the parent to properly show all the contents of the captcha\n          parent.postMessage({event: 'captcha-loaded', height, width}, targetOrigin || '')\n          setTimeout(() => sendCaptchaLoaded(retryCount + 1), retrySendTimeout)\n        }\n      }\n      if (requireAck === 'true') {\n        setTimeout(() => sendCaptchaLoaded(0), retrySendTimeout)\n      }\n\n      parent.postMessage({event: 'captcha-loaded', height, width}, targetOrigin || '')\n    },\n    callback: () => {\n      const sessionToken = document.querySelector<HTMLInputElement>('#FunCaptcha-Token')!.value\n      parent.postMessage({event: 'captcha-complete', sessionToken}, targetOrigin || '')\n    },\n    onsuppress: () => {\n      parent.postMessage({event: 'captcha-suppressed'}, targetOrigin || '')\n    },\n    data: {\n      origin_page: originPage,\n    },\n  })\n}\n"],"names":["window","loadFunCaptchaV2","myEnforcement","funcaptcha","document","querySelector","targetOrigin","getAttribute","originPage","requireAck","captchaVersion","dataExchangePayload","setConfig","selector","mode","onCompleted","sessionToken","response","token","parent","postMessage","event","onResize","width","parseInt","height","styles","border","overflow","prop","style","setProperty","acked","addEventListener","e","data","sendCaptchaLoaded","retryCount","setTimeout","onSuppress","origin_page","blob","loadFunCaptcha","title","publicKey","FunCaptcha","public_key","loaded_callback","offsetWidth","offsetHeight","iframeWrap","getElementById","setAttribute","callback","value","onsuppress"],"sourceRoot":""}
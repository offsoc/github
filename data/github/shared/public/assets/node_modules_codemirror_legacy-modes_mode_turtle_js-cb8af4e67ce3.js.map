{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_turtle_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/turtle.js"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  }\n  else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if(stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if(keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if(ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return null;\n    else if (keywords.test(word))\n      return \"meta\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const turtle = {\n  name: \"turtle\",\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["wordRegexp","words","join","curPunc","keywords","operatorChars","tokenBase","stream","state","word","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","peek","current","pushContext","type","col","context","prev","indent","popContext","turtle","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"sourceRoot":""}
syntax = "proto3";
package github.authentication.v0;

option go_package = "client/proto/authentication/v0";
option ruby_package = "Authnd::Proto";

import "authentication/v0/attributes.proto";
import "google/protobuf/timestamp.proto";

// IssueTokenRequest captures the parameters needed to issue a new token credential.
message IssueTokenRequest {
	// The type of token to issue.
	string type = 1;

	// The expiry date for the token.
	google.protobuf.Timestamp expires_at_time = 2; // https://github.com/twitchtv/twirp/blob/main/docs/best_practices.md#naming-conventions

	// The attributes to associate with the token.
	repeated Attribute attributes = 3;
}

// IssueTokenResponse captures the response to an IssueToken request.
message IssueTokenResponse {
	// Result is a high level result of the issue attempt.
	enum Result {
		// RESULT_UNKNOWN
		// Should never be used because it is the zero value for this
		// field and will be invisible when encoded into JSON.
		RESULT_UNKNOWN = 0;
		// The token was issued successfully.
		RESULT_SUCCESS = 1;
		// The supplied attributes were invalid.
		RESULT_INVALID_ATTRIBUTES = 2;
		// An unsupported token type was specified
		RESULT_UNSUPPORTED_TOKEN_TYPE = 3;
		// The user ID was not found.
		RESULT_FAILED_USER_UNKNOWN = 4;
		// The user is suspended.
		RESULT_FAILED_USER_SUSPENDED = 5;
		// RESULT_FAILED_GENERIC indicates the issuing failed.
		// If possible a more descriptive result code should be used.
		RESULT_FAILED_GENERIC = -1;
	}

	// Result is the overall result of issuing the token.
	Result result = 1;

	// Error is a more detailed error message describing the problem (if result != RESULT_SUCCESS)
	string error = 2;

	// Token is the generated token (if result == RESULT_SUCCESS)
	string token = 3;

	// TokenId is a unique identifier for the token which cannot be used for authentication but can be used to revoke or modify the token.
	int64 token_id = 4;

	// This value is provided by the client and we're returning it back to them as confirmation
	google.protobuf.Timestamp expires_at_time = 5;
}

// IssueSignedAuthTokenRequest captures the parameters needed to issue a new signed auth token.
message IssueSignedAuthTokenRequest {
        // The ID of the user to which this token will be bound.
        uint64 user_id = 1;

        // The ID of the user session to which this token will be bound. If zero, the resulting SAT will be scoped only to the user ID.
        uint64 session_id = 2;

        // The desired scope for this token.
        string scope = 3;

        // The expiry date for the token.
        google.protobuf.Timestamp expires_at_time = 4;

        // Any user-provided attributes to associate with this token.
        // Note that attributes with timestamp values are not supported, due to
        // historical deficiencies in the dotcom implementation. If you need
        // to transmit timestamp information, use Unix-epoch integers.
        repeated Attribute attributes = 5;
}

// IssueSignedAuthTokenResponse holds a signed auth token or an error response.
message IssueSignedAuthTokenResponse {
        // The token, as generated from the parameters of a token request.
        string token = 1;

        // Any error message information.
        string error = 2;

	// Provided by the client and we're returning it back to them as confirmation
	google.protobuf.Timestamp expires_at_time = 3;
}

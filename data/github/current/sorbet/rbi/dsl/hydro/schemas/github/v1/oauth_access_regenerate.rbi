# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::OauthAccessRegenerate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::OauthAccessRegenerate`.

class Hydro::Schemas::Github::V1::OauthAccessRegenerate
  sig do
    params(
      accessible_organization_ids: T.nilable(T.any(Google::Protobuf::RepeatedField[Integer], T::Array[Integer])),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      app_type: T.nilable(T.any(Symbol, Integer)),
      database_id: T.nilable(Integer),
      expires_at_custom_date: T.nilable(String),
      expires_at_preset: T.nilable(T.any(Symbol, Integer)),
      expires_at_timestamp: T.nilable(Google::Protobuf::Timestamp),
      integration: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration),
      oauth_application: T.nilable(Hydro::Schemas::Github::V1::Entities::OauthApplication),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      scopes: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String]))
    ).void
  end
  def initialize(accessible_organization_ids: T.unsafe(nil), actor: nil, app_type: nil, database_id: nil, expires_at_custom_date: nil, expires_at_preset: nil, expires_at_timestamp: nil, integration: nil, oauth_application: nil, request_context: nil, scopes: T.unsafe(nil)); end

  sig { returns(Google::Protobuf::RepeatedField[Integer]) }
  def accessible_organization_ids; end

  sig { params(value: Google::Protobuf::RepeatedField[Integer]).void }
  def accessible_organization_ids=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def app_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def app_type=(value); end

  sig { void }
  def clear_accessible_organization_ids; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_app_type; end

  sig { void }
  def clear_database_id; end

  sig { void }
  def clear_expires_at_custom_date; end

  sig { void }
  def clear_expires_at_preset; end

  sig { void }
  def clear_expires_at_timestamp; end

  sig { void }
  def clear_integration; end

  sig { void }
  def clear_oauth_application; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_scopes; end

  sig { returns(Integer) }
  def database_id; end

  sig { params(value: Integer).void }
  def database_id=(value); end

  sig { returns(String) }
  def expires_at_custom_date; end

  sig { params(value: String).void }
  def expires_at_custom_date=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def expires_at_preset; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def expires_at_preset=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def expires_at_timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def expires_at_timestamp=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)) }
  def integration; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Integration)).void }
  def integration=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::OauthApplication)) }
  def oauth_application; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::OauthApplication)).void }
  def oauth_application=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def scopes; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def scopes=(value); end
end

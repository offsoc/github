syntax = "proto3";

package actions.core.v1;

option go_package = "core/v1";
option ruby_package = "MonolithTwirp::Actions::Core::V1";

import "core/v1/actor.proto";
import "core/v1/identity.proto";
import "core/v1/repository.proto";
import "core/v1/repository_visibility.proto";

service RepositoriesAPI {
  rpc CheckRepositoryActionsStatus(CheckRepositoryActionsStatusRequest) returns (CheckRepositoryActionsStatusResponse);
  // GetRepositoryOwners is used to resolve the owner "hierarchy" of a repo
  rpc GetRepositoryOwners(GetRepositoryOwnersRequest) returns (GetRepositoryOwnersResponse);
  // GetRepositoryOwnerId is used to get the owner id of a repo
  rpc GetRepositoryOwnerId(GetRepositoryOwnerIdRequest) returns (GetRepositoryOwnerIdResponse);
  // GetCommitMessage retrieves the message of a commit in this repo, by SHA1.
  rpc GetCommitMessage(GetCommitMessageRequest) returns (GetCommitMessageResponse);
  // RetireNamespace retires an nwo namespace.
  rpc RetireNamespace(RetireNamespaceRequest) returns (RetireNamespaceResponse);
  // FindRepositoriesByName retrieves a list of repositories by name (name with owner).
  rpc FindRepositoriesByName(FindRepositoriesByNameRequest) returns (FindRepositoriesByNameResponse);
  // GetAdditionalWorkflows retrieves a list of workflows from sources other than the repository itself.
  // One example could be a ruleset workflow enforced by the organization.
  rpc GetAdditionalWorkflows(GetAdditionalWorkflowsRequest) returns (GetAdditionalWorkflowsResponse);
  // GetRepositoryEventDetails retrieves repository and owner information.
  // This matches the information in webhook events.
  rpc GetRepositoryEventDetails(GetRepositoryEventDetailsRequest) returns (GetRepositoryEventDetailsResponse);
}

message CheckRepositoryActionsStatusRequest {
  // id is the ID used to retrieve the repository. (required)
  int64 id = 1;
}

message CheckRepositoryActionsStatusResponse {
  // can_use_actions is whether the repository is allowed to use Actions or not (required).
  bool can_use_actions = 1;
  string reason = 2;
}

message GetRepositoryOwnersRequest {
  // id is the ID used to retrieve the repository. (required)
  int64 id = 1;
}

message GetRepositoryOwnersResponse {
  // repository is the repository being asked about (required)
  Actor repository = 1;
  // owner is the the owner of the repository, may be a user or an organization (required)
  Actor owner = 2;
  // business is the business owning the org owning the repository (optional)
  Actor business = 3;
  // owner_plan_name is the plan the owner is on
  string owner_plan_name = 4;
}

message GetRepositoryOwnerIdRequest {
  // id is the ID used to retrieve the repository. (required)
  int64 id = 1;
}

message GetRepositoryOwnerIdResponse {
  // id of the owner of the repository, if it exists (required)
  int64 owner_id = 1;
}

message GetCommitMessageRequest {
  // id is the ID of the repository containing the commit. (required)
  int64 repository_id = 1;
  // commit_sha is the SHA1 of the commit for which we need the message. (required)
  string commit_sha = 2;
}

message GetCommitMessageResponse {
  string commit_message = 1;
}

message RetireNamespaceRequest {
  // The "name with owner" string of the repository/namespace to retire
  string nwo = 1;
}

message RetireNamespaceResponse {
}

message FindRepositoriesByNameRequest {
  // nwos (name with owner) used to retrieve at most 100 repositories. (required)
  repeated string nwos = 1;
}

message FindRepositoriesByNameResponse {
  // repositories contains the repositories found for the nwos in FindRepositoriesByNameRquest. (required)
  repeated Repository repositories = 1;

  // An error message populated if one or more repositories cannot be found.
  string repositories_not_found_error_message = 2;
}

message GetAdditionalWorkflowsRequest {
  // The databaseID of the repository for which the additional workflows need to be retrieved.
  int64 repository_id = 1;

  // The webhook event for which the workflows are getting triggered.
  string event_type = 2;

  // The base ref points to the target branch.
  string base_ref = 3;

  // The before OID is the base SHA for the head of the target branch. This terminology is used by rulesets in github/github.
  string before_oid = 4;

  // The after OID is the merge_commit SHA for pull_request events and the head SHA for merge_group events.
  string after_oid = 5;

  reserved "additional_workflow_type"; reserved 6;
}

message GetAdditionalWorkflowsResponse {
  reserved 1, 3;
  reserved "additional_workflows", "required_workflows";

  repeated RequiredWorkflow ruleset_workflows = 2;
}

message RequiredWorkflow {
  // GlobalID of the repository from where the required workflow is imposed
  Identity repository_id = 1;

  // GlobalID of the organization that contains the imposer repository
  Identity owner_id = 2;

  // NWO of the imposer repository
  string repository_nwo = 3;

  // Absolute path of the required workflow from the root directory of the imposer repo
  string path = 4;

  // The git ref at which the required workflow was selected from the imposer repository
  string ref = 5;

  // The visibility of the repository where the required workflow blob is present
  RepositoryVisibility visibility = 6;

  // The gh/gh database ID of the repository
  int64 repo_database_id = 7;

  // The target branches specified for the required workflow
  repeated string target_branches = 8;

  // The sha of the run, if it is pinned to a specific sha
  string workflow_file_sha = 9;
}

message GetRepositoryEventDetailsRequest {
  int64 repository_id = 1;
}

message GetRepositoryEventDetailsResponse {
  string event_payload = 1;
}

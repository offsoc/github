# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PlatformTypes::StafftoolsInfo`.
# Please instead update this file by running `bin/tapioca dsl PlatformTypes::StafftoolsInfo`.

class PlatformTypes::StafftoolsInfo < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig do
    returns(T.nilable(T.any(PlatformTypes::User, PlatformTypes::Organization, PlatformTypes::Enterprise, PlatformTypes::Bot, PlatformTypes::Mannequin, PlatformTypes::ProgrammaticAccessBot)))
  end
  def account_from_database_id; end

  sig { returns(T::Boolean) }
  def account_from_database_id?; end

  sig { returns(T.nilable(PlatformTypes::AccountConnection)) }
  def accounts; end

  sig { returns(T::Boolean) }
  def accounts?; end

  sig { returns(T.nilable(PlatformTypes::AccountConnection)) }
  def accounts_for_email_domain; end

  sig { returns(T::Boolean) }
  def accounts_for_email_domain?; end

  sig { returns(T.nilable(PlatformTypes::AccountConnection)) }
  def accounts_for_email_pattern; end

  sig { returns(T::Boolean) }
  def accounts_for_email_pattern?; end

  sig do
    returns(T.nilable(T::Array[T.any(PlatformTypes::User, PlatformTypes::Organization, PlatformTypes::Enterprise, PlatformTypes::Bot, PlatformTypes::Mannequin, PlatformTypes::ProgrammaticAccessBot)]))
  end
  def accounts_for_emails; end

  sig { returns(T::Boolean) }
  def accounts_for_emails?; end

  sig do
    returns(T.nilable(T::Array[T.any(PlatformTypes::User, PlatformTypes::Organization, PlatformTypes::Enterprise, PlatformTypes::Bot, PlatformTypes::Mannequin, PlatformTypes::ProgrammaticAccessBot)]))
  end
  def accounts_for_logins; end

  sig { returns(T::Boolean) }
  def accounts_for_logins?; end

  sig { returns(T.nilable(PlatformTypes::AccountConnection)) }
  def accounts_from_last_ip; end

  sig { returns(T::Boolean) }
  def accounts_from_last_ip?; end

  sig { returns(T::Array[String]) }
  def audit_log_actions; end

  sig { returns(T::Boolean) }
  def audit_log_actions?; end

  sig { returns(PlatformTypes::JsonAuditEntryConnection) }
  def audit_log_json; end

  sig { returns(T::Boolean) }
  def audit_log_json?; end

  sig { returns(T::Array[String]) }
  def deprecated_audit_log_actions; end

  sig { returns(T::Boolean) }
  def deprecated_audit_log_actions?; end

  sig { returns(T.nilable(PlatformTypes::EarlyAccessMembershipConnection)) }
  def early_access_memberships; end

  sig { returns(T::Boolean) }
  def early_access_memberships?; end

  sig { returns(PlatformTypes::EmailDomainMetadata) }
  def email_domain_metadata; end

  sig { returns(T::Boolean) }
  def email_domain_metadata?; end

  sig { returns(PlatformTypes::SpamuraiReputation) }
  def email_domain_reputation; end

  sig { returns(T::Boolean) }
  def email_domain_reputation?; end

  sig { returns(PlatformTypes::EnterpriseConnection) }
  def enterprises; end

  sig { returns(T::Boolean) }
  def enterprises?; end

  sig { returns(Integer) }
  def ip_neighbors_count; end

  sig { returns(T::Boolean) }
  def ip_neighbors_count?; end

  sig do
    returns(T.nilable(T.any(PlatformTypes::Team, PlatformTypes::User, PlatformTypes::Bot, PlatformTypes::Repository, PlatformTypes::Organization, PlatformTypes::Issue, PlatformTypes::IssueComment, PlatformTypes::PullRequest, PlatformTypes::PullRequestReview, PlatformTypes::PullRequestReviewComment, PlatformTypes::Discussion, PlatformTypes::DiscussionComment, PlatformTypes::Release)))
  end
  def resolve_url_to_type; end

  sig { returns(T::Boolean) }
  def resolve_url_to_type?; end

  sig { returns(T.nilable(PlatformTypes::RetiredNamespaceConnection)) }
  def retired_namespaces; end

  sig { returns(T::Boolean) }
  def retired_namespaces?; end

  sig { returns(T::Array[PlatformTypes::ReusedCardFingerprint]) }
  def reused_card_fingerprints; end

  sig { returns(T::Boolean) }
  def reused_card_fingerprints?; end

  sig { returns(Integer) }
  def spammy_ip_neighbors_count; end

  sig { returns(T::Boolean) }
  def spammy_ip_neighbors_count?; end

  sig { returns(T.nilable(T::Array[PlatformTypes::UserAssetUrl])) }
  def user_asset_urls; end

  sig { returns(T::Boolean) }
  def user_asset_urls?; end
end

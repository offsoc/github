# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Moderation::V0::ModerationAction`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Moderation::V0::ModerationAction`.

class Hydro::Schemas::Github::Moderation::V0::ModerationAction
  sig do
    params(
      account_moderation: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::AccountModeration),
      action: T.nilable(String),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      content_moderation: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::ContentModeration),
      countries: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      is_test: T.nilable(T::Boolean),
      performed_on: T.nilable(Google::Protobuf::Timestamp),
      reason: T.nilable(T.any(Symbol, Integer)),
      service_moderation: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::ServiceModeration),
      source: T.nilable(T.any(Symbol, Integer)),
      sponsors_moderation: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::SponsorsModeration),
      tos_reason: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(account_moderation: nil, action: nil, actor: nil, content_moderation: nil, countries: T.unsafe(nil), is_test: nil, performed_on: nil, reason: nil, service_moderation: nil, source: nil, sponsors_moderation: nil, tos_reason: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::AccountModeration)) }
  def account_moderation; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::AccountModeration)).void }
  def account_moderation=(value); end

  sig { returns(String) }
  def action; end

  sig { params(value: String).void }
  def action=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_account_moderation; end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_content_moderation; end

  sig { void }
  def clear_countries; end

  sig { void }
  def clear_is_test; end

  sig { void }
  def clear_performed_on; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_service_moderation; end

  sig { void }
  def clear_source; end

  sig { void }
  def clear_sponsors_moderation; end

  sig { void }
  def clear_tos_reason; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::ContentModeration)) }
  def content_moderation; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::ContentModeration)).void }
  def content_moderation=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def countries; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def countries=(value); end

  sig { returns(T::Boolean) }
  def is_test; end

  sig { params(value: T::Boolean).void }
  def is_test=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def performed_on; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def performed_on=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::ServiceModeration)) }
  def service_moderation; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::ServiceModeration)).void }
  def service_moderation=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def source=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::SponsorsModeration)) }
  def sponsors_moderation; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Moderation::V0::Entities::SponsorsModeration)).void }
  def sponsors_moderation=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def tos_reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def tos_reason=(value); end
end

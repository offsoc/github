{"version":3,"file":"chunk-app_components_advisories_severity-score-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/advisories/severity-score-element.ts"],"sourcesContent":["import {controller, target} from '@github/catalyst'\n\ninterface ScoreData {\n  score: number\n  severity: string\n}\n\nconst severityClassNames: {[index: string]: string} = {\n  critical: 'Label--danger',\n  high: 'Label--orange',\n  moderate: 'Label--warning',\n  low: 'Label--primary',\n}\n\n// Based on the severity ranges in the `cvss_v3_severity` and `cvss_v4_severity` methods in https://github.com/github/advisory-db/lib/severity_calculator.rb\nconst severityRanges: {[index: string]: string} = {\n  low: '0.1 - 3.9',\n  moderate: '4.0 - 6.9',\n  high: '7.0 - 8.9',\n  critical: '9.0 - 10.0',\n}\n\n@controller\nexport default class SeverityScoreElement extends HTMLElement {\n  @target scoreFieldElement: HTMLElement\n  @target scoreAuthenticityTokenInput: HTMLInputElement\n  @target scoreElement: HTMLElement\n  @target severityLabelElement: HTMLElement\n\n  readonly pendingScoreTextColorClass = 'color-fg-muted'\n\n  async calculateScore(vectorString: string) {\n    this.hideFormGroupError(this.scoreFieldElement)\n    this.scoreElement.classList.remove(this.pendingScoreTextColorClass)\n\n    let scoreData: ScoreData\n\n    try {\n      scoreData = await this.fetchScoreData(vectorString)\n    } catch (error) {\n      this.showFormGroupError(this.scoreFieldElement)\n      return\n    }\n\n    this.score = scoreData.score.toFixed(1)\n\n    const severityLabel = scoreData.severity.toLowerCase()\n\n    this.showSeverityLabel(severityLabel)\n  }\n\n  async fetchScoreData(vectorString: string): Promise<ScoreData> {\n    const formData = new FormData()\n\n    if (vectorString.startsWith('CVSS:4.0/')) {\n      formData.append('cvss_v4', vectorString)\n    } else {\n      formData.append('cvss_v3', vectorString)\n    }\n\n    const url = this.scoreElement.getAttribute('data-action-url')\n\n    if (!url) {\n      throw new Error('The endpoint url to get the score must be specified')\n    }\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Scoped-CSRF-Token': this.scoreAuthenticityTokenInput.value,\n      },\n      body: formData,\n    })\n    if (!response.ok) {\n      return Promise.reject(new Error('Score could not be calculated'))\n    }\n\n    return response.json()\n  }\n\n  hideFormGroupError(formGroup: HTMLElement) {\n    if (formGroup.classList.contains('errored')) {\n      formGroup.classList.remove('errored')\n    }\n  }\n\n  hideSeverityLabel() {\n    this.severityLabelElement.hidden = true\n  }\n\n  get pending() {\n    return (\n      this.severityLabelElement.textContent?.toLowerCase() === 'unknown' &&\n      this.score === this.scoreElement.getAttribute('data-empty-message') &&\n      this.scoreElement.classList.contains(this.pendingScoreTextColorClass)\n    )\n  }\n\n  get score() {\n    return this.scoreElement.textContent\n  }\n\n  set score(newScore) {\n    this.scoreElement.textContent = newScore\n  }\n\n  set severity(newSeverity: string) {\n    this.showSeverityLabel(newSeverity)\n\n    this.score = severityRanges[newSeverity] || ''\n  }\n\n  set severityLabel(newSeverityLabel: string) {\n    this.severityLabelElement.textContent = newSeverityLabel.charAt(0).toUpperCase() + newSeverityLabel.slice(1)\n  }\n\n  // TODO: Is pending really needed? Can we remove the concept and just show 0?\n  setPending() {\n    this.showSeverityLabel('unknown')\n\n    this.score = this.scoreElement.getAttribute('data-empty-message')\n\n    this.scoreElement.classList.add(this.pendingScoreTextColorClass)\n  }\n\n  showFormGroupError(formGroup: HTMLElement) {\n    if (!formGroup.classList.contains('errored')) {\n      formGroup.classList.add('errored')\n    }\n  }\n\n  showSeverityLabel(severityLabel: string) {\n    this.severityLabel = severityLabel\n\n    // Update the label style\n    this.severityLabelElement.classList.remove(...Object.values(severityClassNames))\n\n    const className = severityClassNames[severityLabel]\n\n    if (className && !this.severityLabelElement.classList.contains(className)) {\n      this.severityLabelElement.classList.add(className)\n    }\n  }\n}\n"],"names":["severityClassNames","critical","high","moderate","low","severityRanges","SeverityScoreElement","HTMLElement","calculateScore","vectorString","scoreData","hideFormGroupError","scoreFieldElement","scoreElement","classList","remove","pendingScoreTextColorClass","fetchScoreData","error","showFormGroupError","score","toFixed","severityLabel","severity","toLowerCase","showSeverityLabel","formData","FormData","startsWith","append","url","getAttribute","response","fetch","method","headers","Accept","scoreAuthenticityTokenInput","value","body","ok","json","Promise","reject","formGroup","contains","hideSeverityLabel","severityLabelElement","hidden","pending","textContent","newScore","newSeverity","newSeverityLabel","charAt","toUpperCase","slice","setPending","add","Object","values","className","target","controller"],"sourceRoot":""}
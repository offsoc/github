# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest`.

class GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest
  sig do
    params(
      by_id: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID),
      by_object_id_path: T.nilable(GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::ObjectIDPath),
      by_ref_path: T.nilable(GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::RefPath),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      request_context: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)
    ).void
  end
  def initialize(by_id: nil, by_object_id_path: nil, by_ref_path: nil, repository: nil, request_context: nil); end

  sig { returns(T.nilable(Symbol)) }
  def blob; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)) }
  def by_id; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::ObjectID)).void }
  def by_id=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::ObjectIDPath)) }
  def by_object_id_path; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::ObjectIDPath)).void }
  def by_object_id_path=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::RefPath)) }
  def by_ref_path; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Blobs::V1::GetBlobContentsRequest::RefPath)).void }
  def by_ref_path=(value); end

  sig { void }
  def clear_by_id; end

  sig { void }
  def clear_by_object_id_path; end

  sig { void }
  def clear_by_ref_path; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)).void }
  def request_context=(value); end
end

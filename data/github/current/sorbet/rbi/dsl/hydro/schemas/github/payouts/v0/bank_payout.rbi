# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Payouts::V0::BankPayout`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Payouts::V0::BankPayout`.

class Hydro::Schemas::Github::Payouts::V0::BankPayout
  sig do
    params(
      destination_account_id: T.nilable(Google::Protobuf::StringValue),
      destination_account_type: T.nilable(T.any(Symbol, Integer)),
      failure_code: T.nilable(Google::Protobuf::StringValue),
      funding_instrument_type: T.nilable(T.any(Symbol, Integer)),
      payout_id: T.nilable(Google::Protobuf::StringValue),
      sponsored_maintainer: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      status: T.nilable(T.any(Symbol, Integer)),
      total_payout_amount_in_cents: T.nilable(Integer)
    ).void
  end
  def initialize(destination_account_id: nil, destination_account_type: nil, failure_code: nil, funding_instrument_type: nil, payout_id: nil, sponsored_maintainer: nil, status: nil, total_payout_amount_in_cents: nil); end

  sig { void }
  def clear_destination_account_id; end

  sig { void }
  def clear_destination_account_type; end

  sig { void }
  def clear_failure_code; end

  sig { void }
  def clear_funding_instrument_type; end

  sig { void }
  def clear_payout_id; end

  sig { void }
  def clear_sponsored_maintainer; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_total_payout_amount_in_cents; end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def destination_account_id; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def destination_account_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def destination_account_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def destination_account_type=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def failure_code; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def failure_code=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def funding_instrument_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def funding_instrument_type=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def payout_id; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def payout_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def sponsored_maintainer; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def sponsored_maintainer=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(Integer) }
  def total_payout_amount_in_cents; end

  sig { params(value: Integer).void }
  def total_payout_amount_in_cents=(value); end
end

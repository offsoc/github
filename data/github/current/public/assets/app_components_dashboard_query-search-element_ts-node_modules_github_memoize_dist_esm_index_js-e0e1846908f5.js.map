{"version":3,"file":"chunk-app_components_dashboard_query-search-element_ts-node_modules_github_memoize_dist_esm_index_js-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/dashboard/query-search-element.ts","node_modules/@github/memoize/dist/esm/index.js"],"sourcesContent":["import {html, render} from 'lit-html'\nimport {controller} from '@github/catalyst'\nimport {eventToHotkeyString} from '@github-ui/hotkey'\nimport {until} from 'lit-html/directives/until'\nimport {BaseFilterElement} from '../../assets/modules/github/filter-input'\n\ninterface Suggestion {\n  value: string\n  description?: string\n}\n\nconst textQualifiers: Suggestion[] = [\n  {\n    description: 'filter by text in title',\n    value: 'in:title',\n  },\n  {\n    description: 'filter by text in body',\n    value: 'in:body',\n  },\n  {\n    description: 'filter by text in comments',\n    value: 'in:comments',\n  },\n]\n\n@controller\nclass QuerySearchElement extends BaseFilterElement {\n  // Render autocomplete suggestions to match qualifier names from the currently typed text\n  // If no matches, render all suggestions as well as text qualifier suggestions\n  override renderMatchingOrAllQualifierSuggestions(filterString: string): void {\n    const suggestions = this.fetchQualifierSuggestions()\n    const matchingSuggestions = this.filterSuggestionsList(suggestions, filterString, {\n      fuzzy: this.fuzzyMatchQualifiers,\n    })\n      /* eslint-disable-next-line github/no-then */\n      .then(matching => {\n        const textMatchers: Suggestion[] = filterString\n          ? textQualifiers.map(q => ({\n              value: `\"${filterString}\" ${q.value}`,\n              description: q.description,\n            }))\n          : []\n        const ret = matching.length === 0 ? suggestions.slice() : matching.slice()\n        ret.unshift(...textMatchers)\n        return ret\n      })\n\n    this.renderSuggestionDropdown(matchingSuggestions)\n  }\n\n  // Render a promise of suggestions into the dropdown\n  // If the suggestions haven't finished loading,  \"loading...\" will be rendered until they do\n  override renderSuggestionDropdown(suggestionsPromise: Promise<Suggestion[]>): void {\n    render(\n      html` <div>${until(this.renderSuggestionList(suggestionsPromise), this.renderLoadingItem())}</div>`,\n      this.autocompleteResults,\n    )\n\n    this.postDropdownRender()\n  }\n\n  handleSubmitEvent(e: Event) {\n    e.preventDefault()\n    return false\n  }\n\n  override handleFormKeydownEvent(event: CustomEvent) {\n    if (event.detail.hotkey === 'Enter') {\n      // Don't submit if only has \"loading...\"\n      if (this.autocompleteResults.querySelector('.js-filter-loading')) {\n        return\n      }\n\n      // Update the input value if user selects a suggestion\n      if (this.autocompleteResults.querySelector('.js-navigation-item.navigation-focus')) {\n        this.handleSelectedSuggestionResultEvent(event)\n      }\n\n      this.handleSubmitEvent(event)\n    }\n  }\n\n  // we override this listener to handle the case where a user wants to exit out of the autocomplete but not the modal that it is in.\n  override inputKey(event: KeyboardEvent) {\n    const autocomplete = this.autocompleteDropdown\n    if (eventToHotkeyString(event) === 'Escape' && !autocomplete.hidden) {\n      event.preventDefault()\n      // prevent event from reaching modal-dialog\n      event.stopPropagation()\n      // hide autocomplete\n      this.hideFilterSuggestions()\n    }\n  }\n\n  override clear() {\n    this.searchInput.value = this.getDefaultSearch()\n\n    this.searchInput.dispatchEvent(\n      new Event('input', {\n        bubbles: true,\n      }),\n    )\n  }\n}\n","export function defaultHash(...args) {\n    // JSON.stringify ellides `undefined` and function values by default. We do not want that.\n    return JSON.stringify(args, (_, v) => (typeof v === 'object' ? v : String(v)));\n}\nexport default function memoize(fn, opts = {}) {\n    const { hash = defaultHash, cache = new Map() } = opts;\n    return function (...args) {\n        const id = hash.apply(this, args);\n        if (cache.has(id))\n            return cache.get(id);\n        let result = fn.apply(this, args);\n        if (result instanceof Promise) {\n            // eslint-disable-next-line github/no-then\n            result = result.catch(error => {\n                cache.delete(id);\n                throw error;\n            });\n        }\n        cache.set(id, result);\n        return result;\n    };\n}\n"],"names":["textQualifiers","description","value","QuerySearchElement","BaseFilterElement","renderMatchingOrAllQualifierSuggestions","filterString","suggestions","fetchQualifierSuggestions","matchingSuggestions","filterSuggestionsList","fuzzy","fuzzyMatchQualifiers","then","matching","textMatchers","map","q","ret","length","slice","unshift","renderSuggestionDropdown","suggestionsPromise","render","html","until","renderSuggestionList","renderLoadingItem","autocompleteResults","postDropdownRender","handleSubmitEvent","e","preventDefault","handleFormKeydownEvent","event","detail","hotkey","querySelector","handleSelectedSuggestionResultEvent","inputKey","autocomplete","autocompleteDropdown","eventToHotkeyString","hidden","stopPropagation","hideFilterSuggestions","clear","searchInput","getDefaultSearch","dispatchEvent","Event","bubbles","controller","defaultHash","args","JSON","stringify","_","v","String","memoize","fn","opts","hash","cache","Map","id","apply","has","get","result","Promise","catch","error","delete","set"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryDependencyUpdateComplete`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryDependencyUpdateComplete`.

class Hydro::Schemas::Github::V1::RepositoryDependencyUpdateComplete
  sig do
    params(
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_dependency_update: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryDependencyUpdate)
    ).void
  end
  def initialize(pull_request: nil, repository: nil, repository_dependency_update: nil); end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_dependency_update; end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryDependencyUpdate)) }
  def repository_dependency_update; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RepositoryDependencyUpdate)).void }
  def repository_dependency_update=(value); end
end

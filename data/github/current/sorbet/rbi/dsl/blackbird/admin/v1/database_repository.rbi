# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Blackbird::Admin::V1::DatabaseRepository`.
# Please instead update this file by running `bin/tapioca dsl Blackbird::Admin::V1::DatabaseRepository`.

class Blackbird::Admin::V1::DatabaseRepository
  sig do
    params(
      commit_oid: T.nilable(String),
      commit_seq_no: T.nilable(Integer),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      deleted_at: T.nilable(Google::Protobuf::Timestamp),
      experiments: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      has_license: T.nilable(T::Boolean),
      has_readme: T.nilable(T::Boolean),
      is_archived: T.nilable(T::Boolean),
      is_fork: T.nilable(T::Boolean),
      is_public: T.nilable(T::Boolean),
      license_name: T.nilable(String),
      name: T.nilable(String),
      network_id: T.nilable(Integer),
      num_stars: T.nilable(Integer),
      num_watchers: T.nilable(Integer),
      owner_id: T.nilable(Integer),
      owner_login: T.nilable(String),
      public_fork_count: T.nilable(Integer),
      pushed_at: T.nilable(Google::Protobuf::Timestamp),
      repo_id: T.nilable(Integer),
      repo_seq_no: T.nilable(Integer),
      source_topic: T.nilable(String)
    ).void
  end
  def initialize(commit_oid: nil, commit_seq_no: nil, created_at: nil, deleted_at: nil, experiments: T.unsafe(nil), has_license: nil, has_readme: nil, is_archived: nil, is_fork: nil, is_public: nil, license_name: nil, name: nil, network_id: nil, num_stars: nil, num_watchers: nil, owner_id: nil, owner_login: nil, public_fork_count: nil, pushed_at: nil, repo_id: nil, repo_seq_no: nil, source_topic: nil); end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_commit_seq_no; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_deleted_at; end

  sig { void }
  def clear_experiments; end

  sig { void }
  def clear_has_license; end

  sig { void }
  def clear_has_readme; end

  sig { void }
  def clear_is_archived; end

  sig { void }
  def clear_is_fork; end

  sig { void }
  def clear_is_public; end

  sig { void }
  def clear_license_name; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_network_id; end

  sig { void }
  def clear_num_stars; end

  sig { void }
  def clear_num_watchers; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_owner_login; end

  sig { void }
  def clear_public_fork_count; end

  sig { void }
  def clear_pushed_at; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_repo_seq_no; end

  sig { void }
  def clear_source_topic; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(Integer) }
  def commit_seq_no; end

  sig { params(value: Integer).void }
  def commit_seq_no=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def deleted_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def deleted_at=(value); end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def experiments; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def experiments=(value); end

  sig { returns(T::Boolean) }
  def has_license; end

  sig { params(value: T::Boolean).void }
  def has_license=(value); end

  sig { returns(T::Boolean) }
  def has_readme; end

  sig { params(value: T::Boolean).void }
  def has_readme=(value); end

  sig { returns(T::Boolean) }
  def is_archived; end

  sig { params(value: T::Boolean).void }
  def is_archived=(value); end

  sig { returns(T::Boolean) }
  def is_fork; end

  sig { params(value: T::Boolean).void }
  def is_fork=(value); end

  sig { returns(T::Boolean) }
  def is_public; end

  sig { params(value: T::Boolean).void }
  def is_public=(value); end

  sig { returns(String) }
  def license_name; end

  sig { params(value: String).void }
  def license_name=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(Integer) }
  def network_id; end

  sig { params(value: Integer).void }
  def network_id=(value); end

  sig { returns(Integer) }
  def num_stars; end

  sig { params(value: Integer).void }
  def num_stars=(value); end

  sig { returns(Integer) }
  def num_watchers; end

  sig { params(value: Integer).void }
  def num_watchers=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(String) }
  def owner_login; end

  sig { params(value: String).void }
  def owner_login=(value); end

  sig { returns(Integer) }
  def public_fork_count; end

  sig { params(value: Integer).void }
  def public_fork_count=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def pushed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def pushed_at=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(Integer) }
  def repo_seq_no; end

  sig { params(value: Integer).void }
  def repo_seq_no=(value); end

  sig { returns(String) }
  def source_topic; end

  sig { params(value: String).void }
  def source_topic=(value); end
end

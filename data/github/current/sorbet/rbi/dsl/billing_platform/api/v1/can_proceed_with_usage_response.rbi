# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `BillingPlatform::Api::V1::CanProceedWithUsageResponse`.
# Please instead update this file by running `bin/tapioca dsl BillingPlatform::Api::V1::CanProceedWithUsageResponse`.

class BillingPlatform::Api::V1::CanProceedWithUsageResponse
  sig do
    params(
      applicableBudgets: T.nilable(T.any(Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::CanProceedWithUsageInfo], T::Array[BillingPlatform::Api::V1::CanProceedWithUsageInfo])),
      canProceed: T.nilable(T::Boolean),
      planDiscounts: T.nilable(T.any(Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::CanProceedWithUsagePlanDiscount], T::Array[BillingPlatform::Api::V1::CanProceedWithUsagePlanDiscount])),
      planName: T.nilable(String),
      status: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(applicableBudgets: T.unsafe(nil), canProceed: nil, planDiscounts: T.unsafe(nil), planName: nil, status: nil); end

  sig { returns(Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::CanProceedWithUsageInfo]) }
  def applicableBudgets; end

  sig { params(value: Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::CanProceedWithUsageInfo]).void }
  def applicableBudgets=(value); end

  sig { returns(T::Boolean) }
  def canProceed; end

  sig { params(value: T::Boolean).void }
  def canProceed=(value); end

  sig { void }
  def clear_applicableBudgets; end

  sig { void }
  def clear_canProceed; end

  sig { void }
  def clear_planDiscounts; end

  sig { void }
  def clear_planName; end

  sig { void }
  def clear_status; end

  sig { returns(Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::CanProceedWithUsagePlanDiscount]) }
  def planDiscounts; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[BillingPlatform::Api::V1::CanProceedWithUsagePlanDiscount]
    ).void
  end
  def planDiscounts=(value); end

  sig { returns(String) }
  def planName; end

  sig { params(value: String).void }
  def planName=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end
end

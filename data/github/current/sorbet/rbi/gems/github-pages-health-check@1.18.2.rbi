# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github-pages-health-check` gem.
# Please instead update this file by running `bin/tapioca gem github-pages-health-check`.

# source://github-pages-health-check//lib/github-pages-health-check/version.rb#3
module GitHubPages; end

# source://github-pages-health-check//lib/github-pages-health-check/version.rb#4
module GitHubPages::HealthCheck
  class << self
    # source://github-pages-health-check//lib/github-pages-health-check.rb#53
    def check(repository_or_domain, access_token: T.unsafe(nil)); end

    # source://github-pages-health-check//lib/github-pages-health-check.rb#58
    def set_proxy(proxy_url); end

    # source://github-pages-health-check//lib/github-pages-health-check.rb#64
    def typhoeus_options; end

    # suppress warn-level feedback due to unsupported record types
    #
    # source://github-pages-health-check//lib/github-pages-health-check.rb#45
    def without_warnings(&block); end
  end
end

# source://github-pages-health-check//lib/github-pages-health-check/caa.rb#9
class GitHubPages::HealthCheck::CAA
  # @raise [ArgumentError]
  # @return [CAA] a new instance of CAA
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#12
  def initialize(host:, nameservers: T.unsafe(nil)); end

  # Returns the value of attribute error.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#10
  def error; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#19
  def errored?; end

  # Returns the value of attribute host.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#10
  def host; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#24
  def lets_encrypt_allowed?; end

  # Returns the value of attribute nameservers.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#10
  def nameservers; end

  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#37
  def records; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#31
  def records_present?; end

  private

  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#48
  def get_caa_records(domain); end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#54
  def issue_caa_record?(record); end

  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#69
  def parent_host; end

  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#58
  def query(domain); end

  # source://github-pages-health-check//lib/github-pages-health-check/caa.rb#65
  def resolver(domain); end
end

# source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#5
class GitHubPages::HealthCheck::CDN
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # Internal: Create a new CDN info instance.
  #
  # @return [CDN] a new instance of CDN
  #
  # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#17
  def initialize(options = T.unsafe(nil)); end

  # Internal: Does this CDN control this address?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#23
  def controls_ip?(address); end

  # Internal: The path of the config file.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#9
  def name; end

  # Internal: The path of the config file.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#9
  def path; end

  private

  # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#39
  def default_config_path; end

  # Internal: Load IPAddr ranges from #path
  #
  # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#35
  def load_ranges; end

  # Internal: The IP address ranges that cloudflare controls.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#30
  def ranges; end

  class << self
    # Public: Does cloudflare control this address?
    #
    # @return [Boolean]
    #
    # source://github-pages-health-check//lib/github-pages-health-check/cdn.rb#12
    def controls_ip?(address); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#5
class GitHubPages::HealthCheck::Checkable
  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#30
  def []; end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#9
  def check!; end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#51
  def pretty_print; end

  # Returns the reason the check failed, if any
  #
  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#23
  def reason; end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#30
  def to_h; end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#30
  def to_hash; end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#42
  def to_json(state = T.unsafe(nil)); end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#47
  def to_s; end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#51
  def to_s_pretty; end

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#9
  def valid!; end

  # Runs all checks, returns true if valid, otherwise false
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#15
  def valid?; end

  private

  # source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#58
  def printer; end
end

# Array of symbolized methods to be included in the output hash
#
# source://github-pages-health-check//lib/github-pages-health-check/checkable.rb#7
GitHubPages::HealthCheck::Checkable::HASH_METHODS = T.let(T.unsafe(nil), Array)

# Instance of the CloudFlare CDN for checking IP ownership
# Specifically not namespaced to avoid a breaking change
#
# source://github-pages-health-check//lib/github-pages-health-check/cdns/cloudflare.rb#7
class GitHubPages::HealthCheck::CloudFlare < ::GitHubPages::HealthCheck::CDN; end

# source://github-pages-health-check//lib/github-pages-health-check/domain.rb#5
class GitHubPages::HealthCheck::Domain < ::GitHubPages::HealthCheck::Checkable
  # @return [Domain] a new instance of Domain
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#105
  def initialize(host, nameservers: T.unsafe(nil)); end

  # Is this domain's first response an A record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#356
  def a_record?; end

  # Does this domain has an A record setup (not necessarily as the first record)?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#372
  def a_record_present?; end

  # Is this domain's first response an AAAA record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#364
  def aaaa_record?; end

  # Does this domain has an AAAA record setup (not necessarily as the first record)?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#379
  def aaaa_record_present?; end

  # Is this domain an apex domain, meaning a CNAME would be inappropriate
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#174
  def apex_domain?; end

  # Any errors querying CAA records
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#465
  def caa_error; end

  # Runs all checks, raises an error if invalid
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#118
  def check!; end

  # Does the domain resolve to a CloudFlare-owned IP
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#285
  def cloudflare_ip?; end

  # The domain to which this domain's CNAME resolves
  # Returns nil if the domain is not a CNAME
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#396
  def cname; end

  # Is this domain's first response a CNAME record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#386
  def cname?; end

  # Is this domain's first response a CNAME record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#386
  def cname_record?; end

  # Is the given domain CNAME'd directly to our Fastly account?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#255
  def cname_to_fastly?; end

  # Is the domain's first response a CNAME to a pages domain?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#242
  def cname_to_github_user_domain?; end

  # Is the given domain a CNAME to pages.github.(io|com)
  # instead of being CNAME'd to the user's subdomain?
  #
  # domain - the domain to check, generally the target of a cname
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#250
  def cname_to_pages_dot_github_dot_com?; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#132
  def deprecated_ip?; end

  # Returns an array of DNS answers
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#323
  def dns; end

  # Are we even able to get the DNS record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#341
  def dns?; end

  # Are we even able to get the DNS record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#341
  def dns_resolves?; end

  # Does the domain have associated NS records?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#207
  def dns_zone_ns?; end

  # Does the domain have an associated SOA record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#195
  def dns_zone_soa?; end

  # Does this domain redirect HTTP requests to HTTPS?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#441
  def enforces_https?; end

  # Is the host our Fastly CNAME?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#280
  def fastly?; end

  # Does the domain resolve to a Fastly-owned IP
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#290
  def fastly_ip?; end

  # Is this domain owned by GitHub?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#275
  def github_domain?; end

  # Returns the value of attribute host.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#6
  def host; end

  # Does this domain respond to HTTPS requests with a valid cert?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#430
  def https?; end

  # Can an HTTPS certificate be issued for this domain?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#449
  def https_eligible?; end

  # The response code of the HTTPS request, if it failed.
  # Useful for diagnosing cert errors
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#436
  def https_error; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#144
  def invalid_a_record?; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#138
  def invalid_aaaa_record?; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#150
  def invalid_cname?; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#405
  def mx_records_present?; end

  # Returns the value of attribute nameservers.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#6
  def nameservers; end

  # Are any of the domain's A or AAAA records pointing elsewhere?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#233
  def non_github_pages_ip_present?; end

  # Does this domain have *any* A record that points to the legacy IPs?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#347
  def old_ip_address?; end

  # Is the host a *.github.(io|com) domain?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#265
  def pages_domain?; end

  # Is the host pages.github.com or pages.github.io?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#270
  def pages_dot_github_dot_com?; end

  # Is the host a *.github.io domain?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#260
  def pages_io_domain?; end

  # Is the domain's first response an A or AAAA record to a valid GitHub Pages IP?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#226
  def pointed_to_github_pages_ip?; end

  # Does this non-GitHub-pages domain proxy a GitHub Pages site?
  #
  # This can be:
  #   1. A Cloudflare-owned IP address
  #   2. A site that returns GitHub.com server headers, but
  #      isn't CNAME'd to a GitHub domain
  #   3. A site that returns GitHub.com server headers, but
  #      isn't CNAME'd to a GitHub IP
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#302
  def proxied?; end

  # Returns the value of attribute resolver.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#6
  def resolver; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#411
  def served_by_pages?; end

  # Should the domain use an A record?
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#217
  def should_be_a_record?; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#221
  def should_be_cname_record?; end

  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#423
  def uri(overrides = T.unsafe(nil)); end

  # Is this a valid domain that PublicSuffix recognizes?
  # Used as an escape hatch to prevent false positives on DNS checks
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#164
  def valid_domain?; end

  private

  # Adjust `domain` so that it won't be searched for with /etc/resolv.conf
  #
  #     GitHubPages::HealthCheck.new("anything.io").absolute_domain
  #     => "anything.io."
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#539
  def absolute_domain; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#473
  def address_record?; end

  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#477
  def caa; end

  # Does the domain resolve to a CDN-owned IP
  #
  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#548
  def cdn_ip?(cdn); end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#565
  def github_pages_ip?(ip_addr); end

  # The domain's response to HTTP requests, without following redirects
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#500
  def http_response; end

  # The domain's response to HTTPS requests, without following redirects
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#506
  def https_response; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#561
  def legacy_ip?(ip_addr); end

  # Parse the URI. Accept either domain names or full URI's.
  # Used by the initializer so we can be more flexible with inputs.
  #
  # domain - a URI or domain name.
  #
  # Examples
  #
  #   normalize_host("benbalter.github.com")
  #   # => 'benbalter.github.com'
  #   normalize_host("https://benbalter.github.com")
  #   # => 'benbalter.github.com'
  #   normalize_host("benbalter.github.com/help-me-im-a-path/")
  #   # => 'benbalter.github.com'
  #
  # Return the hostname.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#526
  def normalize_host(domain); end

  # The domain's response to HTTP(S) requests, following redirects
  #
  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#485
  def response; end

  # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#543
  def scheme; end

  class << self
    # source://github-pages-health-check//lib/github-pages-health-check/domain.rb#101
    def redundant(host); end
  end
end

# source://github-pages-health-check//lib/github-pages-health-check/domain.rb#80
GitHubPages::HealthCheck::Domain::CURRENT_IPV6_ADDRESSES = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/domain.rb#73
GitHubPages::HealthCheck::Domain::CURRENT_IP_ADDRESSES = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/domain.rb#87
GitHubPages::HealthCheck::Domain::CURRENT_IP_ADDRESSES_ALL = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/domain.rb#90
GitHubPages::HealthCheck::Domain::HASH_METHODS = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/domain.rb#8
GitHubPages::HealthCheck::Domain::LEGACY_IP_ADDRESSES = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/domain.rb#313
GitHubPages::HealthCheck::Domain::REQUESTED_RECORD_TYPES = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/error.rb#5
class GitHubPages::HealthCheck::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#12
  def initialize(repository: T.unsafe(nil), domain: T.unsafe(nil)); end

  # Returns the value of attribute domain.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#10
  def domain; end

  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#26
  def message; end

  # Error message, with get more info URL appended
  #
  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#31
  def message_formatted; end

  # Error message, with get more info URL appended
  #
  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#31
  def message_with_url; end

  # Returns the value of attribute repository.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#10
  def repository; end

  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#38
  def to_s; end

  private

  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#60
  def documentation_url; end

  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#56
  def more_info; end

  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#44
  def name; end

  # source://github-pages-health-check//lib/github-pages-health-check/error.rb#48
  def username; end

  class << self
    # @private
    #
    # source://github-pages-health-check//lib/github-pages-health-check/error.rb#18
    def inherited(base); end

    # source://github-pages-health-check//lib/github-pages-health-check/error.rb#22
    def subclasses; end
  end
end

# source://github-pages-health-check//lib/github-pages-health-check/error.rb#6
GitHubPages::HealthCheck::Error::DOCUMENTATION_BASE = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/error.rb#7
GitHubPages::HealthCheck::Error::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# Error is only used when running locally
#
# source://github-pages-health-check//lib/github-pages-health-check/error.rb#8
GitHubPages::HealthCheck::Error::LOCAL_ONLY = T.let(T.unsafe(nil), FalseClass)

# source://github-pages-health-check//lib/github-pages-health-check/errors/build_error.rb#5
module GitHubPages::HealthCheck::Errors
  class << self
    # source://github-pages-health-check//lib/github-pages-health-check/errors.rb#10
    def all; end
  end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/build_error.rb#6
class GitHubPages::HealthCheck::Errors::BuildError < ::GitHubPages::HealthCheck::Error; end

# source://github-pages-health-check//lib/github-pages-health-check/errors/build_error.rb#7
GitHubPages::HealthCheck::Errors::BuildError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/errors/build_error.rb#8
GitHubPages::HealthCheck::Errors::BuildError::LOCAL_ONLY = T.let(T.unsafe(nil), TrueClass)

# source://github-pages-health-check//lib/github-pages-health-check/errors/deprecated_ip_error.rb#6
class GitHubPages::HealthCheck::Errors::DeprecatedIPError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/deprecated_ip_error.rb#9
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/deprecated_ip_error.rb#7
GitHubPages::HealthCheck::Errors::DeprecatedIPError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_aaaa_record_error.rb#6
class GitHubPages::HealthCheck::Errors::InvalidAAAARecordError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_aaaa_record_error.rb#9
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_aaaa_record_error.rb#7
GitHubPages::HealthCheck::Errors::InvalidAAAARecordError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_a_record_error.rb#6
class GitHubPages::HealthCheck::Errors::InvalidARecordError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_a_record_error.rb#9
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_a_record_error.rb#7
GitHubPages::HealthCheck::Errors::InvalidARecordError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_cname_error.rb#6
class GitHubPages::HealthCheck::Errors::InvalidCNAMEError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_cname_error.rb#9
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_cname_error.rb#7
GitHubPages::HealthCheck::Errors::InvalidCNAMEError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_dns_error.rb#6
class GitHubPages::HealthCheck::Errors::InvalidDNSError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_dns_error.rb#9
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_dns_error.rb#7
GitHubPages::HealthCheck::Errors::InvalidDNSError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_domain_error.rb#6
class GitHubPages::HealthCheck::Errors::InvalidDomainError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_domain_error.rb#9
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_domain_error.rb#7
GitHubPages::HealthCheck::Errors::InvalidDomainError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_repository_error.rb#6
class GitHubPages::HealthCheck::Errors::InvalidRepositoryError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_repository_error.rb#8
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/invalid_repository_error.rb#7
GitHubPages::HealthCheck::Errors::InvalidRepositoryError::LOCAL_ONLY = T.let(T.unsafe(nil), TrueClass)

# source://github-pages-health-check//lib/github-pages-health-check/errors/missing_access_token_error.rb#6
class GitHubPages::HealthCheck::Errors::MissingAccessTokenError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/missing_access_token_error.rb#8
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/missing_access_token_error.rb#7
GitHubPages::HealthCheck::Errors::MissingAccessTokenError::LOCAL_ONLY = T.let(T.unsafe(nil), TrueClass)

# source://github-pages-health-check//lib/github-pages-health-check/errors/not_served_by_pages_error.rb#6
class GitHubPages::HealthCheck::Errors::NotServedByPagesError < ::GitHubPages::HealthCheck::Error
  # source://github-pages-health-check//lib/github-pages-health-check/errors/not_served_by_pages_error.rb#9
  def message; end
end

# source://github-pages-health-check//lib/github-pages-health-check/errors/not_served_by_pages_error.rb#7
GitHubPages::HealthCheck::Errors::NotServedByPagesError::DOCUMENTATION_PATH = T.let(T.unsafe(nil), String)

# Instance of the Fastly CDN for checking IP ownership
# Specifically not namespaced to avoid a breaking change
#
# source://github-pages-health-check//lib/github-pages-health-check/cdns/fastly.rb#7
class GitHubPages::HealthCheck::Fastly < ::GitHubPages::HealthCheck::CDN; end

# Fastly maps used by GitHub Pages.
#
# source://github-pages-health-check//lib/github-pages-health-check/cdns/fastly.rb#9
GitHubPages::HealthCheck::Fastly::HOSTNAMES = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check.rb#40
GitHubPages::HealthCheck::HUMAN_NAME = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/printer.rb#5
class GitHubPages::HealthCheck::Printer
  # @return [Printer] a new instance of Printer
  #
  # source://github-pages-health-check//lib/github-pages-health-check/printer.rb#11
  def initialize(health_check); end

  # Returns the value of attribute health_check.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/printer.rb#9
  def health_check; end

  # source://github-pages-health-check//lib/github-pages-health-check/printer.rb#87
  def ljust(line); end

  # source://github-pages-health-check//lib/github-pages-health-check/printer.rb#77
  def new_line(left = T.unsafe(nil), right = T.unsafe(nil)); end

  # source://github-pages-health-check//lib/github-pages-health-check/printer.rb#22
  def pretty_print; end

  # source://github-pages-health-check//lib/github-pages-health-check/printer.rb#15
  def simple_string; end
end

# source://github-pages-health-check//lib/github-pages-health-check/printer.rb#7
GitHubPages::HealthCheck::Printer::PRETTY_JOINER = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/printer.rb#6
GitHubPages::HealthCheck::Printer::PRETTY_LEFT_WIDTH = T.let(T.unsafe(nil), Integer)

# source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#5
class GitHubPages::HealthCheck::RedundantCheck
  extend ::Forwardable

  # @return [RedundantCheck] a new instance of RedundantCheck
  #
  # source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#12
  def initialize(domain); end

  # source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#16
  def check; end

  # Returns the value of attribute domain.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#10
  def domain; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#23
  def https_eligible?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def reason(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def valid?(*args, **_arg1, &block); end

  private

  # source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#35
  def check_with_default_nameservers; end

  # source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#39
  def check_with_public_nameservers; end

  # source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#29
  def checks; end
end

# seconds
#
# source://github-pages-health-check//lib/github-pages-health-check/redundant_check.rb#8
GitHubPages::HealthCheck::RedundantCheck::TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://github-pages-health-check//lib/github-pages-health-check/repository.rb#5
class GitHubPages::HealthCheck::Repository < ::GitHubPages::HealthCheck::Checkable
  # @return [Repository] a new instance of Repository
  #
  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#14
  def initialize(name_with_owner, access_token: T.unsafe(nil)); end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#49
  def build_duration; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#44
  def build_error; end

  # @return [Boolean]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#40
  def built?; end

  # @raise [Errors::BuildError.new(:repository => self)]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#30
  def check!; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#57
  def domain; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#36
  def last_build; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#53
  def last_built; end

  # Returns the value of attribute name.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#6
  def name; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#25
  def name_with_owner; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#25
  def nwo; end

  # Returns the value of attribute owner.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#6
  def owner; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#44
  def reason; end

  private

  # @raise [Errors::MissingAccessTokenError]
  #
  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#65
  def client; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#75
  def cname; end

  # source://github-pages-health-check//lib/github-pages-health-check/repository.rb#71
  def pages_info; end
end

# source://github-pages-health-check//lib/github-pages-health-check/repository.rb#10
GitHubPages::HealthCheck::Repository::HASH_METHODS = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/repository.rb#8
GitHubPages::HealthCheck::Repository::REPO_REGEX = T.let(T.unsafe(nil), Regexp)

# source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#5
class GitHubPages::HealthCheck::Resolver
  # Create a new resolver.
  #
  # domain - the domain we're getting answers for
  # nameserver - (optional) a case
  #
  # @return [Resolver] a new instance of Resolver
  #
  # source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#29
  def initialize(domain, nameservers: T.unsafe(nil)); end

  # Returns the value of attribute domain.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#23
  def domain; end

  # Returns the value of attribute nameservers.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#23
  def nameservers; end

  # source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#34
  def query(type); end

  private

  # source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#61
  def authoritative_nameservers; end

  # source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#40
  def resolver; end

  class << self
    # source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#18
    def default_resolver; end
  end
end

# source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#6
GitHubPages::HealthCheck::Resolver::DEFAULT_RESOLVER_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://github-pages-health-check//lib/github-pages-health-check/resolver.rb#12
GitHubPages::HealthCheck::Resolver::PUBLIC_NAMESERVERS = T.let(T.unsafe(nil), Array)

# source://github-pages-health-check//lib/github-pages-health-check/site.rb#5
class GitHubPages::HealthCheck::Site < ::GitHubPages::HealthCheck::Checkable
  # @return [Site] a new instance of Site
  #
  # source://github-pages-health-check//lib/github-pages-health-check/site.rb#8
  def initialize(repository_or_domain, access_token: T.unsafe(nil)); end

  # source://github-pages-health-check//lib/github-pages-health-check/site.rb#21
  def as_json; end

  # source://github-pages-health-check//lib/github-pages-health-check/site.rb#16
  def check!; end

  # Returns the value of attribute domain.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/site.rb#6
  def domain; end

  # Returns the value of attribute repository.
  #
  # source://github-pages-health-check//lib/github-pages-health-check/site.rb#6
  def repository; end

  # source://github-pages-health-check//lib/github-pages-health-check/site.rb#21
  def to_h; end

  # source://github-pages-health-check//lib/github-pages-health-check/site.rb#21
  def to_hash; end
end

# DNS and HTTP timeout, in seconds
#
# source://github-pages-health-check//lib/github-pages-health-check.rb#38
GitHubPages::HealthCheck::TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://github-pages-health-check//lib/github-pages-health-check.rb#41
GitHubPages::HealthCheck::URL = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check.rb#42
GitHubPages::HealthCheck::USER_AGENT = T.let(T.unsafe(nil), String)

# source://github-pages-health-check//lib/github-pages-health-check/version.rb#5
GitHubPages::HealthCheck::VERSION = T.let(T.unsafe(nil), String)

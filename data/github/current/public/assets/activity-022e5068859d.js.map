{"version":3,"file":"activity-xxxxxxxxxxxx.js","mappings":"6KAOA,IAAMA,EAAW,CAAC,EAEX,SAASC,EAAI,CAACC,SAAAA,CAAQ,CAA+B,EAC1D,MACE,UAACC,EAAAA,EAAkBA,CAAAA,C,SACjB,UAACC,EAAAA,CAAsBA,CAAAA,CAACC,QAAQ,G,SAC9B,UAACC,EAAAA,CAAiBA,CAAAA,CAACC,QARX,sBAQ6BC,SAP5B,GAOgDR,SAAUA,E,SAChEE,C,MAKX,CAEA,GAAG,CAAED,EAAIQ,WAAW,EAAfR,CAAAA,EAAIQ,WAAW,CAAK,KAAI,CAAE,CAAE,KAAM,CAAC,C,eCfxCC,CAAAA,EAAAA,EAAAA,CAAAA,EAAwB,WAAY,IAAO,EACzCT,IAAGA,EACHU,OAAQ,CAACC,CAAAA,EAAAA,EAAAA,CAAAA,EAAU,CAACC,KAAM,yBAA0BC,UAAWC,EAAAA,CAAaA,GAAG,CACjF,E,gHCNkBC,CAAU,E,0LAAVA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAUlB,IAAMC,EAAoB,C,8BAQzB,CASKC,EAAgBC,EAAAA,aAAmB,CAAoB,CAACC,WAAY,CAAgB,GAEnF,SAASC,IACd,OAAOF,EAAAA,UAAgB,CAACD,EAC1B,CASO,SAASf,EAAmB,CAACD,SAAAA,CAAQ,CAAEoB,aAAAA,CAAY,CAAiC,EACzF,IAAMC,EAAUC,CAAAA,EAAAA,EAAAA,oBAAAA,EACd,IAAM,KAAO,EACb,IAAMF,GAAgBG,EAAeC,OAAOC,UAAU,EACtD,IAAML,GAAgB,GAElBM,EAAiBC,CAAAA,EAAAA,EAAAA,MAAAA,EAAON,GACxB,CAACH,EAAYU,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAASR,GAEvCS,EAAWC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAC3B,IAAMC,EAAcT,EAAeC,OAAOC,UAAU,CAChDC,CAAAA,EAAeO,OAAO,GAAKD,IAC7BN,EAAeO,OAAO,CAAGD,EACzBJ,EAAcI,GAElB,EAAG,EAAE,EAELE,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,IAAMC,EAAiB,IAAIC,eAAeC,CAAAA,EAAAA,EAAAA,CAAAA,EAASP,IAGnD,OAFAK,EAAeG,OAAO,CAACC,SAASC,eAAe,EAExC,IAAML,EAAeM,UAAU,EACxC,EAAG,CAACX,EAAS,EAEb,IAAMY,EAAeC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IACpB,EAACzB,WAAAA,CAAU,GACjB,CAACA,EAAW,EAEf,MAAO,UAACF,EAAc4B,QAAQ,EAACC,MAAOH,E,SAAe1C,C,EACvD,CAEO,SAASuB,EAAeuB,CAAoB,EACjD,IAAK,IAAMC,KAAchC,EACvB,GAAI+B,GAAgBC,EAClB,OAAOA,EAGX,OAAO,CACT,CAEA,GAAG,CAAE/B,EAAcT,WAAW,EAAzBS,CAAAA,EAAcT,WAAW,CAAK,eAAc,CAAE,CAAE,KAAM,CAAC,CAC5D,GAAG,CAAEN,EAAmBM,WAAW,EAA9BN,CAAAA,EAAmBM,WAAW,CAAK,oBAAmB,CAAE,CAAE,KAAM,CAAC,C","sources":["app/assets/modules/activity/App.tsx","app/assets/modules/activity/index.ts","ui/packages/screen-size/ScreenSize.tsx"],"sourcesContent":["import {AnalyticsProvider} from '@github-ui/analytics-provider'\nimport {ScreenSizeProvider} from '@github-ui/screen-size'\n\nimport {BaseUrlContextProvider} from './contexts/BaseUrlContext'\n\nconst appName = 'react-activity-view'\nconst category = ''\nconst metadata = {}\n\nexport function App({children}: {children?: React.ReactNode}) {\n  return (\n    <ScreenSizeProvider>\n      <BaseUrlContextProvider baseUrl=\"\">\n        <AnalyticsProvider appName={appName} category={category} metadata={metadata}>\n          {children}\n        </AnalyticsProvider>\n      </BaseUrlContextProvider>\n    </ScreenSizeProvider>\n  )\n}\n\ntry{ App.displayName ||= 'App' } catch {}","import {jsonRoute} from '@github-ui/react-core/json-route'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\n\nimport {App} from './App'\nimport ActivityIndex from './pages/ActivityIndex'\n\nregisterReactAppFactory('activity', () => ({\n  App,\n  routes: [jsonRoute({path: '/:owner/:repo/activity', Component: ActivityIndex})],\n}))\n","import {debounce} from '@github/mini-throttle'\nimport React, {useCallback, useEffect, useMemo, useRef, useState, useSyncExternalStore} from 'react'\n\nexport const enum ScreenSize {\n  small = 1,\n  medium = 544,\n  large = 768,\n  xlarge = 1012,\n  xxlarge = 1280,\n  xxxlarge = 1350,\n  xxxxlarge = 1440,\n}\n\nconst screenBreakpoints = [\n  ScreenSize.xxxxlarge,\n  ScreenSize.xxxlarge,\n  ScreenSize.xxlarge,\n  ScreenSize.xlarge,\n  ScreenSize.large,\n  ScreenSize.medium,\n  ScreenSize.small,\n]\n\ninterface ScreenContextData {\n  /**\n   * Specifies the size of the current window\n   */\n  screenSize: ScreenSize\n}\n\nconst ScreenContext = React.createContext<ScreenContextData>({screenSize: ScreenSize.small})\n\nexport function useScreenSize() {\n  return React.useContext(ScreenContext)\n}\n\ninterface Props {\n  /**\n   * @property {ScreenSize} [initialValue=ScreenSize.small] Initial value is useful to test react components that rely on ScreenContext.\n   */\n  initialValue?: ScreenSize\n}\n\nexport function ScreenSizeProvider({children, initialValue}: React.PropsWithChildren<Props>) {\n  const initial = useSyncExternalStore(\n    () => () => {},\n    () => initialValue ?? getCurrentSize(window.innerWidth),\n    () => initialValue ?? ScreenSize.small,\n  )\n  const currentSizeRef = useRef(initial)\n  const [screenSize, setScreenSize] = useState(initial)\n\n  const onResize = useCallback(() => {\n    const updatedSize = getCurrentSize(window.innerWidth)\n    if (currentSizeRef.current !== updatedSize) {\n      currentSizeRef.current = updatedSize\n      setScreenSize(updatedSize)\n    }\n  }, [])\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(debounce(onResize))\n    resizeObserver.observe(document.documentElement)\n\n    return () => resizeObserver.disconnect()\n  }, [onResize])\n\n  const contextValue = useMemo(() => {\n    return {screenSize}\n  }, [screenSize])\n\n  return <ScreenContext.Provider value={contextValue}>{children}</ScreenContext.Provider>\n}\n\nexport function getCurrentSize(elementWidth: number) {\n  for (const breakpoint of screenBreakpoints) {\n    if (elementWidth >= breakpoint) {\n      return breakpoint\n    }\n  }\n  return ScreenSize.small\n}\n\ntry{ ScreenContext.displayName ||= 'ScreenContext' } catch {}\ntry{ ScreenSizeProvider.displayName ||= 'ScreenSizeProvider' } catch {}"],"names":["metadata","App","children","ScreenSizeProvider","BaseUrlContextProvider","baseUrl","AnalyticsProvider","appName","category","displayName","registerReactAppFactory","routes","jsonRoute","path","Component","ActivityIndex","ScreenSize","screenBreakpoints","ScreenContext","React","screenSize","useScreenSize","initialValue","initial","useSyncExternalStore","getCurrentSize","window","innerWidth","currentSizeRef","useRef","setScreenSize","useState","onResize","useCallback","updatedSize","current","useEffect","resizeObserver","ResizeObserver","debounce","observe","document","documentElement","disconnect","contextValue","useMemo","Provider","value","elementWidth","breakpoint"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Meuse::Services::V1::Messages::UsageLineItem`.
# Please instead update this file by running `bin/tapioca dsl Meuse::Services::V1::Messages::UsageLineItem`.

class Meuse::Services::V1::Messages::UsageLineItem
  sig do
    params(
      actor_id: T.nilable(Integer),
      billable_owner_id: T.nilable(Integer),
      billable_owner_type: T.nilable(T.any(Symbol, Integer)),
      custom_fields: T.nilable(T.any(Google::Protobuf::Map[String, String], T::Hash[String, String])),
      effective_quantity: T.nilable(Float),
      estimated_cost: T.nilable(Float),
      owner_id: T.nilable(Integer),
      owner_type: T.nilable(T.any(Symbol, Integer)),
      product_id: T.nilable(Integer),
      product_sku: T.nilable(Meuse::Services::V1::Messages::ProductSku),
      quantity: T.nilable(Float),
      rate_plan_unit_price: T.nilable(Float),
      repository_id: T.nilable(Integer),
      submission_state: T.nilable(String),
      submission_state_reason: T.nilable(String),
      usage_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(actor_id: nil, billable_owner_id: nil, billable_owner_type: nil, custom_fields: T.unsafe(nil), effective_quantity: nil, estimated_cost: nil, owner_id: nil, owner_type: nil, product_id: nil, product_sku: nil, quantity: nil, rate_plan_unit_price: nil, repository_id: nil, submission_state: nil, submission_state_reason: nil, usage_at: nil); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { returns(Integer) }
  def billable_owner_id; end

  sig { params(value: Integer).void }
  def billable_owner_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def billable_owner_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def billable_owner_type=(value); end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_billable_owner_id; end

  sig { void }
  def clear_billable_owner_type; end

  sig { void }
  def clear_custom_fields; end

  sig { void }
  def clear_effective_quantity; end

  sig { void }
  def clear_estimated_cost; end

  sig { void }
  def clear_owner_id; end

  sig { void }
  def clear_owner_type; end

  sig { void }
  def clear_product_id; end

  sig { void }
  def clear_product_sku; end

  sig { void }
  def clear_quantity; end

  sig { void }
  def clear_rate_plan_unit_price; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_submission_state; end

  sig { void }
  def clear_submission_state_reason; end

  sig { void }
  def clear_usage_at; end

  sig { returns(Google::Protobuf::Map[String, String]) }
  def custom_fields; end

  sig { params(value: Google::Protobuf::Map[String, String]).void }
  def custom_fields=(value); end

  sig { returns(Float) }
  def effective_quantity; end

  sig { params(value: Float).void }
  def effective_quantity=(value); end

  sig { returns(Float) }
  def estimated_cost; end

  sig { params(value: Float).void }
  def estimated_cost=(value); end

  sig { returns(Integer) }
  def owner_id; end

  sig { params(value: Integer).void }
  def owner_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def owner_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def owner_type=(value); end

  sig { returns(Integer) }
  def product_id; end

  sig { params(value: Integer).void }
  def product_id=(value); end

  sig { returns(T.nilable(Meuse::Services::V1::Messages::ProductSku)) }
  def product_sku; end

  sig { params(value: T.nilable(Meuse::Services::V1::Messages::ProductSku)).void }
  def product_sku=(value); end

  sig { returns(Float) }
  def quantity; end

  sig { params(value: Float).void }
  def quantity=(value); end

  sig { returns(Float) }
  def rate_plan_unit_price; end

  sig { params(value: Float).void }
  def rate_plan_unit_price=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(String) }
  def submission_state; end

  sig { params(value: String).void }
  def submission_state=(value); end

  sig { returns(String) }
  def submission_state_reason; end

  sig { params(value: String).void }
  def submission_state_reason=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def usage_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def usage_at=(value); end
end

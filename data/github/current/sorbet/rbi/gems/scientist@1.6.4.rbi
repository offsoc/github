# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `scientist` gem.
# Please instead update this file by running `bin/tapioca gem scientist`.

# Include this module into any class which requires science experiments in its
# methods. Provides the `science` and `default_scientist_context` methods for
# defining and running experiments.
#
# If you need to run science on class methods, extend this module instead.
#
# If including or extending this module are not an option, call
# `Scientist.run`.
#
# source://scientist//lib/scientist.rb#9
module Scientist
  # Public: the default context data for an experiment created and run via the
  # `science` helper method. Override this in any class that includes Scientist
  # to define your own behavior.
  #
  # Returns a Hash.
  #
  # source://scientist//lib/scientist.rb#55
  def default_scientist_context; end

  # Define and run a science experiment.
  #
  # name - a String name for this experiment.
  # opts - optional hash with the the named test to run instead of "control",
  #        :run is the only valid key.
  #
  # Yields an object which implements the Scientist::Experiment interface.
  # See `Scientist::Experiment.new` for how this is defined. The context from
  # the `default_scientist_context` method will be applied to the experiment.
  #
  # Returns the calculated value of the control experiment, or raises if an
  # exception was raised.
  #
  # source://scientist//lib/scientist.rb#42
  def science(name, opts = T.unsafe(nil)); end

  class << self
    # Define and run a science experiment.
    #
    # name - a String name for this experiment.
    # opts - optional hash with the the named test to run instead of "control",
    #        :run is the only valid key.
    #
    # Yields an object which implements the Scientist::Experiment interface.
    # See `Scientist::Experiment.new` for how this is defined.
    #
    # Returns the calculated value of the control experiment, or raises if an
    # exception was raised.
    #
    # @yield [experiment]
    #
    # source://scientist//lib/scientist.rb#21
    def run(name, opts = T.unsafe(nil)); end
  end
end

# Smoking in the bathroom and/or sassing.
#
# source://scientist//lib/scientist/errors.rb#4
class Scientist::BadBehavior < ::StandardError
  # @return [BadBehavior] a new instance of BadBehavior
  #
  # source://scientist//lib/scientist/errors.rb#8
  def initialize(experiment, name, message); end

  # Returns the value of attribute experiment.
  #
  # source://scientist//lib/scientist/errors.rb#5
  def experiment; end

  # Returns the value of attribute name.
  #
  # source://scientist//lib/scientist/errors.rb#6
  def name; end
end

# source://scientist//lib/scientist/errors.rb#16
class Scientist::BehaviorMissing < ::Scientist::BadBehavior
  # @return [BehaviorMissing] a new instance of BehaviorMissing
  #
  # source://scientist//lib/scientist/errors.rb#17
  def initialize(experiment, name); end
end

# source://scientist//lib/scientist/errors.rb#23
class Scientist::BehaviorNotUnique < ::Scientist::BadBehavior
  # @return [BehaviorNotUnique] a new instance of BehaviorNotUnique
  #
  # source://scientist//lib/scientist/errors.rb#24
  def initialize(experiment, name); end
end

# A null experiment.
#
# source://scientist//lib/scientist/default.rb#4
class Scientist::Default
  include ::Scientist::Experiment
  extend ::Scientist::Experiment::RaiseOnMismatch

  # @return [Default] a new instance of Default
  #
  # source://scientist//lib/scientist/default.rb#9
  def initialize(name); end

  # Don't run experiments.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/default.rb#14
  def enabled?; end

  # Returns the value of attribute name.
  #
  # source://scientist//lib/scientist/default.rb#7
  def name; end

  # Don't publish anything.
  #
  # source://scientist//lib/scientist/default.rb#19
  def publish(result); end
end

# This mixin provides shared behavior for experiments. Includers must implement
# `enabled?` and `publish(result)`.
#
# Override Scientist::Experiment.new to set your own class which includes and
# implements Scientist::Experiment's interface.
#
# source://scientist//lib/scientist/experiment.rb#6
module Scientist::Experiment
  mixes_in_class_methods ::Scientist::Experiment::RaiseOnMismatch

  # Define a block of code to run after an experiment completes, if the experiment
  # is enabled.
  #
  # The block takes one argument, the Scientist::Result containing experiment results.
  #
  # Returns the configured block.
  #
  # source://scientist//lib/scientist/experiment.rb#96
  def after_run(&block); end

  # Define a block of code to run before an experiment begins, if the experiment
  # is enabled.
  #
  # The block takes no arguments.
  #
  # Returns the configured block.
  #
  # source://scientist//lib/scientist/experiment.rb#86
  def before_run(&block); end

  # A Hash of behavior blocks, keyed by String name. Register behavior blocks
  # with the `try` and `use` methods.
  #
  # source://scientist//lib/scientist/experiment.rb#102
  def behaviors; end

  # A block to clean an observed value for publishing or storing.
  #
  # The block takes one argument, the observed value which will be cleaned.
  #
  # Returns the configured block.
  #
  # source://scientist//lib/scientist/experiment.rb#111
  def clean(&block); end

  # Internal: Clean a value with the configured clean block, or return the value
  # if no clean block is configured.
  #
  # Rescues and reports exceptions in the clean block if they occur.
  #
  # source://scientist//lib/scientist/experiment.rb#126
  def clean_value(value); end

  # Accessor for the clean block, if one is available.
  #
  # Returns the configured block, or nil.
  #
  # source://scientist//lib/scientist/experiment.rb#118
  def cleaner; end

  # A block which compares two experimental values.
  #
  # The block must take two arguments, the control value and a candidate value,
  # and return true or false.
  #
  # Returns the block.
  #
  # source://scientist//lib/scientist/experiment.rb#143
  def compare(*args, &block); end

  # A block which compares two experimental errors.
  #
  # The block must take two arguments, the control Error and a candidate Error,
  # and return true or false.
  #
  # Returns the block.
  #
  # source://scientist//lib/scientist/experiment.rb#153
  def compare_errors(*args, &block); end

  # A Symbol-keyed Hash of extra experiment data.
  #
  # source://scientist//lib/scientist/experiment.rb#158
  def context(context = T.unsafe(nil)); end

  # Provide predefined durations to use instead of actual timing data.
  # This is here solely as a convenience for developers of libraries that extend Scientist.
  #
  # source://scientist//lib/scientist/experiment.rb#318
  def fabricate_durations_for_testing_purposes(fabricated_durations = T.unsafe(nil)); end

  # Internal: Generate the observations and create the result from those and the control.
  #
  # source://scientist//lib/scientist/experiment.rb#323
  def generate_result(name); end

  # Configure this experiment to ignore an observation with the given block.
  #
  # The block takes two arguments, the control observation and the candidate
  # observation which didn't match the control. If the block returns true, the
  # mismatch is disregarded.
  #
  # This can be called more than once with different blocks to use.
  #
  # source://scientist//lib/scientist/experiment.rb#171
  def ignore(&block); end

  # Internal: ignore a mismatched observation?
  #
  # Iterates through the configured ignore blocks and calls each of them with
  # the given control and mismatched candidate observations.
  #
  # Returns true or false.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/experiment.rb#182
  def ignore_mismatched_observation?(control, candidate); end

  # The String name of this experiment. Default is "experiment". See
  # Scientist::Default for an example of how to override this default.
  #
  # source://scientist//lib/scientist/experiment.rb#196
  def name; end

  # Internal: compare two observations, using the configured compare and compare_errors lambdas if present.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/experiment.rb#201
  def observations_are_equivalent?(a, b); end

  # Whether to raise when the control and candidate mismatch.
  # If this is nil, raise_on_mismatches class attribute is used instead.
  #
  # source://scientist//lib/scientist/experiment.rb#10
  def raise_on_mismatches; end

  # Whether to raise when the control and candidate mismatch.
  # If this is nil, raise_on_mismatches class attribute is used instead.
  #
  # source://scientist//lib/scientist/experiment.rb#10
  def raise_on_mismatches=(_arg0); end

  # Whether or not to raise a mismatch error when a mismatch occurs.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/experiment.rb#308
  def raise_on_mismatches?; end

  # source://scientist//lib/scientist/experiment.rb#208
  def raise_with(exception); end

  # Called when an exception is raised while running an internal operation,
  # like :publish. Override this method to track these exceptions. The
  # default implementation re-raises the exception.
  #
  # source://scientist//lib/scientist/experiment.rb#215
  def raised(operation, error); end

  # Internal: Run all the behaviors for this experiment, observing each and
  # publishing the results. Return the result of the named behavior, default
  # "control".
  #
  # source://scientist//lib/scientist/experiment.rb#222
  def run(name = T.unsafe(nil)); end

  # Define a block that determines whether or not the experiment should run.
  #
  # source://scientist//lib/scientist/experiment.rb#267
  def run_if(&block); end

  # Internal: does a run_if block allow the experiment to run?
  #
  # Rescues and reports exceptions in a run_if block if they occur.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/experiment.rb#274
  def run_if_block_allows?; end

  # Internal: determine whether or not an experiment should run.
  #
  # Rescues and reports exceptions in the enabled method if they occur.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/experiment.rb#284
  def should_experiment_run?; end

  # Register a named behavior for this experiment, default "candidate".
  #
  # source://scientist//lib/scientist/experiment.rb#292
  def try(name = T.unsafe(nil), &block); end

  # Register the control behavior for this experiment.
  #
  # source://scientist//lib/scientist/experiment.rb#303
  def use(&block); end

  private

  # In order to support marshaling, we have to make the procs marshalable. Some
  # CI providers attempt to marshal Scientist mismatch errors so that they can
  # be sent out to different places (logs, etc.) The mismatch errors contain
  # code from the experiment. This code contains procs. These procs prevent the
  # error from being marshaled. To fix this, we simple exclude the procs from
  # the data that we marshal.
  #
  # source://scientist//lib/scientist/experiment.rb#344
  def marshal_dump; end

  # source://scientist//lib/scientist/experiment.rb#348
  def marshal_load; end

  class << self
    # @private
    #
    # source://scientist//lib/scientist/experiment.rb#12
    def included(base); end

    # Instantiate a new experiment (using the class given to the .set_default method).
    #
    # source://scientist//lib/scientist/experiment.rb#18
    def new(name); end

    # Configure Scientist to use the given class for all future experiments
    # (must implement the Scientist::Experiment interface).
    #
    # Called automatically when new experiments are defined.
    #
    # source://scientist//lib/scientist/experiment.rb#26
    def set_default(klass); end
  end
end

# A mismatch, raised when raise_on_mismatches is enabled.
#
# source://scientist//lib/scientist/experiment.rb#31
class Scientist::Experiment::MismatchError < ::Exception
  # @return [MismatchError] a new instance of MismatchError
  #
  # source://scientist//lib/scientist/experiment.rb#34
  def initialize(name, result); end

  # source://scientist//lib/scientist/experiment.rb#51
  def format_observation(observation); end

  # Returns the value of attribute name.
  #
  # source://scientist//lib/scientist/experiment.rb#32
  def name; end

  # Returns the value of attribute result.
  #
  # source://scientist//lib/scientist/experiment.rb#32
  def result; end

  # The default formatting is nearly unreadable, so make it useful.
  #
  # The assumption here is that errors raised in a test environment are
  # printed out as strings, rather than using #inspect.
  #
  # source://scientist//lib/scientist/experiment.rb#44
  def to_s; end
end

# source://scientist//lib/scientist/experiment.rb#62
module Scientist::Experiment::RaiseOnMismatch
  # Set this flag to raise on experiment mismatches.
  #
  # This causes all science mismatches to raise a MismatchError. This is
  # intended for test environments and should not be enabled in a production
  # environment.
  #
  # bool - true/false - whether to raise when the control and candidate mismatch.
  #
  # source://scientist//lib/scientist/experiment.rb#70
  def raise_on_mismatches=(bool); end

  # Whether or not to raise a mismatch error when a mismatch occurs.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/experiment.rb#75
  def raise_on_mismatches?; end
end

# source://scientist//lib/scientist/errors.rb#30
class Scientist::NoValue < ::StandardError
  # @return [NoValue] a new instance of NoValue
  #
  # source://scientist//lib/scientist/errors.rb#33
  def initialize(observation); end

  # Returns the value of attribute observation.
  #
  # source://scientist//lib/scientist/errors.rb#31
  def observation; end
end

# What happened when this named behavior was executed? Immutable.
#
# source://scientist//lib/scientist/observation.rb#2
class Scientist::Observation
  # @return [Observation] a new instance of Observation
  #
  # source://scientist//lib/scientist/observation.rb#23
  def initialize(name, experiment, fabricated_duration: T.unsafe(nil), &block); end

  # Return a cleaned value suitable for publishing. Uses the experiment's
  # defined cleaner block to clean the observed value.
  #
  # source://scientist//lib/scientist/observation.rb#42
  def cleaned_value; end

  # The Float seconds elapsed.
  #
  # source://scientist//lib/scientist/observation.rb#21
  def duration; end

  # Is this observation equivalent to another?
  #
  # other            - the other Observation in question
  # comparator       - an optional comparison proc. This observation's value and the
  #                    other observation's value are passed to this to determine
  #                    their equivalency. Proc should return true/false.
  # error_comparator - an optional comparison proc. This observation's Error and the
  #                    other observation's Error are passed to this to determine
  #                    their equivalency. Proc should return true/false.
  #
  # Returns true if:
  #
  # * The values of the observation are equal (using `==`)
  # * The values of the observations are equal according to a comparison
  #   proc, if given
  # * The exceptions raised by the observations are equal according to the
  #   error comparison proc, if given.
  # * Both observations raised an exception with the same class and message.
  #
  # Returns false otherwise.
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/observation.rb#66
  def equivalent_to?(other, comparator = T.unsafe(nil), error_comparator = T.unsafe(nil)); end

  # The raised exception, if any.
  #
  # source://scientist//lib/scientist/observation.rb#18
  def exception; end

  # The experiment this observation is for
  #
  # source://scientist//lib/scientist/observation.rb#9
  def experiment; end

  # source://scientist//lib/scientist/observation.rb#85
  def hash; end

  # The String name of the behavior.
  #
  # source://scientist//lib/scientist/observation.rb#12
  def name; end

  # @return [Boolean]
  #
  # source://scientist//lib/scientist/observation.rb#89
  def raised?; end

  # The value returned, if any.
  #
  # source://scientist//lib/scientist/observation.rb#15
  def value; end
end

# An Array of Exception types to rescue when initializing an observation.
# NOTE: This Array will change to `[StandardError]` in the next major release.
#
# source://scientist//lib/scientist/observation.rb#6
Scientist::Observation::RESCUES = T.let(T.unsafe(nil), Array)

# The immutable result of running an experiment.
#
# source://scientist//lib/scientist/result.rb#2
class Scientist::Result
  # Internal: Create a new result.
  #
  # experiment    - the Experiment this result is for
  # observations: - an Array of Observations, in execution order
  # control:      - the control Observation
  #
  # @return [Result] a new instance of Result
  #
  # source://scientist//lib/scientist/result.rb#28
  def initialize(experiment, observations = T.unsafe(nil), control = T.unsafe(nil)); end

  # An Array of candidate Observations.
  #
  # source://scientist//lib/scientist/result.rb#5
  def candidates; end

  # Public: the experiment's context
  #
  # source://scientist//lib/scientist/result.rb#39
  def context; end

  # The control Observation to which the rest are compared.
  #
  # source://scientist//lib/scientist/result.rb#8
  def control; end

  # Internal: evaluate the candidates to find mismatched and ignored results
  #
  # Sets @ignored and @mismatched with the ignored and mismatched candidates.
  #
  # source://scientist//lib/scientist/result.rb#66
  def evaluate_candidates; end

  # An Experiment.
  #
  # source://scientist//lib/scientist/result.rb#11
  def experiment; end

  # Public: the name of the experiment
  #
  # source://scientist//lib/scientist/result.rb#44
  def experiment_name; end

  # An Array of observations which didn't match the control, but were ignored.
  #
  # source://scientist//lib/scientist/result.rb#14
  def ignored; end

  # Public: were there any ignored mismatches?
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/result.rb#59
  def ignored?; end

  # Public: was the result a match between all behaviors?
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/result.rb#49
  def matched?; end

  # An Array of observations which didn't match the control.
  #
  # source://scientist//lib/scientist/result.rb#17
  def mismatched; end

  # Public: were there mismatches in the behaviors?
  #
  # @return [Boolean]
  #
  # source://scientist//lib/scientist/result.rb#54
  def mismatched?; end

  # An Array of Observations in execution order.
  #
  # source://scientist//lib/scientist/result.rb#20
  def observations; end
end

# source://scientist//lib/scientist/version.rb#2
Scientist::VERSION = T.let(T.unsafe(nil), String)

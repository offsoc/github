<%# erblint:counter DeprecatedComponentsCounter 4 %>
<%= render(
  Primer::Box.new(
    display: :flex,
    test_selector: "security-center-alert-centric-views-secret-scanning-table-component-header"
  )
) do %>
  <%= render(
    Primer::Box.new(
      classes: "js-scanning-alert-links",
      display: :flex,
      justify_content: :space_between,
      style: "width: 100%;"
    )
  ) do %>
    <div class="no-wrap d-none d-lg-block">
      <%= render SecurityCenter::StatesComponent.new(
        open_state_href: open_alert_href,
        open_state_count: open_alert_count,
        open_state_selected: open_alert_selected && !closed_alert_selected,
        closed_state_href: closed_alert_href,
        closed_state_count: closed_alert_count,
        closed_state_selected: closed_alert_selected && !open_alert_selected
      ) %>
    </div>

    <div class="no-wrap d-flex flex-auto flex-items-center flex-justify-between flex-sm-justify-start flex-lg-justify-end">
      <% if show_resolution_filter? %>
        <%= render(
          SecurityCenter::SelectMenuComponent.new(
            button_text: "Closed as",
            clear_item_text: "Clear closure reasons",
            clear_path: SecurityCenter::SelectMenuComponentHelper.href_clear_all(
              qualifiers: [QUERY_PARSER::QUALIFIER_RESOLUTION],
              query: @query,
              query_parser: QUERY_PARSER
            ),
            show_clear: QUERY_PARSER.get_qualified_values(@query, QUERY_PARSER::QUALIFIER_RESOLUTION).any? ,
            header: "Filter by closure reason",
            is_multiselect: true,
            px: 2,
            query: query,
            query_parser: QUERY_PARSER,
            select_menu_id: "table-closure-reason-filter",
            tabs: [
              SecurityCenter::SelectMenu::Tab.new(items: mapped_resolution_options),
            ],
            test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-resolution",
          )
        ) %>
      <% end %>

      <%= render(
        SecurityCenter::SelectMenuComponent.new(
          button_text: "Bypassed",
          clear_item_text: "Clear bypassed",
          clear_path: SecurityCenter::SelectMenuComponentHelper.href_clear_all(
            qualifiers: [QUERY_PARSER::QUALIFIER_BYPASSED],
            query: @query,
            query_parser: QUERY_PARSER
          ),
          show_clear: QUERY_PARSER.get_qualified_values(@query, QUERY_PARSER::QUALIFIER_BYPASSED).any? ,
          header: "Filter by bypass state",
          is_multiselect: true,
          px: 2,
          query: query,
          query_parser: QUERY_PARSER,
          select_menu_id: "table-bypass-reason-filter",
          tabs: [
            SecurityCenter::SelectMenu::Tab.new(items: mapped_bypass_options),
          ],
          test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-bypass",
        )
      ) %>

      <%= render(
        SecurityCenter::SelectMenuComponent.new(
          button_text: "Validity",
          clear_item_text: "Clear validity",
          clear_path: SecurityCenter::SelectMenuComponentHelper.href_clear_all(
            qualifiers: [QUERY_PARSER::QUALIFIER_VALIDITY],
            query: @query,
            query_parser: QUERY_PARSER
          ),
          show_clear: QUERY_PARSER.get_qualified_values(@query, QUERY_PARSER::QUALIFIER_VALIDITY).any? ,
          header: "Filter by validity",
          is_multiselect: true,
          px: 2,
          query: query,
          query_parser: QUERY_PARSER,
          select_menu_id: "table-validity-reason-filter",
          tabs: [
            SecurityCenter::SelectMenu::Tab.new(items: mapped_validity_options),
          ],
          test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-validity",
        )
      ) %>

      <% if show_repo_owner_suggestions? %>
        <% owner_select_menu_id = filter_option_paths.dig(:owner, :id) %>
        <%= render(
          Primer::Experimental::SelectMenuComponent.new(
            details: { overlay: :default },
            display: :inline_block,
            id: owner_select_menu_id,
            menu: { preload: true, src: @filter_option_paths.dig(:owner, :path), tag: :"details-menu" },
            modal: { params: { font_size: 5 } },
            position: :relative,
            px: 2,
            test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-owner",
          )
        ) do |menu| %><%# erblint:disable Primer::Accessibility::DetailsMenuMigration %>
          <% menu.with_header(closeable: false, border_bottom: 0).with_content("Filter by owner") %>

          <% menu
            .with_summary(caret: false, classes: "select-menu-button", color: :muted, scheme: :link, underline: false)
            .with_content("Owner") %>

          <% if QUERY_PARSER.get_qualified_values(@query, QUERY_PARSER::QUALIFIER_OWNER).any? %>
            <% menu.with_clear_item(
              data: { pjax: true },
              href: SecurityCenter::SelectMenuComponentHelper.href_clear_all(
                qualifiers: [QUERY_PARSER::QUALIFIER_OWNER],
                query: @query,
                query_parser: QUERY_PARSER
              ),
              muted: true,
              selected: false,
              tag: :a,
              test_selector: "owner-clear-filter",
              underline: false
            ) do %>
              <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, w: :full)) do %>
                <%= render(Primer::Box.new(direction: :column, display: :flex)) do %>
                  <%= render(Primer::Truncate.new(max_width: 175).with_content("Clear owners")) %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>

          <% menu.with_filter do |filter| %>
            <% filter.with_input(placeholder: "Filter owner") %>
          <% end %>
        <% end %>
      <% end %>

      <% if @show_repository %>
        <% repository_select_menu_id = filter_option_paths.dig(:repository, :id) %>
        <%= render(
          Primer::Experimental::SelectMenuComponent.new(
            details: { overlay: :default },
            display: :inline_block,
            id: repository_select_menu_id,
            menu: { preload: true, src: @filter_option_paths.dig(:repository, :path), tag: :"details-menu" },
            modal: { params: { font_size: 5 } },
            position: :relative,
            px: 2,
            test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-repository",
          )
        ) do |menu| %><%# erblint:disable Primer::Accessibility::DetailsMenuMigration %>
          <% menu.with_header(closeable: false, border_bottom: 0).with_content("Filter by repository") %>

          <% menu
            .with_summary(caret: false, classes: "select-menu-button", color: :muted, scheme: :link, underline: false)
            .with_content("Repository") %>

          <% if QUERY_PARSER.get_qualified_values(@query, QUERY_PARSER::QUALIFIER_REPOSITORY).any? %>
            <% menu.with_clear_item(
              data: { pjax: true },
              href: SecurityCenter::SelectMenuComponentHelper.href_clear_all(
                qualifiers: [QUERY_PARSER::QUALIFIER_REPOSITORY],
                query: @query,
                query_parser: QUERY_PARSER
              ),
              muted: true,
              selected: false,
              tag: :a,
              test_selector: "repository-clear-filter",
              underline: false
            ) do %>
              <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, w: :full)) do %>
                <%= render(Primer::Box.new(direction: :column, display: :flex)) do %>
                  <%= render(Primer::Truncate.new(max_width: 175).with_content("Clear repositories")) %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>

          <% menu.with_filter do |filter| %>
            <% filter.with_input(placeholder: "Filter repository") %>
          <% end %>
        <% end %>
      <% end %>

      <% secret_type_select_menu_id = filter_option_paths.dig(:secret_type, :id) %>
      <%= render(
        Primer::Experimental::SelectMenuComponent.new(
          details: { overlay: :default },
          display: :inline_block,
          id: secret_type_select_menu_id,
          menu: {
            classes: "right-lg-0",
            preload: true,
            src: @filter_option_paths.dig(:secret_type, :path),
            tag: :"details-menu"
          },
          modal: { params: { font_size: 5 } },
          position: :relative,
          px: 2,
          test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-secret-type",
          will_have_tabs: true
        )
      ) do |menu| %><%# erblint:disable Primer::Accessibility::DetailsMenuMigration %>
        <% menu.with_header(closeable: false, border_bottom: 0).with_content("Filter by secret type") %>

        <% menu
          .with_summary(caret: false, classes: "select-menu-button", color: :muted, scheme: :link, underline: false)
          .with_content("Secret type") %>

        <% if QUERY_PARSER.get_qualified_values(@query, QUERY_PARSER::QUALIFIER_SECRET_TYPE).any? %>
          <% menu.with_clear_item(
            data: { pjax: true},
            href: SecurityCenter::SelectMenuComponentHelper.href_clear_all(
              qualifiers: [QUERY_PARSER::QUALIFIER_SECRET_TYPE],
              query: @query,
              query_parser: QUERY_PARSER
            ),
            muted: true,
            selected: false,
            tag: :a,
            test_selector: "secret-type-clear-filter",
            underline: false
          ) do %>
            <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, w: :full)) do %>
              <%= render(Primer::Box.new(direction: :column, display: :flex)) do %>
                <%= render(Primer::Truncate.new(max_width: 175).with_content("Clear secret types")) %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>

        <% menu.with_filter do |filter| %>
          <% filter.with_input(placeholder: "Filter secret type") %>
        <% end %>
      <% end %>

      <div class="<%= show_repository ? "d-none d-xl-inline-block" : "" %>">
        <% provider_select_menu_id = filter_option_paths.dig(:provider, :id) %>
        <%= render(
          Primer::Experimental::SelectMenuComponent.new(
            details: { overlay: :default },
            display: :inline_block,
            id: provider_select_menu_id,
            flex_wrap: :wrap,
            menu: {
              classes: "right-lg-0",
              preload: true,
              src: @filter_option_paths.dig(:provider, :path),
              tag: :"details-menu"
            },
            modal: { params: { font_size: 5 } },
            position: :relative,
            px: 2,
            test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-provider",
          )
        ) do |menu| %><%# erblint:disable Primer::Accessibility::DetailsMenuMigration %>
          <% menu.with_header(closeable: false, border_bottom: 0).with_content("Filter by provider") %>

          <% menu
            .with_summary(caret: false, classes: "select-menu-button", color: :muted, scheme: :link, underline: false)
            .with_content("Provider") %>

          <% if QUERY_PARSER.get_qualified_values(@query, QUERY_PARSER::QUALIFIER_PROVIDER).any? %>
            <% menu.with_clear_item(
              data: { pjax: true},
              href: SecurityCenter::SelectMenuComponentHelper.href_clear_all(
                qualifiers: [QUERY_PARSER::QUALIFIER_PROVIDER],
                query: @query,
                query_parser: QUERY_PARSER
              ),
              muted: true,
              selected: false,
              tag: :a,
              test_selector: "provider-clear-filter",
              underline: false
            ) do %>
              <%= render(Primer::Box.new(display: :flex, justify_content: :space_between, w: :full)) do %>
                <%= render(Primer::Box.new(display: :flex, direction: :column)) do %>
                  <%= render(Primer::Truncate.new(max_width: 175).with_content("Clear providers")) %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>

          <% menu.with_filter do |filter| %>
            <% filter.with_input(placeholder: "Filter provider") %>
          <% end %>
        <% end %>
      </div>

      <%= render(
        SecurityCenter::SelectMenuComponent.new(
          align_right: true,
          button_text: "Sort",
          default_selected_slug: QUERY_PARSER::DEFAULT_SORT_SLUG_VALUE,
          header: "Sort by",
          px: 2,
          query: query,
          query_parser: QUERY_PARSER,
          tabs: [
            SecurityCenter::SelectMenu::Tab.new(
              items: QUERY_PARSER::sort_options.map do |item|
                SecurityCenter::SelectMenu::Item.new(**item.slice(:count, :description, :label, :qualifier, :slug))
              end
            )
          ],
          test_selector: "security-center-alert-centric-views-secret-scanning-table-header-filter-sort",
        )
      ) %>
    </div>
  <% end %>
<% end %>

{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_crystal_js-xxxxxxxxxxxx.js","mappings":"mJAAA,SAASA,EAAWC,CAAK,CAAEC,CAAG,EAC5B,OAAO,OAAW,CAACA,EAAM,GAAK,GAAE,EAAK,MAAQD,EAAME,IAAI,CAAC,KAAO,IAAOD,CAAAA,EAAM,IAAM,KAAI,EACxF,CAEA,SAASE,EAAMC,CAAQ,CAAEC,CAAM,CAAEC,CAAK,EAEpC,OADAA,EAAMF,QAAQ,CAACG,IAAI,CAACH,GACbA,EAASC,EAAQC,EAC1B,C,8BAEA,IAAIE,EAAY,+BACZC,EAAuB,wCACvBC,EAAoB,iBACpBC,EAAmB,4BACnBC,EAAS,iDACTC,EAAQ,iDACRC,EAAWf,EAAW,CACxB,WAAY,QAAS,KAAM,MAAO,QAAS,QAAS,OAAQ,QAAS,MAAO,KAC5E,OAAQ,QAAS,MAAO,SAAU,OAAQ,SAAU,MAAO,MAAO,KAClE,UAAW,kBAAmB,MAAO,QAAS,SAAU,OAAQ,KAAM,MAAO,YAC7E,UAAW,YAAa,SAAU,SAAU,UAAW,SAAU,SAAU,SAC3E,QAAS,OAAQ,OAAQ,SAAU,gBAAiB,QAAS,SAAU,QAAS,OAAQ,QAAS,OACjG,QAAS,UAAW,eAAgB,WAAY,WACjD,EACGgB,EAAYhB,EAAW,CAAC,OAAQ,QAAS,MAAO,OAAO,EAMvDiB,EAAiBjB,EALK,CACxB,MAAO,MAAO,QACd,QAAS,SAAU,SAAU,MAAO,OAAQ,QAC5C,KAAM,MACP,EAGGkB,EAA2BlB,EADK,CAAC,KAAM,SAAU,OAAQ,QAAS,QAAS,QAAS,OAAO,EAE3FmB,EAAsB,CAAC,MAAO,OAAQ,QAAS,SAAU,SAAS,CAClEC,EAAiBpB,EAAWmB,GAC5BE,EAAuB,CAAC,MAAO,MAAO,MAAM,CAC5CC,EAAkB,OAAW,OAASD,EAAqBlB,IAAI,CAAC,KAAO,MACvEoB,EAAgB,CAClB,IAAOC,EAAkB,IAAOA,EAAkB,MA8NpD,SAAuBlB,CAAM,CAAEC,CAAK,MAK9BkB,EAJJ,GAAInB,EAAOoB,QAAQ,GACjB,OAAO,KAIT,GAAID,EAAUnB,EAAOqB,KAAK,CAACd,GAAS,CAClC,GAAIY,OAAAA,EACF,MAAO,UAETnB,EAAOsB,GAAG,CAAC,OACb,CAGA,OADArB,EAAMF,QAAQ,CAACwB,GAAG,GACX,KACT,EA5OE,MAASC,EAAiB,OAAUA,EAAiB,OAAUA,EAC/D,IAAOA,EAAiB,KAAQA,EAAiB,MAASA,CAC5D,EACIC,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAEtD,SAASC,EAAU1B,CAAM,CAAEC,CAAK,EAC9B,GAAID,EAAOoB,QAAQ,GACjB,OAAO,KAIT,GAAInB,MAAAA,EAAM0B,SAAS,EAAY3B,EAAOqB,KAAK,CAAC,KAAM,IAChD,OAAOvB,EAAM8B,EAAW,IAAK,KAAM5B,EAAQC,GAG7C,GAAIA,MAAAA,EAAM0B,SAAS,EAAY3B,EAAOqB,KAAK,CAAC,KAAM,IAChD,OAAOvB,EAAM8B,EAAW,IAAK,KAAM5B,EAAQC,GAI7C,GAAID,KAAAA,EAAO6B,IAAI,GAEb,OADA7B,EAAO8B,SAAS,GACT,UAKT,GAAI9B,EAAOqB,KAAK,CAACd,SAIf,CAHAP,EAAOsB,GAAG,CAAC,QAEXH,EAAUnB,EAAO+B,OAAO,GACpB/B,EAAOsB,GAAG,CAAC,MACN,OACErB,KAAAA,EAAM0B,SAAS,CACjB,WACElB,EAASuB,IAAI,CAACb,IACnBR,EAAeqB,IAAI,CAACb,GACL,OAAXA,GAAoBlB,EAAMgC,MAAM,CAACC,OAAO,CAAC,QAAU,GAAQf,OAAAA,GAAoBlB,YAAAA,EAAM0B,SAAS,GAClG1B,EAAMgC,MAAM,CAAC/B,IAAI,CAACiB,GAClBlB,EAAMkC,aAAa,EAAI,GAEhB,CAAClC,YAAAA,EAAMmC,SAAS,EAAkB,CAACnC,EAAMmC,SAAS,GAAKxB,EAAyBoB,IAAI,CAACb,IAC9FlB,EAAMgC,MAAM,CAAC/B,IAAI,CAACiB,GAClBlB,EAAMkC,aAAa,EAAI,GACH,OAAXhB,IACTlB,EAAMgC,MAAM,CAACV,GAAG,GAChBtB,EAAMkC,aAAa,EAAI,GAGrBlB,EAAcoB,cAAc,CAAClB,IAC/BlB,EAAMF,QAAQ,CAACG,IAAI,CAACe,CAAa,CAACE,EAAQ,EAGrC,WACET,EAAUsB,IAAI,CAACb,GACjB,OAGF,WAKT,GAAInB,EAAOsB,GAAG,CAAC,WACb,KAAItB,EAAO6B,IAAI,GACN/B,EAAMwC,EAAU,IAAK,IAAK,QAAStC,EAAQC,IAGpDD,EAAOsB,GAAG,CAAC,KACXtB,EAAOqB,KAAK,CAACd,IAAWP,EAAOqB,KAAK,CAACb,GAC9B,gBAIT,GAAIR,EAAOqB,KAAK,CAACb,GACf,MAAO,MAIT,GAAIR,EAAOsB,GAAG,CAAC,YACb,EAAWA,GAAG,CAAC,KACNxB,EAAMyC,EAAW,IAAM,OAAQ,IAAQvC,EAAQC,GAC7CD,EAAOqB,KAAK,CAACd,IAAWP,EAAOqB,KAAK,CAACb,IACrCR,EAAOqB,KAAK,CAAClB,IAAcH,EAAOqB,KAAK,CAACjB,IAAyBJ,EAAOqB,KAAK,CAAChB,GAChF,QAETL,EAAOsB,GAAG,CAAC,KACJ,YAIT,GAAItB,EAAOsB,GAAG,CAAC,KACb,OAAOxB,EAAMyC,EAAW,IAAM,SAAU,IAAOvC,EAAQC,GAIzD,GAAID,KAAAA,EAAO6B,IAAI,GAAW,CACxB,IA4MkBW,EAAQC,EAnRxBtB,EAyEEuB,EAFAC,EAAQ,SACRF,EAAQ,GAGZ,GAAIzC,EAAOqB,KAAK,CAAC,MAEfsB,EAAQ,iBACRD,EAAQ1C,EAAO4C,IAAI,QACd,GAAI5C,EAAOqB,KAAK,CAAC,MACtBoB,EAAQ,GACRC,EAAQ1C,EAAO4C,IAAI,QACd,GAAI5C,EAAOqB,KAAK,CAAC,MACtBoB,EAAQ,GACRC,EAAQ1C,EAAO4C,IAAI,QAEnB,GAAGF,EAAQ1C,EAAOqB,KAAK,CAAC,gBACtBqB,EAAQA,CAAK,CAAC,EAAE,MACX,GAAI1C,EAAOqB,KAAK,CAAC,8CAEtB,MAAO,YACF,GAAIrB,EAAOsB,GAAG,CAAC,KAEpB,MAAO,WAOX,OAHIG,EAASY,cAAc,CAACK,IAC1BA,CAAAA,EAAQjB,CAAQ,CAACiB,EAAM,EAElB5C,EAAMyC,EAAWG,EAAOC,EAAOF,GAAQzC,EAAQC,EACxD,OAGA,CAAIkB,EAAUnB,EAAOqB,KAAK,CAAC,uBAAsB,EACxCvB,GA0KW0C,EA1KQrB,CAAO,CAAC,EAAE,CA0KVsB,EA1KY,CAACtB,CAAO,CAAC,EAAE,CA2K5C,SAAUnB,CAAM,CAAEC,CAAK,EAC5B,GAAID,EAAO6C,GAAG,KACZ7C,EAAOoB,QAAQ,GACXpB,EAAOqB,KAAK,CAACmB,IAEf,OADAvC,EAAMF,QAAQ,CAACwB,GAAG,GACX,SAKX,IADA,IAAIuB,EAAU,GACP9C,EAAO6B,IAAI,IAChB,GAAKiB,EAkBH9C,EAAO4C,IAAI,GACXE,EAAU,OAnBE,CACZ,GAAI9C,EAAOqB,KAAK,CAAC,KAAM,IAErB,OADApB,EAAMF,QAAQ,CAACG,IAAI,CAAC0B,EAAW,IAAK,MAC7B,SAGT,GAAI5B,EAAOqB,KAAK,CAAC,KAAM,IAErB,OADApB,EAAMF,QAAQ,CAACG,IAAI,CAAC0B,EAAW,IAAK,MAC7B,SAGT,GAAIa,GAASzC,EAAOqB,KAAK,CAAC,KAAM,IAE9B,OADApB,EAAMF,QAAQ,CAACG,IAAI,CAACoC,EAAU,KAAM,IAAK,SAClC,SAGTQ,EAAUL,GAASzC,MAAAA,EAAO4C,IAAI,EAChC,CAMF,MAAO,QACT,GA9MsD5C,EAAQC,GAI1DD,EAAOsB,GAAG,CAAC,MACbtB,EAAOqB,KAAK,CAAC,kFACbrB,EAAOsB,GAAG,CAAC,KACJ,QAILtB,EAAOsB,GAAG,CAAC,MACTtB,EAAOsB,GAAG,CAAC,KACbtB,EAAOqB,KAAK,CAAC,kBACJrB,EAAOsB,GAAG,CAAC,KACpBtB,EAAOqB,KAAK,CAAC,YACJrB,EAAOsB,GAAG,CAAC,MACpBtB,EAAOqB,KAAK,CAAC,WAER,UAGLrB,EAAOsB,GAAG,CAAC,QACbtB,EAAOqB,KAAK,CAAC,yCACN,UAILrB,EAAOqB,KAAK,CAAClB,IACfH,EAAOsB,GAAG,CAAC,KACJ,YAGLtB,EAAOqB,KAAK,CAACjB,IAAyBJ,EAAOqB,KAAK,CAACf,GAC9C,WAILa,CAAAA,EAAUnB,EAAOqB,KAAK,CAAC,QAAS,GAAK,EAEhCvB,EAAMwC,EADbnB,EAAUA,CAAO,CAAC,EAAE,CACYM,CAAQ,CAACN,EAAQ,CAAE,MAAOnB,EAAQC,GAIhED,EAAOsB,GAAG,CAAC,OACbtB,EAAO4C,IAAI,GACJ,SAGT5C,EAAO4C,IAAI,GACJ,KACT,CAEA,SAASN,EAAUS,CAAK,CAAEnD,CAAG,CAAE+C,CAAK,CAAEK,CAAO,EAC3C,OAAO,SAAUhD,CAAM,CAAEC,CAAK,EAC5B,GAAI,CAAC+C,GAAWhD,EAAOqB,KAAK,CAAC0B,GAG3B,OAFA9C,EAAMF,QAAQ,CAACE,EAAMF,QAAQ,CAACkD,MAAM,CAAG,EAAE,CAAGX,EAAUS,EAAOnD,EAAK+C,EAAO,IACzE1C,EAAMkC,aAAa,EAAI,EAChBQ,EAGT,IAAIO,EAAYxB,EAAU1B,EAAQC,GAOlC,OANID,EAAO+B,OAAO,KAAOnC,IACvBK,EAAMF,QAAQ,CAACwB,GAAG,GAClBtB,EAAMkC,aAAa,EAAI,EACvBe,EAAYP,GAGPO,CACT,CACF,CAEA,SAAStB,EAAWmB,CAAK,CAAEnD,CAAG,CAAEoD,CAAO,EACrC,OAAO,SAAUhD,CAAM,CAAEC,CAAK,QAC5B,CAAK+C,GAAWhD,EAAOqB,KAAK,CAAC,IAAM0B,IACjC9C,EAAMkC,aAAa,EAAI,EACvBlC,EAAMF,QAAQ,CAACE,EAAMF,QAAQ,CAACkD,MAAM,CAAG,EAAE,CAAGrB,EAAWmB,EAAOnD,EAAK,IAC5D,QAGLI,EAAOqB,KAAK,CAACzB,EAAM,MACrBK,EAAMkC,aAAa,EAAI,EACvBlC,EAAMF,QAAQ,CAACwB,GAAG,GACX,QAGFG,EAAU1B,EAAQC,EAC3B,CACF,CAmBA,SAASiB,EAAiBlB,CAAM,CAAEC,CAAK,SACrC,EAAWmB,QAAQ,GACV,MAGLpB,EAAOqB,KAAK,CAACd,GACfP,EAAOsB,GAAG,CAAC,QAEXtB,EAAOqB,KAAK,CAAClB,IAAcH,EAAOqB,KAAK,CAACjB,IAAyBJ,EAAOqB,KAAK,CAAChB,GAEhFJ,EAAMF,QAAQ,CAACwB,GAAG,GACX,MACT,CAEA,SAASC,EAAgBxB,CAAM,CAAEC,CAAK,SACpC,EAAWmB,QAAQ,GACV,MAGTpB,EAAOqB,KAAK,CAACb,GACbP,EAAMF,QAAQ,CAACwB,GAAG,GACX,MACT,CAEA,SAASgB,EAAW3C,CAAG,CAAE+C,CAAK,CAAEF,CAAK,EACnC,OAAO,SAAUzC,CAAM,CAAEC,CAAK,EAG5B,IAFA,IAAI6C,EAAU,GAEP9C,EAAO6B,IAAI,IAChB,GAAKiB,EAyBH9C,EAAO4C,IAAI,GACXE,EAAU,OA1BE,CACZ,GAAI9C,EAAOqB,KAAK,CAAC,KAAM,IAErB,OADApB,EAAMF,QAAQ,CAACG,IAAI,CAAC0B,EAAW,IAAK,MAC7Be,EAGT,GAAI3C,EAAOqB,KAAK,CAAC,KAAM,IAErB,OADApB,EAAMF,QAAQ,CAACG,IAAI,CAAC0B,EAAW,IAAK,MAC7Be,EAGT,GAAIF,GAASzC,EAAOqB,KAAK,CAAC,KAAM,IAE9B,OADApB,EAAMF,QAAQ,CAACG,IAAI,CAACoC,EAAU,KAAM,IAAK,SAClCK,EAGT,IAAIQ,EAAKnD,EAAO4C,IAAI,GAEpB,GAAIO,GAAMvD,EAER,OADAK,EAAMF,QAAQ,CAACwB,GAAG,GACXoB,EAGTG,EAAUL,GAASU,MAAAA,CACrB,CAMF,OAAOR,CACT,CACF,CAyCO,IAAMS,EAAU,CACrBC,KAAM,UACNC,WAAY,WACV,MAAO,CACLvD,SAAU,CAAC2B,EAAU,CACrBS,cAAe,EACfR,UAAW,KACXS,UAAW,KACXH,OAAQ,EAAE,CAEd,EAEAsB,MAAO,SAAUvD,CAAM,CAAEC,CAAK,EAC5B,IAAI0C,EAAQ1C,EAAMF,QAAQ,CAACE,EAAMF,QAAQ,CAACkD,MAAM,CAAG,EAAE,CAACjD,EAAQC,GAC1DsD,EAAQvD,EAAO+B,OAAO,GAO1B,OALIY,GAASA,WAAAA,IACX1C,EAAM0B,SAAS,CAAG4B,EAClBtD,EAAMmC,SAAS,CAAGO,GAGbA,CACT,EAEAa,OAAQ,SAAUvD,CAAK,CAAEwD,CAAS,CAAEC,CAAE,QAGpC,CAFAD,EAAYA,EAAUE,OAAO,CAAC,mCAAoC,IAE9D7C,EAAekB,IAAI,CAACyB,IAAczC,EAAgBgB,IAAI,CAACyB,IAClDC,EAAGE,IAAI,CAAI3D,CAAAA,EAAMkC,aAAa,CAAG,GAGnCuB,EAAGE,IAAI,CAAG3D,EAAMkC,aAAa,EAGtC0B,aAAc,CACZC,cAAepE,EAAWqB,EAAqBgD,MAAM,CAAClD,GAAsB,IAC5EmD,cAAe,CAACC,KAAM,GAAG,CAC3B,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/crystal.js"],"sourcesContent":["function wordRegExp(words, end) {\n  return new RegExp((end ? \"\" : \"^\") + \"(?:\" + words.join(\"|\") + \")\" + (end ? \"$\" : \"\\\\b\"));\n}\n\nfunction chain(tokenize, stream, state) {\n  state.tokenize.push(tokenize);\n  return tokenize(stream, state);\n}\n\nvar operators = /^(?:[-+/%|&^]|\\*\\*?|[<>]{2})/;\nvar conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;\nvar indexingOperators = /^(?:\\[\\][?=]?)/;\nvar anotherOperators = /^(?:\\.(?:\\.{2})?|->|[?:])/;\nvar idents = /^[a-z_\\u009F-\\uFFFF][a-zA-Z0-9_\\u009F-\\uFFFF]*/;\nvar types = /^[A-Z_\\u009F-\\uFFFF][a-zA-Z0-9_\\u009F-\\uFFFF]*/;\nvar keywords = wordRegExp([\n  \"abstract\", \"alias\", \"as\", \"asm\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"do\",\n  \"else\", \"elsif\", \"end\", \"ensure\", \"enum\", \"extend\", \"for\", \"fun\", \"if\",\n  \"include\", \"instance_sizeof\", \"lib\", \"macro\", \"module\", \"next\", \"of\", \"out\", \"pointerof\",\n  \"private\", \"protected\", \"rescue\", \"return\", \"require\", \"select\", \"sizeof\", \"struct\",\n  \"super\", \"then\", \"type\", \"typeof\", \"uninitialized\", \"union\", \"unless\", \"until\", \"when\", \"while\", \"with\",\n  \"yield\", \"__DIR__\", \"__END_LINE__\", \"__FILE__\", \"__LINE__\"\n]);\nvar atomWords = wordRegExp([\"true\", \"false\", \"nil\", \"self\"]);\nvar indentKeywordsArray = [\n  \"def\", \"fun\", \"macro\",\n  \"class\", \"module\", \"struct\", \"lib\", \"enum\", \"union\",\n  \"do\", \"for\"\n];\nvar indentKeywords = wordRegExp(indentKeywordsArray);\nvar indentExpressionKeywordsArray = [\"if\", \"unless\", \"case\", \"while\", \"until\", \"begin\", \"then\"];\nvar indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);\nvar dedentKeywordsArray = [\"end\", \"else\", \"elsif\", \"rescue\", \"ensure\"];\nvar dedentKeywords = wordRegExp(dedentKeywordsArray);\nvar dedentPunctualsArray = [\"\\\\)\", \"\\\\}\", \"\\\\]\"];\nvar dedentPunctuals = new RegExp(\"^(?:\" + dedentPunctualsArray.join(\"|\") + \")$\");\nvar nextTokenizer = {\n  \"def\": tokenFollowIdent, \"fun\": tokenFollowIdent, \"macro\": tokenMacroDef,\n  \"class\": tokenFollowType, \"module\": tokenFollowType, \"struct\": tokenFollowType,\n  \"lib\": tokenFollowType, \"enum\": tokenFollowType, \"union\": tokenFollowType\n};\nvar matching = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\", \"<\": \">\"};\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  // Macros\n  if (state.lastToken != \"\\\\\" && stream.match(\"{%\", false)) {\n    return chain(tokenMacro(\"%\", \"%\"), stream, state);\n  }\n\n  if (state.lastToken != \"\\\\\" && stream.match(\"{{\", false)) {\n    return chain(tokenMacro(\"{\", \"}\"), stream, state);\n  }\n\n  // Comments\n  if (stream.peek() == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Variables and keywords\n  var matched;\n  if (stream.match(idents)) {\n    stream.eat(/[?!]/);\n\n    matched = stream.current();\n    if (stream.eat(\":\")) {\n      return \"atom\";\n    } else if (state.lastToken == \".\") {\n      return \"property\";\n    } else if (keywords.test(matched)) {\n      if (indentKeywords.test(matched)) {\n        if (!(matched == \"fun\" && state.blocks.indexOf(\"lib\") >= 0) && !(matched == \"def\" && state.lastToken == \"abstract\")) {\n          state.blocks.push(matched);\n          state.currentIndent += 1;\n        }\n      } else if ((state.lastStyle == \"operator\" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {\n        state.blocks.push(matched);\n        state.currentIndent += 1;\n      } else if (matched == \"end\") {\n        state.blocks.pop();\n        state.currentIndent -= 1;\n      }\n\n      if (nextTokenizer.hasOwnProperty(matched)) {\n        state.tokenize.push(nextTokenizer[matched]);\n      }\n\n      return \"keyword\";\n    } else if (atomWords.test(matched)) {\n      return \"atom\";\n    }\n\n    return \"variable\";\n  }\n\n  // Class variables and instance variables\n  // or attributes\n  if (stream.eat(\"@\")) {\n    if (stream.peek() == \"[\") {\n      return chain(tokenNest(\"[\", \"]\", \"meta\"), stream, state);\n    }\n\n    stream.eat(\"@\");\n    stream.match(idents) || stream.match(types);\n    return \"propertyName\";\n  }\n\n  // Constants and types\n  if (stream.match(types)) {\n    return \"tag\";\n  }\n\n  // Symbols or ':' operator\n  if (stream.eat(\":\")) {\n    if (stream.eat(\"\\\"\")) {\n      return chain(tokenQuote(\"\\\"\", \"atom\", false), stream, state);\n    } else if (stream.match(idents) || stream.match(types) ||\n               stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {\n      return \"atom\";\n    }\n    stream.eat(\":\");\n    return \"operator\";\n  }\n\n  // Strings\n  if (stream.eat(\"\\\"\")) {\n    return chain(tokenQuote(\"\\\"\", \"string\", true), stream, state);\n  }\n\n  // Strings or regexps or macro variables or '%' operator\n  if (stream.peek() == \"%\") {\n    var style = \"string\";\n    var embed = true;\n    var delim;\n\n    if (stream.match(\"%r\")) {\n      // Regexps\n      style = \"string.special\";\n      delim = stream.next();\n    } else if (stream.match(\"%w\")) {\n      embed = false;\n      delim = stream.next();\n    } else if (stream.match(\"%q\")) {\n      embed = false;\n      delim = stream.next();\n    } else {\n      if(delim = stream.match(/^%([^\\w\\s=])/)) {\n        delim = delim[1];\n      } else if (stream.match(/^%[a-zA-Z_\\u009F-\\uFFFF][\\w\\u009F-\\uFFFF]*/)) {\n        // Macro variables\n        return \"meta\";\n      } else if (stream.eat('%')) {\n        // '%' operator\n        return \"operator\";\n      }\n    }\n\n    if (matching.hasOwnProperty(delim)) {\n      delim = matching[delim];\n    }\n    return chain(tokenQuote(delim, style, embed), stream, state);\n  }\n\n  // Here Docs\n  if (matched = stream.match(/^<<-('?)([A-Z]\\w*)\\1/)) {\n    return chain(tokenHereDoc(matched[2], !matched[1]), stream, state)\n  }\n\n  // Characters\n  if (stream.eat(\"'\")) {\n    stream.match(/^(?:[^']|\\\\(?:[befnrtv0'\"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\\{[0-9a-fA-F]{1,6}\\})))/);\n    stream.eat(\"'\");\n    return \"atom\";\n  }\n\n  // Numbers\n  if (stream.eat(\"0\")) {\n    if (stream.eat(\"x\")) {\n      stream.match(/^[0-9a-fA-F_]+/);\n    } else if (stream.eat(\"o\")) {\n      stream.match(/^[0-7_]+/);\n    } else if (stream.eat(\"b\")) {\n      stream.match(/^[01_]+/);\n    }\n    return \"number\";\n  }\n\n  if (stream.eat(/^\\d/)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+-]?\\d+)?/);\n    return \"number\";\n  }\n\n  // Operators\n  if (stream.match(operators)) {\n    stream.eat(\"=\"); // Operators can follow assign symbol.\n    return \"operator\";\n  }\n\n  if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {\n    return \"operator\";\n  }\n\n  // Parens and braces\n  if (matched = stream.match(/[({[]/, false)) {\n    matched = matched[0];\n    return chain(tokenNest(matched, matching[matched], null), stream, state);\n  }\n\n  // Escapes\n  if (stream.eat(\"\\\\\")) {\n    stream.next();\n    return \"meta\";\n  }\n\n  stream.next();\n  return null;\n}\n\nfunction tokenNest(begin, end, style, started) {\n  return function (stream, state) {\n    if (!started && stream.match(begin)) {\n      state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end, style, true);\n      state.currentIndent += 1;\n      return style;\n    }\n\n    var nextStyle = tokenBase(stream, state);\n    if (stream.current() === end) {\n      state.tokenize.pop();\n      state.currentIndent -= 1;\n      nextStyle = style;\n    }\n\n    return nextStyle;\n  };\n}\n\nfunction tokenMacro(begin, end, started) {\n  return function (stream, state) {\n    if (!started && stream.match(\"{\" + begin)) {\n      state.currentIndent += 1;\n      state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end, true);\n      return \"meta\";\n    }\n\n    if (stream.match(end + \"}\")) {\n      state.currentIndent -= 1;\n      state.tokenize.pop();\n      return \"meta\";\n    }\n\n    return tokenBase(stream, state);\n  };\n}\n\nfunction tokenMacroDef(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var matched;\n  if (matched = stream.match(idents)) {\n    if (matched == \"def\") {\n      return \"keyword\";\n    }\n    stream.eat(/[?!]/);\n  }\n\n  state.tokenize.pop();\n  return \"def\";\n}\n\nfunction tokenFollowIdent(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  if (stream.match(idents)) {\n    stream.eat(/[!?]/);\n  } else {\n    stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators);\n  }\n  state.tokenize.pop();\n  return \"def\";\n}\n\nfunction tokenFollowType(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  stream.match(types);\n  state.tokenize.pop();\n  return \"def\";\n}\n\nfunction tokenQuote(end, style, embed) {\n  return function (stream, state) {\n    var escaped = false;\n\n    while (stream.peek()) {\n      if (!escaped) {\n        if (stream.match(\"{%\", false)) {\n          state.tokenize.push(tokenMacro(\"%\", \"%\"));\n          return style;\n        }\n\n        if (stream.match(\"{{\", false)) {\n          state.tokenize.push(tokenMacro(\"{\", \"}\"));\n          return style;\n        }\n\n        if (embed && stream.match(\"#{\", false)) {\n          state.tokenize.push(tokenNest(\"#{\", \"}\", \"meta\"));\n          return style;\n        }\n\n        var ch = stream.next();\n\n        if (ch == end) {\n          state.tokenize.pop();\n          return style;\n        }\n\n        escaped = embed && ch == \"\\\\\";\n      } else {\n        stream.next();\n        escaped = false;\n      }\n    }\n\n    return style;\n  };\n}\n\nfunction tokenHereDoc(phrase, embed) {\n  return function (stream, state) {\n    if (stream.sol()) {\n      stream.eatSpace()\n      if (stream.match(phrase)) {\n        state.tokenize.pop();\n        return \"string\";\n      }\n    }\n\n    var escaped = false;\n    while (stream.peek()) {\n      if (!escaped) {\n        if (stream.match(\"{%\", false)) {\n          state.tokenize.push(tokenMacro(\"%\", \"%\"));\n          return \"string\";\n        }\n\n        if (stream.match(\"{{\", false)) {\n          state.tokenize.push(tokenMacro(\"{\", \"}\"));\n          return \"string\";\n        }\n\n        if (embed && stream.match(\"#{\", false)) {\n          state.tokenize.push(tokenNest(\"#{\", \"}\", \"meta\"));\n          return \"string\";\n        }\n\n        escaped = embed && stream.next() == \"\\\\\";\n      } else {\n        stream.next();\n        escaped = false;\n      }\n    }\n\n    return \"string\";\n  }\n}\n\nexport const crystal = {\n  name: \"crystal\",\n  startState: function () {\n    return {\n      tokenize: [tokenBase],\n      currentIndent: 0,\n      lastToken: null,\n      lastStyle: null,\n      blocks: []\n    };\n  },\n\n  token: function (stream, state) {\n    var style = state.tokenize[state.tokenize.length - 1](stream, state);\n    var token = stream.current();\n\n    if (style && style != \"comment\") {\n      state.lastToken = token;\n      state.lastStyle = style;\n    }\n\n    return style;\n  },\n\n  indent: function (state, textAfter, cx) {\n    textAfter = textAfter.replace(/^\\s*(?:\\{%)?\\s*|\\s*(?:%\\})?\\s*$/g, \"\");\n\n    if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {\n      return cx.unit * (state.currentIndent - 1);\n    }\n\n    return cx.unit * state.currentIndent;\n  },\n\n  languageData: {\n    indentOnInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["wordRegExp","words","end","join","chain","tokenize","stream","state","push","operators","conditionalOperators","indexingOperators","anotherOperators","idents","types","keywords","atomWords","indentKeywords","indentExpressionKeywords","dedentKeywordsArray","dedentKeywords","dedentPunctualsArray","dedentPunctuals","nextTokenizer","tokenFollowIdent","matched","eatSpace","match","eat","pop","tokenFollowType","matching","tokenBase","lastToken","tokenMacro","peek","skipToEnd","current","test","blocks","indexOf","currentIndent","lastStyle","hasOwnProperty","tokenNest","tokenQuote","phrase","embed","delim","style","next","sol","escaped","begin","started","length","nextStyle","ch","crystal","name","startState","token","indent","textAfter","cx","replace","unit","languageData","indentOnInput","concat","commentTokens","line"],"sourceRoot":""}
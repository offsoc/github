{"version":3,"file":"chunk-app_components_security_center_coverage_enablement_table-item-selection-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/security_center/coverage/enablement/selection-change-event.ts","app/components/security_center/coverage/enablement/table-item-selection-element.ts"],"sourcesContent":["export default class SelectionChangeEvent extends Event {\n  constructor(\n    public count: number,\n    public useQuery = false,\n  ) {\n    super('selection-change', {bubbles: true})\n  }\n}\n","import {attr, controller, target, targets} from '@github/catalyst'\nimport SelectionChangeEvent from './selection-change-event'\n\n@controller\nexport default class TableItemSelectionElement extends HTMLElement {\n  @attr allForFilterCount = 0\n  @target itemsSelectedOptions: HTMLElement\n  @target noItemsSelectedOptions: HTMLElement\n  @target resetButton: HTMLInputElement\n  @target selectAllForFilterButton: HTMLInputElement\n  @target selectAllVisibleCheckbox: HTMLInputElement\n  @target selectedCount: HTMLElement\n  @targets visibleItemCheckboxes: HTMLInputElement[]\n\n  connectedCallback() {\n    this.reset()\n  }\n\n  reset(): void {\n    this.resetButton.hidden = true\n    this.setCheckedStateForElements([...this.visibleItemCheckboxes, this.selectAllVisibleCheckbox], false)\n    this.toggleSelectionOptions()\n  }\n\n  selectAllForFilter(): void {\n    this.selectAllForFilterButton.hidden = true\n    this.resetButton.hidden = false\n    this.setCheckedStateForElements([...this.visibleItemCheckboxes, this.selectAllVisibleCheckbox], true)\n    this.setSelectedCount(true)\n  }\n\n  toggleSelectAllVisible(): void {\n    if (this.allVisibleSelected) {\n      this.reset()\n      return\n    }\n\n    this.setCheckedStateForElements(\n      [...this.visibleItemCheckboxes, this.selectAllVisibleCheckbox],\n      this.selectAllVisibleCheckbox.checked,\n    )\n    this.toggleSelectionOptions()\n  }\n\n  toggleVisibleItem(): void {\n    const noneSelected = !this.anyVisibleSelected\n    if (noneSelected) {\n      this.reset()\n      return\n    }\n\n    const allVisibleSelected = this.allVisibleSelected\n    this.setCheckedStateForElements(\n      [this.selectAllVisibleCheckbox],\n      allVisibleSelected,\n      !allVisibleSelected && this.visibleItemsSelectedCount > 0,\n    )\n    this.resetButton.hidden = true\n    this.toggleSelectionOptions()\n  }\n\n  private setCheckedStateForElements(elements: HTMLInputElement[], checked: boolean, indeterminate = false): void {\n    for (const element of elements) {\n      if (!element) continue\n      element.checked = checked\n      element.indeterminate = indeterminate\n    }\n  }\n\n  private setSelectAllForFilterButtonVisibility(): void {\n    this.selectAllForFilterButton.hidden =\n      !this.allVisibleSelected || this.visibleItemsSelectedCount === this.allForFilterCount\n  }\n\n  private setSelectedCount(useAllForFilterCount = false): void {\n    const selectedCount = useAllForFilterCount\n      ? this.allForFilterCount\n      : this.visibleItemCheckboxes.filter(item => item.checked).length\n    this.selectedCount.textContent = String(selectedCount)\n    this.dispatchEvent(new SelectionChangeEvent(selectedCount, useAllForFilterCount))\n  }\n\n  private toggleSelectionOptions(): void {\n    this.noItemsSelectedOptions.hidden = this.anyVisibleSelected\n    this.itemsSelectedOptions.hidden = !this.anyVisibleSelected\n\n    this.setSelectAllForFilterButtonVisibility()\n    this.setSelectedCount()\n  }\n\n  private get allVisibleSelected(): boolean {\n    return this.visibleItemCheckboxes.every(item => item.checked)\n  }\n\n  private get anyVisibleSelected(): boolean {\n    return this.visibleItemCheckboxes.some(item => item.checked)\n  }\n\n  private get visibleItemsSelectedCount(): number {\n    return this.visibleItemCheckboxes.filter(item => item.checked).length\n  }\n}\n"],"names":["SelectionChangeEvent","Event","constructor","bubbles","count","useQuery","TableItemSelectionElement","HTMLElement","connectedCallback","reset","resetButton","hidden","setCheckedStateForElements","visibleItemCheckboxes","selectAllVisibleCheckbox","toggleSelectionOptions","selectAllForFilter","selectAllForFilterButton","setSelectedCount","toggleSelectAllVisible","allVisibleSelected","checked","toggleVisibleItem","anyVisibleSelected","visibleItemsSelectedCount","elements","indeterminate","element","setSelectAllForFilterButtonVisibility","allForFilterCount","useAllForFilterCount","selectedCount","filter","item","length","textContent","String","dispatchEvent","noItemsSelectedOptions","itemsSelectedOptions","every","some","attr","target","targets","controller"],"sourceRoot":""}
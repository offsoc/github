# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Copilotapi::Chat::V1::Discussion`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Copilotapi::Chat::V1::Discussion`.

class MonolithTwirp::Copilotapi::Chat::V1::Discussion
  sig do
    params(
      answer: T.nilable(MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionAnswer),
      body: T.nilable(String),
      id: T.nilable(Integer),
      number: T.nilable(Integer),
      participants: T.nilable(T.any(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionUser], T::Array[MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionUser])),
      repo_id: T.nilable(Integer),
      repo_name: T.nilable(String),
      repo_owner: T.nilable(String),
      state: T.nilable(String),
      title: T.nilable(String),
      url: T.nilable(String),
      user: T.nilable(MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionUser)
    ).void
  end
  def initialize(answer: nil, body: nil, id: nil, number: nil, participants: T.unsafe(nil), repo_id: nil, repo_name: nil, repo_owner: nil, state: nil, title: nil, url: nil, user: nil); end

  sig { returns(T.nilable(MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionAnswer)) }
  def answer; end

  sig { params(value: T.nilable(MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionAnswer)).void }
  def answer=(value); end

  sig { returns(String) }
  def body; end

  sig { params(value: String).void }
  def body=(value); end

  sig { void }
  def clear_answer; end

  sig { void }
  def clear_body; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_number; end

  sig { void }
  def clear_participants; end

  sig { void }
  def clear_repo_id; end

  sig { void }
  def clear_repo_name; end

  sig { void }
  def clear_repo_owner; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_title; end

  sig { void }
  def clear_url; end

  sig { void }
  def clear_user; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Integer) }
  def number; end

  sig { params(value: Integer).void }
  def number=(value); end

  sig { returns(Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionUser]) }
  def participants; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionUser]
    ).void
  end
  def participants=(value); end

  sig { returns(Integer) }
  def repo_id; end

  sig { params(value: Integer).void }
  def repo_id=(value); end

  sig { returns(String) }
  def repo_name; end

  sig { params(value: String).void }
  def repo_name=(value); end

  sig { returns(String) }
  def repo_owner; end

  sig { params(value: String).void }
  def repo_owner=(value); end

  sig { returns(String) }
  def state; end

  sig { params(value: String).void }
  def state=(value); end

  sig { returns(String) }
  def title; end

  sig { params(value: String).void }
  def title=(value); end

  sig { returns(String) }
  def url; end

  sig { params(value: String).void }
  def url=(value); end

  sig { returns(T.nilable(MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionUser)) }
  def user; end

  sig { params(value: T.nilable(MonolithTwirp::Copilotapi::Chat::V1::Discussion::DiscussionUser)).void }
  def user=(value); end
end

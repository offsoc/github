# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `scrolls` gem.
# Please instead update this file by running `bin/tapioca gem scrolls`.

module Scrolls
  extend ::Scrolls

  # Public: Return whether the timestamp field will be included in the log
  # output.
  #
  # Examples
  #
  #   Scrolls.add_timestamp
  #   => true
  #
  # source://scrolls//lib/scrolls.rb#187
  def add_timestamp; end

  # Public: Set whether to include a timestamp (now=<ISO8601>) field in the log
  # output (default: false)
  #
  # Examples
  #
  #   Scrolls.add_timestamp = true
  #
  # source://scrolls//lib/scrolls.rb#175
  def add_timestamp=(boolean); end

  # Public: Set a context in a block for logs
  #
  # data - A hash of key/values to prepend to each log in a block
  # blk  - The block that our context wraps
  #
  # Examples:
  #
  # source://scrolls//lib/scrolls.rb#39
  def context(data, &blk); end

  # Public: Convience method for Logger replacement
  #
  # data - A hash of key/values to log
  # blk  - A block to be wrapped by log lines
  #
  # Examples:
  #
  #   Scrolls.debug(test: "test")
  #   test=test level=debug
  #   => nil
  #
  # source://scrolls//lib/scrolls.rb#224
  def debug(data, &blk); end

  # Public: Convience method for Logger replacement
  #
  # Translates the `level` to Syslog equivalent
  #
  # data - A hash of key/values to log
  # blk  - A block to be wrapped by log lines
  #
  # Examples:
  #
  #   Scrolls.error(test: "test")
  #   test=test level=warning
  #   => nil
  #
  # source://scrolls//lib/scrolls.rb#242
  def error(data, &blk); end

  # Public: Return the Syslog facility
  #
  # Examples
  #
  #   Scrolls.facility
  #   => 8
  #
  # source://scrolls//lib/scrolls.rb#114
  def facility; end

  # Public: Setup a logging facility (default: Syslog::LOG_USER)
  #
  # facility - Syslog facility
  #
  # Examples
  #
  #   Scrolls.facility = Syslog::LOG_LOCAL7
  #
  # source://scrolls//lib/scrolls.rb#103
  def facility=(f); end

  # Public: Convience method for Logger replacement
  #
  # Translates the `level` to Syslog equivalent
  #
  # data - A hash of key/values to log
  # blk  - A block to be wrapped by log lines
  #
  # Examples:
  #
  #   Scrolls.fatal(test: "test")
  #   test=test level=error
  #   => nil
  #
  # source://scrolls//lib/scrolls.rb#260
  def fatal(data, &blk); end

  # Public: Get the global context that prefixs all logs
  #
  # source://scrolls//lib/scrolls.rb#45
  def global_context; end

  # Public: Convience method for Logger replacement
  #
  # Translates the `level` to Syslog equivalent
  #
  # data - A hash of key/values to log
  # blk  - A block to be wrapped by log lines
  #
  # Examples:
  #
  #   Scrolls.info(test: "test")
  #   test=test level=info
  #   => nil
  #
  # source://scrolls//lib/scrolls.rb#278
  def info(data, &blk); end

  # Public: Initialize a Scrolls logger
  #
  # options - A hash of key/values for configuring Scrolls
  #   stream         - Stream to output data (default: STDOUT)
  #   log_facility   - Syslog facility (default: Syslog::LOG_USER)
  #   time_unit      - Unit of time (default: seconds)
  #   timestamp      - Prepend logs with a timestamp (default: false)
  #   exceptions     - Method for outputting exceptions (default: single line)
  #   global_context - Immutable context to prepend all messages with
  #   syslog_options - Syslog options (default: Syslog::LOG_PID|Syslog::LOG_CONS)
  #   escape_keys    - Escape chars in keys
  #   strict_logfmt  - Always use double quotes to quote values
  #
  # source://scrolls//lib/scrolls.rb#20
  def init(options = T.unsafe(nil)); end

  # Internal: The Logger initialized by #init
  #
  # source://scrolls//lib/scrolls.rb#321
  def internal; end

  # Public: Log data and/or wrap a block with start/finish
  #
  # data - A hash of key/values to log
  # blk  - A block to be wrapped by log lines
  #
  # Examples:
  #
  #   Scrolls.log(test: "test")
  #   test=test
  #   => nil
  #
  #   Scrolls.log(test: "test") { puts "inner block" }
  #   test=test at=start
  #   inner block
  #   test=test at=finish elapsed=0.000
  #   => nil
  #
  # source://scrolls//lib/scrolls.rb#66
  def log(data, &blk); end

  # Public: Log an exception
  #
  # e    - An exception to pass to the logger
  # data - A hash of key/values to log
  #
  # Examples:
  #
  #   begin
  #     raise Exception
  #   rescue Exception => e
  #     Scrolls.log_exception(e, {test: "test"})
  #   end
  #   test=test at=exception class=Exception message=Exception exception_id=70321999017240
  #   ...
  #
  # source://scrolls//lib/scrolls.rb#88
  def log_exception(e, data); end

  # Public: Get the primary logger
  #
  # source://scrolls//lib/scrolls.rb#28
  def logger; end

  # Public: Set whether exceptions should generate a single log
  # message. (default: false)
  #
  # Examples
  #
  #   Scrolls.single_line_exceptions = true
  #
  # source://scrolls//lib/scrolls.rb#198
  def single_line_exceptions=(boolean); end

  # Public: Return whether exceptions generate a single log message.
  #
  # Examples
  #
  #   Scrolls.single_line_exceptions
  #   => true
  #
  # @return [Boolean]
  #
  # source://scrolls//lib/scrolls.rb#209
  def single_line_exceptions?; end

  # Public: Return the stream
  #
  # Examples
  #
  #   Scrolls.stream
  #   => #<IO:<STDOUT>>
  #
  # source://scrolls//lib/scrolls.rb#141
  def stream; end

  # Public: Setup a new output (default: STDOUT)
  #
  # out - New output
  #
  # Options
  #
  #   syslog - Load 'Scrolls::SyslogLogger'
  #
  # Examples
  #
  #   Scrolls.stream = StringIO.new
  #
  # source://scrolls//lib/scrolls.rb#130
  def stream=(out); end

  # Public: Return the time unit currently configured
  #
  # Examples
  #
  #   Scrolls.time_unit
  #   => "seconds"
  #
  # source://scrolls//lib/scrolls.rb#164
  def time_unit; end

  # Public: Set the time unit we use for 'elapsed' (default: "seconds")
  #
  # unit - The time unit ("milliseconds" currently supported)
  #
  # Examples
  #
  #   Scrolls.time_unit = "milliseconds"
  #
  # source://scrolls//lib/scrolls.rb#153
  def time_unit=(unit); end

  # Public: Convience method for Logger replacement
  #
  # Translates the `level` to Syslog equivalent
  #
  # data - A hash of key/values to log
  # blk  - A block to be wrapped by log lines
  #
  # Examples:
  #
  #   Scrolls.unknown(test: "test")
  #   test=test level=alert
  #   => nil
  #
  # source://scrolls//lib/scrolls.rb#314
  def unknown(data, &blk); end

  # Public: Convience method for Logger replacement
  #
  # Translates the `level` to Syslog equivalent
  #
  # data - A hash of key/values to log
  # blk  - A block to be wrapped by log lines
  #
  # Examples:
  #
  #   Scrolls.warn(test: "test")
  #   test=test level=notice
  #   => nil
  #
  # source://scrolls//lib/scrolls.rb#296
  def warn(data, &blk); end
end

# source://scrolls//lib/scrolls/utils.rb#41
Scrolls::ESCAPE_CHAR = T.let(T.unsafe(nil), Hash)

# source://scrolls//lib/scrolls/utils.rb#50
Scrolls::ESCAPE_CHAR_PATTERN = T.let(T.unsafe(nil), Regexp)

# Top level class to hold our global context
#
# Global context is defined using Scrolls#init
class Scrolls::GlobalContext
  # @return [GlobalContext] a new instance of GlobalContext
  #
  # source://scrolls//lib/scrolls/logger.rb#25
  def initialize(ctx); end

  # source://scrolls//lib/scrolls/logger.rb#29
  def to_h; end
end

class Scrolls::IOLogger
  # @return [IOLogger] a new instance of IOLogger
  #
  # source://scrolls//lib/scrolls/iologger.rb#3
  def initialize(stream); end

  # source://scrolls//lib/scrolls/iologger.rb#10
  def log(data); end
end

# Default log facility
#
# source://scrolls//lib/scrolls/logger.rb#10
Scrolls::LOG_FACILITY = T.let(T.unsafe(nil), Integer)

# Helpful map of syslog facilities
#
# source://scrolls//lib/scrolls/utils.rb#4
Scrolls::LOG_FACILITY_MAP = T.let(T.unsafe(nil), Hash)

# Default log level
#
# source://scrolls//lib/scrolls/logger.rb#13
Scrolls::LOG_LEVEL = T.let(T.unsafe(nil), Integer)

# Helpful map of syslog log levels
#
# source://scrolls//lib/scrolls/utils.rb#27
Scrolls::LOG_LEVEL_MAP = T.let(T.unsafe(nil), Hash)

class Scrolls::LogLevelError < ::StandardError; end

class Scrolls::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://scrolls//lib/scrolls/logger.rb#39
  def initialize(options = T.unsafe(nil)); end

  # source://scrolls//lib/scrolls/logger.rb#54
  def context; end

  # source://scrolls//lib/scrolls/logger.rb#62
  def context=(h); end

  # @return [Boolean]
  #
  # source://scrolls//lib/scrolls/logger.rb#78
  def escape_keys?; end

  # Returns the value of attribute exceptions.
  #
  # source://scrolls//lib/scrolls/logger.rb#37
  def exceptions; end

  # Sets the attribute exceptions
  #
  # @param value the value to set the attribute exceptions to.
  #
  # source://scrolls//lib/scrolls/logger.rb#37
  def exceptions=(_arg0); end

  # source://scrolls//lib/scrolls/logger.rb#90
  def facility; end

  # source://scrolls//lib/scrolls/logger.rb#94
  def facility=(f); end

  # source://scrolls//lib/scrolls/logger.rb#117
  def global_context; end

  # source://scrolls//lib/scrolls/logger.rb#121
  def log(data, &blk); end

  # source://scrolls//lib/scrolls/logger.rb#165
  def log_exception(e, data = T.unsafe(nil)); end

  # Returns the value of attribute logger.
  #
  # source://scrolls//lib/scrolls/logger.rb#36
  def logger; end

  # source://scrolls//lib/scrolls/logger.rb#66
  def stream; end

  # source://scrolls//lib/scrolls/logger.rb#70
  def stream=(s); end

  # @return [Boolean]
  #
  # source://scrolls//lib/scrolls/logger.rb#82
  def strict_logfmt?; end

  # source://scrolls//lib/scrolls/logger.rb#86
  def syslog_options; end

  # source://scrolls//lib/scrolls/logger.rb#108
  def time_unit; end

  # source://scrolls//lib/scrolls/logger.rb#112
  def time_unit=(u); end

  # Returns the value of attribute timestamp.
  #
  # source://scrolls//lib/scrolls/logger.rb#37
  def timestamp; end

  # Sets the attribute timestamp
  #
  # @param value the value to set the attribute timestamp to.
  #
  # source://scrolls//lib/scrolls/logger.rb#37
  def timestamp=(_arg0); end

  # source://scrolls//lib/scrolls/logger.rb#217
  def with_context(prefix); end

  private

  # source://scrolls//lib/scrolls/logger.rb#301
  def calculate_time(start, finish); end

  # @return [Boolean]
  #
  # source://scrolls//lib/scrolls/logger.rb#306
  def log_level_ok?(level); end

  # @return [Boolean]
  #
  # source://scrolls//lib/scrolls/logger.rb#247
  def prepend_timestamp?; end

  # We need this for our syslog setup
  #
  # source://scrolls//lib/scrolls/logger.rb#297
  def progname; end

  # source://scrolls//lib/scrolls/logger.rb#229
  def setup!; end

  # source://scrolls//lib/scrolls/logger.rb#251
  def setup_facility(f = T.unsafe(nil)); end

  # source://scrolls//lib/scrolls/logger.rb#238
  def setup_global_context; end

  # source://scrolls//lib/scrolls/logger.rb#259
  def setup_stream; end

  # source://scrolls//lib/scrolls/logger.rb#281
  def setup_time_unit; end

  # @return [Boolean]
  #
  # source://scrolls//lib/scrolls/logger.rb#276
  def single_line_exceptions?; end

  # source://scrolls//lib/scrolls/logger.rb#315
  def write(data); end
end

module Scrolls::Parser
  extend ::Scrolls::Parser

  # source://scrolls//lib/scrolls/parser.rb#39
  def parse(data); end

  # source://scrolls//lib/scrolls/parser.rb#7
  def unparse(data, escape_keys = T.unsafe(nil), strict_logfmt = T.unsafe(nil)); end
end

# Default syslog options
#
# source://scrolls//lib/scrolls/logger.rb#16
Scrolls::SYSLOG_OPTIONS = T.let(T.unsafe(nil), Integer)

class Scrolls::SyslogLogger
  # @return [SyslogLogger] a new instance of SyslogLogger
  #
  # source://scrolls//lib/scrolls/sysloglogger.rb#3
  def initialize(ident = T.unsafe(nil), options = T.unsafe(nil), facility = T.unsafe(nil)); end

  # source://scrolls//lib/scrolls/sysloglogger.rb#13
  def log(data); end
end

class Scrolls::TimeUnitError < ::RuntimeError; end

module Scrolls::Utils
  class << self
    # source://scrolls//lib/scrolls/utils.rb#54
    def escape_chars(d); end
  end
end

# source://scrolls//lib/scrolls/version.rb#2
Scrolls::VERSION = T.let(T.unsafe(nil), String)

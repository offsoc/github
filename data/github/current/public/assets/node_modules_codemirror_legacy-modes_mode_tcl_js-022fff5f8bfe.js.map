{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_tcl_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/tcl.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n                          \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n                          \"binary break catch cd close concat continue dde eof encoding error \" +\n                          \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n                          \"filename flush for foreach format gets glob global history http if \" +\n                          \"incr info interp join lappend lindex linsert list llength load lrange \" +\n                          \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n                          \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n                          \"registry regsub rename resource return scan seek set socket source split \" +\n                          \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n                          \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n                          \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n                          \"vwait\");\nvar functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\nvar isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  if ((ch == '\"' || ch == \"'\") && state.inParams) {\n    return chain(stream, state, tokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams) state.inParams = true;\n    else if (ch == \")\") state.inParams = false;\n    return null;\n  } else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } else if (ch == \"#\") {\n    if (stream.eat(\"*\"))\n      return chain(stream, state, tokenComment);\n    if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n      return chain(stream, state, tokenUnparsed);\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == '\"') {\n    stream.skipTo(/\"/);\n    return \"comment\";\n  } else if (ch == \"$\") {\n    stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n    stream.eatWhile(/}/);\n    state.beforeParams = true;\n    return \"builtin\";\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"comment\";\n  } else {\n    stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n    var word = stream.current().toLowerCase();\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    if (functions && functions.propertyIsEnumerable(word)) {\n      state.beforeParams = true;\n      return \"keyword\";\n    }\n    return null;\n  }\n}\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\nexport const tcl = {\n  name: \"tcl\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","escaped","end","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","maybeEnd","tcl","name","startState","token","eatSpace","languageData","commentTokens","line"],"sourceRoot":""}
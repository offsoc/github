{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_xquery_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/xquery.js"],"sourcesContent":["// The keywords object is set to the result of this self executing\n// function. Each keyword is a property of the keywords object whose\n// value is {type: atype, style: astyle}\nvar keywords = function(){\n  // convenience functions used to build keywords object\n  function kw(type) {return {type: type, style: \"keyword\"};}\n  var operator = kw(\"operator\")\n  , atom = {type: \"atom\", style: \"atom\"}\n  , punctuation = {type: \"punctuation\", style: null}\n  , qualifier = {type: \"axis_specifier\", style: \"qualifier\"};\n\n  // kwObj is what is return from this function at the end\n  var kwObj = {\n    ',': punctuation\n  };\n\n  // a list of 'basic' keywords. For each add a property to kwObj with the value of\n  // {type: basic[i], style: \"keyword\"} e.g. 'after' --> {type: \"after\", style: \"keyword\"}\n  var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',\n               'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',\n               'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',\n               'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',\n               'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',\n               'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',\n               'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',\n               'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',\n               'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',\n               'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',\n               'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',\n               'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',\n               'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',\n               'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',\n               'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',\n               'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',\n               'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',\n               'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',\n               'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',\n               'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];\n  for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);};\n\n  // a list of types. For each add a property to kwObj with the value of\n  // {type: \"atom\", style: \"atom\"}\n  var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',\n               'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',\n               'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',\n               'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',\n               'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',\n               'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',\n               'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',\n               'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',\n               'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',\n               'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];\n  for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;};\n\n  // each operator will add a property to kwObj with value of {type: \"operator\", style: \"keyword\"}\n  var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];\n  for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;};\n\n  // each axis_specifiers will add a property to kwObj with value of {type: \"axis_specifier\", style: \"qualifier\"}\n  var axis_specifiers = [\"self::\", \"attribute::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"parent::\",\n                         \"ancestor::\", \"ancestor-or-self::\", \"following::\", \"preceding::\", \"following-sibling::\", \"preceding-sibling::\"];\n  for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; };\n\n  return kwObj;\n}();\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\n// the primary mode tokenizer\nfunction tokenBase(stream, state) {\n  var ch = stream.next(),\n      mightBeFunction = false,\n      isEQName = isEQNameAhead(stream);\n\n  // an XML tag (if not in some sub, chained tokenizer)\n  if (ch == \"<\") {\n    if(stream.match(\"!--\", true))\n      return chain(stream, state, tokenXMLComment);\n\n    if(stream.match(\"![CDATA\", false)) {\n      state.tokenize = tokenCDATA;\n      return \"tag\";\n    }\n\n    if(stream.match(\"?\", false)) {\n      return chain(stream, state, tokenPreProcessing);\n    }\n\n    var isclose = stream.eat(\"/\");\n    stream.eatSpace();\n    var tagName = \"\", c;\n    while ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/))) tagName += c;\n\n    return chain(stream, state, tokenTag(tagName, isclose));\n  }\n  // start code block\n  else if(ch == \"{\") {\n    pushStateStack(state, { type: \"codeblock\"});\n    return null;\n  }\n  // end code block\n  else if(ch == \"}\") {\n    popStateStack(state);\n    return null;\n  }\n  // if we're in an XML block\n  else if(isInXmlBlock(state)) {\n    if(ch == \">\")\n      return \"tag\";\n    else if(ch == \"/\" && stream.eat(\">\")) {\n      popStateStack(state);\n      return \"tag\";\n    }\n    else\n      return \"variable\";\n  }\n  // if a number\n  else if (/\\d/.test(ch)) {\n    stream.match(/^\\d*(?:\\.\\d*)?(?:E[+\\-]?\\d+)?/);\n    return \"atom\";\n  }\n  // comment start\n  else if (ch === \"(\" && stream.eat(\":\")) {\n    pushStateStack(state, { type: \"comment\"});\n    return chain(stream, state, tokenComment);\n  }\n  // quoted string\n  else if (!isEQName && (ch === '\"' || ch === \"'\"))\n    return chain(stream, state, tokenString(ch));\n  // variable\n  else if(ch === \"$\") {\n    return chain(stream, state, tokenVariable);\n  }\n  // assignment\n  else if(ch ===\":\" && stream.eat(\"=\")) {\n    return \"keyword\";\n  }\n  // open paren\n  else if(ch === \"(\") {\n    pushStateStack(state, { type: \"paren\"});\n    return null;\n  }\n  // close paren\n  else if(ch === \")\") {\n    popStateStack(state);\n    return null;\n  }\n  // open paren\n  else if(ch === \"[\") {\n    pushStateStack(state, { type: \"bracket\"});\n    return null;\n  }\n  // close paren\n  else if(ch === \"]\") {\n    popStateStack(state);\n    return null;\n  }\n  else {\n    var known = keywords.propertyIsEnumerable(ch) && keywords[ch];\n\n    // if there's a EQName ahead, consume the rest of the string portion, it's likely a function\n    if(isEQName && ch === '\\\"') while(stream.next() !== '\"'){}\n    if(isEQName && ch === '\\'') while(stream.next() !== '\\''){}\n\n    // gobble up a word if the character is not known\n    if(!known) stream.eatWhile(/[\\w\\$_-]/);\n\n    // gobble a colon in the case that is a lib func type call fn:doc\n    var foundColon = stream.eat(\":\");\n\n    // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier\n    // which should get matched as a keyword\n    if(!stream.eat(\":\") && foundColon) {\n      stream.eatWhile(/[\\w\\$_-]/);\n    }\n    // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)\n    if(stream.match(/^[ \\t]*\\(/, false)) {\n      mightBeFunction = true;\n    }\n    // is the word a keyword?\n    var word = stream.current();\n    known = keywords.propertyIsEnumerable(word) && keywords[word];\n\n    // if we think it's a function call but not yet known,\n    // set style to variable for now for lack of something better\n    if(mightBeFunction && !known) known = {type: \"function_call\", style: \"def\"};\n\n    // if the previous word was element, attribute, axis specifier, this word should be the name of that\n    if(isInXmlConstructor(state)) {\n      popStateStack(state);\n      return \"variable\";\n    }\n    // as previously checked, if the word is element,attribute, axis specifier, call it an \"xmlconstructor\" and\n    // push the stack so we know to look for it on the next word\n    if(word == \"element\" || word == \"attribute\" || known.type == \"axis_specifier\") pushStateStack(state, {type: \"xmlconstructor\"});\n\n    // if the word is known, return the details of that else just call this a generic 'word'\n    return known ? known.style : \"variable\";\n  }\n}\n\n// handle comments, including nested\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      if(nestedCount > 0)\n        nestedCount--;\n      else {\n        popStateStack(state);\n        break;\n      }\n    }\n    else if(ch == \":\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = (ch == \":\");\n    maybeNested = (ch == \"(\");\n  }\n\n  return \"comment\";\n}\n\n// tokenizer for string literals\n// optionally pass a tokenizer function to set state.tokenize back to when finished\nfunction tokenString(quote, f) {\n  return function(stream, state) {\n    var ch;\n\n    if(isInString(state) && stream.current() == quote) {\n      popStateStack(state);\n      if(f) state.tokenize = f;\n      return \"string\";\n    }\n\n    pushStateStack(state, { type: \"string\", name: quote, tokenize: tokenString(quote, f) });\n\n    // if we're in a string and in an XML block, allow an embedded code block\n    if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n      state.tokenize = tokenBase;\n      return \"string\";\n    }\n\n\n    while (ch = stream.next()) {\n      if (ch ==  quote) {\n        popStateStack(state);\n        if(f) state.tokenize = f;\n        break;\n      }\n      else {\n        // if we're in a string and in an XML block, allow an embedded code block in an attribute\n        if(stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n          state.tokenize = tokenBase;\n          return \"string\";\n        }\n\n      }\n    }\n\n    return \"string\";\n  };\n}\n\n// tokenizer for variables\nfunction tokenVariable(stream, state) {\n  var isVariableChar = /[\\w\\$_-]/;\n\n  // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote\n  if(stream.eat(\"\\\"\")) {\n    while(stream.next() !== '\\\"'){};\n    stream.eat(\":\");\n  } else {\n    stream.eatWhile(isVariableChar);\n    if(!stream.match(\":=\", false)) stream.eat(\":\");\n  }\n  stream.eatWhile(isVariableChar);\n  state.tokenize = tokenBase;\n  return \"variable\";\n}\n\n// tokenizer for XML tags\nfunction tokenTag(name, isclose) {\n  return function(stream, state) {\n    stream.eatSpace();\n    if(isclose && stream.eat(\">\")) {\n      popStateStack(state);\n      state.tokenize = tokenBase;\n      return \"tag\";\n    }\n    // self closing tag without attributes?\n    if(!stream.eat(\"/\"))\n      pushStateStack(state, { type: \"tag\", name: name, tokenize: tokenBase});\n    if(!stream.eat(\">\")) {\n      state.tokenize = tokenAttribute;\n      return \"tag\";\n    }\n    else {\n      state.tokenize = tokenBase;\n    }\n    return \"tag\";\n  };\n}\n\n// tokenizer for XML attributes\nfunction tokenAttribute(stream, state) {\n  var ch = stream.next();\n\n  if(ch == \"/\" && stream.eat(\">\")) {\n    if(isInXmlAttributeBlock(state)) popStateStack(state);\n    if(isInXmlBlock(state)) popStateStack(state);\n    return \"tag\";\n  }\n  if(ch == \">\") {\n    if(isInXmlAttributeBlock(state)) popStateStack(state);\n    return \"tag\";\n  }\n  if(ch == \"=\")\n    return null;\n  // quoted string\n  if (ch == '\"' || ch == \"'\")\n    return chain(stream, state, tokenString(ch, tokenAttribute));\n\n  if(!isInXmlAttributeBlock(state))\n    pushStateStack(state, { type: \"attribute\", tokenize: tokenAttribute});\n\n  stream.eat(/[a-zA-Z_:]/);\n  stream.eatWhile(/[-a-zA-Z0-9_:.]/);\n  stream.eatSpace();\n\n  // the case where the attribute has not value and the tag was closed\n  if(stream.match(\">\", false) || stream.match(\"/\", false)) {\n    popStateStack(state);\n    state.tokenize = tokenBase;\n  }\n\n  return \"attribute\";\n}\n\n// handle comments, including nested\nfunction tokenXMLComment(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"-\" && stream.match(\"->\", true)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n  }\n}\n\n\n// handle CDATA\nfunction tokenCDATA(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"]\" && stream.match(\"]\", true)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n  }\n}\n\n// handle preprocessing instructions\nfunction tokenPreProcessing(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"?\" && stream.match(\">\", true)) {\n      state.tokenize = tokenBase;\n      return \"processingInstruction\";\n    }\n  }\n}\n\n\n// functions to test the current context of the state\nfunction isInXmlBlock(state) { return isIn(state, \"tag\"); }\nfunction isInXmlAttributeBlock(state) { return isIn(state, \"attribute\"); }\nfunction isInXmlConstructor(state) { return isIn(state, \"xmlconstructor\"); }\nfunction isInString(state) { return isIn(state, \"string\"); }\n\nfunction isEQNameAhead(stream) {\n  // assume we've already eaten a quote (\")\n  if(stream.current() === '\"')\n    return stream.match(/^[^\\\"]+\\\"\\:/, false);\n  else if(stream.current() === '\\'')\n    return stream.match(/^[^\\\"]+\\'\\:/, false);\n  else\n    return false;\n}\n\nfunction isIn(state, type) {\n  return (state.stack.length && state.stack[state.stack.length - 1].type == type);\n}\n\nfunction pushStateStack(state, newState) {\n  state.stack.push(newState);\n}\n\nfunction popStateStack(state) {\n  state.stack.pop();\n  var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;\n  state.tokenize = reinstateTokenize || tokenBase;\n}\n\n// the interface for the mode API\nexport const xQuery = {\n  name: \"xquery\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      cc: [],\n      stack: []\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {block: {open: \"(:\", close: \":)\"}}\n  }\n};\n"],"names":["keywords","kw","type","style","operator","atom","qualifier","kwObj","basic","i","l","length","types","operators","axis_specifiers","chain","stream","state","f","tokenize","tokenBase","ch","next","mightBeFunction","isEQName","current","match","tokenXMLComment","tokenCDATA","tokenPreProcessing","name","isclose","eat","eatSpace","c","tagName","popStateStack","pushStateStack","tokenAttribute","isIn","test","tokenComment","tokenString","tokenVariable","known","propertyIsEnumerable","eatWhile","foundColon","word","maybeEnd","maybeNested","nestedCount","quote","isInString","isInXmlAttributeBlock","isVariableChar","stack","newState","push","pop","reinstateTokenize","xQuery","startState","cc","token","languageData","commentTokens","block","open","close"],"sourceRoot":""}
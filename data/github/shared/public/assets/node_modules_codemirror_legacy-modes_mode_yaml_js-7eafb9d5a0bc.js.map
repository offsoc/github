{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_yaml_js-xxxxxxxxxxxx.js","mappings":"2KACA,IAAIA,EAAe,OAAW,6CAAgC,KAEvD,IAAMC,EAAO,CAClBC,KAAM,OACNC,MAAO,SAASC,CAAM,CAAEC,CAAK,EAC3B,IAAIC,EAAKF,EAAOG,IAAI,GAChBC,EAAMH,EAAMI,OAAO,CAGvB,GAFAJ,EAAMI,OAAO,CAAG,GAEZH,KAAAA,GAAcF,CAAAA,GAAAA,EAAOM,GAAG,EAAS,KAAKC,IAAI,CAACP,EAAOQ,MAAM,CAACC,MAAM,CAACT,EAAOM,GAAG,CAAG,GAAE,EAEjF,OADAN,EAAOU,SAAS,GACT,UAGT,GAAIV,EAAOW,KAAK,CAAC,oCACf,MAAO,SAET,GAAIV,EAAMW,OAAO,EAAIZ,EAAOa,WAAW,GAAKZ,EAAMa,MAAM,CAClC,OAApBd,EAAOU,SAAS,GAAW,SAE7B,GADWT,EAAMW,OAAO,EAAIX,CAAAA,EAAMW,OAAO,CAAG,EAAI,EAC5CZ,EAAOe,GAAG,GAAI,CAKhB,GAJAd,EAAMa,MAAM,CAAG,EACfb,EAAMe,IAAI,CAAG,GACbf,EAAMgB,SAAS,CAAG,GAEfjB,EAAOW,KAAK,CAAC,QAEZX,EAAOW,KAAK,CAAC,OAFS,MAAO,MAIjC,GAAIX,EAAOW,KAAK,CAAC,YAAe,MAAO,MACzC,CAEA,GAAIX,EAAOW,KAAK,CAAC,kBASf,MARIT,KAAAA,EACFD,EAAMiB,WAAW,GACVhB,KAAAA,EACPD,EAAMiB,WAAW,GACVhB,KAAAA,EACPD,EAAMkB,UAAU,GAEhBlB,EAAMkB,UAAU,GACX,OAIT,GAAIlB,EAAMkB,UAAU,CAAG,GAAK,CAACf,GAAOF,KAAAA,EAElC,OADAF,EAAOoB,IAAI,GACJ,OAGT,GAAInB,EAAMiB,WAAW,CAAG,GAAK,CAACd,GAAOF,KAAAA,EAKnC,OAJAD,EAAMa,MAAM,CAAG,EACfb,EAAMe,IAAI,CAAG,GACbf,EAAMgB,SAAS,CAAG,GAClBjB,EAAOoB,IAAI,GACJ,OAIT,GAAInB,EAAMgB,SAAS,CAAE,CAEnB,GAAIjB,EAAOW,KAAK,CAAC,kBAA2C,OAAtBV,EAAMW,OAAO,CAAG,GAAa,OAEnE,GAAIZ,EAAOW,KAAK,CAAC,+BAAkC,MAAO,WAE1D,GAAyB,GAArBV,EAAMiB,WAAW,EAASlB,EAAOW,KAAK,CAAC,yBACvCV,EAAMiB,WAAW,CAAG,GAAKlB,EAAOW,KAAK,CAAC,gCAD4B,MAAO,SAG7E,GAAIX,EAAOW,KAAK,CAACf,GAAiB,MAAO,SAC3C,OAGA,CAAKK,EAAMe,IAAI,EAAIhB,EAAOW,KAAK,CAAC,kFAC9BV,EAAMe,IAAI,CAAG,GACbf,EAAMa,MAAM,CAAGd,EAAOa,WAAW,GAC1B,QAELZ,EAAMe,IAAI,EAAIhB,EAAOW,KAAK,CAAC,UAAYV,EAAMgB,SAAS,CAAG,GAAa,SAG1EhB,EAAMgB,SAAS,CAAG,GAClBhB,EAAMI,OAAO,CAAIH,MAAAA,EACjBF,EAAOoB,IAAI,GACJ,KACT,EACAC,WAAY,WACV,MAAO,CACLL,KAAM,GACNC,UAAW,GACXH,OAAQ,EACRI,YAAa,EACbC,WAAY,EACZP,QAAS,GACTP,QAAS,EACX,CACF,EACAiB,aAAc,CACZC,cAAe,CAACC,KAAM,GAAG,CAC3B,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/yaml.js"],"sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\nexport const yaml = {\n  name: \"yaml\",\n  token: function(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n      return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd(); return \"string\";\n    } else if (state.literal) { state.literal = false; }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if(stream.match('---')) { return \"def\"; }\n      /* document end */\n      if (stream.match('...')) { return \"def\"; }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) { return 'meta'; }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{')\n        state.inlinePairs++;\n      else if (ch == '}')\n        state.inlinePairs--;\n      else if (ch == '[')\n        state.inlineList++;\n      else\n        state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable'; }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n      /* keywords */\n      if (stream.match(keywordRegex)) { return 'keyword'; }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = (ch == '\\\\');\n    stream.next();\n    return null;\n  },\n  startState: function() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["keywordRegex","yaml","name","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","languageData","commentTokens","line"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Git::V1::Maintenance`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Git::V1::Maintenance`.

class Hydro::Schemas::Git::V1::Maintenance
  sig do
    params(
      completed_at: T.nilable(Google::Protobuf::Timestamp),
      disk_usage: T.nilable(Integer),
      disk_usage_delta: T.nilable(Integer),
      is_geometric_repack: T.nilable(T::Boolean),
      is_shared_storage_enabled: T.nilable(T::Boolean),
      maintenance_retries: T.nilable(Integer),
      network_id: T.nilable(Integer),
      pushed_count: T.nilable(Integer),
      pushed_count_since_maintenance: T.nilable(Integer),
      repack_duration_in_seconds: T.nilable(Float),
      repository_count: T.nilable(Integer)
    ).void
  end
  def initialize(completed_at: nil, disk_usage: nil, disk_usage_delta: nil, is_geometric_repack: nil, is_shared_storage_enabled: nil, maintenance_retries: nil, network_id: nil, pushed_count: nil, pushed_count_since_maintenance: nil, repack_duration_in_seconds: nil, repository_count: nil); end

  sig { void }
  def clear_completed_at; end

  sig { void }
  def clear_disk_usage; end

  sig { void }
  def clear_disk_usage_delta; end

  sig { void }
  def clear_is_geometric_repack; end

  sig { void }
  def clear_is_shared_storage_enabled; end

  sig { void }
  def clear_maintenance_retries; end

  sig { void }
  def clear_network_id; end

  sig { void }
  def clear_pushed_count; end

  sig { void }
  def clear_pushed_count_since_maintenance; end

  sig { void }
  def clear_repack_duration_in_seconds; end

  sig { void }
  def clear_repository_count; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def completed_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def completed_at=(value); end

  sig { returns(Integer) }
  def disk_usage; end

  sig { params(value: Integer).void }
  def disk_usage=(value); end

  sig { returns(Integer) }
  def disk_usage_delta; end

  sig { params(value: Integer).void }
  def disk_usage_delta=(value); end

  sig { returns(T::Boolean) }
  def is_geometric_repack; end

  sig { params(value: T::Boolean).void }
  def is_geometric_repack=(value); end

  sig { returns(T::Boolean) }
  def is_shared_storage_enabled; end

  sig { params(value: T::Boolean).void }
  def is_shared_storage_enabled=(value); end

  sig { returns(Integer) }
  def maintenance_retries; end

  sig { params(value: Integer).void }
  def maintenance_retries=(value); end

  sig { returns(Integer) }
  def network_id; end

  sig { params(value: Integer).void }
  def network_id=(value); end

  sig { returns(Integer) }
  def pushed_count; end

  sig { params(value: Integer).void }
  def pushed_count=(value); end

  sig { returns(Integer) }
  def pushed_count_since_maintenance; end

  sig { params(value: Integer).void }
  def pushed_count_since_maintenance=(value); end

  sig { returns(Float) }
  def repack_duration_in_seconds; end

  sig { params(value: Float).void }
  def repack_duration_in_seconds=(value); end

  sig { returns(Integer) }
  def repository_count; end

  sig { params(value: Integer).void }
  def repository_count=(value); end
end

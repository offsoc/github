{"version":3,"file":"chunk-app_assets_modules_github_profile_contributions-spider-graph_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/profile/contributions-spider-graph.ts"],"sourcesContent":["import {loaded} from '@github-ui/document-ready'\n\nfunction maxWidthOf(elements: Element[]): number {\n  let maxWidth = 0\n\n  for (const el of elements) {\n    const rect = el.getBoundingClientRect()\n\n    if (rect.width > maxWidth) {\n      maxWidth = rect.width\n    }\n  }\n\n  return maxWidth\n}\n\n// Sorts two strings based on the order we want labels to appear in the spider graph\nfunction labelSort(a: string, b: string): number {\n  if (a.length < b.length) {\n    return -1\n  }\n\n  if (a.length > b.length) {\n    return 1\n  }\n\n  return a.localeCompare(b)\n}\n\n// Return a value used for centering the percentage label above the type label\nfunction percentElOffset(percentEl: Element, labelEl: Element): number {\n  const percentRect = percentEl.getBoundingClientRect()\n  const labelRect = labelEl.getBoundingClientRect()\n\n  return (labelRect.width - percentRect.width) / 2\n}\n\nfunction displaySpiderGraph(container: Element, data: {percentages: {[key: string]: number}}) {\n  const svg = container.querySelector('.js-activity-overview-graph')\n  if (!svg) {\n    return\n  }\n\n  const blob = svg.querySelector('.js-highlight-blob')!\n  const padding = 10\n  const minWidth = 250\n  const availableWidth = Math.floor(container.clientWidth)\n  const maxWidth = Math.max(availableWidth, minWidth)\n  const maxHeight = maxWidth\n  const topLabelEl = svg.querySelector('.js-highlight-label-top')!\n  const bottomLabelEl = svg.querySelector('.js-highlight-label-bottom')!\n  const rightLabelEl = svg.querySelector('.js-highlight-label-right')!\n  const leftLabelEl = svg.querySelector('.js-highlight-label-left')!\n  const topPercentEl = svg.querySelector('.js-highlight-percent-top')!\n  const bottomPercentEl = svg.querySelector('.js-highlight-percent-bottom')!\n  const rightPercentEl = svg.querySelector('.js-highlight-percent-right')!\n  const leftPercentEl = svg.querySelector('.js-highlight-percent-left')!\n  const xAxis = svg.querySelector('.js-highlight-x-axis')!\n  const yAxis = svg.querySelector('.js-highlight-y-axis')!\n  const topEllipse = svg.querySelector('.js-highlight-top-ellipse')!\n  const rightEllipse = svg.querySelector('.js-highlight-right-ellipse')!\n  const bottomEllipse = svg.querySelector('.js-highlight-bottom-ellipse')!\n  const leftEllipse = svg.querySelector('.js-highlight-left-ellipse')!\n  const spinner = container.querySelector('.js-activity-overview-graph-spinner')!\n  const groupEl = svg.querySelector('g')!\n\n  // Reset graph and display the right parts; necessary to reset some attributes in case another\n  // part of the page loads via pjax and the user hits the Back button in their browser\n  groupEl.removeAttribute('transform')\n  /* eslint-disable-next-line github/no-d-none */\n  svg.classList.remove('d-none')\n  svg.classList.add('d-block')\n  spinner.classList.remove('d-block')\n  /* eslint-disable-next-line github/no-d-none */\n  spinner.classList.add('d-none')\n  topLabelEl.textContent = ''\n  rightLabelEl.textContent = ''\n  bottomLabelEl.textContent = ''\n  leftLabelEl.textContent = ''\n  topPercentEl.textContent = '\\u00a0'\n  rightPercentEl.textContent = '\\u00a0'\n  bottomPercentEl.textContent = '\\u00a0'\n  leftPercentEl.textContent = '\\u00a0'\n\n  // Apply labels going clockwise starting from the top\n  const labels = Object.keys(data.percentages).sort(labelSort)\n  const [leftLabel, rightLabel] = labels.slice(0, 2).sort()\n  const [topLabel, bottomLabel] = labels.slice(2, 4).sort()\n\n  const topValue = data.percentages[topLabel!]\n  const rightValue = data.percentages[rightLabel!]\n  const bottomValue = data.percentages[bottomLabel!]\n  const leftValue = data.percentages[leftLabel!]\n\n  let nonZeroPercentEl: Element | null = null\n  const percentageLabel = (label: string, percentEl: Element) => {\n    const percentage = data.percentages[label]!\n    if (percentage > 0) {\n      nonZeroPercentEl = percentEl\n      return `${percentage}%`\n    }\n  }\n\n  // Set percentage labels\n  const topPercentText = percentageLabel(topLabel!, topPercentEl)\n  if (topPercentText) {\n    topPercentEl.textContent = topPercentText\n  }\n  const rightPercentText = percentageLabel(rightLabel!, rightPercentEl)\n  if (rightPercentText) {\n    rightPercentEl.textContent = rightPercentText\n  }\n  const bottomPercentText = percentageLabel(bottomLabel!, bottomPercentEl)\n  if (bottomPercentText) {\n    bottomPercentEl.textContent = bottomPercentText\n  }\n  const leftPercentText = percentageLabel(leftLabel!, leftPercentEl)\n  if (leftPercentText) {\n    leftPercentEl.textContent = leftPercentText\n  }\n\n  // Position the axis labels\n  const topLabelDX = maxWidth / 2\n  const bottomLabelDX = maxWidth / 2\n  topLabelEl.appendChild(document.createTextNode(topLabel!))\n  topLabelEl.setAttribute('dx', topLabelDX.toString())\n  bottomLabelEl.appendChild(document.createTextNode(bottomLabel!))\n  bottomLabelEl.setAttribute('dx', bottomLabelDX.toString())\n  topPercentEl.setAttribute('dx', topLabelDX.toString())\n  bottomPercentEl.setAttribute('dx', bottomLabelDX.toString())\n\n  const labelHeight = topLabelEl.getBoundingClientRect().height\n  let percentHeight = 0\n  if (nonZeroPercentEl) {\n    percentHeight = (nonZeroPercentEl as Element).getBoundingClientRect().height\n  }\n\n  // Position remaining axis labels\n  let leftLabelDY = maxHeight / 2 + labelHeight / 4\n  let rightLabelDY = maxHeight / 2 + labelHeight / 4\n  if (leftValue! > 0) {\n    leftLabelDY = leftLabelDY + percentHeight / 2 + padding / 4\n  }\n  if (rightValue! > 0) {\n    rightLabelDY = rightLabelDY + percentHeight / 2 + padding / 4\n  }\n  leftLabelEl.appendChild(document.createTextNode(leftLabel!))\n  leftLabelEl.setAttribute('dy', leftLabelDY.toString())\n  rightLabelEl.appendChild(document.createTextNode(rightLabel!))\n  rightLabelEl.setAttribute('dy', rightLabelDY.toString())\n\n  // Position left and right percentage labels vertically\n  const leftPercentDY = leftLabelDY - labelHeight\n  const rightPercentDY = rightLabelDY - labelHeight\n  leftPercentEl.setAttribute('dy', leftPercentDY.toString())\n  rightPercentEl.setAttribute('dy', rightPercentDY.toString())\n\n  // Get a value from 0-1 to represent how much each axis represents of the total\n  let topPercentage = topValue! / 100\n  let bottomPercentage = bottomValue! / 100\n  let leftPercentage = leftValue! / 100\n  let rightPercentage = rightValue! / 100\n\n  const minTarget = 0\n  const maxTarget = 1\n  const maxActual = Math.max(topPercentage, bottomPercentage, leftPercentage, rightPercentage)\n  const scaleAxisPercentage = (x: number) => {\n    const numerator = (maxTarget - minTarget) * x\n    const denominator = maxActual\n    return numerator / denominator + minTarget\n  }\n\n  // Scale each percentage up so the largest contribution type takes up 100% of its axis;\n  // otherwise we end up with an accurately-sized-but-dinky graph\n  topPercentage = scaleAxisPercentage(topPercentage)\n  bottomPercentage = scaleAxisPercentage(bottomPercentage)\n  leftPercentage = scaleAxisPercentage(leftPercentage)\n  rightPercentage = scaleAxisPercentage(rightPercentage)\n\n  // Determine how much room we have in the middle of the svg for the blob, accounting for\n  // labels and padding\n  const widestLabelWidth = maxWidthOf([leftLabelEl, rightLabelEl, topLabelEl, bottomLabelEl]) + padding\n  const strokeWidth = 4 // how much room to leave for the border around the blob\n  const labelSize = Math.max(widestLabelWidth, labelHeight)\n  const widthMidpoint = maxWidth / 2\n  const heightMidpoint = maxHeight / 2\n  const topX = widthMidpoint\n  const topY100 = labelSize\n  const bottomX = widthMidpoint\n  const bottomY100 = maxHeight - labelSize\n  const leftX100 = labelSize\n  const leftY = heightMidpoint\n  const rightX100 = maxWidth - labelSize\n  const rightY = heightMidpoint\n\n  // Determine how big each axis can be, accounting for how much room the labels take up\n  const maxSegmentWidth = widthMidpoint - leftX100\n  const maxSegmentHeight = heightMidpoint - topY100\n\n  // Determine the right position for each axis to indicate how big that contribution type was\n  let topY = topY100 + (1 - topPercentage) * maxSegmentHeight\n  let bottomY = Math.max(bottomY100 - (1 - bottomPercentage) * maxSegmentHeight, heightMidpoint)\n  let leftX = leftX100 + (1 - leftPercentage) * maxSegmentWidth\n  let rightX = rightX100 - (1 - rightPercentage) * maxSegmentWidth\n\n  // Position the axes going horizontally across the graph and vertically down the middle\n  xAxis.setAttribute('x1', leftX100.toString())\n  xAxis.setAttribute('y1', heightMidpoint.toString())\n  xAxis.setAttribute('x2', rightX100.toString())\n  xAxis.setAttribute('y2', heightMidpoint.toString())\n  yAxis.setAttribute('x1', widthMidpoint.toString())\n  yAxis.setAttribute('y1', topY100.toString())\n  yAxis.setAttribute('x2', widthMidpoint.toString())\n  yAxis.setAttribute('y2', bottomY100.toString())\n\n  // Adjust the bounds of the blob to allow for the stroke that sticks out from the edges of the\n  // blob, but only if doing so won't pull that part of the blob to the other side of the\n  // relevant axis\n  if (topY + strokeWidth < heightMidpoint) {\n    topY = topY + strokeWidth\n  }\n  if (bottomY - strokeWidth > heightMidpoint) {\n    bottomY = bottomY - strokeWidth\n  }\n  if (leftX + strokeWidth < widthMidpoint) {\n    leftX = leftX + strokeWidth\n  }\n  if (rightX - strokeWidth > widthMidpoint) {\n    rightX = rightX - strokeWidth\n  }\n\n  // Position the labels at the ends of the axes\n  const topLabelDY = topY100 - padding\n  const rightLabelDX = rightX100 + padding\n  let bottomLabelDY = bottomY100 + padding + padding * 0.8\n  if (bottomValue! > 0) {\n    bottomLabelDY = bottomLabelDY + percentHeight\n  }\n  const leftLabelDX = leftX100 - (padding + padding * 0.2)\n  topLabelEl.setAttribute('dy', topLabelDY.toString())\n  rightLabelEl.setAttribute('dx', rightLabelDX.toString())\n  bottomLabelEl.setAttribute('dy', bottomLabelDY.toString())\n  leftLabelEl.setAttribute('dx', leftLabelDX.toString())\n\n  // Position the x-axis percentages centered above their labels\n  const leftPercentDX = leftLabelDX - percentElOffset(leftPercentEl, leftLabelEl)\n  const rightPercentDX = rightLabelDX + percentElOffset(rightPercentEl, rightLabelEl)\n  leftPercentEl.setAttribute('dx', leftPercentDX.toString())\n  rightPercentEl.setAttribute('dx', rightPercentDX.toString())\n\n  const topPercentDY = topLabelDY - labelHeight\n  const bottomPercentDY = bottomLabelDY - labelHeight\n  topPercentEl.setAttribute('dy', topPercentDY.toString())\n  bottomPercentEl.setAttribute('dy', bottomPercentDY.toString())\n\n  // Position point dots at the edges of the blob for each contribution type\n  const dotOffset = 2\n  if (topValue === 0) {\n    /* eslint-disable-next-line github/no-d-none */\n    topEllipse.classList.add('d-none')\n  } else {\n    topEllipse.setAttribute('cx', topX.toString())\n    topEllipse.setAttribute('cy', (topY - dotOffset).toString())\n  }\n  if (rightValue === 0) {\n    /* eslint-disable-next-line github/no-d-none */\n    rightEllipse.classList.add('d-none')\n  } else {\n    rightEllipse.setAttribute('cx', (rightX + dotOffset).toString())\n    rightEllipse.setAttribute('cy', rightY.toString())\n  }\n  if (bottomValue === 0) {\n    /* eslint-disable-next-line github/no-d-none */\n    bottomEllipse.classList.add('d-none')\n  } else {\n    bottomEllipse.setAttribute('cx', bottomX.toString())\n    bottomEllipse.setAttribute('cy', (bottomY + dotOffset).toString())\n  }\n  if (leftValue === 0) {\n    /* eslint-disable-next-line github/no-d-none */\n    leftEllipse.classList.add('d-none')\n  } else {\n    leftEllipse.setAttribute('cx', (leftX - dotOffset).toString())\n    leftEllipse.setAttribute('cy', leftY.toString())\n  }\n\n  // Position the graph at the top left of the containing svg\n  const groupBounds = groupEl.getBoundingClientRect()\n  const svgBounds = svg.getBoundingClientRect()\n  const topOffset = 0 - (groupBounds.top - svgBounds.top)\n  const leftOffset = 0 - (groupBounds.left - svgBounds.left)\n  groupEl.setAttribute('transform', `translate(${leftOffset}, ${topOffset})`)\n\n  // Resize the containing svg to match the actual size of the graph\n  const svgWidth = Math.ceil(groupBounds.width)\n  const svgHeight = Math.ceil(groupBounds.height)\n  svg.setAttribute('width', svgWidth.toString())\n  svg.setAttribute('height', svgHeight.toString())\n\n  // Populate the blob with points to represent how many contributions of each type were made\n  const pointPairs = [\n    [rightX, rightY],\n    [bottomX, bottomY],\n    [leftX, leftY],\n  ]\n  const pointPairsStr = pointPairs.map(pair => `L${pair[0]},${pair[1]}`).join(' ')\n  const pathData = `M${topX},${topY} ${pointPairsStr} z`\n\n  if (topValue! + rightValue! + bottomValue! + leftValue! !== 0) {\n    blob.setAttribute('d', pathData)\n  }\n}\n\nexport async function initializeOverviewGraphContainer(container: Element) {\n  await loaded\n  const percentages = container.getAttribute('data-percentages')!\n  const data = {percentages: JSON.parse(percentages)}\n  displaySpiderGraph(container, data)\n}\n"],"names":["labelSort","a","b","length","localeCompare","percentElOffset","percentEl","labelEl","percentRect","getBoundingClientRect","labelRect","width","initializeOverviewGraphContainer","container","loaded","data","percentages","JSON","parse","getAttribute","displaySpiderGraph","svg","querySelector","blob","maxWidth","Math","max","floor","clientWidth","topLabelEl","bottomLabelEl","rightLabelEl","leftLabelEl","topPercentEl","bottomPercentEl","rightPercentEl","leftPercentEl","xAxis","yAxis","topEllipse","rightEllipse","bottomEllipse","leftEllipse","spinner","groupEl","removeAttribute","classList","remove","add","textContent","labels","Object","keys","sort","leftLabel","rightLabel","slice","topLabel","bottomLabel","topValue","rightValue","bottomValue","leftValue","nonZeroPercentEl","percentageLabel","label","percentage","topPercentText","rightPercentText","bottomPercentText","leftPercentText","topLabelDX","bottomLabelDX","appendChild","document","createTextNode","setAttribute","toString","labelHeight","height","percentHeight","leftLabelDY","maxHeight","rightLabelDY","padding","leftPercentDY","rightPercentDY","topPercentage","bottomPercentage","leftPercentage","rightPercentage","maxActual","numerator","labelSize","maxWidthOf","elements","el","rect","widthMidpoint","heightMidpoint","bottomY100","rightX100","maxSegmentWidth","maxSegmentHeight","topY","topY100","bottomY","leftX","leftX100","rightX","topLabelDY","rightLabelDX","bottomLabelDY","leftLabelDX","leftPercentDX","rightPercentDX","topPercentDY","bottomPercentDY","topX","rightY","bottomX","leftY","groupBounds","svgBounds","topOffset","top","leftOffset","left","svgWidth","ceil","svgHeight","pointPairsStr","pointPairs","map","pair","join","pathData"],"sourceRoot":""}
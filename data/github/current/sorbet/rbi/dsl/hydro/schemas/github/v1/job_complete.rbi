# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::JobComplete`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::JobComplete`.

class Hydro::Schemas::Github::V1::JobComplete
  sig do
    params(
      active_job_id: T.nilable(String),
      aqueduct_job_id: T.nilable(String),
      backend: T.nilable(T.any(Symbol, Integer)),
      catalog_service: T.nilable(Google::Protobuf::StringValue),
      cpu_time_ms: T.nilable(Integer),
      current_ref: T.nilable(String),
      enqueue_time_ms: T.nilable(Integer),
      enqueue_time_ms_by_backend: T.nilable(T.any(Google::Protobuf::Map[String, Integer], T::Hash[String, Integer])),
      exception: T.nilable(String),
      exception_backtrace: T.nilable(String),
      execution_time_ms: T.nilable(Integer),
      freno_errors: T.nilable(Integer),
      freno_time_ms: T.nilable(Integer),
      freno_time_ms_by_cluster: T.nilable(T.any(Google::Protobuf::Map[String, Integer], T::Hash[String, Integer])),
      freno_timeouts: T.nilable(Integer),
      gitrpc_count: T.nilable(Integer),
      gitrpc_time_ms: T.nilable(Integer),
      hostname: T.nilable(String),
      idle_time_ms: T.nilable(Integer),
      job_class: T.nilable(String),
      jobs_enqueued: T.nilable(T.any(Google::Protobuf::Map[String, Integer], T::Hash[String, Integer])),
      jobs_enqueued_by_backend: T.nilable(T.any(Google::Protobuf::Map[String, Integer], T::Hash[String, Integer])),
      memory_private_bytes: T.nilable(Integer),
      memory_private_delta_bytes: T.nilable(Integer),
      memory_rss_bytes: T.nilable(Integer),
      memory_rss_delta_bytes: T.nilable(Integer),
      memory_shared_bytes: T.nilable(Integer),
      memory_shared_delta_bytes: T.nilable(Integer),
      memory_usage_recorded: T.nilable(T::Boolean),
      mysql_primary_queries: T.nilable(Integer),
      mysql_queries: T.nilable(Integer),
      mysql_queries_by_cluster: T.nilable(T.any(Google::Protobuf::Map[String, Integer], T::Hash[String, Integer])),
      mysql_query_types_per_host: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::JobComplete::QueryTypeCount], T::Array[Hydro::Schemas::Github::V1::JobComplete::QueryTypeCount])),
      mysql_time_ms: T.nilable(Integer),
      mysql_time_ms_by_cluster: T.nilable(T.any(Google::Protobuf::Map[String, Integer], T::Hash[String, Integer])),
      pid: T.nilable(Integer),
      process_runtime_seconds: T.nilable(Integer),
      queue: T.nilable(String),
      revision: T.nilable(String),
      success: T.nilable(T::Boolean),
      will_retry: T.nilable(T::Boolean),
      worker_pool: T.nilable(String)
    ).void
  end
  def initialize(active_job_id: nil, aqueduct_job_id: nil, backend: nil, catalog_service: nil, cpu_time_ms: nil, current_ref: nil, enqueue_time_ms: nil, enqueue_time_ms_by_backend: T.unsafe(nil), exception: nil, exception_backtrace: nil, execution_time_ms: nil, freno_errors: nil, freno_time_ms: nil, freno_time_ms_by_cluster: T.unsafe(nil), freno_timeouts: nil, gitrpc_count: nil, gitrpc_time_ms: nil, hostname: nil, idle_time_ms: nil, job_class: nil, jobs_enqueued: T.unsafe(nil), jobs_enqueued_by_backend: T.unsafe(nil), memory_private_bytes: nil, memory_private_delta_bytes: nil, memory_rss_bytes: nil, memory_rss_delta_bytes: nil, memory_shared_bytes: nil, memory_shared_delta_bytes: nil, memory_usage_recorded: nil, mysql_primary_queries: nil, mysql_queries: nil, mysql_queries_by_cluster: T.unsafe(nil), mysql_query_types_per_host: T.unsafe(nil), mysql_time_ms: nil, mysql_time_ms_by_cluster: T.unsafe(nil), pid: nil, process_runtime_seconds: nil, queue: nil, revision: nil, success: nil, will_retry: nil, worker_pool: nil); end

  sig { returns(String) }
  def active_job_id; end

  sig { params(value: String).void }
  def active_job_id=(value); end

  sig { returns(String) }
  def aqueduct_job_id; end

  sig { params(value: String).void }
  def aqueduct_job_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def backend; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def backend=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def catalog_service; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def catalog_service=(value); end

  sig { void }
  def clear_active_job_id; end

  sig { void }
  def clear_aqueduct_job_id; end

  sig { void }
  def clear_backend; end

  sig { void }
  def clear_catalog_service; end

  sig { void }
  def clear_cpu_time_ms; end

  sig { void }
  def clear_current_ref; end

  sig { void }
  def clear_enqueue_time_ms; end

  sig { void }
  def clear_enqueue_time_ms_by_backend; end

  sig { void }
  def clear_exception; end

  sig { void }
  def clear_exception_backtrace; end

  sig { void }
  def clear_execution_time_ms; end

  sig { void }
  def clear_freno_errors; end

  sig { void }
  def clear_freno_time_ms; end

  sig { void }
  def clear_freno_time_ms_by_cluster; end

  sig { void }
  def clear_freno_timeouts; end

  sig { void }
  def clear_gitrpc_count; end

  sig { void }
  def clear_gitrpc_time_ms; end

  sig { void }
  def clear_hostname; end

  sig { void }
  def clear_idle_time_ms; end

  sig { void }
  def clear_job_class; end

  sig { void }
  def clear_jobs_enqueued; end

  sig { void }
  def clear_jobs_enqueued_by_backend; end

  sig { void }
  def clear_memory_private_bytes; end

  sig { void }
  def clear_memory_private_delta_bytes; end

  sig { void }
  def clear_memory_rss_bytes; end

  sig { void }
  def clear_memory_rss_delta_bytes; end

  sig { void }
  def clear_memory_shared_bytes; end

  sig { void }
  def clear_memory_shared_delta_bytes; end

  sig { void }
  def clear_memory_usage_recorded; end

  sig { void }
  def clear_mysql_primary_queries; end

  sig { void }
  def clear_mysql_queries; end

  sig { void }
  def clear_mysql_queries_by_cluster; end

  sig { void }
  def clear_mysql_query_types_per_host; end

  sig { void }
  def clear_mysql_time_ms; end

  sig { void }
  def clear_mysql_time_ms_by_cluster; end

  sig { void }
  def clear_pid; end

  sig { void }
  def clear_process_runtime_seconds; end

  sig { void }
  def clear_queue; end

  sig { void }
  def clear_revision; end

  sig { void }
  def clear_success; end

  sig { void }
  def clear_will_retry; end

  sig { void }
  def clear_worker_pool; end

  sig { returns(Integer) }
  def cpu_time_ms; end

  sig { params(value: Integer).void }
  def cpu_time_ms=(value); end

  sig { returns(String) }
  def current_ref; end

  sig { params(value: String).void }
  def current_ref=(value); end

  sig { returns(Integer) }
  def enqueue_time_ms; end

  sig { params(value: Integer).void }
  def enqueue_time_ms=(value); end

  sig { returns(Google::Protobuf::Map[String, Integer]) }
  def enqueue_time_ms_by_backend; end

  sig { params(value: Google::Protobuf::Map[String, Integer]).void }
  def enqueue_time_ms_by_backend=(value); end

  sig { returns(String) }
  def exception; end

  sig { params(value: String).void }
  def exception=(value); end

  sig { returns(String) }
  def exception_backtrace; end

  sig { params(value: String).void }
  def exception_backtrace=(value); end

  sig { returns(Integer) }
  def execution_time_ms; end

  sig { params(value: Integer).void }
  def execution_time_ms=(value); end

  sig { returns(Integer) }
  def freno_errors; end

  sig { params(value: Integer).void }
  def freno_errors=(value); end

  sig { returns(Integer) }
  def freno_time_ms; end

  sig { params(value: Integer).void }
  def freno_time_ms=(value); end

  sig { returns(Google::Protobuf::Map[String, Integer]) }
  def freno_time_ms_by_cluster; end

  sig { params(value: Google::Protobuf::Map[String, Integer]).void }
  def freno_time_ms_by_cluster=(value); end

  sig { returns(Integer) }
  def freno_timeouts; end

  sig { params(value: Integer).void }
  def freno_timeouts=(value); end

  sig { returns(Integer) }
  def gitrpc_count; end

  sig { params(value: Integer).void }
  def gitrpc_count=(value); end

  sig { returns(Integer) }
  def gitrpc_time_ms; end

  sig { params(value: Integer).void }
  def gitrpc_time_ms=(value); end

  sig { returns(String) }
  def hostname; end

  sig { params(value: String).void }
  def hostname=(value); end

  sig { returns(Integer) }
  def idle_time_ms; end

  sig { params(value: Integer).void }
  def idle_time_ms=(value); end

  sig { returns(String) }
  def job_class; end

  sig { params(value: String).void }
  def job_class=(value); end

  sig { returns(Google::Protobuf::Map[String, Integer]) }
  def jobs_enqueued; end

  sig { params(value: Google::Protobuf::Map[String, Integer]).void }
  def jobs_enqueued=(value); end

  sig { returns(Google::Protobuf::Map[String, Integer]) }
  def jobs_enqueued_by_backend; end

  sig { params(value: Google::Protobuf::Map[String, Integer]).void }
  def jobs_enqueued_by_backend=(value); end

  sig { returns(Integer) }
  def memory_private_bytes; end

  sig { params(value: Integer).void }
  def memory_private_bytes=(value); end

  sig { returns(Integer) }
  def memory_private_delta_bytes; end

  sig { params(value: Integer).void }
  def memory_private_delta_bytes=(value); end

  sig { returns(Integer) }
  def memory_rss_bytes; end

  sig { params(value: Integer).void }
  def memory_rss_bytes=(value); end

  sig { returns(Integer) }
  def memory_rss_delta_bytes; end

  sig { params(value: Integer).void }
  def memory_rss_delta_bytes=(value); end

  sig { returns(Integer) }
  def memory_shared_bytes; end

  sig { params(value: Integer).void }
  def memory_shared_bytes=(value); end

  sig { returns(Integer) }
  def memory_shared_delta_bytes; end

  sig { params(value: Integer).void }
  def memory_shared_delta_bytes=(value); end

  sig { returns(T::Boolean) }
  def memory_usage_recorded; end

  sig { params(value: T::Boolean).void }
  def memory_usage_recorded=(value); end

  sig { returns(Integer) }
  def mysql_primary_queries; end

  sig { params(value: Integer).void }
  def mysql_primary_queries=(value); end

  sig { returns(Integer) }
  def mysql_queries; end

  sig { params(value: Integer).void }
  def mysql_queries=(value); end

  sig { returns(Google::Protobuf::Map[String, Integer]) }
  def mysql_queries_by_cluster; end

  sig { params(value: Google::Protobuf::Map[String, Integer]).void }
  def mysql_queries_by_cluster=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::JobComplete::QueryTypeCount]) }
  def mysql_query_types_per_host; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::JobComplete::QueryTypeCount]).void }
  def mysql_query_types_per_host=(value); end

  sig { returns(Integer) }
  def mysql_time_ms; end

  sig { params(value: Integer).void }
  def mysql_time_ms=(value); end

  sig { returns(Google::Protobuf::Map[String, Integer]) }
  def mysql_time_ms_by_cluster; end

  sig { params(value: Google::Protobuf::Map[String, Integer]).void }
  def mysql_time_ms_by_cluster=(value); end

  sig { returns(Integer) }
  def pid; end

  sig { params(value: Integer).void }
  def pid=(value); end

  sig { returns(Integer) }
  def process_runtime_seconds; end

  sig { params(value: Integer).void }
  def process_runtime_seconds=(value); end

  sig { returns(String) }
  def queue; end

  sig { params(value: String).void }
  def queue=(value); end

  sig { returns(String) }
  def revision; end

  sig { params(value: String).void }
  def revision=(value); end

  sig { returns(T::Boolean) }
  def success; end

  sig { params(value: T::Boolean).void }
  def success=(value); end

  sig { returns(T::Boolean) }
  def will_retry; end

  sig { params(value: T::Boolean).void }
  def will_retry=(value); end

  sig { returns(String) }
  def worker_pool; end

  sig { params(value: String).void }
  def worker_pool=(value); end
end

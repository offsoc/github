syntax = "proto3";
package git_hub.launch.services.artifactcache;

option go_package = "github.com/github/launch/services/deploy/artifactcache";

import "pbtypes/github.proto";
import "google/protobuf/timestamp.proto";

service ArtifactCache {
    // Lists the cache contents for a repository
    rpc ListCaches(ListCachesRequest) returns (ListCachesResponse);

    // Delete caches with the given key (may also be filtered by branch)
    rpc DeleteCachesByKey(DeleteCachesByKeyRequest) returns (DeleteCachesByKeyResponse);

    // Delete cache with the given id
    rpc DeleteCacheByID(DeleteCacheByIDRequest) returns (DeleteCacheByIDResponse);
}

message CacheEntry {
    // A unique id for the cache entry
    int64 id = 1;

    // A holder class to specify which cache scope/namespace a request can access
    string scope = 2;

    // The cache key that indentifies the entry
    string key = 3;

    // The cache version, used as a salt to support breaking changes in cache entries
    string version = 4;

    // The size of the cache entry denoted in bytes
    int64 size = 5;

    // When the cache entry was initially created
    google.protobuf.Timestamp created = 6;

    // When the cache entry was last accessed
    google.protobuf.Timestamp lastAccessed = 7;
}

message ListCachesRequest {
    // The global_id of the repository for which the cache list is requested
    pbtypes.git_hub.Identity repository_id = 1;

    // The key to filter the cache list with
    string key = 2;

    // The scope to filter the cache list with
    string scope = 3;

    // The parameter to sort the list by
    string sort = 4;

    // The direction in which to sort the list
    string direction = 5;

    // The page number of the list to go to
    int64 page = 6;

    // Entries per page
    int64 per_page = 7;
}

message ListCachesResponse {
    repeated CacheEntry caches = 1;
    int64 total_caches = 2;
}

message DeleteCachesByKeyRequest {
    // The global_id of the repository for which the caches are to be deleted
    pbtypes.git_hub.Identity repository_id = 1;

    // The key for which caches are to be deleted
    string key = 2;

    // The scope to filter the caches to be deleted
    string scope = 3;
}

message DeleteCachesByKeyResponse {
    repeated CacheEntry caches = 1;
    int64 total_caches = 2;
}

message DeleteCacheByIDRequest {
    // The global_id of the repository for which the cache is to be deleted
    pbtypes.git_hub.Identity repository_id = 1;

    // The id of the cache to be deleted
    int64 cache_id = 2;
}

message DeleteCacheByIDResponse {
    string status = 1;
}
{"version":3,"file":"ui_packages_drag-and-drop_drag-and-drop_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/drag-and-drop/context/DragAndDropContext.tsx","ui/packages/drag-and-drop/hooks/use-drag-and-drop.ts","ui/packages/drag-and-drop/utils/strings.ts","ui/packages/drag-and-drop/utils/announcements.ts","ui/packages/drag-and-drop/utils/types.ts","ui/packages/drag-and-drop/components/DragAndDropMoveModal.module.css","ui/packages/drag-and-drop/components/MoveModalForm.module.css","ui/packages/drag-and-drop/components/MoveModalForm.tsx","ui/packages/drag-and-drop/components/DragAndDropMoveModal.tsx","ui/packages/drag-and-drop/context/SortableItemContext.tsx","ui/packages/drag-and-drop/hooks/use-sortable-item.ts","ui/packages/drag-and-drop/components/MoveModalTrigger.tsx","ui/packages/drag-and-drop/hooks/use-body-class.ts","ui/packages/drag-and-drop/context/RootElementContext.tsx","ui/packages/drag-and-drop/utils/dnd-utils.ts","ui/packages/drag-and-drop/components/KeyboardSpecificInstructionsModal.module.css","ui/packages/drag-and-drop/components/KeyboardSpecificInstructionsModal.tsx","ui/packages/drag-and-drop/components/SortableListContainer.module.css","ui/packages/drag-and-drop/components/SortableListContainer.tsx","ui/packages/drag-and-drop/hooks/use-root-element.ts","ui/packages/drag-and-drop/components/SortableListItem.module.css","ui/packages/drag-and-drop/components/SortableListTrigger.module.css","ui/packages/drag-and-drop/components/SortableListTrigger.tsx","ui/packages/drag-and-drop/components/SortableListItem.tsx","ui/packages/drag-and-drop/components/DragAndDrop.tsx","ui/packages/use-prefers-reduced-motion/use-prefers-reduced-motion.ts","ui/packages/use-safe-storage/use-local-storage.ts"],"sourcesContent":["import {createContext} from 'react'\n\nimport type {DragAndDropDirection, DragAndDropItem} from '../utils/types'\n\nexport const DragAndDropContext = createContext<{\n  dragIndex: number | null\n  moveToPosition: (currentPosition: number, newPosition: number, isBefore?: boolean) => void\n  overId: string | number | null\n  items: DragAndDropItem[]\n  direction: DragAndDropDirection\n  isInDragMode: boolean\n  openMoveModal: (title: string, index: number) => void\n  moveModalItem: {title: string; index: number} | null\n} | null>(null)\n","import {useCallback, useContext} from 'react'\n\nimport {DragAndDropContext} from '../context/DragAndDropContext'\nimport type {DragAndDropDirection, DragAndDropItem} from '../utils/types'\n\n/**\n *\n * @returns a method that will provide the hooks for drag and drop items\n * when an item is selected.\n */\nexport const useDragAndDrop = (): {\n  isDropTarget: (id: string | number) => boolean | null\n  isBefore: (index: number) => boolean | null\n  moveToPosition: (currentPosition: number, newPosition: number, isBefore?: boolean) => void\n  direction: DragAndDropDirection\n  items: DragAndDropItem[]\n  openMoveModal: (title: string, index: number) => void\n  moveModalItem: {title: string; index: number} | null\n  isInDragMode: boolean\n} => {\n  const contextValue = useContext(DragAndDropContext)\n  if (!contextValue) {\n    throw Error(`useDragAndDrop can only be accessed from a DragAndDropContext.Provider component`)\n  }\n  const {overId, dragIndex, moveToPosition, items, direction, moveModalItem, openMoveModal, isInDragMode} = contextValue\n\n  const isDropTarget = useCallback(\n    (id: string | number) => {\n      if (overId === id) {\n        return true\n      }\n      return null\n    },\n    [overId],\n  )\n  const isBefore = (index: number) => dragIndex !== null && index < dragIndex\n\n  return {isDropTarget, isBefore, moveToPosition, items, direction, moveModalItem, openMoveModal, isInDragMode}\n}\n","export const DragAndDropResources = {\n  instructions: (title: string | number) => `Moving ${title}.`,\n  firstItemInList: 'First item in list.',\n  lastItemInList: 'Last item in list.',\n  movedBetween: (itemA: string, itemB: string) => `Between ${itemA} and ${itemB}.`,\n  movePosition: 'Move item one position',\n  cancelDrag: 'Cancel drag mode',\n  endDrag: 'Place item',\n  cancelMove: (title: string) => `Cancel moving ${title}`,\n  successfulFirstMove: (title: string) => `${title} successfully moved to first item in list.`,\n  successfulLastMove: (title: string) => `${title} successfully moved to last item in list.`,\n  successfulMove: (titleA: string, titleB: string, titleC: string) =>\n    `${titleA} successfully moved between ${titleB} and ${titleC}.`,\n  successfulNoMove: (title: string) => `${title} did not move.`,\n  emptyAnnouncement: () => '',\n  entryLessThanOne: 'Entry must be greater than 0.',\n  entryGreaterThanList: (length: number) => `Entry must be less than or equal to ${length}.`,\n  entryIsRequired: 'Entry is required.',\n  entryIsInvalid: 'Entry is invalid.',\n}\n\nexport const DragAndDropMovingResources = {\n  itemWillNotBeMoved: (title: string) => `${title} will not be moved.`,\n  movedToFirst: (title: string) => `${title} will be first item in the list.`,\n  movedToLast: (title: string) => `${title} will be last item in the list.`,\n  movedBetween: (title: string, item1: string | undefined, item2: string | undefined) =>\n    `${title} will be between ${item1} and ${item2}.`,\n  cannotBeMoved: (title: string) => `${title} cannot be moved to an invalid position.`,\n}\n","import {debounce} from '@github/mini-throttle'\nimport {announce} from '@github-ui/aria-live'\n\nimport {DragAndDropResources} from './strings'\nimport type {DragAndDropItem} from './types'\n\nconst emptyAnnouncement = () => ''\n\n/**\n * Announces a message to screen readers at a slowed-down rate. This is useful when you want to announce\n * drag and drop movements to screen readers but you don't want to overwhelm the user with too many announcements\n * in rapid succession. Do not use this function if interactions that trigger announcements do not happen rapidly.\n */\nexport const debounceAnnouncement = debounce((announcement: string) => {\n  announce(announcement, {assertive: true})\n}, 100)\n\n/*\n * When passed into dnd-kit's DNDContext default announcements will be turned off.\n * This is useful and should only be used when you want to provide your own announcements.\n */\nexport const defaultAnnouncementsOff = {\n  onDragStart: emptyAnnouncement,\n  onDragOver: emptyAnnouncement,\n  onDragMove: emptyAnnouncement,\n  onDragEnd: emptyAnnouncement,\n  onDragCancel: emptyAnnouncement,\n}\n\nexport function successfulMoveAnnouncement({\n  newIndex,\n  currentIndex,\n  items,\n  title,\n}: {\n  newIndex: number\n  currentIndex: number\n  items: DragAndDropItem[]\n  title: string\n}) {\n  const itemIds = items.map(item => item.id)\n  if (newIndex === currentIndex) {\n    announce(DragAndDropResources.successfulNoMove(title), {assertive: true})\n  } else if (newIndex === 0) {\n    announce(DragAndDropResources.successfulFirstMove(title), {assertive: true})\n  } else if (newIndex === items.length - 1) {\n    announce(DragAndDropResources.successfulLastMove(title), {assertive: true})\n  } else {\n    const isBefore = newIndex <= currentIndex\n    const itemA = isBefore ? itemIds[newIndex - 1] : itemIds[newIndex + 1]\n    const itemB = itemIds[newIndex]\n    const itemATitle = items.find(item => item.id === itemA)?.title ?? ''\n    const itemBTitle = items.find(item => item.id === itemB)?.title ?? ''\n\n    announce(DragAndDropResources.successfulMove(title, itemATitle, itemBTitle), {assertive: true})\n  }\n}\n","import type {KeyboardSensorOptions} from '@dnd-kit/core'\n\n/**\n * Metadata that will be attached to the draggable element.\n */\nexport type DragDropMetadata<T> = {id: T}\n\nexport type keyboardAndSRSensorOption = Omit<KeyboardSensorOptions, 'onActivation'> & {\n  onActivation?({event, returnFocusRef}: {event: KeyboardEvent; returnFocusRef: React.RefObject<HTMLElement>}): void\n}\n\nexport interface OnDropArgs<T> {\n  /**\n   * Metadata of the dragged item\n   */\n  dragMetadata: DragDropMetadata<T>\n  /**\n   * Metadata of the item that was dropped on\n   */\n  dropMetadata: DragDropMetadata<T>\n  /**\n   * Is the dragged item before the drop target\n   */\n  isBefore: boolean\n}\n\nexport type DragAndDropDirection = 'horizontal' | 'vertical'\n\nexport enum DragAndDropMoveOptions {\n  BEFORE = 'Move item before',\n  AFTER = 'Move item after',\n  ROW = 'Move to row',\n}\n\nexport type DragAndDropItem = {\n  /**\n   * Id of the drag and drop item being manipulated\n   */\n  id: string | number\n  /**\n   * Title of the drag and drop item being manipulated\n   */\n  title: string\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogBody\":\"DragAndDropMoveModal-module__dialogBody--dmAHd\",\"form\":\"DragAndDropMoveModal-module__form--V4WT_\",\"title\":\"DragAndDropMoveModal-module__title--w8GQc\",\"dialogTitle\":\"DragAndDropMoveModal-module__dialogTitle--MyO5Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"MoveModalForm-module__form--LS8Xy\",\"autoComplete\":\"MoveModalForm-module__autoComplete--r2LJ6\"};","import {testIdProps} from '@github-ui/test-id-props'\nimport {SearchIcon} from '@primer/octicons-react'\nimport {Autocomplete, FormControl, Select, TextInput} from '@primer/react'\nimport {clsx} from 'clsx'\nimport {forwardRef, useCallback, useMemo, useState} from 'react'\n\nimport {DragAndDropMoveOptions} from '../utils/types'\nimport styles from './MoveModalForm.module.css'\n\ntype AutocompleteItem = {text: string; id: string}\n\ninterface InputProps {\n  /**\n   * The list of items to move\n   */\n  options: Array<{title: string; id: string | number}>\n  /**\n   * The move action selection\n   */\n  moveAction: string | undefined\n  /**\n   * Callback to update the index of the item being moved\n   */\n  onPositionChange: (index?: number) => void\n  /**\n   * Callback to update the dropdown selection\n   */\n  onMoveActionChange: (moveAction: DragAndDropMoveOptions) => void\n  /**\n   * The initial position of the item being moved\n   */\n  initialPosition: number\n  /**\n   * The error message to display\n   */\n  error?: string\n}\n\nconst INPUT_LABEL = 'move-modal-input-label'\n\nconst isValidBeforeMove = (index: number, initialIndex: number) => {\n  return index !== initialIndex + 1 && index !== initialIndex\n}\n\nconst isValidAfterMove = (index: number, initialIndex: number) => {\n  return index !== initialIndex - 1 && index !== initialIndex\n}\n\n/**\n * A form that allows the user to move an item to a new position in the list.\n *\n * @param props InputProps\n */\nexport const MoveModalForm = forwardRef<HTMLInputElement, InputProps>(function NameInput(\n  {onPositionChange, onMoveActionChange, moveAction, options, initialPosition, error},\n  ref,\n) {\n  const [filterValue, setFilterValue] = useState('')\n\n  const autocompleteTemplateList = useMemo(() => {\n    const initialIndex = initialPosition - 1\n\n    const beforeOptions: AutocompleteItem[] = []\n    const afterOptions: AutocompleteItem[] = []\n\n    for (let index = 0; index < options.length; index++) {\n      /* Checks if */\n      if (isValidBeforeMove(index, initialIndex)) {\n        beforeOptions.push({\n          text: options[index]?.title || '',\n          id: `${index + 1}`,\n        })\n      }\n\n      if (isValidAfterMove(index, initialIndex)) {\n        afterOptions.push({\n          text: options[index]?.title || '',\n          id: `${index + 1}`,\n        })\n      }\n    }\n    return {before: beforeOptions, after: afterOptions}\n  }, [initialPosition, options])\n\n  const [selectedAutocomplete, setSelectedAutocomplete] = useState<AutocompleteItem>({\n    text: '',\n    id: '0',\n  })\n\n  const onPositionInputChange = useCallback(\n    (value?: string | number) => {\n      if (value === undefined || value === '') {\n        return onPositionChange(undefined)\n      }\n      const parsedValue = typeof value === 'string' ? parseInt(value, 10) : value\n      onPositionChange(parsedValue - 1)\n    },\n    [onPositionChange],\n  )\n\n  const autocompleteSelection = useCallback(\n    (selectedItem: AutocompleteItem) => {\n      setSelectedAutocomplete(selectedItem)\n      onPositionInputChange(selectedItem.id.toString())\n    },\n    [onPositionInputChange],\n  )\n\n  const fuzzySearchFilter = (item: AutocompleteItem) => {\n    return item.text.toLowerCase().includes(filterValue.toLowerCase())\n  }\n\n  const onSelectedChange = (selected: AutocompleteItem | AutocompleteItem[]) => {\n    if (!Array.isArray(selected)) {\n      return\n    }\n\n    const newlySelected = selected.find(function (item) {\n      if (item?.id) {\n        return selectedAutocomplete.id !== item.id\n      }\n    })\n\n    if (newlySelected) {\n      autocompleteSelection(newlySelected)\n    }\n  }\n\n  const onFilterChange = useMemo(\n    () => (value: string) => {\n      const item = autocompleteTemplateList[moveAction === DragAndDropMoveOptions.BEFORE ? 'before' : 'after'].find(\n        i => i.text === value,\n      )\n      if (item) {\n        autocompleteSelection(item)\n      } else {\n        onPositionInputChange(value)\n      }\n    },\n    [autocompleteTemplateList, moveAction, autocompleteSelection, onPositionInputChange],\n  )\n\n  const errorProps = error\n    ? {\n        'aria-invalid': true,\n        'aria-describedby': 'position-validation',\n      }\n    : null\n\n  return (\n    <div className={clsx(styles.form)}>\n      <FormControl required>\n        <FormControl.Label>Action</FormControl.Label>\n        <Select\n          block\n          onChange={e => {\n            onMoveActionChange(e.currentTarget.value as DragAndDropMoveOptions)\n            onPositionChange(initialPosition)\n          }}\n        >\n          {Object.values(DragAndDropMoveOptions).map(item => (\n            <Select.Option key={item} value={item}>\n              {item}\n            </Select.Option>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl required>\n        <FormControl.Label id={INPUT_LABEL}>{moveAction}</FormControl.Label>\n        {moveAction === DragAndDropMoveOptions.ROW ? (\n          <TextInput\n            block\n            min={1}\n            max={options.length}\n            defaultValue={initialPosition}\n            type=\"number\"\n            onChange={ev => onPositionInputChange(ev.target.value)}\n            ref={ref}\n            {...errorProps}\n            {...testIdProps('drag-and-drop-move-modal-position-input')}\n          />\n        ) : (\n          <Autocomplete>\n            <Autocomplete.Input\n              placeholder={'Position'}\n              value={selectedAutocomplete.text}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                onFilterChange(event.target.value)\n                setFilterValue(event.target.value)\n              }}\n              openOnFocus={false}\n              leadingVisual={SearchIcon}\n              className=\"width-full\"\n              ref={ref}\n              {...errorProps}\n              {...testIdProps('drag-and-drop-move-modal-position-input')}\n            />\n            <Autocomplete.Overlay className={clsx(styles.autoComplete)}>\n              <Autocomplete.Menu\n                items={autocompleteTemplateList[moveAction === DragAndDropMoveOptions.BEFORE ? 'before' : 'after']}\n                aria-labelledby={INPUT_LABEL}\n                selectedItemIds={[selectedAutocomplete.id.toString()]}\n                onSelectedChange={onSelectedChange}\n                filterFn={fuzzySearchFilter}\n              />\n            </Autocomplete.Overlay>\n          </Autocomplete>\n        )}\n        {error && (\n          <FormControl.Validation id=\"position-validation\" variant=\"error\">\n            {error}\n          </FormControl.Validation>\n        )}\n      </FormControl>\n    </div>\n  )\n})\n\ntry{ MoveModalForm.displayName ||= 'MoveModalForm' } catch {}","import {announce} from '@github-ui/aria-live'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {useDebounce} from '@github-ui/use-debounce'\nimport {AlertIcon, InfoIcon} from '@primer/octicons-react'\nimport {Button, Flash, Octicon, useOnOutsideClick} from '@primer/react'\nimport {Dialog} from '@primer/react/experimental'\nimport {clsx} from 'clsx'\nimport type {FormEvent} from 'react'\nimport {useEffect, useMemo, useRef, useState} from 'react'\n\nimport {useDragAndDrop} from '../hooks/use-drag-and-drop'\nimport {successfulMoveAnnouncement} from '../utils/announcements'\nimport {DragAndDropMovingResources, DragAndDropResources} from '../utils/strings'\nimport {type DragAndDropItem, DragAndDropMoveOptions} from '../utils/types'\nimport styles from './DragAndDropMoveModal.module.css'\nimport {MoveModalForm} from './MoveModalForm'\n\ninterface DragAndDropMoveModalProps {\n  /**\n   * Callback to close the dialog\n   */\n  closeDialog: () => void\n}\n\nconst errorMessage = (items: DragAndDropItem[], index?: number): string => {\n  if (index === undefined) {\n    return DragAndDropResources.entryIsRequired\n  }\n  if (index < 0) {\n    return DragAndDropResources.entryLessThanOne\n  }\n  if (index > items.length) {\n    return DragAndDropResources.entryGreaterThanList(items.length)\n  }\n\n  return DragAndDropResources.entryIsInvalid\n}\n\nconst isInvalid = (items: DragAndDropItem[], index?: number) =>\n  index === undefined || index < 0 || index >= items.length || isNaN(index)\n\n/**\n * A modal that allows the user to move an item to a new position in the list.\n *\n * @param props DragAndDropMoveModalProps\n */\nexport const DragAndDropMoveModal = ({closeDialog}: DragAndDropMoveModalProps) => {\n  const {moveModalItem} = useDragAndDrop()\n  const {title, index: currentIndex} = moveModalItem ?? {title: '', index: -1}\n  const [index, setIndex] = useState<number | undefined>()\n  const [moveAction, setMoveAction] = useState(DragAndDropMoveOptions.BEFORE)\n  const [moveHelpText, setMoveHelpText] = useState(`${title} will be moved ...`)\n  const [invalidPosition, setInvalidPosition] = useState(false)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const {moveToPosition, items} = useDragAndDrop()\n  const [error, setError] = useState<string | undefined>()\n  const formRef = useRef<HTMLInputElement | null>(null)\n\n  const updateHelperText = useMemo(\n    () => (idx?: number) => {\n      let message = ''\n\n      if (idx === undefined) {\n        setInvalidPosition(false)\n        message = `${title} will be moved ...`\n      } else if (isInvalid(items, idx)) {\n        setInvalidPosition(true)\n        message = DragAndDropMovingResources.cannotBeMoved(title)\n      } else {\n        setInvalidPosition(false)\n        if (idx === currentIndex && moveAction !== DragAndDropMoveOptions.AFTER) {\n          message = DragAndDropMovingResources.itemWillNotBeMoved(title)\n        } else if (idx === 0 && moveAction !== DragAndDropMoveOptions.AFTER) {\n          message = DragAndDropMovingResources.movedToFirst(title)\n        } else if (idx === items.length - 1 && moveAction !== DragAndDropMoveOptions.BEFORE) {\n          message = DragAndDropMovingResources.movedToLast(title)\n        } else {\n          const itemBefore = items[idx - 1]?.title\n          const itemAfter = items[idx + 1]?.title\n          switch (moveAction) {\n            case DragAndDropMoveOptions.BEFORE:\n              message = DragAndDropMovingResources.movedBetween(title, itemBefore, items[idx]?.title)\n              break\n            case DragAndDropMoveOptions.AFTER:\n              message = DragAndDropMovingResources.movedBetween(title, items[idx]?.title, itemAfter)\n              break\n            case DragAndDropMoveOptions.ROW:\n              if (idx < currentIndex) {\n                message = DragAndDropMovingResources.movedBetween(title, itemBefore, items[idx]?.title)\n              } else {\n                message = DragAndDropMovingResources.movedBetween(title, items[idx]?.title, itemAfter)\n              }\n              break\n          }\n        }\n      }\n      setMoveHelpText(message)\n    },\n    [title, items, moveAction, currentIndex],\n  )\n  const debouncedUpdateHelperText = useDebounce(updateHelperText, 100)\n\n  useEffect(() => {\n    if (moveAction !== DragAndDropMoveOptions.ROW) {\n      setIndex(undefined)\n      setError(undefined)\n      debouncedUpdateHelperText()\n    } else {\n      setIndex(currentIndex)\n      setError(undefined)\n      debouncedUpdateHelperText(currentIndex)\n    }\n  }, [moveAction, debouncedUpdateHelperText, currentIndex])\n\n  const onSubmit = (ev: FormEvent) => {\n    ev.preventDefault() // prevent page reload\n    if (index === undefined || isInvalid(items, index)) {\n      setError(errorMessage(items, index))\n      formRef.current?.focus()\n      return\n    }\n    switch (moveAction) {\n      case DragAndDropMoveOptions.ROW:\n        if (index >= currentIndex) moveToPosition(currentIndex, index, false)\n        else moveToPosition(currentIndex, index, true)\n        break\n      case DragAndDropMoveOptions.BEFORE:\n        moveToPosition(currentIndex, index, true)\n        break\n      case DragAndDropMoveOptions.AFTER:\n      default:\n        moveToPosition(currentIndex, index, false)\n        break\n    }\n    closeDialog()\n    successfulMoveAnnouncement({\n      newIndex: index,\n      currentIndex,\n      items,\n      title,\n    })\n  }\n\n  // Dialog doesn't use Overlay or call `useOnOutsideClick` under the hood. This means that\n  // it doesn't get registered as an overlay in the stack, which means it doesn't intercept\n  // and stop propagating clicks. This means that if there are any open `Overlay`s underneath\n  // this `Dialog`, clicks in this dialog will register as clicks outside of those overlays,\n  // causing them to try to close.\n  // We can prevent this by registering a fake `useOnClickOutside` hook to make this look like\n  // a regular `Overlay`. Clicks inside will no-op and the hook will prevent them from propagating\n  // to other overlays; clicks outside need to have `preventDefault` called on them to stop them\n  // from propagating.\n  useOnOutsideClick({containerRef, onClickOutside: e => e.preventDefault()})\n\n  return (\n    <Dialog\n      title={<span className={clsx(styles.title)}>Move selected item</span>}\n      onClose={() => {\n        closeDialog()\n        announce(DragAndDropResources.cancelMove(title), {assertive: true})\n      }}\n      width=\"large\"\n      ref={containerRef}\n      renderBody={() => (\n        // By default there is no way to wrap the footer and body in one element, so we\n        // have to custom-render the footer inside the body. Otherwise we can't use `submit`\n        // button to submit the form\n        <form\n          onSubmit={onSubmit}\n          {...testIdProps('move-modal-form')}\n          // Stopping blur propagation fixes a bug where the table thinks the cell editor was\n          // blurred when it was really an input inside this dialog.\n          onBlur={e => e.stopPropagation()}\n          className={clsx(styles.form)}\n          noValidate\n        >\n          <Dialog.Body className={clsx(styles.dialogBody)}>\n            <div className={clsx(styles.dialogTitle)}>\n              <span className=\"text-bold\">Item</span>\n              <span>{title}</span>\n            </div>\n            <MoveModalForm\n              options={items}\n              onPositionChange={i => {\n                setIndex(i)\n                setError(undefined)\n                debouncedUpdateHelperText(i)\n              }}\n              initialPosition={currentIndex + 1}\n              moveAction={moveAction}\n              onMoveActionChange={setMoveAction}\n              error={error}\n              ref={formRef}\n            />\n            <Flash\n              aria-live=\"assertive\"\n              variant={invalidPosition ? 'warning' : 'default'}\n              {...testIdProps('drag-and-drop-move-modal-flash')}\n            >\n              <Octicon icon={invalidPosition ? AlertIcon : InfoIcon} className=\"fgColor-accent\" />\n              {moveHelpText}\n            </Flash>\n          </Dialog.Body>\n\n          <Dialog.Footer className=\"p-2\">\n            <Button type=\"submit\" variant=\"primary\" {...testIdProps('drag-and-drop-move-modal-move-item-button')}>\n              Move item\n            </Button>\n          </Dialog.Footer>\n        </form>\n      )}\n    />\n  )\n}\n\ntry{ DragAndDropMoveModal.displayName ||= 'DragAndDropMoveModal' } catch {}","import {createContext} from 'react'\n\nexport const SortableItemContext = createContext<{\n  title: string\n  index: number\n  id: string | number\n}>({title: '', index: 0, id: ''})\n","import {useContext} from 'react'\n\nimport {SortableItemContext} from '../context/SortableItemContext'\n\nexport const useSortableItem = () => {\n  const context = useContext(SortableItemContext)\n  if (!context) {\n    throw new Error('useSortableItem must be used within a SortableItemContextProvider')\n  }\n  return context\n}\n","import type React from 'react'\n\nimport {useDragAndDrop} from '../hooks/use-drag-and-drop'\nimport {useSortableItem} from '../hooks/use-sortable-item'\n\nexport interface MoveModalTriggerProps<T> {\n  /**\n   * The clickable component that will trigger the move modal to open\n   */\n  Component: T\n}\n\n/**\n * A trigger component that opens the move modal when clicked.\n *\n * @param props MoveModalTriggerProps\n */\nexport const MoveModalTrigger = <T extends React.ElementType>({\n  Component,\n  ...props\n}: MoveModalTriggerProps<T> & React.ComponentProps<T>) => {\n  const {title, index} = useSortableItem()\n  const {items, openMoveModal} = useDragAndDrop()\n\n  const openDialog = () => {\n    openMoveModal(title, index)\n  }\n\n  if (items.length === 1) return null\n\n  return (\n    <>\n      <Component {...props} onClick={openDialog} />\n    </>\n  )\n}\n\ntry{ MoveModalTrigger.displayName ||= 'MoveModalTrigger' } catch {}","import {useEffect, useRef} from 'react'\n\nexport function useBodyClass<T>(className: string, dependency: T) {\n  const hasAdded = useRef(false)\n\n  useEffect(() => {\n    const enableClass = Boolean(dependency)\n\n    if (enableClass) {\n      document.body.classList.add(className)\n      hasAdded.current = true\n    } else {\n      // Only remove the class if the caller was responsible for adding it.\n      // This way, multiple components can use the same class without interference.\n      if (hasAdded.current) document.body.classList.remove(className)\n      hasAdded.current = false\n    }\n\n    return () => {\n      if (hasAdded.current) document.body.classList.remove(className)\n      hasAdded.current = false\n    }\n  }, [className, dependency])\n}\n","import {createContext} from 'react'\n\nexport const RootElementContext = createContext<HTMLElement | undefined>(undefined)\n\ntry{ RootElementContext.displayName ||= 'RootElementContext' } catch {}","import {\n  type Activators,\n  type CollisionDescriptor,\n  type CollisionDetection,\n  KeyboardCode,\n  type KeyboardCodes,\n  KeyboardSensor,\n  type KeyboardSensorOptions,\n} from '@dnd-kit/core'\nimport {restrictToFirstScrollableAncestor, restrictToVerticalAxis} from '@dnd-kit/modifiers'\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter],\n}\n\nexport const modifiers = [restrictToVerticalAxis, restrictToFirstScrollableAncestor]\n\nexport class CustomKeyboardSensor extends KeyboardSensor {\n  static override activators: Activators<KeyboardSensorOptions> = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (event: React.KeyboardEvent, {keyboardCodes = defaultKeyboardCodes, onActivation}, {active}) => {\n        const {code} = event.nativeEvent\n\n        if (keyboardCodes.start.includes(code)) {\n          const activator = active.activatorNode.current\n\n          if (activator && event.target !== activator) {\n            return false\n          }\n          event.preventDefault()\n\n          onActivation?.({event: event.nativeEvent})\n\n          return true\n        }\n\n        return false\n      },\n    },\n    {\n      eventName: 'onClick' as const,\n      handler: (event: React.MouseEvent, {onActivation}) => {\n        event.preventDefault()\n        const keyboardEvent = new KeyboardEvent('keydown', {\n          key: 'Enter',\n          code: 'Enter',\n        })\n        onActivation?.({event: keyboardEvent})\n\n        return true\n      },\n    },\n  ]\n}\n\n/**\n * Works like `closestCenter` but along the vertical axis only. This is important for roadmap, where widths are\n * infinite and the horizontal axis is not meaningful.\n */\nexport const closestVerticalCenter: CollisionDetection = ({collisionRect, droppableRects, droppableContainers}) => {\n  const collisionRectCenter = (collisionRect.top + collisionRect.bottom) / 2\n\n  const collisions: CollisionDescriptor[] = []\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer\n    const rect = droppableRects.get(id)\n\n    if (rect) {\n      const droppableRectCenter = (rect.top + rect.bottom) / 2\n      const distBetween = Math.abs(collisionRectCenter - droppableRectCenter)\n\n      collisions.push({id, data: {droppableContainer, value: distBetween}})\n    }\n  }\n\n  return collisions.sort((a, b) => a.data.value - b.data.value)\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"instructionContainer\":\"KeyboardSpecificInstructionsModal-module__instructionContainer--g3Rqe\",\"instruction\":\"KeyboardSpecificInstructionsModal-module__instruction--xgBCv\",\"footerContainer\":\"KeyboardSpecificInstructionsModal-module__footerContainer--vpYKm\",\"footerForm\":\"KeyboardSpecificInstructionsModal-module__footerForm--vn8QN\",\"footerButton\":\"KeyboardSpecificInstructionsModal-module__footerButton--cmDEw\"};","import type {KeyboardCodes} from '@dnd-kit/core'\nimport {KeyboardKey} from '@github-ui/keyboard-key'\nimport {useLocalStorage} from '@github-ui/use-safe-storage/local-storage'\nimport {Button, Checkbox, FormControl} from '@primer/react'\nimport type {DialogProps} from '@primer/react/experimental'\nimport {Dialog} from '@primer/react/experimental'\nimport {clsx} from 'clsx'\nimport {Fragment} from 'react'\n\nimport {defaultKeyboardCodes} from '../utils/dnd-utils'\nimport {DragAndDropResources} from '../utils/strings'\nimport type {DragAndDropDirection} from '../utils/types'\nimport styles from './KeyboardSpecificInstructionsModal.module.css'\n\ntype KeyboardSpecificInstructionsModalProps = {\n  /**\n   * Whether the modal is open\n   */\n  isOpen: boolean\n  /**\n   * Callback called when the modal is closed\n   */\n  onClose: () => void\n  /**\n   * The direction of the list\n   */\n  direction: DragAndDropDirection\n  /**\n   * Optional. Custom keyboard codes to use for drag and drop\n   */\n  keyboardCodes?: KeyboardCodes\n}\n\ntype KeyboardSpecificInstructionsFooterProps = Pick<KeyboardSpecificInstructionsModalProps, 'onClose'> & DialogProps\n\n/*\n * Key used to store the user preference to stop showing the keyboard instructions modal\n */\nexport const HideKeyboardSpecificInstructionsModalKey = 'hideKeyboardSpecificInstructions'\n\nconst KeyboardSpecificInstructionsFooter = ({onClose}: KeyboardSpecificInstructionsFooterProps) => {\n  const [doNotShowAgain, setDoNotShowAgain] = useLocalStorage(HideKeyboardSpecificInstructionsModalKey, false)\n  return (\n    <div className={clsx(styles.footerContainer)}>\n      <div className={clsx(styles.footerForm)}>\n        <FormControl>\n          <Checkbox checked={doNotShowAgain} onChange={() => setDoNotShowAgain(!doNotShowAgain)} />\n          <FormControl.Label>{`Don't show this again`}</FormControl.Label>\n        </FormControl>\n      </div>\n      <div className={clsx(styles.footerButton)}>\n        <Button onClick={onClose}>Close</Button>\n      </div>\n    </div>\n  )\n}\n\n/* Modal component that displays keyboard instructions to perform drag and drop actions.\n * Using the Primer Dialog component.\n *\n * @param props KeyboardSpecificInstructionsModalProps\n */\nexport const KeyboardSpecificInstructionsModal = ({\n  isOpen,\n  onClose,\n  direction,\n  keyboardCodes = defaultKeyboardCodes,\n}: KeyboardSpecificInstructionsModalProps) => {\n  if (!isOpen) return null\n\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    e.stopPropagation()\n    if (e.code === 'Escape') {\n      onClose()\n    }\n  }\n\n  return (\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div onKeyDown={onKeyDown}>\n      <Dialog\n        title=\"How to move objects via keyboard\"\n        subtitle=\"This navigation is only available when move mode is activated.\"\n        onClose={onClose}\n        renderFooter={() => (\n          <Dialog.Footer className=\"d-flex\">\n            <KeyboardSpecificInstructionsFooter onClose={onClose} />\n          </Dialog.Footer>\n        )}\n      >\n        <table className={clsx(styles.instructionContainer)}>\n          <thead className=\"sr-only\">\n            <tr>\n              <th className=\"text=bold\">Action</th>\n              <th className=\"text=bold\">Keyboard Shortcut</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr className={clsx(styles.instruction)}>\n              <td>{DragAndDropResources.cancelDrag}</td>\n              <td>\n                {keyboardCodes.cancel.map((key, index) => (\n                  <Fragment key={key}>\n                    {index > 0 && <span> / </span>}\n                    <KeyboardKey keys={key} />\n                  </Fragment>\n                ))}\n              </td>\n            </tr>\n            <tr className={clsx(styles.instruction)}>\n              <td>{DragAndDropResources.movePosition}</td>\n              <td>\n                <KeyboardKey keys={direction === 'vertical' ? 'up' : 'left'} />\n                <span> / </span>\n                <KeyboardKey keys={direction === 'vertical' ? 'down' : 'right'} />\n              </td>\n            </tr>\n            <tr className={clsx(styles.instruction, 'border-bottom-0')}>\n              <td>{DragAndDropResources.endDrag}</td>\n              <td>\n                {keyboardCodes.end.map((key, index) => (\n                  <Fragment key={key}>\n                    {index > 0 && <span> / </span>}\n                    <KeyboardKey keys={key} />\n                  </Fragment>\n                ))}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Dialog>\n    </div>\n  )\n}\n\ntry{ KeyboardSpecificInstructionsFooter.displayName ||= 'KeyboardSpecificInstructionsFooter' } catch {}\ntry{ KeyboardSpecificInstructionsModal.displayName ||= 'KeyboardSpecificInstructionsModal' } catch {}","// extracted by mini-css-extract-plugin\nexport default {\"isKeyboardDragging\":\"SortableListContainer-module__isKeyboardDragging--rQZ0q\",\"container\":\"SortableListContainer-module__container--MDMg5\"};","import {\n  closestCorners,\n  DndContext,\n  type DragEndEvent,\n  type DragMoveEvent,\n  DragOverlay,\n  type DragStartEvent,\n  type KeyboardCodes,\n  type KeyboardSensorOptions,\n  MouseSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core'\nimport {restrictToHorizontalAxis, restrictToVerticalAxis} from '@dnd-kit/modifiers'\nimport {\n  horizontalListSortingStrategy,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable'\nimport {announce} from '@github-ui/aria-live'\nimport {ssrSafeDocument} from '@github-ui/ssr-utils'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {useClientValue} from '@github-ui/use-client-value'\nimport {usePrefersReducedMotion} from '@github-ui/use-prefers-reduced-motion'\nimport {useLocalStorage} from '@github-ui/use-safe-storage/local-storage'\nimport {clsx} from 'clsx'\nimport {type HTMLAttributes, useCallback, useEffect, useMemo, useState} from 'react'\nimport {createPortal} from 'react-dom'\n\nimport {DragAndDropContext} from '../context/DragAndDropContext'\nimport {useBodyClass} from '../hooks/use-body-class'\nimport {useRootElement} from '../hooks/use-root-element'\nimport {debounceAnnouncement, defaultAnnouncementsOff, successfulMoveAnnouncement} from '../utils/announcements'\nimport {closestVerticalCenter, CustomKeyboardSensor} from '../utils/dnd-utils'\nimport {DragAndDropResources} from '../utils/strings'\nimport type {DragAndDropDirection, DragDropMetadata, OnDropArgs} from '../utils/types'\nimport {DragAndDropMoveModal} from './DragAndDropMoveModal'\nimport {\n  HideKeyboardSpecificInstructionsModalKey,\n  KeyboardSpecificInstructionsModal,\n} from './KeyboardSpecificInstructionsModal'\nimport styles from './SortableListContainer.module.css'\n\ninterface SortableContainerProps<T extends string | number, K extends {id: T; title: string}>\n  extends Omit<HTMLAttributes<HTMLUListElement>, 'onDrop'> {\n  /**\n   * Array of ids and titles of the items\n   */\n  items: K[]\n  /**\n   * Direction of the list, defaults to vertical\n   */\n  direction?: DragAndDropDirection\n  /**\n   * Callback called when a drop occurs\n   */\n  onDrop: (args: OnDropArgs<T>) => void\n  /**\n   * Component type to render for drag and drop container\n   */\n  as?: React.ElementType\n  /**\n   * Render function for overlay\n   */\n  renderOverlay: (item: K, index: number) => React.ReactNode\n  /**\n   * Keyboard codes to use for drag and drop\n   */\n  keyboardCodes?: KeyboardCodes\n}\n\n/**\n * A container for a list of sortable items. This component is responsible for\n * managing the drag and drop state and passing it down to the items.\n *\n * @param props SortableContainerProps\n */\nexport const SortableListContainer = <T extends string | number, K extends {id: T; title: string}>({\n  onDrop,\n  items,\n  direction = 'vertical',\n  children,\n  as: As = 'ul',\n  renderOverlay,\n  keyboardCodes,\n  ...htmlULprops\n}: SortableContainerProps<T, K>) => {\n  const [isDragging, setIsDragging] = useState(false)\n  const [overIndex, setOverIndex] = useState(0)\n  const [hasMoved, setHasMoved] = useState(false)\n  const [dragIndex, setDragIndex] = useState(0)\n  const [overId, setOverId] = useState<T | null>(null)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [doNotShowAgain] = useLocalStorage(HideKeyboardSpecificInstructionsModalKey, false)\n  const [isKeyboardDragging, setIsKeyboardDragging] = useState(false)\n  const [moveModalItem, setMoveModalItem] = useState<{title: string; index: number} | null>(null)\n  const itemIds = items.map(item => item.id)\n  const titleMap = useMemo(() => {\n    return items.reduce(\n      (map, item) => {\n        map[item.id] = item.title\n        return map\n      },\n      {} as Record<T, string>,\n    )\n  }, [items])\n\n  useBodyClass('is-dragging', isDragging)\n  useBodyClass(styles.isKeyboardDragging, isKeyboardDragging)\n  const prefersReducedMotion = usePrefersReducedMotion()\n\n  const onInstructionsClose = useCallback(() => {\n    setIsModalOpen(false)\n  }, [])\n\n  const handleDragStart = useCallback(\n    (event: DragStartEvent) => {\n      if (!event.active) return\n      announce(DragAndDropResources.instructions(titleMap[event.active.id as T] ?? event.active.id), {assertive: true})\n      const dragMetadata = event.active.data.current?.metadata as DragDropMetadata<T>\n      setOverId(dragMetadata?.id ?? null)\n      setDragIndex((event.active.data.current?.sortable.index as number) ?? 0)\n      setOverIndex((event.active.data.current?.sortable.index as number) ?? 0)\n\n      setIsDragging(true)\n    },\n    [titleMap],\n  )\n\n  const handleDragMove = useCallback(\n    (event: DragMoveEvent) => {\n      const overMetadata = event.over?.data.current?.metadata as DragDropMetadata<T>\n      const over = overMetadata?.id ?? null\n      setOverId(over)\n\n      if (!hasMoved) {\n        setHasMoved(true)\n      }\n\n      if (event.over && event.over.data.current) {\n        const positionIndex: number = event.over.data.current.sortable.index\n\n        setOverIndex(positionIndex)\n      }\n    },\n    [hasMoved],\n  )\n\n  /* Announce the drag item's current location when it changes */\n  useEffect(() => {\n    if (isDragging && hasMoved) {\n      if (overIndex === 0) {\n        debounceAnnouncement(DragAndDropResources.firstItemInList)\n      } else if (overIndex === itemIds.length - 1) {\n        debounceAnnouncement(DragAndDropResources.lastItemInList)\n      } else {\n        const isBefore = overIndex <= dragIndex\n        const originalPlacement = overIndex === dragIndex\n        const itemA = isBefore ? (itemIds[overIndex - 1] as T) : (itemIds[overIndex + 1] as T)\n        const itemB = originalPlacement ? (itemIds[overIndex + 1] as T) : (itemIds[overIndex] as T)\n        debounceAnnouncement(DragAndDropResources.movedBetween(titleMap[itemA], titleMap[itemB]))\n      }\n    }\n  }, [isDragging, hasMoved, overIndex, titleMap, itemIds, dragIndex])\n\n  const handleDragCancel = useCallback(\n    (event: DragEndEvent) => {\n      announce(`${titleMap[event.active.id as T] ?? event.active.id} not moved.`, {assertive: true})\n      setIsDragging(false)\n      setIsKeyboardDragging(false)\n      setHasMoved(false)\n      setTimeout(() => {\n        document.activeElement?.scrollIntoView({\n          behavior: prefersReducedMotion ? 'instant' : 'smooth',\n          block: 'nearest',\n        })\n      }, 1)\n    },\n    [titleMap, prefersReducedMotion],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: DragEndEvent) => {\n      setIsDragging(false)\n      setIsKeyboardDragging(false)\n      setHasMoved(false)\n\n      if (!event.active || !event.over) return\n\n      const dragMetadata = event.active.data.current?.metadata as DragDropMetadata<T>\n      const dropMetadata = event.over.data.current?.metadata as DragDropMetadata<T>\n\n      if (dragMetadata?.id !== dropMetadata?.id) {\n        const isBefore = overIndex < dragIndex\n        onDrop({dragMetadata, dropMetadata, isBefore})\n      }\n      setOverId(null)\n      successfulMoveAnnouncement({\n        newIndex: overIndex,\n        currentIndex: dragIndex,\n        items,\n        title: titleMap[event.active.id as T],\n      })\n    },\n    [overIndex, dragIndex, items, titleMap, onDrop],\n  )\n\n  const moveToPosition = useCallback(\n    (currentPosition: number, newPosition: number, isBefore?: boolean) => {\n      setOverId(itemIds[newPosition] ?? null)\n      const drag = itemIds[currentPosition]\n      const drop = itemIds[newPosition]\n      if (drag && drop) {\n        onDrop({\n          dragMetadata: {id: drag},\n          dropMetadata: {id: drop},\n          isBefore: isBefore ?? newPosition < currentPosition,\n        })\n      }\n    },\n    [itemIds, onDrop],\n  )\n\n  const rootElement = useRootElement()\n\n  const onActivation = useMemo(() => {\n    return () => {\n      if (!hasMoved && !doNotShowAgain) {\n        setIsModalOpen(true)\n      }\n      setIsKeyboardDragging(true)\n    }\n  }, [doNotShowAgain, hasMoved])\n\n  const onOpenMoveModal = useCallback((title: string, index: number) => {\n    setMoveModalItem({title, index})\n  }, [])\n\n  const onCloseMoveModal = useCallback(() => {\n    setMoveModalItem(null)\n  }, [])\n\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor<KeyboardSensorOptions>(CustomKeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n      keyboardCodes,\n      onActivation,\n    }),\n  )\n\n  const dragItem = items[dragIndex]\n  const [body] = useClientValue<HTMLElement | null>(() => document.body, null, [ssrSafeDocument?.body])\n\n  return (\n    <>\n      <KeyboardSpecificInstructionsModal\n        isOpen={isModalOpen}\n        onClose={onInstructionsClose}\n        direction={direction}\n        keyboardCodes={keyboardCodes}\n      />\n      <DndContext\n        collisionDetection={useMemo(\n          () => (direction === 'horizontal' ? closestCorners : closestVerticalCenter),\n          [direction],\n        )}\n        modifiers={useMemo(() => {\n          return direction === 'horizontal' ? [restrictToHorizontalAxis] : [restrictToVerticalAxis]\n        }, [direction])}\n        sensors={sensors}\n        onDragStart={handleDragStart}\n        onDragOver={handleDragMove}\n        onDragEnd={handleDragEnd}\n        onDragCancel={handleDragCancel}\n        accessibility={useMemo(\n          () => ({\n            container: rootElement,\n            announcements: defaultAnnouncementsOff,\n          }),\n          [rootElement],\n        )}\n      >\n        <SortableContext\n          items={itemIds}\n          strategy={useMemo(\n            () => (direction === 'horizontal' ? horizontalListSortingStrategy : verticalListSortingStrategy),\n            [direction],\n          )}\n        >\n          <DragAndDropContext.Provider\n            value={useMemo(\n              () => ({\n                overId,\n                dragIndex,\n                moveToPosition,\n                items,\n                direction,\n                openMoveModal: onOpenMoveModal,\n                moveModalItem,\n                isInDragMode: isDragging && !isModalOpen,\n              }),\n              [\n                overId,\n                dragIndex,\n                moveToPosition,\n                items,\n                direction,\n                onOpenMoveModal,\n                moveModalItem,\n                isDragging,\n                isModalOpen,\n              ],\n            )}\n          >\n            {moveModalItem && <DragAndDropMoveModal closeDialog={onCloseMoveModal} />}\n            <As\n              {...htmlULprops}\n              className={clsx(styles.container)}\n              {...testIdProps('sortable-list')}\n              // to prevent tabbing out when dragging\n              onKeyDown={(event: KeyboardEvent) => {\n                if (isDragging && event.code === 'Tab') event.preventDefault()\n              }}\n            >\n              {children}\n            </As>\n            {body\n              ? createPortal(\n                  <DragOverlay dropAnimation={null} className={clsx(styles.container)}>\n                    {dragItem && !isModalOpen ? renderOverlay(dragItem, dragIndex) : null}\n                  </DragOverlay>,\n                  body,\n                )\n              : null}\n          </DragAndDropContext.Provider>\n        </SortableContext>\n      </DndContext>\n    </>\n  )\n}\n\ntry{ SortableListContainer.displayName ||= 'SortableListContainer' } catch {}","import {useContext} from 'react'\n\nimport {RootElementContext} from '../context/RootElementContext'\n\nexport function useRootElement() {\n  const rootElement = useContext(RootElementContext)\n  return rootElement\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"dragItem\":\"SortableListItem-module__dragItem--QbM4N\",\"vertical\":\"SortableListItem-module__vertical--gKirP\",\"horizontal\":\"SortableListItem-module__horizontal--Q4fny\",\"contents\":\"SortableListItem-module__contents--YiGyX\",\"dragOverlay\":\"SortableListItem-module__dragOverlay--pXiBk\"};","// extracted by mini-css-extract-plugin\nexport default {\"trigger\":\"SortableListTrigger-module__trigger--CqPGy\",\"mouseTrigger\":\"SortableListTrigger-module__mouseTrigger--ADZ9c\",\"isKeyboardDragging\":\"SortableListTrigger-module__isKeyboardDragging--cg6F9\"};","import {useSortable} from '@dnd-kit/sortable'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {GrabberIcon} from '@primer/octicons-react'\nimport {IconButton, useRefObjectAsForwardedRef} from '@primer/react'\nimport {clsx} from 'clsx'\nimport type React from 'react'\nimport {forwardRef, type HTMLAttributes, useRef} from 'react'\n\nimport {useSortableItem} from '../hooks/use-sortable-item'\nimport styles from './SortableListTrigger.module.css'\n\ninterface SortableListTriggerProps extends Omit<HTMLAttributes<HTMLButtonElement>, 'id' | 'aria-labelledby'> {}\n\n/**\n * The trigger button that activates the drag and drop of a sortable item. It is HIGHLY recommended to use\n * this component to trigger drag and drop since it includes additional accessibility features\n * to make the drag and drop experience work more robustly with screen readers.\n */\nexport const SortableListTrigger = forwardRef(function SortableListTrigger(\n  props: SortableListTriggerProps,\n  forwardedRef,\n) {\n  const {title, id} = useSortableItem()\n  const {setActivatorNodeRef, listeners, isDragging, items} = useSortable({\n    id,\n    data: {metadata: {id}},\n  })\n  const ref = useRef<HTMLElement | null>(null)\n  useRefObjectAsForwardedRef(forwardedRef, ref)\n\n  const {onMouseDown, onClick, onKeyDown} = listeners as {\n    onMouseDown: React.MouseEventHandler\n    onClick: React.MouseEventHandler\n    onKeyDown: React.KeyboardEventHandler\n  }\n\n  return (\n    <div\n      {...testIdProps('sortable-trigger-container')}\n      className={clsx(styles.trigger, items.length === 1 && 'v-hidden')}\n    >\n      {/*\n        Some screen readers (NVDA) simulate a click when the user presses enter or space, which\n        triggers the drag and drop from a mouse source rather than a keyboard source, which\n        prevents drag and drop from behaving correctly. This works around that confusion\n        by having a clickable layer on top of the trigger button that handles the mouse event triggered\n        by the actual mouse, whereas the button handles the mouse event triggered by the screen reader.\n      */}\n      {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n      <div onMouseDown={onMouseDown} className={clsx(styles.mouseTrigger)} {...testIdProps('sortable-mouse-trigger')} />\n      <IconButton\n        className=\"mr-1 p-1\"\n        aria-label={`Move ${title}`}\n        ref={(element: HTMLElement | null) => {\n          ref.current = element\n          setActivatorNodeRef(element)\n        }}\n        onKeyDown={onKeyDown}\n        onClick={onClick}\n        variant=\"invisible\"\n        // When dragging, the button is no longer a button, but has the role application to allow\n        // keyboard movements to not be registered by the screen reader\n        role={isDragging ? 'application' : 'button'}\n        icon={GrabberIcon}\n        size=\"large\"\n        {...props}\n        {...testIdProps('sortable-trigger')}\n      />\n    </div>\n  )\n})\n\ntry{ SortableListTrigger.displayName ||= 'SortableListTrigger' } catch {}","import {useSortable} from '@dnd-kit/sortable'\nimport {testIdProps} from '@github-ui/test-id-props'\nimport {usePrefersReducedMotion} from '@github-ui/use-prefers-reduced-motion'\nimport {clsx} from 'clsx'\nimport {type CSSProperties, type FC, type HTMLAttributes, useMemo} from 'react'\n\nimport {SortableItemContext} from '../context/SortableItemContext'\nimport {useDragAndDrop} from '../hooks/use-drag-and-drop'\nimport type {DragAndDropItem} from '../utils/types'\nimport styles from './SortableListItem.module.css'\nimport {SortableListTrigger} from './SortableListTrigger'\n\nexport interface SortableListItemProps extends Omit<HTMLAttributes<HTMLLIElement>, 'id' | 'title'> {\n  /**\n   * The index of the list item\n   */\n  index: number\n  /**\n   * Sx to apply to the container\n   */\n  containerStyle?: CSSProperties\n  /**\n   * Whether or not to hide the trigger, only use when defining a custom trigger.\n   * Note: defining a custom trigger is very risky please reference the accessibility grabberIcon [docs](https://github.com/github/accessibility/blob/aa85cdd00de58509aee9eaba18718d2bd727e777/docs/coaching-recommendations/drag-and-drop/technical-guidance/grabber-iconButton.md) to ensure your trigger will be accessible.\n   */\n  hideSortableItemTrigger?: boolean\n  /**\n   * The role of the list item\n   */\n  role?: React.AriaRole\n  /**\n   * Component type to render for drag and drop container\n   */\n  as?: React.ElementType\n  /**\n   * Wether or not the item is a drag overlay\n   */\n  isDragOverlay?: boolean\n}\n\n/**\n *\n * A sortable list item. This component is responsible for managing the drag trigger and preview.\n *\n * @param props SortableListItemProps\n */\nexport const SortableListItem: FC<SortableListItemProps & DragAndDropItem> = ({\n  children,\n  id,\n  index,\n  title,\n  containerStyle,\n  style,\n  hideSortableItemTrigger,\n  isDragOverlay = false,\n  role,\n  as = 'li',\n  ...props\n}) => {\n  const prefersReducedMotion = usePrefersReducedMotion()\n  const {setNodeRef, isDragging, transform, transition} = useSortable({\n    id,\n    data: {metadata: {id}},\n  })\n\n  const {direction, isInDragMode} = useDragAndDrop()\n\n  const containerClassName = clsx(\n    'position-relative',\n    props.className,\n    isInDragMode && {\n      [styles.dragItem]: isDragging,\n      [styles.horizontal]: direction === 'horizontal',\n      [styles.vertical]: direction === 'vertical',\n    },\n  )\n\n  const itemStyle: React.CSSProperties = {\n    transform: transform\n      ? `\n        translateX(${Math.round(transform.x)}px)\n        translateY(${Math.round(transform.y)}px)\n        scaleX(${transform.scaleX})\n        scaleY(${transform.scaleY})\n      `\n      : 'none',\n    transition: prefersReducedMotion ? 'none' : transition,\n  }\n\n  const As = isDragOverlay ? 'div' : as\n\n  return (\n    <SortableItemContext.Provider value={useMemo(() => ({index, title, id}), [index, id, title])}>\n      <As\n        {...props}\n        {...testIdProps(isDragOverlay ? 'drag-overlay' : 'sortable-item')}\n        className={containerClassName}\n        style={{...(isDragOverlay ? {} : containerStyle), ...itemStyle}}\n        ref={setNodeRef}\n      >\n        <div\n          style={style}\n          className={clsx('position-relative', isInDragMode && styles.contents, isDragOverlay && styles.dragOverlay)}\n          role={role}\n        >\n          {!hideSortableItemTrigger && <SortableListTrigger />}\n          {children}\n        </div>\n      </As>\n    </SortableItemContext.Provider>\n  )\n}\n\ntry{ SortableListItem.displayName ||= 'SortableListItem' } catch {}","import {DragAndDropMoveModal} from './DragAndDropMoveModal'\nimport {MoveModalTrigger as DragAndDropMoveModalTrigger} from './MoveModalTrigger'\nimport {SortableListContainer} from './SortableListContainer'\nimport {SortableListItem} from './SortableListItem'\nimport {SortableListTrigger} from './SortableListTrigger'\n\n/**\n * Wrapper for the sortable list and item components.\n */\nexport const DragAndDrop = Object.assign(SortableListContainer, {\n  Item: SortableListItem,\n  DragTrigger: SortableListTrigger,\n  MoveModal: DragAndDropMoveModal,\n  MoveModalTrigger: DragAndDropMoveModalTrigger,\n})\n\ntry{ DragAndDrop.displayName ||= 'DragAndDrop' } catch {}","import {useEffect, useState} from 'react'\n\nexport function usePrefersReducedMotion(): boolean {\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState<boolean>(false)\n\n  useEffect(() => {\n    if (!window.matchMedia) return\n\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)')\n    setPrefersReducedMotion(mediaQuery.matches)\n\n    const listener = (event: MediaQueryListEvent) => {\n      setPrefersReducedMotion(event.matches)\n    }\n\n    mediaQuery.addEventListener('change', listener)\n    return () => {\n      mediaQuery.removeEventListener('change', listener)\n    }\n  }, [])\n\n  return prefersReducedMotion\n}\n","import safeStorage from '@github-ui/safe-storage'\nimport {useCallback, useEffect, useState, type Dispatch, useRef} from 'react'\n\nconst safeLocalStorage = safeStorage('localStorage')\n\nconst USE_LOCAL_STORAGE_UPDATE_EVENT_NAME = 'local-storage-update'\n\nclass UseLocalStorageUpdateEvent extends Event {\n  declare storageKey: string\n  declare storageValue: unknown | undefined\n\n  constructor(storageKey: string, storageValue: unknown | undefined) {\n    super(USE_LOCAL_STORAGE_UPDATE_EVENT_NAME)\n    this.storageKey = storageKey\n    this.storageValue = storageValue\n  }\n}\n\ndeclare global {\n  interface Document {\n    addEventListener(\n      type: typeof USE_LOCAL_STORAGE_UPDATE_EVENT_NAME,\n      listener: (this: Document, ev: UseLocalStorageUpdateEvent) => void,\n    ): void\n    removeEventListener(\n      type: typeof USE_LOCAL_STORAGE_UPDATE_EVENT_NAME,\n      listener: (this: Document, ev: UseLocalStorageUpdateEvent) => void,\n    ): void\n  }\n}\n\n/**\n * A hook that mirrors state to local storage\n *\n * The fallback state is _not_ written to local storage, so tearing can occur\n * whenever localStorage is empty, if different fallback values are used\n * for the same key, however once a value is updated, other consumers\n * of the same storage keys will update\n */\nexport function useLocalStorage<T>(storageKey: string, fallbackState: T): readonly [T, Dispatch<T>] {\n  // copy fallbackState to a tracked ref, to avoid re-renders if it has unstable identity\n  const fallbackStateRef = useRef(fallbackState)\n  useEffect(() => {\n    fallbackStateRef.current = fallbackState\n  })\n\n  const [value, setValue] = useState<T>(() => {\n    const itemValue = safeLocalStorage.getItem(storageKey)\n    if (itemValue) {\n      return JSON.parse(itemValue)\n    }\n    return fallbackStateRef.current\n  })\n\n  const setNextValue: Dispatch<T> = useCallback(\n    nextValue => {\n      setValue(nextValue ?? fallbackStateRef.current)\n\n      if (nextValue === undefined) {\n        safeLocalStorage.removeItem(storageKey)\n      } else {\n        safeLocalStorage.setItem(storageKey, JSON.stringify(nextValue))\n      }\n\n      document.dispatchEvent(new UseLocalStorageUpdateEvent(storageKey, nextValue))\n    },\n    [storageKey],\n  )\n\n  /**\n   * When we change the value, we emit an event\n   *\n   * Subscribe to that event, so we can continuously sync\n   * the state\n   */\n  useEffect(() => {\n    function handler(event: UseLocalStorageUpdateEvent) {\n      if (event.storageKey === storageKey) {\n        const nextValue: T = (event.storageValue as T | undefined) ?? fallbackStateRef.current\n        setValue(nextValue)\n      }\n    }\n\n    document.addEventListener(USE_LOCAL_STORAGE_UPDATE_EVENT_NAME, handler)\n\n    /**\n     * during setup, it's _possible_ we've diverged, so we'll\n     * immediately check for an update\n     *\n     * This also provides a 'reset' in the event the storageKey was changed\n     */\n    const itemValue = safeLocalStorage.getItem(storageKey)\n    if (itemValue) {\n      setValue(JSON.parse(itemValue))\n    } else {\n      setValue(fallbackStateRef.current)\n    }\n\n    return () => {\n      document.removeEventListener(USE_LOCAL_STORAGE_UPDATE_EVENT_NAME, handler)\n    }\n  }, [storageKey])\n\n  return [value, setNextValue] as const\n}\n\nexport function clearLocalStorage(storageKeys: string[]) {\n  for (const storageKey of storageKeys) {\n    safeLocalStorage.removeItem(storageKey)\n    document.dispatchEvent(new UseLocalStorageUpdateEvent(storageKey, undefined))\n  }\n}\n"],"names":["DragAndDropContext","createContext","useDragAndDrop","contextValue","useContext","Error","overId","dragIndex","moveToPosition","items","direction","moveModalItem","openMoveModal","isInDragMode","isDropTarget","useCallback","id","isBefore","index","DragAndDropResources","instructions","title","firstItemInList","lastItemInList","movedBetween","itemA","itemB","movePosition","cancelDrag","endDrag","cancelMove","successfulFirstMove","successfulLastMove","successfulMove","titleA","titleB","titleC","successfulNoMove","entryLessThanOne","entryGreaterThanList","length","entryIsRequired","entryIsInvalid","DragAndDropMovingResources","itemWillNotBeMoved","movedToFirst","movedToLast","item1","item2","cannotBeMoved","emptyAnnouncement","debounceAnnouncement","debounce","announce","announcement","assertive","defaultAnnouncementsOff","onDragStart","onDragOver","onDragMove","onDragEnd","onDragCancel","successfulMoveAnnouncement","newIndex","currentIndex","itemIds","map","item","itemATitle","find","itemBTitle","DragAndDropMoveOptions","INPUT_LABEL","isValidBeforeMove","initialIndex","isValidAfterMove","MoveModalForm","forwardRef","onPositionChange","onMoveActionChange","moveAction","options","initialPosition","error","ref","filterValue","setFilterValue","useState","autocompleteTemplateList","useMemo","beforeOptions","afterOptions","push","text","before","after","selectedAutocomplete","setSelectedAutocomplete","onPositionInputChange","value","undefined","parsedValue","parseInt","autocompleteSelection","selectedItem","toString","onFilterChange","BEFORE","i","errorProps","div","className","clsx","styles","form","FormControl","required","Label","Select","block","onChange","e","currentTarget","Object","values","Option","ROW","TextInput","min","max","defaultValue","type","ev","target","testIdProps","Autocomplete","Input","placeholder","event","openOnFocus","leadingVisual","SearchIcon","Overlay","autoComplete","Menu","aria-labelledby","selectedItemIds","onSelectedChange","Array","isArray","selected","newlySelected","filterFn","toLowerCase","includes","Validation","variant","displayName","errorMessage","isInvalid","isNaN","DragAndDropMoveModal","closeDialog","setIndex","setMoveAction","moveHelpText","setMoveHelpText","invalidPosition","setInvalidPosition","containerRef","useRef","setError","formRef","updateHelperText","message","idx","AFTER","itemBefore","itemAfter","debouncedUpdateHelperText","useDebounce","useEffect","onSubmit","preventDefault","current","focus","useOnOutsideClick","onClickOutside","Dialog","span","onClose","width","renderBody","onBlur","stopPropagation","noValidate","Body","dialogBody","dialogTitle","Flash","aria-live","Octicon","icon","AlertIcon","InfoIcon","Footer","Button","SortableItemContext","useSortableItem","context","MoveModalTrigger","Component","props","onClick","useBodyClass","dependency","hasAdded","document","body","classList","add","remove","RootElementContext","defaultKeyboardCodes","start","KeyboardCode","Space","Enter","cancel","Esc","end","restrictToVerticalAxis","restrictToFirstScrollableAncestor","CustomKeyboardSensor","KeyboardSensor","activators","eventName","handler","keyboardCodes","onActivation","active","code","nativeEvent","activator","activatorNode","keyboardEvent","KeyboardEvent","key","closestVerticalCenter","collisionRect","droppableRects","droppableContainers","collisionRectCenter","top","bottom","collisions","droppableContainer","rect","get","distBetween","Math","abs","data","sort","a","b","HideKeyboardSpecificInstructionsModalKey","KeyboardSpecificInstructionsFooter","doNotShowAgain","setDoNotShowAgain","useLocalStorage","footerContainer","footerForm","Checkbox","checked","footerButton","KeyboardSpecificInstructionsModal","isOpen","onKeyDown","subtitle","renderFooter","table","instructionContainer","thead","tr","th","tbody","instruction","td","Fragment","KeyboardKey","keys","SortableListContainer","onDrop","children","as","As","renderOverlay","htmlULprops","isDragging","setIsDragging","overIndex","setOverIndex","hasMoved","setHasMoved","setDragIndex","setOverId","isModalOpen","setIsModalOpen","isKeyboardDragging","setIsKeyboardDragging","setMoveModalItem","titleMap","reduce","prefersReducedMotion","usePrefersReducedMotion","onInstructionsClose","handleDragStart","dragMetadata","metadata","sortable","handleDragMove","overMetadata","over","originalPlacement","handleDragCancel","setTimeout","activeElement","scrollIntoView","behavior","handleDragEnd","dropMetadata","currentPosition","newPosition","drag","drop","rootElement","onOpenMoveModal","onCloseMoveModal","sensors","useSensors","useSensor","MouseSensor","coordinateGetter","sortableKeyboardCoordinates","dragItem","useClientValue","ssrSafeDocument","DndContext","collisionDetection","closestCorners","modifiers","restrictToHorizontalAxis","accessibility","container","announcements","SortableContext","strategy","horizontalListSortingStrategy","verticalListSortingStrategy","Provider","createPortal","DragOverlay","dropAnimation","SortableListTrigger","forwardedRef","setActivatorNodeRef","listeners","useSortable","useRefObjectAsForwardedRef","onMouseDown","trigger","mouseTrigger","IconButton","aria-label","element","role","GrabberIcon","size","SortableListItem","containerStyle","style","hideSortableItemTrigger","isDragOverlay","setNodeRef","transform","transition","containerClassName","horizontal","vertical","itemStyle","round","x","y","scaleX","scaleY","contents","dragOverlay","DragAndDrop","assign","Item","DragTrigger","MoveModal","DragAndDropMoveModalTrigger","setPrefersReducedMotion","window","matchMedia","mediaQuery","matches","listener","addEventListener","removeEventListener","safeLocalStorage","safeStorage","USE_LOCAL_STORAGE_UPDATE_EVENT_NAME","UseLocalStorageUpdateEvent","Event","constructor","storageKey","storageValue","fallbackState","fallbackStateRef","setValue","itemValue","getItem","JSON","parse","setNextValue","nextValue","removeItem","setItem","stringify","dispatchEvent","clearLocalStorage","storageKeys"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Artifactcache::ListCachesRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Artifactcache::ListCachesRequest`.

class GitHub::Launch::Services::Artifactcache::ListCachesRequest
  sig do
    params(
      direction: T.nilable(String),
      key: T.nilable(String),
      page: T.nilable(Integer),
      per_page: T.nilable(Integer),
      repository_id: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity),
      scope: T.nilable(String),
      sort: T.nilable(String)
    ).void
  end
  def initialize(direction: nil, key: nil, page: nil, per_page: nil, repository_id: nil, scope: nil, sort: nil); end

  sig { void }
  def clear_direction; end

  sig { void }
  def clear_key; end

  sig { void }
  def clear_page; end

  sig { void }
  def clear_per_page; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_scope; end

  sig { void }
  def clear_sort; end

  sig { returns(String) }
  def direction; end

  sig { params(value: String).void }
  def direction=(value); end

  sig { returns(String) }
  def key; end

  sig { params(value: String).void }
  def key=(value); end

  sig { returns(Integer) }
  def page; end

  sig { params(value: Integer).void }
  def page=(value); end

  sig { returns(Integer) }
  def per_page; end

  sig { params(value: Integer).void }
  def per_page=(value); end

  sig { returns(T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)) }
  def repository_id; end

  sig { params(value: T.nilable(GitHub::Launch::Pbtypes::GitHub::Identity)).void }
  def repository_id=(value); end

  sig { returns(String) }
  def scope; end

  sig { params(value: String).void }
  def scope=(value); end

  sig { returns(String) }
  def sort; end

  sig { params(value: String).void }
  def sort=(value); end
end

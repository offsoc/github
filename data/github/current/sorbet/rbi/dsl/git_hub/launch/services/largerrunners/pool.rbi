# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Launch::Services::Largerrunners::Pool`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Launch::Services::Largerrunners::Pool`.

class GitHub::Launch::Services::Largerrunners::Pool
  sig do
    params(
      ephemeral: T.nilable(T::Boolean),
      error_code: T.nilable(String),
      group_name: T.nilable(String),
      id: T.nilable(Integer),
      image: T.nilable(GitHub::Launch::Services::Largerrunners::ImageKey),
      inherited: T.nilable(T::Boolean),
      is_dev: T.nilable(T::Boolean),
      labels: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      last_active_on: T.nilable(String),
      machine_spec: T.nilable(GitHub::Launch::Services::Largerrunners::MachineSpec),
      machine_spec_id: T.nilable(String),
      maximum_runners: T.nilable(Integer),
      name: T.nilable(String),
      persistent_os_disk: T.nilable(T::Boolean),
      platform: T.nilable(String),
      public_ip_enabled: T.nilable(T::Boolean),
      public_ips: T.nilable(T.any(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Largerrunners::PublicIP], T::Array[GitHub::Launch::Services::Largerrunners::PublicIP])),
      runner_count: T.nilable(Integer),
      runner_group_id: T.nilable(Integer),
      state: T.nilable(T.any(Symbol, Integer)),
      unavailable_runner_count: T.nilable(Integer)
    ).void
  end
  def initialize(ephemeral: nil, error_code: nil, group_name: nil, id: nil, image: nil, inherited: nil, is_dev: nil, labels: T.unsafe(nil), last_active_on: nil, machine_spec: nil, machine_spec_id: nil, maximum_runners: nil, name: nil, persistent_os_disk: nil, platform: nil, public_ip_enabled: nil, public_ips: T.unsafe(nil), runner_count: nil, runner_group_id: nil, state: nil, unavailable_runner_count: nil); end

  sig { void }
  def clear_ephemeral; end

  sig { void }
  def clear_error_code; end

  sig { void }
  def clear_group_name; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_image; end

  sig { void }
  def clear_inherited; end

  sig { void }
  def clear_is_dev; end

  sig { void }
  def clear_labels; end

  sig { void }
  def clear_last_active_on; end

  sig { void }
  def clear_machine_spec; end

  sig { void }
  def clear_machine_spec_id; end

  sig { void }
  def clear_maximum_runners; end

  sig { void }
  def clear_name; end

  sig { void }
  def clear_persistent_os_disk; end

  sig { void }
  def clear_platform; end

  sig { void }
  def clear_public_ip_enabled; end

  sig { void }
  def clear_public_ips; end

  sig { void }
  def clear_runner_count; end

  sig { void }
  def clear_runner_group_id; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_unavailable_runner_count; end

  sig { returns(T::Boolean) }
  def ephemeral; end

  sig { params(value: T::Boolean).void }
  def ephemeral=(value); end

  sig { returns(String) }
  def error_code; end

  sig { params(value: String).void }
  def error_code=(value); end

  sig { returns(String) }
  def group_name; end

  sig { params(value: String).void }
  def group_name=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(GitHub::Launch::Services::Largerrunners::ImageKey)) }
  def image; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Largerrunners::ImageKey)).void }
  def image=(value); end

  sig { returns(T::Boolean) }
  def inherited; end

  sig { params(value: T::Boolean).void }
  def inherited=(value); end

  sig { returns(T::Boolean) }
  def is_dev; end

  sig { params(value: T::Boolean).void }
  def is_dev=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def labels; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def labels=(value); end

  sig { returns(String) }
  def last_active_on; end

  sig { params(value: String).void }
  def last_active_on=(value); end

  sig { returns(T.nilable(GitHub::Launch::Services::Largerrunners::MachineSpec)) }
  def machine_spec; end

  sig { params(value: T.nilable(GitHub::Launch::Services::Largerrunners::MachineSpec)).void }
  def machine_spec=(value); end

  sig { returns(String) }
  def machine_spec_id; end

  sig { params(value: String).void }
  def machine_spec_id=(value); end

  sig { returns(Integer) }
  def maximum_runners; end

  sig { params(value: Integer).void }
  def maximum_runners=(value); end

  sig { returns(String) }
  def name; end

  sig { params(value: String).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def persistent_os_disk; end

  sig { params(value: T::Boolean).void }
  def persistent_os_disk=(value); end

  sig { returns(String) }
  def platform; end

  sig { params(value: String).void }
  def platform=(value); end

  sig { returns(T::Boolean) }
  def public_ip_enabled; end

  sig { params(value: T::Boolean).void }
  def public_ip_enabled=(value); end

  sig { returns(Google::Protobuf::RepeatedField[GitHub::Launch::Services::Largerrunners::PublicIP]) }
  def public_ips; end

  sig { params(value: Google::Protobuf::RepeatedField[GitHub::Launch::Services::Largerrunners::PublicIP]).void }
  def public_ips=(value); end

  sig { returns(Integer) }
  def runner_count; end

  sig { params(value: Integer).void }
  def runner_count=(value); end

  sig { returns(Integer) }
  def runner_group_id; end

  sig { params(value: Integer).void }
  def runner_group_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(Integer) }
  def unavailable_runner_count; end

  sig { params(value: Integer).void }
  def unavailable_runner_count=(value); end
end

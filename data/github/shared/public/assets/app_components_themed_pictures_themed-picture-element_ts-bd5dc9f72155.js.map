{"version":3,"file":"chunk-app_components_themed_pictures_themed-picture-element_ts-xxxxxxxxxxxx.js","mappings":"0WAKE,cAFF,YACMA,6BAA6BC,YAGjCC,mBAAoB,K,CAIa,QAA3B,IAAI,CAACC,iBAAiB,EACxB,IAAI,CAACC,YAAY,G,EAGM,IAAIC,iBAAiB,KAC5C,IAAI,CAACD,YAAY,EACnB,G,iJAFME,E,UAIN,MAAI,CAAEA,GAAiBC,OAAO,CAAC,IAAI,CAAE,CAACC,UAAW,GAAMC,QAAS,GAAMC,WAAY,EAAK,EACzF,CAEAC,sBAAuB,CACrB,MAAI,CAAEL,GAAiBM,UAAU,EACnC,CAEAR,cAAe,CACb,IAAIS,EAAO,IAAI,CAACC,aAAa,CAC1BC,aAAa,CAAC,0BACbC,aAAa,mBACXC,EAAM,IAAI,CAACF,aAAa,CAAC,OAG/B,GAAIF,SAAAA,EAAiB,CACnBI,GAAKC,aAAa,QAAS,sCAC3B,MACF,OAGIL,GACFA,CAAAA,EAAO,OAAM,EAGf,IAAI,CAACM,uBAAuB,CAAC,IAAI,CAAChB,iBAAiB,CAAwBU,GAG3EI,GAAKG,iBAAiB,OAAQ,KAC5BH,EAAIC,YAAY,CAAC,QAAS,qCAC5B,EACF,CAEQC,wBAAwBE,CAA2B,CAAER,CAAuB,CAAE,CACpF,IAAMS,EAAUD,EAAQE,gBAAgB,CAAC,UACnCC,EAAoC,EAAE,CACtCC,EAAmC,EAAE,CAE3C,IAAI,CAACC,gBAAgB,CAACJ,EAASE,EAAcC,GAC7C,IAAI,CAACE,kBAAkB,CAACd,EAAMW,EAAcC,EAC9C,CAEQC,iBACNJ,CAAsC,CACtCE,CAAiC,CACjCC,CAAgC,CAChC,CACA,IAAK,IAAMG,KAAUN,GAAW,EAAE,CAAE,CAClC,IAAMO,EAAQD,EAAOZ,YAAY,CAAC,UAAY,GACxCc,EAAQ,IAAI,CAACC,cAAc,CAACF,EAGpB,QAAVC,IAGCF,EAAOI,SAAS,CAACC,QAAQ,CAAC,iBAC7BL,EAAOI,SAAS,CAACE,GAAG,CAAC,CAAC,OAAO,EAAEJ,EAAM,CAAC,EAGpCF,EAAOI,SAAS,CAACC,QAAQ,CAAC,gBAC5BT,EAAaW,IAAI,CAACP,GACTA,EAAOI,SAAS,CAACC,QAAQ,CAAC,gBACnCR,EAAYU,IAAI,CAACP,GAErB,CACF,CAIQD,mBACNd,CAAuB,CACvBW,CAAiC,CACjCC,CAAgC,CAChC,CACIZ,UAAAA,EACF,IAAI,CAACuB,aAAa,CAAC,CAACC,IAAKZ,EAAaa,GAAId,CAAY,GACpC,SAATX,GACT,IAAI,CAACuB,aAAa,CAAC,CAACC,IAAKb,EAAcc,GAAIb,CAAW,EAE1D,CAEQW,cAAc,CAACC,IAAAA,CAAG,CAAEC,GAAAA,CAAE,CAAsD,CAAE,CACpF,IAAK,IAAMV,KAAUU,EACnBV,EAAOV,YAAY,CAAC,QAAS,8DAG/B,IAAK,IAAMU,KAAUS,EACnBT,EAAOV,YAAY,CAAC,QAAS,UAEjC,CAEQa,eAAeQ,CAAyB,CAAE,QAChD,GAAgBC,MAAM,iCACb,QACED,GAAYC,MAAM,gCACpB,OAEF,IACT,C,8BA/GA,S,uIAAA,Q,kBAAA,M,GAgHF,EAjHMxC,EAAAA,S,2TAAAA,CADLyC,EAAAA,EAAUA,C,CACLzC,E","sources":["app/components/themed_pictures/themed-picture-element.ts"],"sourcesContent":["import type {ColorModeWithAuto} from '../../assets/modules/github/color-modes'\nimport {controller} from '@github/catalyst'\n\n@controller\nclass ThemedPictureElement extends HTMLElement {\n  #mutationObserver: MutationObserver\n\n  connectedCallback() {\n    // if the first child (the picture element) is already loaded we can apply theming now.\n    // we also attach a MutationObserver to wait for the picture to load or any updates to the child nodes.\n    // eslint-disable-next-line custom-elements/no-dom-traversal-in-connectedcallback\n    if (this.firstElementChild !== null) {\n      this.applyTheming()\n    }\n\n    this.#mutationObserver = new MutationObserver(() => {\n      this.applyTheming()\n    })\n\n    this.#mutationObserver.observe(this, {childList: true, subtree: true, attributes: false})\n  }\n\n  disconnectedCallback() {\n    this.#mutationObserver.disconnect()\n  }\n\n  applyTheming() {\n    let mode = this.ownerDocument\n      .querySelector('html[data-color-mode]')\n      ?.getAttribute('data-color-mode') as ColorModeWithAuto\n    const img = this.querySelector('img')\n\n    // if theming mode is auto show the preferred image\n    if (mode === 'auto') {\n      img?.setAttribute('style', 'visibility:visible;max-width:100%;')\n      return\n    }\n\n    // if we're on a page such as marketplace where theming isn't enabled default to the light image\n    if (mode === undefined || mode === null) {\n      mode = 'light'\n    }\n\n    this.applyColorModeToPicture(this.firstElementChild as HTMLPictureElement, mode)\n\n    // when applying theming make sure the image is hidden until loaded so that we reduce jitter around the theme change\n    img?.addEventListener('load', () => {\n      img.setAttribute('style', 'visibility:visible;max-width:100%;')\n    })\n  }\n\n  private applyColorModeToPicture(picture: HTMLPictureElement, mode: ColorModeWithAuto) {\n    const sources = picture.querySelectorAll('source')\n    const sourcesLight: HTMLSourceElement[] = []\n    const sourcesDark: HTMLSourceElement[] = []\n\n    this.saveSourceThemes(sources, sourcesLight, sourcesDark)\n    this.updatePictureTheme(mode, sourcesLight, sourcesDark)\n  }\n\n  private saveSourceThemes(\n    sources: NodeListOf<HTMLSourceElement>,\n    sourcesLight: HTMLSourceElement[],\n    sourcesDark: HTMLSourceElement[],\n  ) {\n    for (const source of sources ?? []) {\n      const media = source.getAttribute('media') ?? ''\n      const theme = this.getSourceTheme(media)\n\n      // invalid media theme or 'all'\n      if (theme === null) continue\n\n      // store the original source theme for when we need to update theming without page load\n      if (!source.classList.contains('source-light' || 'source-dark')) {\n        source.classList.add(`source-${theme}`)\n      }\n\n      if (source.classList.contains('source-light')) {\n        sourcesLight.push(source)\n      } else if (source.classList.contains('source-dark')) {\n        sourcesDark.push(source)\n      }\n    }\n  }\n\n  // Based on mode set media to '(prefers-color-scheme: light),(prefers-color-scheme: dark)'\n  // for all sources with matching theme, otherwise set to 'not all'\n  private updatePictureTheme(\n    mode: ColorModeWithAuto,\n    sourcesLight: HTMLSourceElement[],\n    sourcesDark: HTMLSourceElement[],\n  ) {\n    if (mode === 'light') {\n      this.toggleSources({off: sourcesDark, on: sourcesLight})\n    } else if (mode === 'dark') {\n      this.toggleSources({off: sourcesLight, on: sourcesDark})\n    }\n  }\n\n  private toggleSources({off, on}: {off: HTMLSourceElement[]; on: HTMLSourceElement[]}) {\n    for (const source of on) {\n      source.setAttribute('media', '(prefers-color-scheme: light),(prefers-color-scheme: dark)')\n    }\n\n    for (const source of off) {\n      source.setAttribute('media', 'not all')\n    }\n  }\n\n  private getSourceTheme(mediaQuery: string | null) {\n    if (mediaQuery?.match('(prefers-color-scheme: light)')) {\n      return 'light'\n    } else if (mediaQuery?.match('(prefers-color-scheme: dark)')) {\n      return 'dark'\n    }\n    return null\n  }\n}\n"],"names":["ThemedPictureElement","HTMLElement","connectedCallback","firstElementChild","applyTheming","MutationObserver","mutationObserver","observe","childList","subtree","attributes","disconnectedCallback","disconnect","mode","ownerDocument","querySelector","getAttribute","img","setAttribute","applyColorModeToPicture","addEventListener","picture","sources","querySelectorAll","sourcesLight","sourcesDark","saveSourceThemes","updatePictureTheme","source","media","theme","getSourceTheme","classList","contains","add","push","toggleSources","off","on","mediaQuery","match","controller"],"sourceRoot":""}
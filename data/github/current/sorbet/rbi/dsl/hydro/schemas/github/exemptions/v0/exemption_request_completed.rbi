# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Exemptions::V0::ExemptionRequestCompleted`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Exemptions::V0::ExemptionRequestCompleted`.

class Hydro::Schemas::Github::Exemptions::V0::ExemptionRequestCompleted
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      exemption_request: T.nilable(Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionRequest),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, exemption_request: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_exemption_request; end

  sig { void }
  def clear_request_context; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionRequest)) }
  def exemption_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionRequest)).void }
  def exemption_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

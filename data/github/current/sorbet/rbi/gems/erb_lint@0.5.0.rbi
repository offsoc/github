# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `erb_lint` gem.
# Please instead update this file by running `bin/tapioca gem erb_lint`.

# source://erb_lint//lib/erb_lint/version.rb#3
module ERBLint; end

# source://erb_lint//lib/erb_lint/cache.rb#4
class ERBLint::Cache
  # @return [Cache] a new instance of Cache
  #
  # source://erb_lint//lib/erb_lint/cache.rb#7
  def initialize(config, cache_dir = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/cache.rb#59
  def cache_dir_exists?; end

  # source://erb_lint//lib/erb_lint/cache.rb#63
  def clear; end

  # source://erb_lint//lib/erb_lint/cache.rb#41
  def close; end

  # source://erb_lint//lib/erb_lint/cache.rb#15
  def get(filename, file_content); end

  # source://erb_lint//lib/erb_lint/cache.rb#45
  def prune_cache; end

  # source://erb_lint//lib/erb_lint/cache.rb#30
  def set(filename, file_content, offenses_as_json); end

  private

  # source://erb_lint//lib/erb_lint/cache.rb#74
  def checksum(filename, file_content); end

  # Returns the value of attribute config.
  #
  # source://erb_lint//lib/erb_lint/cache.rb#72
  def config; end

  # Returns the value of attribute hits.
  #
  # source://erb_lint//lib/erb_lint/cache.rb#72
  def hits; end

  # Returns the value of attribute new_results.
  #
  # source://erb_lint//lib/erb_lint/cache.rb#72
  def new_results; end
end

# source://erb_lint//lib/erb_lint/cache.rb#5
ERBLint::Cache::CACHE_DIRECTORY = T.let(T.unsafe(nil), String)

# A Cached version of an Offense with only essential information represented as strings
#
# source://erb_lint//lib/erb_lint/cached_offense.rb#5
class ERBLint::CachedOffense
  # @return [CachedOffense] a new instance of CachedOffense
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#17
  def initialize(params); end

  # Returns the value of attribute column.
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def column; end

  # Returns the value of attribute last_column.
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def last_column; end

  # Returns the value of attribute last_line.
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def last_line; end

  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def length; end

  # Returns the value of attribute line_number.
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def line_number; end

  # Returns the value of attribute message.
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def message; end

  # Returns the value of attribute severity.
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def severity; end

  # Returns the value of attribute simple_name.
  #
  # source://erb_lint//lib/erb_lint/cached_offense.rb#6
  def simple_name; end

  # source://erb_lint//lib/erb_lint/cached_offense.rb#45
  def to_h; end

  class << self
    # source://erb_lint//lib/erb_lint/cached_offense.rb#30
    def new_from_offense(offense); end
  end
end

# source://erb_lint//lib/erb_lint/corrector.rb#4
class ERBLint::Corrector
  # @return [Corrector] a new instance of Corrector
  #
  # source://erb_lint//lib/erb_lint/corrector.rb#7
  def initialize(processed_source, offenses); end

  # Returns the value of attribute corrected_content.
  #
  # source://erb_lint//lib/erb_lint/corrector.rb#5
  def corrected_content; end

  # source://erb_lint//lib/erb_lint/corrector.rb#13
  def corrections; end

  # source://erb_lint//lib/erb_lint/corrector.rb#19
  def corrector; end

  # source://erb_lint//lib/erb_lint/corrector.rb#27
  def diagnostics; end

  # Returns the value of attribute offenses.
  #
  # source://erb_lint//lib/erb_lint/corrector.rb#5
  def offenses; end

  # Returns the value of attribute processed_source.
  #
  # source://erb_lint//lib/erb_lint/corrector.rb#5
  def processed_source; end
end

# source://erb_lint//lib/erb_lint/corrector.rb#25
ERBLint::Corrector::BASE = RuboCop::Cop::Legacy::Corrector

# Loads file from disk
#
# source://erb_lint//lib/erb_lint/file_loader.rb#5
class ERBLint::FileLoader
  # @return [FileLoader] a new instance of FileLoader
  #
  # source://erb_lint//lib/erb_lint/file_loader.rb#8
  def initialize(base_path); end

  # Returns the value of attribute base_path.
  #
  # source://erb_lint//lib/erb_lint/file_loader.rb#6
  def base_path; end

  # source://erb_lint//lib/erb_lint/file_loader.rb#13
  def yaml(filename); end

  private

  # source://erb_lint//lib/erb_lint/file_loader.rb#24
  def read_content(filename); end
end

# Defines common functionality available to all linters.
#
# source://erb_lint//lib/erb_lint/linter.rb#7
class ERBLint::Linter
  # Must be implemented by the concrete inheriting class.
  #
  # @raise [ArgumentError]
  # @return [Linter] a new instance of Linter
  #
  # source://erb_lint//lib/erb_lint/linter.rb#38
  def initialize(file_loader, config); end

  # source://erb_lint//lib/erb_lint/linter.rb#65
  def add_offense(source_range, message, context = T.unsafe(nil), severity = T.unsafe(nil)); end

  # source://erb_lint//lib/erb_lint/linter.rb#69
  def clear_offenses; end

  # Returns the value of attribute config.
  #
  # source://erb_lint//lib/erb_lint/linter.rb#35
  def config; end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linter.rb#46
  def enabled?; end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linter.rb#50
  def excludes_file?(filename); end

  # Returns the value of attribute offenses.
  #
  # source://erb_lint//lib/erb_lint/linter.rb#35
  def offenses; end

  # @raise [NotImplementedError]
  #
  # source://erb_lint//lib/erb_lint/linter.rb#54
  def run(_processed_source); end

  # source://erb_lint//lib/erb_lint/linter.rb#58
  def run_and_update_offense_status(processed_source, enable_inline_configs = T.unsafe(nil)); end

  private

  # source://erb_lint//lib/erb_lint/linter.rb#86
  def source_for_line_range(processed_source, line_range); end

  # source://erb_lint//lib/erb_lint/linter.rb#75
  def update_offense_status(processed_source); end

  class << self
    # Returns the value of attribute config_schema.
    #
    # source://erb_lint//lib/erb_lint/linter.rb#10
    def config_schema; end

    # Sets the attribute config_schema
    #
    # @param value the value to set the attribute config_schema to.
    #
    # source://erb_lint//lib/erb_lint/linter.rb#10
    def config_schema=(_arg0); end

    # When defining a Linter class, define its simple name as well. This
    # assumes that the module hierarchy of every linter starts with
    # `ERBLint::Linters::`, and removes this part of the class name.
    #
    # `ERBLint::Linters::Foo.simple_name`          #=> "Foo"
    # `ERBLint::Linters::Compass::Bar.simple_name` #=> "Compass::Bar"
    #
    # source://erb_lint//lib/erb_lint/linter.rb#18
    def inherited(linter); end

    # Returns the value of attribute simple_name.
    #
    # source://erb_lint//lib/erb_lint/linter.rb#9
    def simple_name; end

    # Sets the attribute simple_name
    #
    # @param value the value to set the attribute simple_name to.
    #
    # source://erb_lint//lib/erb_lint/linter.rb#9
    def simple_name=(_arg0); end

    # @return [Boolean]
    #
    # source://erb_lint//lib/erb_lint/linter.rb#30
    def support_autocorrect?; end
  end
end

# source://erb_lint//lib/erb_lint/linter_config.rb#7
class ERBLint::LinterConfig
  include ::SmartProperties
  extend ::SmartProperties::ClassMethods

  # @return [LinterConfig] a new instance of LinterConfig
  #
  # source://erb_lint//lib/erb_lint/linter_config.rb#25
  def initialize(config = T.unsafe(nil)); end

  # source://erb_lint//lib/erb_lint/linter_config.rb#40
  def [](name); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linter_config.rb#56
  def excludes_file?(absolute_filename, base_path); end

  # source://erb_lint//lib/erb_lint/linter_config.rb#48
  def to_hash; end

  class << self
    # @return [Boolean]
    #
    # source://erb_lint//lib/erb_lint/linter_config.rb#13
    def array_of?(klass); end

    # source://erb_lint//lib/erb_lint/linter_config.rb#17
    def to_array_of(klass); end
  end
end

# source://erb_lint//lib/erb_lint/linter_config.rb#10
class ERBLint::LinterConfig::Error < ::StandardError; end

# Stores all linters available to the application.
#
# source://erb_lint//lib/erb_lint/linter_registry.rb#5
module ERBLint::LinterRegistry
  class << self
    # source://erb_lint//lib/erb_lint/linter_registry.rb#10
    def clear; end

    # source://erb_lint//lib/erb_lint/linter_registry.rb#18
    def find_by_name(name); end

    # @private
    #
    # source://erb_lint//lib/erb_lint/linter_registry.rb#14
    def included(linter_class); end

    # source://erb_lint//lib/erb_lint/linter_registry.rb#22
    def linters; end

    # source://erb_lint//lib/erb_lint/linter_registry.rb#29
    def load_custom_linters(directory = T.unsafe(nil)); end
  end
end

# source://erb_lint//lib/erb_lint/linter_registry.rb#6
ERBLint::LinterRegistry::CUSTOM_LINTERS_DIR = T.let(T.unsafe(nil), String)

# source://erb_lint//lib/erb_lint/linters/allowed_script_type.rb#7
module ERBLint::Linters; end

# Allow `<script>` tags in ERB that have specific `type` attributes.
# This only validates inline `<script>` tags, a separate rubocop cop
# may be used to enforce the same rule when `javascript_tag` is called.
#
# source://erb_lint//lib/erb_lint/linters/allowed_script_type.rb#11
class ERBLint::Linters::AllowedScriptType < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/allowed_script_type.rb#60
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/allowed_script_type.rb#22
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/allowed_script_type.rb#14
class ERBLint::Linters::AllowedScriptType::ConfigSchema < ::ERBLint::LinterConfig; end

# When `<%` isn't followed by a newline, ensure `%>` isn't preceeded by a newline.
# When `%>` is preceeded by a newline, indent it at the same level as the corresponding `<%`.
#
# source://erb_lint//lib/erb_lint/linters/closing_erb_tag_indent.rb#7
class ERBLint::Linters::ClosingErbTagIndent < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/closing_erb_tag_indent.rb#49
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/closing_erb_tag_indent.rb#13
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/closing_erb_tag_indent.rb#11
ERBLint::Linters::ClosingErbTagIndent::END_SPACES = T.let(T.unsafe(nil), Regexp)

# source://erb_lint//lib/erb_lint/linters/closing_erb_tag_indent.rb#10
ERBLint::Linters::ClosingErbTagIndent::START_SPACES = T.let(T.unsafe(nil), Regexp)

# Detects comment syntax that isn't valid ERB.
#
# source://erb_lint//lib/erb_lint/linters/comment_syntax.rb#6
class ERBLint::Linters::CommentSyntax < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # @return [CommentSyntax] a new instance of CommentSyntax
  #
  # source://erb_lint//lib/erb_lint/linters/comment_syntax.rb#9
  def initialize(file_loader, config); end

  # source://erb_lint//lib/erb_lint/linters/comment_syntax.rb#42
  def find_range(node, str); end

  # source://erb_lint//lib/erb_lint/linters/comment_syntax.rb#13
  def run(processed_source); end
end

# Checks for deprecated classes in the start tags of HTML elements.
#
# source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#9
class ERBLint::Linters::DeprecatedClasses < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # @return [DeprecatedClasses] a new instance of DeprecatedClasses
  #
  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#27
  def initialize(file_loader, config); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#32
  def run(processed_source); end

  private

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#57
  def class_name_with_loc(processed_source); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#95
  def generate_offenses(class_name, range); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#42
  def process_nested_offenses(source:, offset:, parent_source:); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#83
  def script_tags(processed_source); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#91
  def tag_nodes(processed_source); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#87
  def tags(processed_source); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#70
  def text_tags_content(processed_source); end

  # source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#107
  def violated_rules(class_name); end
end

# source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#18
class ERBLint::Linters::DeprecatedClasses::ConfigSchema < ::ERBLint::LinterConfig; end

# source://erb_lint//lib/erb_lint/linters/deprecated_classes.rb#12
class ERBLint::Linters::DeprecatedClasses::RuleSet
  include ::SmartProperties
  extend ::SmartProperties::ClassMethods
end

# Detect unsafe ruby interpolations into javascript.
#
# source://erb_lint//lib/erb_lint/linters/erb_safety.rb#9
class ERBLint::Linters::ErbSafety < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # @return [ErbSafety] a new instance of ErbSafety
  #
  # source://erb_lint//lib/erb_lint/linters/erb_safety.rb#18
  def initialize(file_loader, config); end

  # source://erb_lint//lib/erb_lint/linters/erb_safety.rb#23
  def run(processed_source); end

  private

  # source://erb_lint//lib/erb_lint/linters/erb_safety.rb#52
  def better_html_config; end

  # source://erb_lint//lib/erb_lint/linters/erb_safety.rb#37
  def tester_classes; end

  # source://erb_lint//lib/erb_lint/linters/erb_safety.rb#46
  def testers_for(parser); end
end

# source://erb_lint//lib/erb_lint/linters/erb_safety.rb#12
class ERBLint::Linters::ErbSafety::ConfigSchema < ::ERBLint::LinterConfig; end

# Detects multiple blank lines
#
# source://erb_lint//lib/erb_lint/linters/extra_newline.rb#6
class ERBLint::Linters::ExtraNewline < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/extra_newline.rb#23
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/extra_newline.rb#11
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/extra_newline.rb#9
ERBLint::Linters::ExtraNewline::EXTRA_NEWLINES = T.let(T.unsafe(nil), Regexp)

# Checks for final newlines at the end of a file.
#
# source://erb_lint//lib/erb_lint/linters/final_newline.rb#6
class ERBLint::Linters::FinalNewline < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # @return [FinalNewline] a new instance of FinalNewline
  #
  # source://erb_lint//lib/erb_lint/linters/final_newline.rb#14
  def initialize(file_loader, config); end

  # source://erb_lint//lib/erb_lint/linters/final_newline.rb#52
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/final_newline.rb#19
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/final_newline.rb#9
class ERBLint::Linters::FinalNewline::ConfigSchema < ::ERBLint::LinterConfig; end

# Checks for hardcoded strings. Useful if you want to ensure a string can be translated using i18n.
#
# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#10
class ERBLint::Linters::HardCodedString < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#84
  def autocorrect(processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#75
  def find_range(node, str); end

  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#52
  def run(processed_source); end

  private

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#98
  def check_string?(str); end

  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#112
  def corrector_i18n_load_path; end

  # @raise [ForbiddenCorrector]
  #
  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#103
  def load_corrector; end

  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#137
  def message(string); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#116
  def non_text_tag?(processed_source, text_node); end

  # source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#129
  def relevant_node(inner_node); end
end

# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#17
ERBLint::Linters::HardCodedString::ALLOWED_CORRECTORS = T.let(T.unsafe(nil), Array)

# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#46
class ERBLint::Linters::HardCodedString::ConfigSchema < ::ERBLint::LinterConfig; end

# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#13
class ERBLint::Linters::HardCodedString::ForbiddenCorrector < ::StandardError; end

# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#14
class ERBLint::Linters::HardCodedString::MissingCorrector < ::StandardError; end

# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#15
class ERBLint::Linters::HardCodedString::MissingI18nLoadPath < ::StandardError; end

# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#19
ERBLint::Linters::HardCodedString::NON_TEXT_TAGS = T.let(T.unsafe(nil), Set)

# source://erb_lint//lib/erb_lint/linters/hard_coded_string.rb#20
ERBLint::Linters::HardCodedString::NO_TRANSLATION_NEEDED = T.let(T.unsafe(nil), Set)

# source://erb_lint//lib/erb_lint/linters/no_javascript_tag_helper.rb#11
class ERBLint::Linters::NoJavascriptTagHelper < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/no_javascript_tag_helper.rb#48
  def autocorrect(processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/no_javascript_tag_helper.rb#19
  def run(processed_source); end

  private

  # source://erb_lint//lib/erb_lint/linters/no_javascript_tag_helper.rb#56
  def correct_offense(processed_source, offense, corrector); end
end

# source://erb_lint//lib/erb_lint/linters/no_javascript_tag_helper.rb#14
class ERBLint::Linters::NoJavascriptTagHelper::ConfigSchema < ::ERBLint::LinterConfig; end

# Checks for unused disable comments.
#
# source://erb_lint//lib/erb_lint/linters/no_unused_disable.rb#8
class ERBLint::Linters::NoUnusedDisable < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/no_unused_disable.rb#11
  def run(processed_source, offenses); end
end

# source://erb_lint//lib/erb_lint/linters/parser_errors.rb#5
class ERBLint::Linters::ParserErrors < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/parser_errors.rb#8
  def run(processed_source); end
end

# Checks for instance variables in partials.
#
# source://erb_lint//lib/erb_lint/linters/partial_instance_variable.rb#6
class ERBLint::Linters::PartialInstanceVariable < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/partial_instance_variable.rb#9
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#8
class ERBLint::Linters::RequireInputAutocomplete < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#44
  def run(processed_source); end

  private

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#72
  def autocomplete_present?(autocomplete_attribute); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#110
  def code_comment?(indicator_node); end

  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#114
  def extract_ruby_node(source); end

  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#53
  def find_html_input_tags(parser); end

  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#85
  def find_rails_helper_input_tags(parser); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#76
  def html_input_tag?(tag); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#80
  def html_type_requires_autocomplete_attribute?(type_attribute); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#106
  def input_helper?(send_node); end
end

# source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#28
ERBLint::Linters::RequireInputAutocomplete::FORM_HELPERS_REQUIRING_AUTOCOMPLETE = T.let(T.unsafe(nil), Array)

# source://erb_lint//lib/erb_lint/linters/require_input_autocomplete.rb#11
ERBLint::Linters::RequireInputAutocomplete::HTML_INPUT_TYPES_REQUIRING_AUTOCOMPLETE = T.let(T.unsafe(nil), Array)

# Allow inline script tags in ERB that have a nonce attribute.
# This only validates inline <script> tags, as well as rails helpers like javascript_tag.
#
# source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#10
class ERBLint::Linters::RequireScriptNonce < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#13
  def run(processed_source); end

  private

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#81
  def code_comment?(indicator_node); end

  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#85
  def extract_ruby_node(source); end

  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#22
  def find_html_script_tags(parser); end

  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#55
  def find_rails_helper_script_tags(parser); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#41
  def html_javascript_tag?(tag); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#46
  def html_javascript_type_attribute?(tag); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#37
  def nonce_present?(nonce_attribute); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/linters/require_script_nonce.rb#75
  def tag_helper?(send_node); end
end

# In ERB, right trim can be either =%> or -%>
# this linter will force one or the other.
#
# source://erb_lint//lib/erb_lint/linters/right_trim.rb#7
class ERBLint::Linters::RightTrim < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/right_trim.rb#27
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/right_trim.rb#15
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/right_trim.rb#10
class ERBLint::Linters::RightTrim::ConfigSchema < ::ERBLint::LinterConfig; end

# Run selected rubocop cops on Ruby code
#
# source://erb_lint//lib/erb_lint/linters/rubocop.rb#10
class ERBLint::Linters::Rubocop < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # @return [Rubocop] a new instance of Rubocop
  #
  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#25
  def initialize(file_loader, config); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#40
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#33
  def run(processed_source); end

  private

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#89
  def activate_team(processed_source, source, offset, code_node, team); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#178
  def add_offense(rubocop_offense, offense_range, correction, offset, bound_range); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#156
  def build_team; end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#168
  def config_from_hash(hash); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#174
  def config_from_path(path); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#147
  def cop_classes; end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#68
  def descendant_nodes(processed_source); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#72
  def inspect_content(processed_source, erb_node); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#133
  def rubocop_processed_source(content, filename); end

  # source://erb_lint//lib/erb_lint/linters/rubocop.rb#124
  def tempfile_from(filename, content); end
end

# copied from Rails: action_view/template/handlers/erb/erubi.rb
#
# source://erb_lint//lib/erb_lint/linters/rubocop.rb#23
ERBLint::Linters::Rubocop::BLOCK_EXPR = T.let(T.unsafe(nil), Regexp)

# source://erb_lint//lib/erb_lint/linters/rubocop.rb#13
class ERBLint::Linters::Rubocop::ConfigSchema < ::ERBLint::LinterConfig; end

# source://erb_lint//lib/erb_lint/linters/rubocop.rb#21
ERBLint::Linters::Rubocop::SUFFIX_EXPR = T.let(T.unsafe(nil), Regexp)

# source://erb_lint//lib/erb_lint/linters/rubocop_text.rb#7
class ERBLint::Linters::RubocopText < ::ERBLint::Linters::Rubocop
  private

  # source://erb_lint//lib/erb_lint/linters/rubocop_text.rb#31
  def cop_classes; end

  # source://erb_lint//lib/erb_lint/linters/rubocop_text.rb#20
  def descendant_nodes(parser); end
end

# source://erb_lint//lib/erb_lint/linters/rubocop_text.rb#10
class ERBLint::Linters::RubocopText::ConfigSchema < ::ERBLint::LinterConfig; end

# Warns when a tag is not self-closed properly.
#
# source://erb_lint//lib/erb_lint/linters/self_closing_tag.rb#6
class ERBLint::Linters::SelfClosingTag < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/self_closing_tag.rb#50
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/self_closing_tag.rb#17
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/self_closing_tag.rb#9
class ERBLint::Linters::SelfClosingTag::ConfigSchema < ::ERBLint::LinterConfig; end

# source://erb_lint//lib/erb_lint/linters/self_closing_tag.rb#14
ERBLint::Linters::SelfClosingTag::SELF_CLOSING_TAGS = T.let(T.unsafe(nil), Array)

# Enforce a single space after `<%` and before `%>` in the erb source.
# This linter ignores opening erb tags (`<%`) that are followed by a newline,
# and closing erb tags (`%>`) that are preceeded by a newline.
#
# source://erb_lint//lib/erb_lint/linters/space_around_erb_tag.rb#8
class ERBLint::Linters::SpaceAroundErbTag < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/space_around_erb_tag.rb#60
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/space_around_erb_tag.rb#14
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/space_around_erb_tag.rb#12
ERBLint::Linters::SpaceAroundErbTag::END_SPACES = T.let(T.unsafe(nil), Regexp)

# source://erb_lint//lib/erb_lint/linters/space_around_erb_tag.rb#11
ERBLint::Linters::SpaceAroundErbTag::START_SPACES = T.let(T.unsafe(nil), Regexp)

# Detects extra or missing whitespace in html tags.
#
# source://erb_lint//lib/erb_lint/linters/space_in_html_tag.rb#6
class ERBLint::Linters::SpaceInHtmlTag < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/space_in_html_tag.rb#38
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/space_in_html_tag.rb#9
  def run(processed_source); end

  private

  # source://erb_lint//lib/erb_lint/linters/space_in_html_tag.rb#46
  def no_space(processed_source, range); end

  # source://erb_lint//lib/erb_lint/linters/space_in_html_tag.rb#94
  def process_attributes(processed_source, attributes); end

  # source://erb_lint//lib/erb_lint/linters/space_in_html_tag.rb#61
  def single_space(processed_source, range, accept_newline: T.unsafe(nil)); end

  # source://erb_lint//lib/erb_lint/linters/space_in_html_tag.rb#57
  def single_space_or_newline(processed_source, range); end
end

# Detects indentation with tabs and autocorrect them to spaces
#
# source://erb_lint//lib/erb_lint/linters/space_indentation.rb#6
class ERBLint::Linters::SpaceIndentation < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/space_indentation.rb#34
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/space_indentation.rb#16
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/space_indentation.rb#9
class ERBLint::Linters::SpaceIndentation::ConfigSchema < ::ERBLint::LinterConfig; end

# source://erb_lint//lib/erb_lint/linters/space_indentation.rb#14
ERBLint::Linters::SpaceIndentation::START_SPACES = T.let(T.unsafe(nil), Regexp)

# Detects trailing whitespace at the end of a line
#
# source://erb_lint//lib/erb_lint/linters/trailing_whitespace.rb#6
class ERBLint::Linters::TrailingWhitespace < ::ERBLint::Linter
  include ::ERBLint::LinterRegistry

  # source://erb_lint//lib/erb_lint/linters/trailing_whitespace.rb#26
  def autocorrect(_processed_source, offense); end

  # source://erb_lint//lib/erb_lint/linters/trailing_whitespace.rb#11
  def run(processed_source); end
end

# source://erb_lint//lib/erb_lint/linters/trailing_whitespace.rb#9
ERBLint::Linters::TrailingWhitespace::TRAILING_WHITESPACE = T.let(T.unsafe(nil), Regexp)

# Defines common functionality available to all linters.
#
# source://erb_lint//lib/erb_lint/offense.rb#5
class ERBLint::Offense
  # @return [Offense] a new instance of Offense
  #
  # source://erb_lint//lib/erb_lint/offense.rb#8
  def initialize(linter, source_range, message, context = T.unsafe(nil), severity = T.unsafe(nil)); end

  # source://erb_lint//lib/erb_lint/offense.rb#32
  def ==(other); end

  # source://erb_lint//lib/erb_lint/offense.rb#54
  def column; end

  # Returns the value of attribute context.
  #
  # source://erb_lint//lib/erb_lint/offense.rb#6
  def context; end

  # Sets the attribute disabled
  #
  # @param value the value to set the attribute disabled to.
  #
  # source://erb_lint//lib/erb_lint/offense.rb#48
  def disabled=(_arg0); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/offense.rb#50
  def disabled?; end

  # source://erb_lint//lib/erb_lint/offense.rb#25
  def inspect; end

  # source://erb_lint//lib/erb_lint/offense.rb#66
  def last_column; end

  # source://erb_lint//lib/erb_lint/offense.rb#62
  def last_line; end

  # source://erb_lint//lib/erb_lint/offense.rb#70
  def length; end

  # source://erb_lint//lib/erb_lint/offense.rb#44
  def line_number; end

  # source://erb_lint//lib/erb_lint/offense.rb#40
  def line_range; end

  # Returns the value of attribute linter.
  #
  # source://erb_lint//lib/erb_lint/offense.rb#6
  def linter; end

  # Returns the value of attribute message.
  #
  # source://erb_lint//lib/erb_lint/offense.rb#6
  def message; end

  # Returns the value of attribute severity.
  #
  # source://erb_lint//lib/erb_lint/offense.rb#6
  def severity; end

  # source://erb_lint//lib/erb_lint/offense.rb#58
  def simple_name; end

  # Returns the value of attribute source_range.
  #
  # source://erb_lint//lib/erb_lint/offense.rb#6
  def source_range; end

  # source://erb_lint//lib/erb_lint/offense.rb#21
  def to_cached_offense_hash; end
end

# source://erb_lint//lib/erb_lint/processed_source.rb#4
class ERBLint::ProcessedSource
  # @return [ProcessedSource] a new instance of ProcessedSource
  #
  # source://erb_lint//lib/erb_lint/processed_source.rb#7
  def initialize(filename, file_content); end

  # source://erb_lint//lib/erb_lint/processed_source.rb#13
  def ast; end

  # Returns the value of attribute file_content.
  #
  # source://erb_lint//lib/erb_lint/processed_source.rb#5
  def file_content; end

  # Returns the value of attribute filename.
  #
  # source://erb_lint//lib/erb_lint/processed_source.rb#5
  def filename; end

  # Returns the value of attribute parser.
  #
  # source://erb_lint//lib/erb_lint/processed_source.rb#5
  def parser; end

  # source://erb_lint//lib/erb_lint/processed_source.rb#17
  def source_buffer; end

  # source://erb_lint//lib/erb_lint/processed_source.rb#25
  def to_source_range(range); end
end

# source://erb_lint//lib/erb_lint/reporter.rb#7
class ERBLint::Reporter
  # @return [Reporter] a new instance of Reporter
  #
  # source://erb_lint//lib/erb_lint/reporter.rb#26
  def initialize(stats, autocorrect); end

  # source://erb_lint//lib/erb_lint/reporter.rb#31
  def preview; end

  # source://erb_lint//lib/erb_lint/reporter.rb#39
  def processed_files(*_arg0, **_arg1, &_arg2); end

  # source://erb_lint//lib/erb_lint/reporter.rb#33
  def show; end

  private

  # Returns the value of attribute autocorrect.
  #
  # source://erb_lint//lib/erb_lint/reporter.rb#37
  def autocorrect; end

  # Returns the value of attribute stats.
  #
  # source://erb_lint//lib/erb_lint/reporter.rb#37
  def stats; end

  class << self
    # @return [Boolean]
    #
    # source://erb_lint//lib/erb_lint/reporter.rb#13
    def available_format?(format); end

    # source://erb_lint//lib/erb_lint/reporter.rb#17
    def available_formats; end

    # source://erb_lint//lib/erb_lint/reporter.rb#8
    def create_reporter(format, *args); end
  end
end

# source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#4
module ERBLint::Reporters; end

# source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#5
class ERBLint::Reporters::CompactReporter < ::ERBLint::Reporter
  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#6
  def preview; end

  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#10
  def show; end

  private

  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#40
  def footer; end

  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#31
  def format_offense(filename, offense); end

  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#27
  def linters; end

  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#23
  def linting; end

  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#58
  def report_corrected_offenses; end

  # source://erb_lint//lib/erb_lint/reporters/compact_reporter.rb#42
  def summary; end
end

# source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#7
class ERBLint::Reporters::JsonReporter < ::ERBLint::Reporter
  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#8
  def preview; end

  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#10
  def show; end

  private

  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#57
  def format_offense(offense); end

  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#16
  def formatted_data; end

  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#42
  def formatted_files; end

  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#51
  def formatted_offenses(offenses); end

  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#24
  def metadata; end

  # source://erb_lint//lib/erb_lint/reporters/json_reporter.rb#34
  def summary; end
end

# source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#8
class ERBLint::Reporters::JunitReporter < ::ERBLint::Reporter
  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#9
  def preview; end

  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#11
  def show; end

  private

  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#97
  def create_failure(filename, offense); end

  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#25
  def create_junit_xml; end

  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#62
  def create_properties; end

  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#78
  def create_property(name, value); end

  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#86
  def create_testcase(filename, offense); end

  # source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#35
  def create_testsuite_element; end
end

# source://erb_lint//lib/erb_lint/reporters/junit_reporter.rb#20
ERBLint::Reporters::JunitReporter::CONTEXT = T.let(T.unsafe(nil), Hash)

# source://erb_lint//lib/erb_lint/reporters/multiline_reporter.rb#7
class ERBLint::Reporters::MultilineReporter < ::ERBLint::Reporters::CompactReporter
  private

  # source://erb_lint//lib/erb_lint/reporters/multiline_reporter.rb#18
  def footer; end

  # source://erb_lint//lib/erb_lint/reporters/multiline_reporter.rb#10
  def format_offense(filename, offense); end
end

# Runs all enabled linters against an html.erb file.
#
# source://erb_lint//lib/erb_lint/runner.rb#5
class ERBLint::Runner
  # @raise [ArgumentError]
  # @return [Runner] a new instance of Runner
  #
  # source://erb_lint//lib/erb_lint/runner.rb#8
  def initialize(file_loader, config, disable_inline_configs = T.unsafe(nil)); end

  # source://erb_lint//lib/erb_lint/runner.rb#35
  def clear_offenses; end

  # Returns the value of attribute offenses.
  #
  # source://erb_lint//lib/erb_lint/runner.rb#6
  def offenses; end

  # source://erb_lint//lib/erb_lint/runner.rb#41
  def restore_offenses(offenses); end

  # source://erb_lint//lib/erb_lint/runner.rb#24
  def run(processed_source); end

  private

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/runner.rb#47
  def enable_inline_configs?; end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/runner.rb#51
  def no_unused_disable_enabled?; end

  # source://erb_lint//lib/erb_lint/runner.rb#56
  def report_unused_disable(processed_source); end
end

# source://erb_lint//lib/erb_lint/runner_config.rb#6
class ERBLint::RunnerConfig
  # @return [RunnerConfig] a new instance of RunnerConfig
  #
  # source://erb_lint//lib/erb_lint/runner_config.rb#9
  def initialize(config = T.unsafe(nil), file_loader = T.unsafe(nil)); end

  # @raise [Error]
  #
  # source://erb_lint//lib/erb_lint/runner_config.rb#21
  def for_linter(klass); end

  # source://erb_lint//lib/erb_lint/runner_config.rb#35
  def global_exclude; end

  # source://erb_lint//lib/erb_lint/runner_config.rb#39
  def merge(other_config); end

  # source://erb_lint//lib/erb_lint/runner_config.rb#43
  def merge!(other_config); end

  # source://erb_lint//lib/erb_lint/runner_config.rb#17
  def to_hash; end

  private

  # source://erb_lint//lib/erb_lint/runner_config.rb#83
  def config_hash_for_linter(klass_name); end

  # source://erb_lint//lib/erb_lint/runner_config.rb#79
  def linters_config; end

  # source://erb_lint//lib/erb_lint/runner_config.rb#90
  def resolver; end

  class << self
    # source://erb_lint//lib/erb_lint/runner_config.rb#49
    def default(default_enabled: T.unsafe(nil)); end

    # source://erb_lint//lib/erb_lint/runner_config.rb#71
    def default_for(config); end
  end
end

# source://erb_lint//lib/erb_lint/runner_config.rb#7
class ERBLint::RunnerConfig::Error < ::StandardError; end

# source://erb_lint//lib/erb_lint/runner_config_resolver.rb#25
class ERBLint::RunnerConfigResolver
  # source://erb_lint//lib/erb_lint/runner_config_resolver.rb#26
  def resolve_inheritance(hash, file_loader); end

  # source://erb_lint//lib/erb_lint/runner_config_resolver.rb#38
  def resolve_inheritance_from_gems(hash, gems); end

  private

  # source://erb_lint//lib/erb_lint/runner_config_resolver.rb#59
  def base_configs(file_loader, inherit_from); end

  # source://erb_lint//lib/erb_lint/runner_config_resolver.rb#52
  def gem_config_path(gem_name, relative_config_path); end
end

# source://erb_lint//lib/erb_lint/stats.rb#4
class ERBLint::Stats
  # @return [Stats] a new instance of Stats
  #
  # source://erb_lint//lib/erb_lint/stats.rb#14
  def initialize(ignored: T.unsafe(nil), found: T.unsafe(nil), corrected: T.unsafe(nil), exceptions: T.unsafe(nil), linters: T.unsafe(nil), autocorrectable_linters: T.unsafe(nil), files: T.unsafe(nil), processed_files: T.unsafe(nil)); end

  # Returns the value of attribute autocorrectable_linters.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def autocorrectable_linters; end

  # Sets the attribute autocorrectable_linters
  #
  # @param value the value to set the attribute autocorrectable_linters to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def autocorrectable_linters=(_arg0); end

  # Returns the value of attribute corrected.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def corrected; end

  # Sets the attribute corrected
  #
  # @param value the value to set the attribute corrected to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def corrected=(_arg0); end

  # Returns the value of attribute exceptions.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def exceptions; end

  # Sets the attribute exceptions
  #
  # @param value the value to set the attribute exceptions to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def exceptions=(_arg0); end

  # Returns the value of attribute files.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def files; end

  # Sets the attribute files
  #
  # @param value the value to set the attribute files to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def files=(_arg0); end

  # Returns the value of attribute found.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def found; end

  # Sets the attribute found
  #
  # @param value the value to set the attribute found to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def found=(_arg0); end

  # Returns the value of attribute ignored.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def ignored; end

  # Sets the attribute ignored
  #
  # @param value the value to set the attribute ignored to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def ignored=(_arg0); end

  # Returns the value of attribute linters.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def linters; end

  # Sets the attribute linters
  #
  # @param value the value to set the attribute linters to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def linters=(_arg0); end

  # Returns the value of attribute processed_files.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def processed_files; end

  # Sets the attribute processed_files
  #
  # @param value the value to set the attribute processed_files to.
  #
  # source://erb_lint//lib/erb_lint/stats.rb#5
  def processed_files=(_arg0); end
end

# source://erb_lint//lib/erb_lint/utils/inline_configs.rb#4
module ERBLint::Utils; end

# source://erb_lint//lib/erb_lint/utils/block_map.rb#8
class ERBLint::Utils::BlockMap
  # @return [BlockMap] a new instance of BlockMap
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#13
  def initialize(processed_source); end

  # Returns the value of attribute connections.
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#9
  def connections; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#21
  def find_connected_nodes(other); end

  private

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#187
  def append(code); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#130
  def block?(source); end

  # @raise [ParseError]
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#79
  def build_map; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#183
  def current_pos; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#223
  def erb_ast; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#28
  def erb_nodes; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#152
  def extract_map_locations(node); end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#195
  def find_entry(range); end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#213
  def find_overlapping_pair; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#203
  def group_overlapping_connections; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#191
  def parser; end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#142
  def rescue_locations(node); end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#135
  def when_locations(node); end
end

# source://erb_lint//lib/erb_lint/utils/block_map.rb#46
class ERBLint::Utils::BlockMap::ConnectedErbNodes
  # @return [ConnectedErbNodes] a new instance of ConnectedErbNodes
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#49
  def initialize(type, nodes); end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#66
  def &(other); end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#54
  def concat(other); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#58
  def include?(other); end

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#62
  def inspect; end

  # Returns the value of attribute nodes.
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#47
  def nodes; end

  # Returns the value of attribute type.
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#47
  def type; end

  private

  # source://erb_lint//lib/erb_lint/utils/block_map.rb#72
  def ordered(nodes); end
end

# source://erb_lint//lib/erb_lint/utils/block_map.rb#32
class ERBLint::Utils::BlockMap::Entry
  # @return [Entry] a new instance of Entry
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#35
  def initialize(node, ruby_range); end

  # @return [Boolean]
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#41
  def contains_ruby_range?(range); end

  # Returns the value of attribute erb_range.
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#33
  def erb_range; end

  # Returns the value of attribute node.
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#33
  def node; end

  # Returns the value of attribute ruby_range.
  #
  # source://erb_lint//lib/erb_lint/utils/block_map.rb#33
  def ruby_range; end
end

# source://erb_lint//lib/erb_lint/utils/block_map.rb#11
class ERBLint::Utils::BlockMap::ParseError < ::StandardError; end

# source://erb_lint//lib/erb_lint/utils/inline_configs.rb#5
class ERBLint::Utils::InlineConfigs
  class << self
    # source://erb_lint//lib/erb_lint/utils/inline_configs.rb#10
    def disabled_rules(line); end

    # @return [Boolean]
    #
    # source://erb_lint//lib/erb_lint/utils/inline_configs.rb#6
    def rule_disable_comment_for_lines?(rule, lines); end
  end
end

# source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#5
class ERBLint::Utils::OffsetCorrector
  # @return [OffsetCorrector] a new instance of OffsetCorrector
  #
  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#6
  def initialize(processed_source, corrector, offset, bound_range); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#49
  def bound(pos); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#21
  def insert_after(range, content); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#17
  def insert_before(range, content); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#41
  def range_with_offset(node_or_range); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#13
  def remove(range); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#33
  def remove_leading(range, size); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#29
  def remove_preceding(range, size); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#37
  def remove_trailing(range, size); end

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#25
  def replace(range, content); end

  private

  # source://erb_lint//lib/erb_lint/utils/offset_corrector.rb#58
  def to_range(node_or_range); end
end

# source://erb_lint//lib/erb_lint/utils/ruby_to_erb.rb#5
class ERBLint::Utils::RubyToERB
  class << self
    # source://erb_lint//lib/erb_lint/utils/ruby_to_erb.rb#46
    def escape_quote(str); end

    # source://erb_lint//lib/erb_lint/utils/ruby_to_erb.rb#9
    def html_options_to_tag_attributes(hash_node); end

    # source://erb_lint//lib/erb_lint/utils/ruby_to_erb.rb#18
    def ruby_to_erb(node, indicator = T.unsafe(nil), &block); end
  end
end

# source://erb_lint//lib/erb_lint/utils/ruby_to_erb.rb#6
class ERBLint::Utils::RubyToERB::Error < ::StandardError; end

# source://erb_lint//lib/erb_lint/version.rb#4
ERBLint::VERSION = T.let(T.unsafe(nil), String)

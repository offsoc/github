# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ProgrammaticAccessBot`.
# Please instead update this file by running `bin/tapioca dsl ProgrammaticAccessBot`.

class ProgrammaticAccessBot
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(T.untyped) }
  def password_confirmation; end

  sig { params(password_confirmation: T.untyped).returns(T.untyped) }
  def password_confirmation=(password_confirmation); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ProgrammaticAccessBot).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ProgrammaticAccessBot)) }
    def fifth; end

    sig { returns(::ProgrammaticAccessBot) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::ProgrammaticAccessBot)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ProgrammaticAccessBot) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(T.nilable(T::Enumerator[::ProgrammaticAccessBot]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::ProgrammaticAccessBot]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::ProgrammaticAccessBot]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::ProgrammaticAccessBot)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::ProgrammaticAccessBot) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::ProgrammaticAccessBot) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::ProgrammaticAccessBot) }
    def first!; end

    sig { returns(T.nilable(::ProgrammaticAccessBot)) }
    def forty_two; end

    sig { returns(::ProgrammaticAccessBot) }
    def forty_two!; end

    sig { returns(T.nilable(::ProgrammaticAccessBot)) }
    def fourth; end

    sig { returns(::ProgrammaticAccessBot) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::ProgrammaticAccessBot) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ProgrammaticAccessBot).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ProgrammaticAccessBot).void)
      ).returns(::ProgrammaticAccessBot)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ProgrammaticAccessBot).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ProgrammaticAccessBot).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ProgrammaticAccessBot)) }
    def second; end

    sig { returns(::ProgrammaticAccessBot) }
    def second!; end

    sig { returns(T.nilable(::ProgrammaticAccessBot)) }
    def second_to_last; end

    sig { returns(::ProgrammaticAccessBot) }
    def second_to_last!; end

    sig { returns(::ProgrammaticAccessBot) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::ProgrammaticAccessBot) }
    def take!; end

    sig { returns(T.nilable(::ProgrammaticAccessBot)) }
    def third; end

    sig { returns(::ProgrammaticAccessBot) }
    def third!; end

    sig { returns(T.nilable(::ProgrammaticAccessBot)) }
    def third_to_last; end

    sig { returns(::ProgrammaticAccessBot) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :abuse_reports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def abuse_reports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def achievement_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def achievement_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def achievement_progression_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def achievement_progression_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :achievement_progressions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AchievementProgression::PrivateCollectionProxy) }
    def achievement_progressions; end

    sig { params(value: T::Enumerable[::AchievementProgression]).void }
    def achievement_progressions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :achievements`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Achievement::PrivateCollectionProxy) }
    def achievements; end

    sig { params(value: T::Enumerable[::Achievement]).void }
    def achievements=(value); end

    sig { returns(T::Array[T.untyped]) }
    def active_marketplace_listing_subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_marketplace_listing_subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :active_marketplace_listing_subscription_items, through: :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def active_marketplace_listing_subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def active_marketplace_listing_subscription_items=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :active_recurring_sponsorships_as_sponsorable`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sponsorship::PrivateCollectionProxy) }
    def active_recurring_sponsorships_as_sponsorable; end

    sig { params(value: T::Enumerable[::Sponsorship]).void }
    def active_recurring_sponsorships_as_sponsorable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def active_recurring_sponsorships_as_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_recurring_sponsorships_as_sponsorable_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :active_sponsorships_as_sponsorable`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sponsorship::PrivateCollectionProxy) }
    def active_sponsorships_as_sponsorable; end

    sig { params(value: T::Enumerable[::Sponsorship]).void }
    def active_sponsorships_as_sponsorable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def active_sponsorships_as_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_sponsorships_as_sponsorable_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def active_subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def active_subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :active_subscription_items, through: :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def active_subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def active_subscription_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def advisory_credit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def advisory_credit_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :advisory_credits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AdvisoryCredit::PrivateCollectionProxy) }
    def advisory_credits; end

    sig { params(value: T::Enumerable[::AdvisoryCredit]).void }
    def advisory_credits=(value); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def approved_sponsors_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def approved_sponsors_listing=(value); end

    sig { returns(T::Array[T.untyped]) }
    def asset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def asset_ids=(ids); end

    sig { returns(T.nilable(::Asset::Status)) }
    def asset_status; end

    sig { params(value: T.nilable(::Asset::Status)).void }
    def asset_status=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :assets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserAsset::PrivateCollectionProxy) }
    def assets; end

    sig { params(value: T::Enumerable[::UserAsset]).void }
    def assets=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :audit_log_async_queries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuditLogAsyncQuery::PrivateCollectionProxy) }
    def audit_log_async_queries; end

    sig { params(value: T::Enumerable[::AuditLogAsyncQuery]).void }
    def audit_log_async_queries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def audit_log_async_query_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_log_async_query_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def audit_log_git_event_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_log_git_event_export_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :audit_log_git_event_exports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuditLogGitEventExport::PrivateCollectionProxy) }
    def audit_log_git_event_exports; end

    sig { params(value: T::Enumerable[::AuditLogGitEventExport]).void }
    def audit_log_git_event_exports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def audit_log_web_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_log_web_export_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :audit_log_web_exports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuditLogWebExport::PrivateCollectionProxy) }
    def audit_log_web_exports; end

    sig { params(value: T::Enumerable[::AuditLogWebExport]).void }
    def audit_log_web_exports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def authenticated_device_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def authenticated_device_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :authenticated_devices`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuthenticatedDevice::PrivateCollectionProxy) }
    def authenticated_devices; end

    sig { params(value: T::Enumerable[::AuthenticatedDevice]).void }
    def authenticated_devices=(value); end

    sig { returns(T::Array[T.untyped]) }
    def authentication_record_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def authentication_record_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :authentication_records`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuthenticationRecord::PrivateCollectionProxy) }
    def authentication_records; end

    sig { params(value: T::Enumerable[::AuthenticationRecord]).void }
    def authentication_records=(value); end

    sig { returns(T::Array[T.untyped]) }
    def authored_feed_post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def authored_feed_post_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :authored_feed_posts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::FeedPost::PrivateCollectionProxy) }
    def authored_feed_posts; end

    sig { params(value: T::Enumerable[::FeedPost]).void }
    def authored_feed_posts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def avatar_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def avatar_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :avatars`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Avatar::PrivateCollectionProxy) }
    def avatars; end

    sig { params(value: T::Enumerable[::Avatar]).void }
    def avatars=(value); end

    sig { returns(T.nilable(::UserEmail)) }
    def backup_user_email; end

    sig { params(value: T.nilable(::UserEmail)).void }
    def backup_user_email=(value); end

    sig { returns(T.nilable(::EmailRole)) }
    def backup_user_email_role; end

    sig { params(value: T.nilable(::EmailRole)).void }
    def backup_user_email_role=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billing_dispute_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_dispute_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :billing_disputes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::Dispute::PrivateCollectionProxy) }
    def billing_disputes; end

    sig { params(value: T::Enumerable[::Billing::Dispute]).void }
    def billing_disputes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billing_transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :billing_transactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransaction::PrivateCollectionProxy) }
    def billing_transactions; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction]).void }
    def billing_transactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def billing_transactions_sale_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_transactions_sale_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :billing_transactions_sales`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransaction::PrivateCollectionProxy) }
    def billing_transactions_sales; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction]).void }
    def billing_transactions_sales=(value); end

    sig { returns(T::Array[T.untyped]) }
    def budget_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def budget_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :budgets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::Budget::PrivateCollectionProxy) }
    def budgets; end

    sig { params(value: T::Enumerable[::Billing::Budget]).void }
    def budgets=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_approved_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Asset::Status) }
    def build_asset_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def build_backup_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def build_backup_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BulkSponsorshipImport) }
    def build_bulk_sponsorship_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BulkSponsorshipTierSelection) }
    def build_bulk_sponsorship_tier_selection(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BusinessUserAccount) }
    def build_business_user_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasMapping) }
    def build_cas_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomUser) }
    def build_classroom_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_configuration_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CustomerAccount) }
    def build_customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserDashboard) }
    def build_dashboard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeceasedUser) }
    def build_deceased_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeveloperProgramMembership) }
    def build_developer_program_membership(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::FeedFilterSettings) }
    def build_feed_filter_settings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_first_non_fork_public_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ForYouFeedFilterSettings) }
    def build_for_you_feed_filter_settings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GlobalNotice) }
    def build_global_notice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Interaction) }
    def build_interaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionSetting) }
    def build_interaction_setting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AbuseReport) }
    def build_latest_received_abuse_report(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LdapMapping) }
    def build_ldap_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LegalHold) }
    def build_legal_hold(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ManualDunningPeriod) }
    def build_manual_dunning_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def build_marketplace_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MobilePushNotificationSetting) }
    def build_mobile_push_notification_setting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_most_popular_public_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserSession) }
    def build_most_recent_session(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsBusinessTaxIdentifier) }
    def build_newest_sponsors_business_tax_identifier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrcidRecord) }
    def build_orcid_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationFeedFilterSettings) }
    def build_organization_feed_filter_settings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PrereleaseProgramMember) }
    def build_prerelease_agreement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def build_primary_private_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def build_primary_private_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def build_primary_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def build_primary_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def build_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def build_repo_interaction_limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SamlMapping) }
    def build_saml_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SAML::Session) }
    def build_saml_session(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SoftDeletedOrganization) }
    def build_soft_deleted_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationProfile) }
    def build_sponsoring_parent_organization_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def build_sponsors_contact_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_sponsors_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CustomerAccount) }
    def build_sponsors_customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def build_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def build_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsPatreonUser) }
    def build_sponsors_patreon_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def build_stealth_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def build_stealth_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TotpAppRegistration) }
    def build_totp_app_registration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TradeControls::Restriction) }
    def build_trade_controls_restriction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def build_trade_screening_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TwoFactorCredential) }
    def build_two_factor_credential(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TwoFactorRequirementMetadata) }
    def build_two_factor_requirement_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def build_user_interaction_limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserMetadata) }
    def build_user_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserProgrammaticAccess) }
    def build_user_programmatic_access(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserSettings) }
    def build_user_settings_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserStatus) }
    def build_user_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserWhitelisting) }
    def build_user_whitelisting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::WebauthnUserHandle) }
    def build_webauthn_user_handle(*args, &blk); end

    sig { returns(T.nilable(::BulkSponsorshipImport)) }
    def bulk_sponsorship_import; end

    sig { params(value: T.nilable(::BulkSponsorshipImport)).void }
    def bulk_sponsorship_import=(value); end

    sig { returns(T.nilable(::BulkSponsorshipTierSelection)) }
    def bulk_sponsorship_tier_selection; end

    sig { params(value: T.nilable(::BulkSponsorshipTierSelection)).void }
    def bulk_sponsorship_tier_selection=(value); end

    sig { returns(T::Array[T.untyped]) }
    def business_administrator_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def business_administrator_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :business_administrator_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BusinessAdministratorInvitation::PrivateCollectionProxy) }
    def business_administrator_invitations; end

    sig { params(value: T::Enumerable[::BusinessAdministratorInvitation]).void }
    def business_administrator_invitations=(value); end

    sig { returns(T.nilable(::BusinessUserAccount)) }
    def business_user_account; end

    sig { params(value: T.nilable(::BusinessUserAccount)).void }
    def business_user_account=(value); end

    sig { returns(T::Array[T.untyped]) }
    def business_user_account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def business_user_account_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :business_user_accounts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BusinessUserAccount::PrivateCollectionProxy) }
    def business_user_accounts; end

    sig { params(value: T::Enumerable[::BusinessUserAccount]).void }
    def business_user_accounts=(value); end

    sig { returns(T.nilable(::CasMapping)) }
    def cas_mapping; end

    sig { params(value: T.nilable(::CasMapping)).void }
    def cas_mapping=(value); end

    sig { returns(T.nilable(::ClassroomUser)) }
    def classroom_user; end

    sig { params(value: T.nilable(::ClassroomUser)).void }
    def classroom_user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def codespace_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def codespace_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :codespaces`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Codespace::PrivateCollectionProxy) }
    def codespaces; end

    sig { params(value: T::Enumerable[::Codespace]).void }
    def codespaces=(value); end

    sig { returns(T::Array[T.untyped]) }
    def codespaces_repository_authorization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def codespaces_repository_authorization_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :codespaces_repository_authorizations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Codespaces::RepositoryAuthorization::PrivateCollectionProxy) }
    def codespaces_repository_authorizations; end

    sig { params(value: T::Enumerable[::Codespaces::RepositoryAuthorization]).void }
    def codespaces_repository_authorizations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def commit_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commit_comment_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def commit_comment_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commit_comment_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :commit_comment_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CommitCommentReaction::PrivateCollectionProxy) }
    def commit_comment_reactions; end

    sig { params(value: T::Enumerable[::CommitCommentReaction]).void }
    def commit_comment_reactions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :commit_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CommitComment::PrivateCollectionProxy) }
    def commit_comments; end

    sig { params(value: T::Enumerable[::CommitComment]).void }
    def commit_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def commit_contribution_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commit_contribution_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :commit_contribution_summaries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CommitContributionSummary::PrivateCollectionProxy) }
    def commit_contribution_summaries; end

    sig { params(value: T::Enumerable[::CommitContributionSummary]).void }
    def commit_contribution_summaries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def commit_contribution_summary_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commit_contribution_summary_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :commit_contributions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CommitContribution::PrivateCollectionProxy) }
    def commit_contributions; end

    sig { params(value: T::Enumerable[::CommitContribution]).void }
    def commit_contributions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_and_belongs_to_many :companies`.
    # ðŸ”— [Rails guide for `has_and_belongs_to_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association)
    sig { returns(::Company::PrivateCollectionProxy) }
    def companies; end

    sig { params(value: T::Enumerable[::Company]).void }
    def companies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def company_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def company_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :configuration_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Configuration::Entry::PrivateCollectionProxy) }
    def configuration_entries; end

    sig { params(value: T::Enumerable[::Configuration::Entry]).void }
    def configuration_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def configuration_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def configuration_entry_ids=(ids); end

    sig { returns(T.nilable(::Repository)) }
    def configuration_repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def configuration_repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def coupon_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def coupon_redemption_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def coupon_redemption_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :coupon_redemptions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CouponRedemption::PrivateCollectionProxy) }
    def coupon_redemptions; end

    sig { params(value: T::Enumerable[::CouponRedemption]).void }
    def coupon_redemptions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :coupons, through: :coupon_redemptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Coupon::PrivateCollectionProxy) }
    def coupons; end

    sig { params(value: T::Enumerable[::Coupon]).void }
    def coupons=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_approved_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_approved_sponsors_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Asset::Status) }
    def create_asset_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Asset::Status) }
    def create_asset_status!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_backup_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_backup_user_email!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_backup_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_backup_user_email_role!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BulkSponsorshipImport) }
    def create_bulk_sponsorship_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BulkSponsorshipImport) }
    def create_bulk_sponsorship_import!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BulkSponsorshipTierSelection) }
    def create_bulk_sponsorship_tier_selection(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BulkSponsorshipTierSelection) }
    def create_bulk_sponsorship_tier_selection!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BusinessUserAccount) }
    def create_business_user_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BusinessUserAccount) }
    def create_business_user_account!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasMapping) }
    def create_cas_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CasMapping) }
    def create_cas_mapping!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomUser) }
    def create_classroom_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ClassroomUser) }
    def create_classroom_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_configuration_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_configuration_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CustomerAccount) }
    def create_customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CustomerAccount) }
    def create_customer_account!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserDashboard) }
    def create_dashboard(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserDashboard) }
    def create_dashboard!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeceasedUser) }
    def create_deceased_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeceasedUser) }
    def create_deceased_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeveloperProgramMembership) }
    def create_developer_program_membership(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DeveloperProgramMembership) }
    def create_developer_program_membership!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::FeedFilterSettings) }
    def create_feed_filter_settings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::FeedFilterSettings) }
    def create_feed_filter_settings!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_first_non_fork_public_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_first_non_fork_public_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ForYouFeedFilterSettings) }
    def create_for_you_feed_filter_settings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ForYouFeedFilterSettings) }
    def create_for_you_feed_filter_settings!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GlobalNotice) }
    def create_global_notice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GlobalNotice) }
    def create_global_notice!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Interaction) }
    def create_interaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Interaction) }
    def create_interaction!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionSetting) }
    def create_interaction_setting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionSetting) }
    def create_interaction_setting!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AbuseReport) }
    def create_latest_received_abuse_report(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AbuseReport) }
    def create_latest_received_abuse_report!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LdapMapping) }
    def create_ldap_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LdapMapping) }
    def create_ldap_mapping!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LegalHold) }
    def create_legal_hold(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::LegalHold) }
    def create_legal_hold!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ManualDunningPeriod) }
    def create_manual_dunning_period(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::ManualDunningPeriod) }
    def create_manual_dunning_period!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_marketplace_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_marketplace_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MobilePushNotificationSetting) }
    def create_mobile_push_notification_setting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MobilePushNotificationSetting) }
    def create_mobile_push_notification_setting!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_most_popular_public_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_most_popular_public_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserSession) }
    def create_most_recent_session(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserSession) }
    def create_most_recent_session!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsBusinessTaxIdentifier) }
    def create_newest_sponsors_business_tax_identifier(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsBusinessTaxIdentifier) }
    def create_newest_sponsors_business_tax_identifier!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrcidRecord) }
    def create_orcid_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrcidRecord) }
    def create_orcid_record!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationFeedFilterSettings) }
    def create_organization_feed_filter_settings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationFeedFilterSettings) }
    def create_organization_feed_filter_settings!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PrereleaseProgramMember) }
    def create_prerelease_agreement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PrereleaseProgramMember) }
    def create_prerelease_agreement!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_primary_private_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_primary_private_user_email!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_primary_private_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_primary_private_user_email_role!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_primary_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_primary_user_email!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_primary_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_primary_user_email_role!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def create_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Profile) }
    def create_profile!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def create_repo_interaction_limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def create_repo_interaction_limit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SamlMapping) }
    def create_saml_mapping(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SamlMapping) }
    def create_saml_mapping!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SAML::Session) }
    def create_saml_session(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SAML::Session) }
    def create_saml_session!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SoftDeletedOrganization) }
    def create_soft_deleted_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SoftDeletedOrganization) }
    def create_soft_deleted_organization!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationProfile) }
    def create_sponsoring_parent_organization_profile(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::OrganizationProfile) }
    def create_sponsoring_parent_organization_profile!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_sponsors_contact_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_sponsors_contact_email!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_sponsors_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_sponsors_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CustomerAccount) }
    def create_sponsors_customer_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CustomerAccount) }
    def create_sponsors_customer_account!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListing) }
    def create_sponsors_listing!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsListingStafftoolsMetadata) }
    def create_sponsors_listing_stafftools_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsPatreonUser) }
    def create_sponsors_patreon_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SponsorsPatreonUser) }
    def create_sponsors_patreon_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_sponsors_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_stealth_user_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserEmail) }
    def create_stealth_user_email!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_stealth_user_email_role(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::EmailRole) }
    def create_stealth_user_email_role!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TotpAppRegistration) }
    def create_totp_app_registration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TotpAppRegistration) }
    def create_totp_app_registration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TradeControls::Restriction) }
    def create_trade_controls_restriction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TradeControls::Restriction) }
    def create_trade_controls_restriction!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def create_trade_screening_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountScreeningProfile) }
    def create_trade_screening_record!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TwoFactorCredential) }
    def create_two_factor_credential(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TwoFactorCredential) }
    def create_two_factor_credential!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TwoFactorRequirementMetadata) }
    def create_two_factor_requirement_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::TwoFactorRequirementMetadata) }
    def create_two_factor_requirement_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def create_user_interaction_limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InteractionLimit) }
    def create_user_interaction_limit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserMetadata) }
    def create_user_metadata(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserMetadata) }
    def create_user_metadata!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserProgrammaticAccess) }
    def create_user_programmatic_access(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserProgrammaticAccess) }
    def create_user_programmatic_access!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserSettings) }
    def create_user_settings_record(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserSettings) }
    def create_user_settings_record!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserStatus) }
    def create_user_status(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserStatus) }
    def create_user_status!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserWhitelisting) }
    def create_user_whitelisting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserWhitelisting) }
    def create_user_whitelisting!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::WebauthnUserHandle) }
    def create_webauthn_user_handle(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::WebauthnUserHandle) }
    def create_webauthn_user_handle!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def created_memex_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def created_memex_project_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :created_memex_projects`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProject::PrivateCollectionProxy) }
    def created_memex_projects; end

    sig { params(value: T::Enumerable[::MemexProject]).void }
    def created_memex_projects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def created_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def created_project_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :created_projects`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Project::PrivateCollectionProxy) }
    def created_projects; end

    sig { params(value: T::Enumerable[::Project]).void }
    def created_projects=(value); end

    sig { returns(T.nilable(::Customer)) }
    def customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def customer=(value); end

    sig { returns(T.nilable(::CustomerAccount)) }
    def customer_account; end

    sig { params(value: T.nilable(::CustomerAccount)).void }
    def customer_account=(value); end

    sig { returns(T::Array[T.untyped]) }
    def customer_account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def customer_account_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :customer_accounts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CustomerAccount::PrivateCollectionProxy) }
    def customer_accounts; end

    sig { params(value: T::Enumerable[::CustomerAccount]).void }
    def customer_accounts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def customer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def customer_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :customers, through: :customer_accounts`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Customer::PrivateCollectionProxy) }
    def customers; end

    sig { params(value: T::Enumerable[::Customer]).void }
    def customers=(value); end

    sig { returns(T.nilable(::UserDashboard)) }
    def dashboard; end

    sig { params(value: T.nilable(::UserDashboard)).void }
    def dashboard=(value); end

    sig { returns(T::Array[T.untyped]) }
    def dashboard_pin_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def dashboard_pin_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :dashboard_pins`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserDashboardPin::PrivateCollectionProxy) }
    def dashboard_pins; end

    sig { params(value: T::Enumerable[::UserDashboardPin]).void }
    def dashboard_pins=(value); end

    sig { returns(T.nilable(::DeceasedUser)) }
    def deceased_user; end

    sig { params(value: T.nilable(::DeceasedUser)).void }
    def deceased_user=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :deleted_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def deleted_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def deleted_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def deleted_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def deleted_repository_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def delivered_repository_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def delivered_repository_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :delivered_repository_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryInvitation::PrivateCollectionProxy) }
    def delivered_repository_invitations; end

    sig { params(value: T::Enumerable[::RepositoryInvitation]).void }
    def delivered_repository_invitations=(value); end

    sig { returns(T.nilable(::DeveloperProgramMembership)) }
    def developer_program_membership; end

    sig { params(value: T.nilable(::DeveloperProgramMembership)).void }
    def developer_program_membership=(value); end

    sig { returns(T::Array[T.untyped]) }
    def disabled_org_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def disabled_org_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :disabled_orgs`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Organization::PrivateCollectionProxy) }
    def disabled_orgs; end

    sig { params(value: T::Enumerable[::Organization]).void }
    def disabled_orgs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_comment_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_comment_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_comment_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :discussion_comment_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionCommentReaction::PrivateCollectionProxy) }
    def discussion_comment_reactions; end

    sig { params(value: T::Enumerable[::DiscussionCommentReaction]).void }
    def discussion_comment_reactions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :discussion_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionComment::PrivateCollectionProxy) }
    def discussion_comments; end

    sig { params(value: T::Enumerable[::DiscussionComment]).void }
    def discussion_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_post_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_post_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :discussion_post_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def discussion_post_reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def discussion_post_reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_post_reply_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_post_reply_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :discussion_post_reply_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def discussion_post_reply_reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def discussion_post_reply_reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def discussion_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def discussion_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :discussion_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionReaction::PrivateCollectionProxy) }
    def discussion_reactions; end

    sig { params(value: T::Enumerable[::DiscussionReaction]).void }
    def discussion_reactions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :discussions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Discussion::PrivateCollectionProxy) }
    def discussions; end

    sig { params(value: T::Enumerable[::Discussion]).void }
    def discussions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def email_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def email_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def email_role_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def email_role_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :email_roles`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EmailRole::PrivateCollectionProxy) }
    def email_roles; end

    sig { params(value: T::Enumerable[::EmailRole]).void }
    def email_roles=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :emails`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserEmail::PrivateCollectionProxy) }
    def emails; end

    sig { params(value: T::Enumerable[::UserEmail]).void }
    def emails=(value); end

    sig { returns(T::Array[T.untyped]) }
    def enterprise_contribution_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def enterprise_contribution_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :enterprise_contributions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EnterpriseContribution::PrivateCollectionProxy) }
    def enterprise_contributions; end

    sig { params(value: T::Enumerable[::EnterpriseContribution]).void }
    def enterprise_contributions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def expired_coupon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def expired_coupon_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :expired_coupons`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CouponRedemption::PrivateCollectionProxy) }
    def expired_coupons; end

    sig { params(value: T::Enumerable[::CouponRedemption]).void }
    def expired_coupons=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :external_identities`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ExternalIdentity::PrivateCollectionProxy) }
    def external_identities; end

    sig { params(value: T::Enumerable[::ExternalIdentity]).void }
    def external_identities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def external_identity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def external_identity_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def external_identity_session_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def external_identity_session_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :external_identity_sessions, through: :sessions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ExternalIdentitySession::PrivateCollectionProxy) }
    def external_identity_sessions; end

    sig { params(value: T::Enumerable[::ExternalIdentitySession]).void }
    def external_identity_sessions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def feature_enrollment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def feature_enrollment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :feature_enrollments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::FeatureEnrollment::PrivateCollectionProxy) }
    def feature_enrollments; end

    sig { params(value: T::Enumerable[::FeatureEnrollment]).void }
    def feature_enrollments=(value); end

    sig { returns(T.nilable(::FeedFilterSettings)) }
    def feed_filter_settings; end

    sig { params(value: T.nilable(::FeedFilterSettings)).void }
    def feed_filter_settings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def feed_post_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def feed_post_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :feed_post_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::FeedPostComment::PrivateCollectionProxy) }
    def feed_post_comments; end

    sig { params(value: T::Enumerable[::FeedPostComment]).void }
    def feed_post_comments=(value); end

    sig { returns(T.nilable(::Repository)) }
    def first_non_fork_public_repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def first_non_fork_public_repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def followed_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def followed_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :followeds`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Following::PrivateCollectionProxy) }
    def followeds; end

    sig { params(value: T::Enumerable[::Following]).void }
    def followeds=(value); end

    sig { returns(T::Array[T.untyped]) }
    def follower_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def follower_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :followers, through: :followeds`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def followers; end

    sig { params(value: T::Enumerable[::User]).void }
    def followers=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :following, through: :followings`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def following; end

    sig { params(value: T::Enumerable[::User]).void }
    def following=(value); end

    sig { returns(T::Array[T.untyped]) }
    def following_ids; end

    sig { returns(T::Array[T.untyped]) }
    def following_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def following_ids=(ids); end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def following_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :followings`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Following::PrivateCollectionProxy) }
    def followings; end

    sig { params(value: T::Enumerable[::Following]).void }
    def followings=(value); end

    sig { returns(T.nilable(::ForYouFeedFilterSettings)) }
    def for_you_feed_filter_settings; end

    sig { params(value: T.nilable(::ForYouFeedFilterSettings)).void }
    def for_you_feed_filter_settings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gist_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gist_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :gist_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::GistComment::PrivateCollectionProxy) }
    def gist_comments; end

    sig { params(value: T::Enumerable[::GistComment]).void }
    def gist_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gist_fork_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gist_fork_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :gist_forks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Gist::PrivateCollectionProxy) }
    def gist_forks; end

    sig { params(value: T::Enumerable[::Gist]).void }
    def gist_forks=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gist_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gist_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def gist_star_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gist_star_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :gist_stars`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::GistStar::PrivateCollectionProxy) }
    def gist_stars; end

    sig { params(value: T::Enumerable[::GistStar]).void }
    def gist_stars=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :gists`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Gist::PrivateCollectionProxy) }
    def gists; end

    sig { params(value: T::Enumerable[::Gist]).void }
    def gists=(value); end

    sig { returns(T::Array[T.untyped]) }
    def git_signing_ssh_public_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def git_signing_ssh_public_key_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :git_signing_ssh_public_keys`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::GitSigningSshPublicKey::PrivateCollectionProxy) }
    def git_signing_ssh_public_keys; end

    sig { params(value: T::Enumerable[::GitSigningSshPublicKey]).void }
    def git_signing_ssh_public_keys=(value); end

    sig { returns(T.nilable(::GlobalNotice)) }
    def global_notice; end

    sig { params(value: T.nilable(::GlobalNotice)).void }
    def global_notice=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gpg_key_email_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gpg_key_email_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :gpg_key_emails, through: :gpg_keys`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::GpgKeyEmail::PrivateCollectionProxy) }
    def gpg_key_emails; end

    sig { params(value: T::Enumerable[::GpgKeyEmail]).void }
    def gpg_key_emails=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gpg_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gpg_key_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :gpg_keys`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::GpgKey::PrivateCollectionProxy) }
    def gpg_keys; end

    sig { params(value: T::Enumerable[::GpgKey]).void }
    def gpg_keys=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :ignored, through: :ignored_users`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def ignored; end

    sig { params(value: T::Enumerable[::User]).void }
    def ignored=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :ignored_by, through: :ignored_by_users`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def ignored_by; end

    sig { params(value: T::Enumerable[::User]).void }
    def ignored_by=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ignored_by_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ignored_by_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def ignored_by_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ignored_by_user_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :ignored_by_users`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IgnoredUser::PrivateCollectionProxy) }
    def ignored_by_users; end

    sig { params(value: T::Enumerable[::IgnoredUser]).void }
    def ignored_by_users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def ignored_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ignored_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def ignored_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def ignored_user_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :ignored_users`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IgnoredUser::PrivateCollectionProxy) }
    def ignored_users; end

    sig { params(value: T::Enumerable[::IgnoredUser]).void }
    def ignored_users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def inbound_application_transfer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def inbound_application_transfer_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :inbound_application_transfers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OauthApplicationTransfer::PrivateCollectionProxy) }
    def inbound_application_transfers; end

    sig { params(value: T::Enumerable[::OauthApplicationTransfer]).void }
    def inbound_application_transfers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def inbound_integration_transfer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def inbound_integration_transfer_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :inbound_integration_transfers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationTransfer::PrivateCollectionProxy) }
    def inbound_integration_transfers; end

    sig { params(value: T::Enumerable[::IntegrationTransfer]).void }
    def inbound_integration_transfers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def incomplete_pending_plan_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def incomplete_pending_plan_change_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :incomplete_pending_plan_changes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PendingPlanChange::PrivateCollectionProxy) }
    def incomplete_pending_plan_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingPlanChange]).void }
    def incomplete_pending_plan_changes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def integration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def integration_installation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_installation_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def integration_installation_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_installation_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :integration_installation_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationInstallationRequest::PrivateCollectionProxy) }
    def integration_installation_requests; end

    sig { params(value: T::Enumerable[::IntegrationInstallationRequest]).void }
    def integration_installation_requests=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :integration_installations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationInstallation::PrivateCollectionProxy) }
    def integration_installations; end

    sig { params(value: T::Enumerable[::IntegrationInstallation]).void }
    def integration_installations=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :integrations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Integration::PrivateCollectionProxy) }
    def integrations; end

    sig { params(value: T::Enumerable[::Integration]).void }
    def integrations=(value); end

    sig { returns(T.nilable(::Interaction)) }
    def interaction; end

    sig { params(value: T.nilable(::Interaction)).void }
    def interaction=(value); end

    sig { returns(T.nilable(::InteractionSetting)) }
    def interaction_setting; end

    sig { params(value: T.nilable(::InteractionSetting)).void }
    def interaction_setting=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :invited_repositories, through: :received_repository_invitations`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def invited_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def invited_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invited_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invited_repository_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :invoiced_sponsorship_transfers_as_sponsor`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InvoicedSponsorshipTransfer::PrivateCollectionProxy) }
    def invoiced_sponsorship_transfers_as_sponsor; end

    sig { params(value: T::Enumerable[::InvoicedSponsorshipTransfer]).void }
    def invoiced_sponsorship_transfers_as_sponsor=(value); end

    sig { returns(T::Array[T.untyped]) }
    def invoiced_sponsorship_transfers_as_sponsor_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def invoiced_sponsorship_transfers_as_sponsor_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def issue_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_comment_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def issue_comment_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_comment_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :issue_comment_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueCommentReaction::PrivateCollectionProxy) }
    def issue_comment_reactions; end

    sig { params(value: T::Enumerable[::IssueCommentReaction]).void }
    def issue_comment_reactions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :issue_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueComment::PrivateCollectionProxy) }
    def issue_comments; end

    sig { params(value: T::Enumerable[::IssueComment]).void }
    def issue_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def issue_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :issue_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueReaction::PrivateCollectionProxy) }
    def issue_reactions; end

    sig { params(value: T::Enumerable[::IssueReaction]).void }
    def issue_reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def issue_type_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def issue_type_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :issue_types`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueType::PrivateCollectionProxy) }
    def issue_types; end

    sig { params(value: T::Enumerable[::IssueType]).void }
    def issue_types=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :issues`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Issue::PrivateCollectionProxy) }
    def issues; end

    sig { params(value: T::Enumerable[::Issue]).void }
    def issues=(value); end

    sig { returns(T.nilable(::AbuseReport)) }
    def latest_received_abuse_report; end

    sig { params(value: T.nilable(::AbuseReport)).void }
    def latest_received_abuse_report=(value); end

    sig { returns(T.nilable(::LdapMapping)) }
    def ldap_mapping; end

    sig { params(value: T.nilable(::LdapMapping)).void }
    def ldap_mapping=(value); end

    sig { returns(T.nilable(::LegalHold)) }
    def legal_hold; end

    sig { params(value: T.nilable(::LegalHold)).void }
    def legal_hold=(value); end

    sig { returns(T::Array[T.untyped]) }
    def line_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def line_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :line_items, through: :billing_transactions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::BillingTransaction::LineItem::PrivateCollectionProxy) }
    def line_items; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction::LineItem]).void }
    def line_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def list_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def list_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :lists`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserList::PrivateCollectionProxy) }
    def lists; end

    sig { params(value: T::Enumerable[::UserList]).void }
    def lists=(value); end

    sig { returns(T::Array[T.untyped]) }
    def mannequin_claim_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def mannequin_claim_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :mannequin_claims`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MannequinClaim::PrivateCollectionProxy) }
    def mannequin_claims; end

    sig { params(value: T::Enumerable[::MannequinClaim]).void }
    def mannequin_claims=(value); end

    sig { returns(T::Array[T.untyped]) }
    def mannequin_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def mannequin_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :mannequins, through: :mannequin_claims`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Mannequin::PrivateCollectionProxy) }
    def mannequins; end

    sig { params(value: T::Enumerable[::Mannequin]).void }
    def mannequins=(value); end

    sig { returns(T.nilable(::Billing::ManualDunningPeriod)) }
    def manual_dunning_period; end

    sig { params(value: T.nilable(::Billing::ManualDunningPeriod)).void }
    def manual_dunning_period=(value); end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def marketplace_listing; end

    sig { params(value: T.nilable(::Marketplace::Listing)).void }
    def marketplace_listing=(value); end

    sig { returns(T::Array[T.untyped]) }
    def marketplace_order_preview_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def marketplace_order_preview_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :marketplace_order_previews`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::OrderPreview::PrivateCollectionProxy) }
    def marketplace_order_previews; end

    sig { params(value: T::Enumerable[::Marketplace::OrderPreview]).void }
    def marketplace_order_previews=(value); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_column_value_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_column_value_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :memex_project_column_values`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProjectColumnValue::PrivateCollectionProxy) }
    def memex_project_column_values; end

    sig { params(value: T::Enumerable[::MemexProjectColumnValue]).void }
    def memex_project_column_values=(value); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :memex_project_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProjectItem::PrivateCollectionProxy) }
    def memex_project_items; end

    sig { params(value: T::Enumerable[::MemexProjectItem]).void }
    def memex_project_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_visit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_visit_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :memex_project_visits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProjectVisit::PrivateCollectionProxy) }
    def memex_project_visits; end

    sig { params(value: T::Enumerable[::MemexProjectVisit]).void }
    def memex_project_visits=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :memex_projects`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProject::PrivateCollectionProxy) }
    def memex_projects; end

    sig { params(value: T::Enumerable[::MemexProject]).void }
    def memex_projects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def metered_usage_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def metered_usage_export_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :metered_usage_exports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::MeteredUsageExport::PrivateCollectionProxy) }
    def metered_usage_exports; end

    sig { params(value: T::Enumerable[::Billing::MeteredUsageExport]).void }
    def metered_usage_exports=(value); end

    sig { returns(T.nilable(::MobilePushNotificationSetting)) }
    def mobile_push_notification_setting; end

    sig { params(value: T.nilable(::MobilePushNotificationSetting)).void }
    def mobile_push_notification_setting=(value); end

    sig { returns(T.nilable(::Repository)) }
    def most_popular_public_repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def most_popular_public_repository=(value); end

    sig { returns(T.nilable(::UserSession)) }
    def most_recent_session; end

    sig { params(value: T.nilable(::UserSession)).void }
    def most_recent_session=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :move_work`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MoveWork::PrivateCollectionProxy) }
    def move_work; end

    sig { params(value: T::Enumerable[::MoveWork]).void }
    def move_work=(value); end

    sig { returns(T::Array[T.untyped]) }
    def move_work_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def move_work_ids=(ids); end

    sig { returns(T.nilable(::SponsorsBusinessTaxIdentifier)) }
    def newest_sponsors_business_tax_identifier; end

    sig { params(value: T.nilable(::SponsorsBusinessTaxIdentifier)).void }
    def newest_sponsors_business_tax_identifier=(value); end

    sig { returns(T::Array[T.untyped]) }
    def newsletter_subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def newsletter_subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :newsletter_subscriptions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::NewsletterSubscription::PrivateCollectionProxy) }
    def newsletter_subscriptions; end

    sig { params(value: T::Enumerable[::NewsletterSubscription]).void }
    def newsletter_subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def oauth_access_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def oauth_access_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :oauth_accesses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OauthAccess::PrivateCollectionProxy) }
    def oauth_accesses; end

    sig { params(value: T::Enumerable[::OauthAccess]).void }
    def oauth_accesses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def oauth_application_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def oauth_application_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :oauth_applications`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OauthApplication::PrivateCollectionProxy) }
    def oauth_applications; end

    sig { params(value: T::Enumerable[::OauthApplication]).void }
    def oauth_applications=(value); end

    sig { returns(T::Array[T.untyped]) }
    def oauth_authorization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def oauth_authorization_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :oauth_authorizations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OauthAuthorization::PrivateCollectionProxy) }
    def oauth_authorizations; end

    sig { params(value: T::Enumerable[::OauthAuthorization]).void }
    def oauth_authorizations=(value); end

    sig { returns(T.nilable(::OrcidRecord)) }
    def orcid_record; end

    sig { params(value: T.nilable(::OrcidRecord)).void }
    def orcid_record=(value); end

    sig { returns(T.nilable(::OrganizationFeedFilterSettings)) }
    def organization_feed_filter_settings; end

    sig { params(value: T.nilable(::OrganizationFeedFilterSettings)).void }
    def organization_feed_filter_settings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :organization_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OrganizationInvitation::PrivateCollectionProxy) }
    def organization_invitations; end

    sig { params(value: T::Enumerable[::OrganizationInvitation]).void }
    def organization_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_members_export_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_members_export_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :organization_members_exports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OrganizationMembersExport::PrivateCollectionProxy) }
    def organization_members_exports; end

    sig { params(value: T::Enumerable[::OrganizationMembersExport]).void }
    def organization_members_exports=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :organization_membership_entries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OrganizationMembershipEntry::PrivateCollectionProxy) }
    def organization_membership_entries; end

    sig { params(value: T::Enumerable[::OrganizationMembershipEntry]).void }
    def organization_membership_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_membership_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_membership_entry_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def outbound_application_transfer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def outbound_application_transfer_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :outbound_application_transfers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OauthApplicationTransfer::PrivateCollectionProxy) }
    def outbound_application_transfers; end

    sig { params(value: T::Enumerable[::OauthApplicationTransfer]).void }
    def outbound_application_transfers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def outbound_integration_transfer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def outbound_integration_transfer_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :outbound_integration_transfers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationTransfer::PrivateCollectionProxy) }
    def outbound_integration_transfers; end

    sig { params(value: T::Enumerable[::IntegrationTransfer]).void }
    def outbound_integration_transfers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def own_staff_note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def own_staff_note_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :own_staff_notes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffNote::PrivateCollectionProxy) }
    def own_staff_notes; end

    sig { params(value: T::Enumerable[::StaffNote]).void }
    def own_staff_notes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def owned_feed_post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def owned_feed_post_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :owned_feed_posts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::FeedPost::PrivateCollectionProxy) }
    def owned_feed_posts; end

    sig { params(value: T::Enumerable[::FeedPost]).void }
    def owned_feed_posts=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :owned_private_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def owned_private_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def owned_private_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def owned_private_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def owned_private_repository_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def package_file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def package_file_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :package_files, through: :packages`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Registry::File::PrivateCollectionProxy) }
    def package_files; end

    sig { params(value: T::Enumerable[::Registry::File]).void }
    def package_files=(value); end

    sig { returns(T::Array[T.untyped]) }
    def package_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def package_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :packages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::Package::PrivateCollectionProxy) }
    def packages; end

    sig { params(value: T::Enumerable[::Registry::Package]).void }
    def packages=(value); end

    sig { returns(T::Array[T.untyped]) }
    def past_subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def past_subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :past_subscription_items, through: :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def past_subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def past_subscription_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_plan_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_plan_change_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pending_plan_changes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PendingPlanChange::PrivateCollectionProxy) }
    def pending_plan_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingPlanChange]).void }
    def pending_plan_changes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pending_subscription_item_changes, through: :incomplete_pending_plan_changes`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::PendingSubscriptionItemChange::PrivateCollectionProxy) }
    def pending_subscription_item_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingSubscriptionItemChange]).void }
    def pending_subscription_item_changes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def photo_dna_hit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def photo_dna_hit_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :photo_dna_hits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PhotoDnaHit::PrivateCollectionProxy) }
    def photo_dna_hits; end

    sig { params(value: T::Enumerable[::PhotoDnaHit]).void }
    def photo_dna_hits=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pinned_feed_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pinned_feed_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pinned_feeds`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PinnedFeed::PrivateCollectionProxy) }
    def pinned_feeds; end

    sig { params(value: T::Enumerable[::PinnedFeed]).void }
    def pinned_feeds=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pinned_repositories, through: :profile_pins`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def pinned_repositories; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def pinned_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pinned_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pinned_repository_ids=(ids); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def plan_subscription=(value); end

    sig { returns(T::Array[T.untyped]) }
    def plan_subscription_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def plan_subscription_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PlanSubscription::PrivateCollectionProxy) }
    def plan_subscriptions; end

    sig { params(value: T::Enumerable[::Billing::PlanSubscription]).void }
    def plan_subscriptions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def plan_trial_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def plan_trial_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :plan_trials`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PlanTrial::PrivateCollectionProxy) }
    def plan_trials; end

    sig { params(value: T::Enumerable[::Billing::PlanTrial]).void }
    def plan_trials=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :potential_sponsorships_as_sponsor`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PotentialSponsorship::PrivateCollectionProxy) }
    def potential_sponsorships_as_sponsor; end

    sig { params(value: T::Enumerable[::PotentialSponsorship]).void }
    def potential_sponsorships_as_sponsor=(value); end

    sig { returns(T::Array[T.untyped]) }
    def potential_sponsorships_as_sponsor_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def potential_sponsorships_as_sponsor_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :potential_sponsorships_as_sponsorable`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PotentialSponsorship::PrivateCollectionProxy) }
    def potential_sponsorships_as_sponsorable; end

    sig { params(value: T::Enumerable[::PotentialSponsorship]).void }
    def potential_sponsorships_as_sponsorable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def potential_sponsorships_as_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def potential_sponsorships_as_sponsorable_ids=(ids); end

    sig { returns(T.nilable(::PrereleaseProgramMember)) }
    def prerelease_agreement; end

    sig { params(value: T.nilable(::PrereleaseProgramMember)).void }
    def prerelease_agreement=(value); end

    sig { returns(T.nilable(::UserEmail)) }
    def primary_private_user_email; end

    sig { params(value: T.nilable(::UserEmail)).void }
    def primary_private_user_email=(value); end

    sig { returns(T.nilable(::EmailRole)) }
    def primary_private_user_email_role; end

    sig { params(value: T.nilable(::EmailRole)).void }
    def primary_private_user_email_role=(value); end

    sig { returns(T.nilable(::UserEmail)) }
    def primary_user_email; end

    sig { params(value: T.nilable(::UserEmail)).void }
    def primary_user_email=(value); end

    sig { returns(T.nilable(::EmailRole)) }
    def primary_user_email_role; end

    sig { params(value: T.nilable(::EmailRole)).void }
    def primary_user_email_role=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :private_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def private_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def private_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def private_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def private_repository_ids=(ids); end

    sig { returns(T.nilable(::Profile)) }
    def profile; end

    sig { params(value: T.nilable(::Profile)).void }
    def profile=(value); end

    sig { returns(T::Array[T.untyped]) }
    def profile_highlight_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def profile_highlight_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :profile_highlights`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ProfileHighlight::PrivateCollectionProxy) }
    def profile_highlights; end

    sig { params(value: T::Enumerable[::ProfileHighlight]).void }
    def profile_highlights=(value); end

    sig { returns(T::Array[T.untyped]) }
    def profile_pin_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def profile_pin_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :profile_pins, through: :profile`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ProfilePin::PrivateCollectionProxy) }
    def profile_pins; end

    sig { params(value: T::Enumerable[::ProfilePin]).void }
    def profile_pins=(value); end

    sig { returns(T::Array[T.untyped]) }
    def project_card_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def project_card_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :project_cards`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ProjectCard::PrivateCollectionProxy) }
    def project_cards; end

    sig { params(value: T::Enumerable[::ProjectCard]).void }
    def project_cards=(value); end

    sig { returns(T::Array[T.untyped]) }
    def project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def project_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :projects`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Project::PrivateCollectionProxy) }
    def projects; end

    sig { params(value: T::Enumerable[::Project]).void }
    def projects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def public_key_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def public_key_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :public_keys`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PublicKey::PrivateCollectionProxy) }
    def public_keys; end

    sig { params(value: T::Enumerable[::PublicKey]).void }
    def public_keys=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :public_repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def public_repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def public_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def public_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def public_repository_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_review_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_review_comment_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_review_comment_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_review_comment_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pull_request_review_comment_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewCommentReaction::PrivateCollectionProxy) }
    def pull_request_review_comment_reactions; end

    sig { params(value: T::Enumerable[::PullRequestReviewCommentReaction]).void }
    def pull_request_review_comment_reactions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pull_request_review_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewComment::PrivateCollectionProxy) }
    def pull_request_review_comments; end

    sig { params(value: T::Enumerable[::PullRequestReviewComment]).void }
    def pull_request_review_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_review_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_review_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_review_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_review_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pull_request_review_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewReaction::PrivateCollectionProxy) }
    def pull_request_review_reactions; end

    sig { params(value: T::Enumerable[::PullRequestReviewReaction]).void }
    def pull_request_review_reactions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pull_request_reviews`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReview::PrivateCollectionProxy) }
    def pull_request_reviews; end

    sig { params(value: T::Enumerable[::PullRequestReview]).void }
    def pull_request_reviews=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :pull_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequest::PrivateCollectionProxy) }
    def pull_requests; end

    sig { params(value: T::Enumerable[::PullRequest]).void }
    def pull_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def received_abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def received_abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :received_abuse_reports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def received_abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def received_abuse_reports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def received_repository_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def received_repository_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :received_repository_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryInvitation::PrivateCollectionProxy) }
    def received_repository_invitations; end

    sig { params(value: T::Enumerable[::RepositoryInvitation]).void }
    def received_repository_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def received_successor_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def received_successor_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :received_successor_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SuccessorInvitation::PrivateCollectionProxy) }
    def received_successor_invitations; end

    sig { params(value: T::Enumerable[::SuccessorInvitation]).void }
    def received_successor_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def recently_updated_owned_repo_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def recently_updated_owned_repo_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :recently_updated_owned_repos`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def recently_updated_owned_repos; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def recently_updated_owned_repos=(value); end

    sig { returns(T::Array[T.untyped]) }
    def recently_updated_public_repo_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def recently_updated_public_repo_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :recently_updated_public_repos`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def recently_updated_public_repos; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def recently_updated_public_repos=(value); end

    sig { returns(T::Array[T.untyped]) }
    def recently_visited_memex_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def recently_visited_memex_project_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :recently_visited_memex_projects, through: :memex_project_visits`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::MemexProject::PrivateCollectionProxy) }
    def recently_visited_memex_projects; end

    sig { params(value: T::Enumerable[::MemexProject]).void }
    def recently_visited_memex_projects=(value); end

    sig { returns(T::Array[T.untyped]) }
    def release_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def release_mention_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_mention_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :release_mentions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReleaseMention::PrivateCollectionProxy) }
    def release_mentions; end

    sig { params(value: T::Enumerable[::ReleaseMention]).void }
    def release_mentions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def release_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def release_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :release_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def release_reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def release_reactions=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :releases`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Release::PrivateCollectionProxy) }
    def releases; end

    sig { params(value: T::Enumerable[::Release]).void }
    def releases=(value); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_approved_sponsors_listing; end

    sig { returns(T.nilable(::Asset::Status)) }
    def reload_asset_status; end

    sig { returns(T.nilable(::UserEmail)) }
    def reload_backup_user_email; end

    sig { returns(T.nilable(::EmailRole)) }
    def reload_backup_user_email_role; end

    sig { returns(T.nilable(::BulkSponsorshipImport)) }
    def reload_bulk_sponsorship_import; end

    sig { returns(T.nilable(::BulkSponsorshipTierSelection)) }
    def reload_bulk_sponsorship_tier_selection; end

    sig { returns(T.nilable(::BusinessUserAccount)) }
    def reload_business_user_account; end

    sig { returns(T.nilable(::CasMapping)) }
    def reload_cas_mapping; end

    sig { returns(T.nilable(::ClassroomUser)) }
    def reload_classroom_user; end

    sig { returns(T.nilable(::Repository)) }
    def reload_configuration_repository; end

    sig { returns(T.nilable(::Customer)) }
    def reload_customer; end

    sig { returns(T.nilable(::CustomerAccount)) }
    def reload_customer_account; end

    sig { returns(T.nilable(::UserDashboard)) }
    def reload_dashboard; end

    sig { returns(T.nilable(::DeceasedUser)) }
    def reload_deceased_user; end

    sig { returns(T.nilable(::DeveloperProgramMembership)) }
    def reload_developer_program_membership; end

    sig { returns(T.nilable(::FeedFilterSettings)) }
    def reload_feed_filter_settings; end

    sig { returns(T.nilable(::Repository)) }
    def reload_first_non_fork_public_repository; end

    sig { returns(T.nilable(::ForYouFeedFilterSettings)) }
    def reload_for_you_feed_filter_settings; end

    sig { returns(T.nilable(::GlobalNotice)) }
    def reload_global_notice; end

    sig { returns(T.nilable(::Interaction)) }
    def reload_interaction; end

    sig { returns(T.nilable(::InteractionSetting)) }
    def reload_interaction_setting; end

    sig { returns(T.nilable(::AbuseReport)) }
    def reload_latest_received_abuse_report; end

    sig { returns(T.nilable(::LdapMapping)) }
    def reload_ldap_mapping; end

    sig { returns(T.nilable(::LegalHold)) }
    def reload_legal_hold; end

    sig { returns(T.nilable(::Billing::ManualDunningPeriod)) }
    def reload_manual_dunning_period; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def reload_marketplace_listing; end

    sig { returns(T.nilable(::MobilePushNotificationSetting)) }
    def reload_mobile_push_notification_setting; end

    sig { returns(T.nilable(::Repository)) }
    def reload_most_popular_public_repository; end

    sig { returns(T.nilable(::UserSession)) }
    def reload_most_recent_session; end

    sig { returns(T.nilable(::SponsorsBusinessTaxIdentifier)) }
    def reload_newest_sponsors_business_tax_identifier; end

    sig { returns(T.nilable(::OrcidRecord)) }
    def reload_orcid_record; end

    sig { returns(T.nilable(::OrganizationFeedFilterSettings)) }
    def reload_organization_feed_filter_settings; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_plan_subscription; end

    sig { returns(T.nilable(::PrereleaseProgramMember)) }
    def reload_prerelease_agreement; end

    sig { returns(T.nilable(::UserEmail)) }
    def reload_primary_private_user_email; end

    sig { returns(T.nilable(::EmailRole)) }
    def reload_primary_private_user_email_role; end

    sig { returns(T.nilable(::UserEmail)) }
    def reload_primary_user_email; end

    sig { returns(T.nilable(::EmailRole)) }
    def reload_primary_user_email_role; end

    sig { returns(T.nilable(::Profile)) }
    def reload_profile; end

    sig { returns(T.nilable(::InteractionLimit)) }
    def reload_repo_interaction_limit; end

    sig { returns(T.nilable(::SamlMapping)) }
    def reload_saml_mapping; end

    sig { returns(T.nilable(::SAML::Session)) }
    def reload_saml_session; end

    sig { returns(T.nilable(::SoftDeletedOrganization)) }
    def reload_soft_deleted_organization; end

    sig { returns(T.nilable(::OrganizationProfile)) }
    def reload_sponsoring_parent_organization_profile; end

    sig { returns(T.nilable(::UserEmail)) }
    def reload_sponsors_contact_email; end

    sig { returns(T.nilable(::Customer)) }
    def reload_sponsors_customer; end

    sig { returns(T.nilable(::CustomerAccount)) }
    def reload_sponsors_customer_account; end

    sig { returns(T.nilable(::SponsorsListing)) }
    def reload_sponsors_listing; end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def reload_sponsors_listing_stafftools_metadata; end

    sig { returns(T.nilable(::SponsorsPatreonUser)) }
    def reload_sponsors_patreon_user; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_sponsors_plan_subscription; end

    sig { returns(T.nilable(::UserEmail)) }
    def reload_stealth_user_email; end

    sig { returns(T.nilable(::EmailRole)) }
    def reload_stealth_user_email_role; end

    sig { returns(T.nilable(::TotpAppRegistration)) }
    def reload_totp_app_registration; end

    sig { returns(T.nilable(::TradeControls::Restriction)) }
    def reload_trade_controls_restriction; end

    sig { returns(T.nilable(::AccountScreeningProfile)) }
    def reload_trade_screening_record; end

    sig { returns(T.nilable(::TwoFactorCredential)) }
    def reload_two_factor_credential; end

    sig { returns(T.nilable(::TwoFactorRequirementMetadata)) }
    def reload_two_factor_requirement_metadata; end

    sig { returns(T.nilable(::InteractionLimit)) }
    def reload_user_interaction_limit; end

    sig { returns(T.nilable(::UserMetadata)) }
    def reload_user_metadata; end

    sig { returns(T.nilable(::UserProgrammaticAccess)) }
    def reload_user_programmatic_access; end

    sig { returns(T.nilable(::UserSettings)) }
    def reload_user_settings_record; end

    sig { returns(T.nilable(::UserStatus)) }
    def reload_user_status; end

    sig { returns(T.nilable(::UserWhitelisting)) }
    def reload_user_whitelisting; end

    sig { returns(T.nilable(::WebauthnUserHandle)) }
    def reload_webauthn_user_handle; end

    sig { returns(T.nilable(::InteractionLimit)) }
    def repo_interaction_limit; end

    sig { params(value: T.nilable(::InteractionLimit)).void }
    def repo_interaction_limit=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :repositories`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Repository::PrivateCollectionProxy) }
    def repositories; end

    sig { params(value: T::Enumerable[::Repository]).void }
    def repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_advisory_comment_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_advisory_comment_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :repository_advisory_comment_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def repository_advisory_comment_reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def repository_advisory_comment_reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_advisory_reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_advisory_reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :repository_advisory_reactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reaction::PrivateCollectionProxy) }
    def repository_advisory_reactions; end

    sig { params(value: T::Enumerable[::Reaction]).void }
    def repository_advisory_reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def repository_security_center_config_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_security_center_config_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :repository_security_center_configs`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositorySecurityCenterConfig::PrivateCollectionProxy) }
    def repository_security_center_configs; end

    sig { params(value: T::Enumerable[::RepositorySecurityCenterConfig]).void }
    def repository_security_center_configs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_security_center_status_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_security_center_status_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :repository_security_center_statuses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositorySecurityCenterStatus::PrivateCollectionProxy) }
    def repository_security_center_statuses; end

    sig { params(value: T::Enumerable[::RepositorySecurityCenterStatus]).void }
    def repository_security_center_statuses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def repository_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def repository_sponsorable_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :repository_sponsorables`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositorySponsorable::PrivateCollectionProxy) }
    def repository_sponsorables; end

    sig { params(value: T::Enumerable[::RepositorySponsorable]).void }
    def repository_sponsorables=(value); end

    sig { returns(T::Array[T.untyped]) }
    def requested_features_to_organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def requested_features_to_organization_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :requested_features_to_organizations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemberFeatureRequest::PrivateCollectionProxy) }
    def requested_features_to_organizations; end

    sig { params(value: T::Enumerable[::MemberFeatureRequest]).void }
    def requested_features_to_organizations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def requested_integration_installation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def requested_integration_installation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :requested_integration_installations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IntegrationInstallationRequest::PrivateCollectionProxy) }
    def requested_integration_installations; end

    sig { params(value: T::Enumerable[::IntegrationInstallationRequest]).void }
    def requested_integration_installations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def requested_organization_programmatic_access_grant_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def requested_organization_programmatic_access_grant_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :requested_organization_programmatic_access_grant_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OrganizationProgrammaticAccessGrantRequest::PrivateCollectionProxy) }
    def requested_organization_programmatic_access_grant_requests; end

    sig { params(value: T::Enumerable[::OrganizationProgrammaticAccessGrantRequest]).void }
    def requested_organization_programmatic_access_grant_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def requested_user_programmatic_access_grant_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def requested_user_programmatic_access_grant_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :requested_user_programmatic_access_grant_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserProgrammaticAccessGrantRequest::PrivateCollectionProxy) }
    def requested_user_programmatic_access_grant_requests; end

    sig { params(value: T::Enumerable[::UserProgrammaticAccessGrantRequest]).void }
    def requested_user_programmatic_access_grant_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def retired_namespace_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def retired_namespace_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :retired_namespaces`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RetiredNamespace::PrivateCollectionProxy) }
    def retired_namespaces; end

    sig { params(value: T::Enumerable[::RetiredNamespace]).void }
    def retired_namespaces=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def review_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :review_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReviewRequest::PrivateCollectionProxy) }
    def review_requests; end

    sig { params(value: T::Enumerable[::ReviewRequest]).void }
    def review_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reviewed_file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reviewed_file_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :reviewed_files`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserReviewedFile::PrivateCollectionProxy) }
    def reviewed_files; end

    sig { params(value: T::Enumerable[::UserReviewedFile]).void }
    def reviewed_files=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :reviews`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReview::PrivateCollectionProxy) }
    def reviews; end

    sig { params(value: T::Enumerable[::PullRequestReview]).void }
    def reviews=(value); end

    sig { returns(T.nilable(::SamlMapping)) }
    def saml_mapping; end

    sig { params(value: T.nilable(::SamlMapping)).void }
    def saml_mapping=(value); end

    sig { returns(T.nilable(::SAML::Session)) }
    def saml_session; end

    sig { params(value: T.nilable(::SAML::Session)).void }
    def saml_session=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :saved_replies`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SavedReply::PrivateCollectionProxy) }
    def saved_replies; end

    sig { params(value: T::Enumerable[::SavedReply]).void }
    def saved_replies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def saved_reply_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def saved_reply_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def search_custom_scope_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def search_custom_scope_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :search_custom_scopes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SearchCustomScope::PrivateCollectionProxy) }
    def search_custom_scopes; end

    sig { params(value: T::Enumerable[::SearchCustomScope]).void }
    def search_custom_scopes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sent_successor_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sent_successor_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sent_successor_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SuccessorInvitation::PrivateCollectionProxy) }
    def sent_successor_invitations; end

    sig { params(value: T::Enumerable[::SuccessorInvitation]).void }
    def sent_successor_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def session_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def session_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sessions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserSession::PrivateCollectionProxy) }
    def sessions; end

    sig { params(value: T::Enumerable[::UserSession]).void }
    def sessions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def showcase_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def showcase_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :showcases`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Showcase::Collection::PrivateCollectionProxy) }
    def showcases; end

    sig { params(value: T::Enumerable[::Showcase::Collection]).void }
    def showcases=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sms_registration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sms_registration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sms_registrations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SmsRegistration::PrivateCollectionProxy) }
    def sms_registrations; end

    sig { params(value: T::Enumerable[::SmsRegistration]).void }
    def sms_registrations=(value); end

    sig { returns(T.nilable(::SoftDeletedOrganization)) }
    def soft_deleted_organization; end

    sig { params(value: T.nilable(::SoftDeletedOrganization)).void }
    def soft_deleted_organization=(value); end

    sig { returns(T.nilable(::OrganizationProfile)) }
    def sponsoring_parent_organization_profile; end

    sig { params(value: T.nilable(::OrganizationProfile)).void }
    def sponsoring_parent_organization_profile=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsors_activities`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsActivity::PrivateCollectionProxy) }
    def sponsors_activities; end

    sig { params(value: T::Enumerable[::SponsorsActivity]).void }
    def sponsors_activities=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsors_activities_as_sponsor`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsActivity::PrivateCollectionProxy) }
    def sponsors_activities_as_sponsor; end

    sig { params(value: T::Enumerable[::SponsorsActivity]).void }
    def sponsors_activities_as_sponsor=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_activities_as_sponsor_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_activities_as_sponsor_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_activity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_activity_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_activity_metric_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_activity_metric_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsors_activity_metrics`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsActivityMetric::PrivateCollectionProxy) }
    def sponsors_activity_metrics; end

    sig { params(value: T::Enumerable[::SponsorsActivityMetric]).void }
    def sponsors_activity_metrics=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_business_tax_identifier_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_business_tax_identifier_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsors_business_tax_identifiers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsBusinessTaxIdentifier::PrivateCollectionProxy) }
    def sponsors_business_tax_identifiers; end

    sig { params(value: T::Enumerable[::SponsorsBusinessTaxIdentifier]).void }
    def sponsors_business_tax_identifiers=(value); end

    sig { returns(T.nilable(::UserEmail)) }
    def sponsors_contact_email; end

    sig { params(value: T.nilable(::UserEmail)).void }
    def sponsors_contact_email=(value); end

    sig { returns(T.nilable(::Customer)) }
    def sponsors_customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def sponsors_customer=(value); end

    sig { returns(T.nilable(::CustomerAccount)) }
    def sponsors_customer_account; end

    sig { params(value: T.nilable(::CustomerAccount)).void }
    def sponsors_customer_account=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsors_invoiced_agreement_signatures_as_signatory`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsInvoicedAgreementSignature::PrivateCollectionProxy) }
    def sponsors_invoiced_agreement_signatures_as_signatory; end

    sig { params(value: T::Enumerable[::SponsorsInvoicedAgreementSignature]).void }
    def sponsors_invoiced_agreement_signatures_as_signatory=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_invoiced_agreement_signatures_as_signatory_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_invoiced_agreement_signatures_as_signatory_ids=(ids); end

    sig { returns(T.nilable(::SponsorsListing)) }
    def sponsors_listing; end

    sig { params(value: T.nilable(::SponsorsListing)).void }
    def sponsors_listing=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsors_listing_featured_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsors_listing_featured_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsors_listing_featured_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorsListingFeaturedItem::PrivateCollectionProxy) }
    def sponsors_listing_featured_items; end

    sig { params(value: T::Enumerable[::SponsorsListingFeaturedItem]).void }
    def sponsors_listing_featured_items=(value); end

    sig { returns(T.nilable(::SponsorsListingStafftoolsMetadata)) }
    def sponsors_listing_stafftools_metadata; end

    sig { params(value: T.nilable(::SponsorsListingStafftoolsMetadata)).void }
    def sponsors_listing_stafftools_metadata=(value); end

    sig { returns(T.nilable(::SponsorsPatreonUser)) }
    def sponsors_patreon_user; end

    sig { params(value: T.nilable(::SponsorsPatreonUser)).void }
    def sponsors_patreon_user=(value); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def sponsors_plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def sponsors_plan_subscription=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsorship_match_bans_as_sponsorable`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipMatchBan::PrivateCollectionProxy) }
    def sponsorship_match_bans_as_sponsorable; end

    sig { params(value: T::Enumerable[::SponsorshipMatchBan]).void }
    def sponsorship_match_bans_as_sponsorable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_match_bans_as_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_match_bans_as_sponsorable_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_newsletter_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_newsletter_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsorship_newsletters`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipNewsletter::PrivateCollectionProxy) }
    def sponsorship_newsletters; end

    sig { params(value: T::Enumerable[::SponsorshipNewsletter]).void }
    def sponsorship_newsletters=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsorship_repositories_as_sponsor`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipRepository::PrivateCollectionProxy) }
    def sponsorship_repositories_as_sponsor; end

    sig { params(value: T::Enumerable[::SponsorshipRepository]).void }
    def sponsorship_repositories_as_sponsor=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_repositories_as_sponsor_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_repositories_as_sponsor_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsorship_repositories_as_sponsorable`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipRepository::PrivateCollectionProxy) }
    def sponsorship_repositories_as_sponsorable; end

    sig { params(value: T::Enumerable[::SponsorshipRepository]).void }
    def sponsorship_repositories_as_sponsorable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_repositories_as_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_repositories_as_sponsorable_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsorships_as_sponsor`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sponsorship::PrivateCollectionProxy) }
    def sponsorships_as_sponsor; end

    sig { params(value: T::Enumerable[::Sponsorship]).void }
    def sponsorships_as_sponsor=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorships_as_sponsor_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorships_as_sponsor_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sponsorships_as_sponsorable`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Sponsorship::PrivateCollectionProxy) }
    def sponsorships_as_sponsorable; end

    sig { params(value: T::Enumerable[::Sponsorship]).void }
    def sponsorships_as_sponsorable=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorships_as_sponsorable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorships_as_sponsorable_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def staff_access_grant_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_access_grant_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :staff_access_grants`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffAccessGrant::PrivateCollectionProxy) }
    def staff_access_grants; end

    sig { params(value: T::Enumerable[::StaffAccessGrant]).void }
    def staff_access_grants=(value); end

    sig { returns(T::Array[T.untyped]) }
    def staff_access_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_access_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :staff_access_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffAccessRequest::PrivateCollectionProxy) }
    def staff_access_requests; end

    sig { params(value: T::Enumerable[::StaffAccessRequest]).void }
    def staff_access_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def staff_note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def staff_note_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :staff_notes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::StaffNote::PrivateCollectionProxy) }
    def staff_notes; end

    sig { params(value: T::Enumerable[::StaffNote]).void }
    def staff_notes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def stafftools_role_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def stafftools_role_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :stafftools_roles, through: :user_stafftools_roles`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::StafftoolsRole::PrivateCollectionProxy) }
    def stafftools_roles; end

    sig { params(value: T::Enumerable[::StafftoolsRole]).void }
    def stafftools_roles=(value); end

    sig { returns(T::Array[T.untyped]) }
    def star_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def star_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def starred_gist_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def starred_gist_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :starred_gists, through: :gist_stars`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Gist::PrivateCollectionProxy) }
    def starred_gists; end

    sig { params(value: T::Enumerable[::Gist]).void }
    def starred_gists=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :starred_repositories, through: :stars`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(ActiveRecord::Associations::CollectionProxy) }
    def starred_repositories; end

    sig { params(value: T::Enumerable[T.untyped]).void }
    def starred_repositories=(value); end

    sig { returns(T::Array[T.untyped]) }
    def starred_repository_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def starred_repository_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :stars`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Star::PrivateCollectionProxy) }
    def stars; end

    sig { params(value: T::Enumerable[::Star]).void }
    def stars=(value); end

    sig { returns(T.nilable(::UserEmail)) }
    def stealth_user_email; end

    sig { params(value: T.nilable(::UserEmail)).void }
    def stealth_user_email=(value); end

    sig { returns(T.nilable(::EmailRole)) }
    def stealth_user_email_role; end

    sig { params(value: T.nilable(::EmailRole)).void }
    def stealth_user_email_role=(value); end

    sig { returns(T::Array[T.untyped]) }
    def stripe_connect_account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def stripe_connect_account_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :stripe_connect_accounts, through: :sponsors_listing`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::StripeConnect::Account::PrivateCollectionProxy) }
    def stripe_connect_accounts; end

    sig { params(value: T::Enumerable[::Billing::StripeConnect::Account]).void }
    def stripe_connect_accounts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sub_issue_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sub_issue_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sub_issues`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SubIssue::PrivateCollectionProxy) }
    def sub_issues; end

    sig { params(value: T::Enumerable[::SubIssue]).void }
    def sub_issues=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subjected_issue_event_detail_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subjected_issue_event_detail_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :subjected_issue_event_details`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IssueEventDetail::PrivateCollectionProxy) }
    def subjected_issue_event_details; end

    sig { params(value: T::Enumerable[::IssueEventDetail]).void }
    def subjected_issue_event_details=(value); end

    sig { returns(T::Array[T.untyped]) }
    def subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :subscription_items, through: :plan_subscriptions`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def subscription_items=(value); end

    sig { returns(T::Array[T.untyped]) }
    def successor_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def successor_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :successor_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SuccessorInvitation::PrivateCollectionProxy) }
    def successor_invitations; end

    sig { params(value: T::Enumerable[::SuccessorInvitation]).void }
    def successor_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def survey_answer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def survey_answer_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :survey_answers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SurveyAnswer::PrivateCollectionProxy) }
    def survey_answers; end

    sig { params(value: T::Enumerable[::SurveyAnswer]).void }
    def survey_answers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def survey_group_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def survey_group_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :survey_groups`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SurveyGroup::PrivateCollectionProxy) }
    def survey_groups; end

    sig { params(value: T::Enumerable[::SurveyGroup]).void }
    def survey_groups=(value); end

    sig { returns(T::Array[T.untyped]) }
    def targeted_attribution_invitation_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def targeted_attribution_invitation_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :targeted_attribution_invitations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AttributionInvitation::PrivateCollectionProxy) }
    def targeted_attribution_invitations; end

    sig { params(value: T::Enumerable[::AttributionInvitation]).void }
    def targeted_attribution_invitations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def team_membership_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def team_membership_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :team_membership_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TeamMembershipRequest::PrivateCollectionProxy) }
    def team_membership_requests; end

    sig { params(value: T::Enumerable[::TeamMembershipRequest]).void }
    def team_membership_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tos_acceptance_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tos_acceptance_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :tos_acceptances`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TosAcceptance::PrivateCollectionProxy) }
    def tos_acceptances; end

    sig { params(value: T::Enumerable[::TosAcceptance]).void }
    def tos_acceptances=(value); end

    sig { returns(T.nilable(::TotpAppRegistration)) }
    def totp_app_registration; end

    sig { params(value: T.nilable(::TotpAppRegistration)).void }
    def totp_app_registration=(value); end

    sig { returns(T.nilable(::TradeControls::Restriction)) }
    def trade_controls_restriction; end

    sig { params(value: T.nilable(::TradeControls::Restriction)).void }
    def trade_controls_restriction=(value); end

    sig { returns(T.nilable(::AccountScreeningProfile)) }
    def trade_screening_record; end

    sig { params(value: T.nilable(::AccountScreeningProfile)).void }
    def trade_screening_record=(value); end

    sig { returns(T::Array[T.untyped]) }
    def transaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def transaction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :transactions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Transaction::PrivateCollectionProxy) }
    def transactions; end

    sig { params(value: T::Enumerable[::Transaction]).void }
    def transactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def trusted_device_client_registration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def trusted_device_client_registration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :trusted_device_client_registrations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TrustedDeviceClientRegistration::PrivateCollectionProxy) }
    def trusted_device_client_registrations; end

    sig { params(value: T::Enumerable[::TrustedDeviceClientRegistration]).void }
    def trusted_device_client_registrations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def trusted_repository_authorization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def trusted_repository_authorization_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :trusted_repository_authorizations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Codespaces::TrustedRepositoryAuthorization::PrivateCollectionProxy) }
    def trusted_repository_authorizations; end

    sig { params(value: T::Enumerable[::Codespaces::TrustedRepositoryAuthorization]).void }
    def trusted_repository_authorizations=(value); end

    sig { returns(T.nilable(::TwoFactorCredential)) }
    def two_factor_credential; end

    sig { params(value: T.nilable(::TwoFactorCredential)).void }
    def two_factor_credential=(value); end

    sig { returns(T::Array[T.untyped]) }
    def two_factor_recovery_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def two_factor_recovery_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :two_factor_recovery_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::TwoFactorRecoveryRequest::PrivateCollectionProxy) }
    def two_factor_recovery_requests; end

    sig { params(value: T::Enumerable[::TwoFactorRecoveryRequest]).void }
    def two_factor_recovery_requests=(value); end

    sig { returns(T.nilable(::TwoFactorRequirementMetadata)) }
    def two_factor_requirement_metadata; end

    sig { params(value: T.nilable(::TwoFactorRequirementMetadata)).void }
    def two_factor_requirement_metadata=(value); end

    sig { returns(T::Array[T.untyped]) }
    def u2f_registration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def u2f_registration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :u2f_registrations`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::U2fRegistration::PrivateCollectionProxy) }
    def u2f_registrations; end

    sig { params(value: T::Enumerable[::U2fRegistration]).void }
    def u2f_registrations=(value); end

    sig { returns(T.nilable(::InteractionLimit)) }
    def user_interaction_limit; end

    sig { params(value: T.nilable(::InteractionLimit)).void }
    def user_interaction_limit=(value); end

    sig { returns(T.nilable(::UserMetadata)) }
    def user_metadata; end

    sig { params(value: T.nilable(::UserMetadata)).void }
    def user_metadata=(value); end

    sig { returns(T.nilable(::UserProgrammaticAccess)) }
    def user_programmatic_access; end

    sig { params(value: T.nilable(::UserProgrammaticAccess)).void }
    def user_programmatic_access=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_programmatic_access_grant_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_programmatic_access_grant_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :user_programmatic_access_grant_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserProgrammaticAccessGrantRequest::PrivateCollectionProxy) }
    def user_programmatic_access_grant_requests; end

    sig { params(value: T::Enumerable[::UserProgrammaticAccessGrantRequest]).void }
    def user_programmatic_access_grant_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_programmatic_access_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_programmatic_access_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :user_programmatic_accesses`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserProgrammaticAccess::PrivateCollectionProxy) }
    def user_programmatic_accesses; end

    sig { params(value: T::Enumerable[::UserProgrammaticAccess]).void }
    def user_programmatic_accesses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_role_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_role_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :user_roles`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserRole::PrivateCollectionProxy) }
    def user_roles; end

    sig { params(value: T::Enumerable[::UserRole]).void }
    def user_roles=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_seen_feature_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_seen_feature_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :user_seen_features`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserSeenFeature::PrivateCollectionProxy) }
    def user_seen_features; end

    sig { params(value: T::Enumerable[::UserSeenFeature]).void }
    def user_seen_features=(value); end

    sig { returns(T.nilable(::UserSettings)) }
    def user_settings_record; end

    sig { params(value: T.nilable(::UserSettings)).void }
    def user_settings_record=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_stafftools_role_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_stafftools_role_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :user_stafftools_roles`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserStafftoolsRole::PrivateCollectionProxy) }
    def user_stafftools_roles; end

    sig { params(value: T::Enumerable[::UserStafftoolsRole]).void }
    def user_stafftools_roles=(value); end

    sig { returns(T.nilable(::UserStatus)) }
    def user_status; end

    sig { params(value: T.nilable(::UserStatus)).void }
    def user_status=(value); end

    sig { returns(T.nilable(::UserWhitelisting)) }
    def user_whitelisting; end

    sig { params(value: T.nilable(::UserWhitelisting)).void }
    def user_whitelisting=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_whitelisting_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_whitelisting_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :user_whitelistings`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserWhitelisting::PrivateCollectionProxy) }
    def user_whitelistings; end

    sig { params(value: T::Enumerable[::UserWhitelisting]).void }
    def user_whitelistings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_override_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vulnerability_alert_rule_override_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :vulnerability_alert_rule_overrides`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerabilityAlertRuleOverride::PrivateCollectionProxy) }
    def vulnerability_alert_rule_overrides; end

    sig { params(value: T::Enumerable[::VulnerabilityAlertRuleOverride]).void }
    def vulnerability_alert_rule_overrides=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :vulnerability_alert_rules`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::VulnerabilityAlertRule::PrivateCollectionProxy) }
    def vulnerability_alert_rules; end

    sig { params(value: T::Enumerable[::VulnerabilityAlertRule]).void }
    def vulnerability_alert_rules=(value); end

    sig { returns(T.nilable(::WebauthnUserHandle)) }
    def webauthn_user_handle; end

    sig { params(value: T.nilable(::WebauthnUserHandle)).void }
    def webauthn_user_handle=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def accepts_marketing_mail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active_external_identities(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def blocking(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_ip(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def carded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def delegates_billing_to_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def disabled_by_scim(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def exclude(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def expiring_soon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def following_starred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def gift(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def has_verified_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invoiced(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def like_login_or_profile_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_to_oldest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_blocking(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def oldest_to_newest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def on_paid_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order_by_login_asc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paying(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def publicly_belongs_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy_or_blocking(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def teacher(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def two_factor_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def two_factor_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_account_two_factor_requirement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_visible_profiles_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_account_two_factor_requirement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_billing_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_soft_deleted_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def yearly(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_user_programmatic_access; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def analytics_tracking_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def analytics_tracking_id=(value); end

    sig { returns(T::Boolean) }
    def analytics_tracking_id?; end

    sig { returns(T.nilable(::String)) }
    def analytics_tracking_id_before_last_save; end

    sig { returns(T.untyped) }
    def analytics_tracking_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def analytics_tracking_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def analytics_tracking_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def analytics_tracking_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def analytics_tracking_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def analytics_tracking_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def analytics_tracking_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def analytics_tracking_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def analytics_tracking_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def analytics_tracking_id_was; end

    sig { void }
    def analytics_tracking_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at=(value); end

    sig { returns(T::Boolean) }
    def archived_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_before_last_save; end

    sig { returns(T.untyped) }
    def archived_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def archived_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def archived_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def archived_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def archived_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def archived_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def archived_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def archived_at_was; end

    sig { void }
    def archived_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def auth_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def auth_token=(value); end

    sig { returns(T::Boolean) }
    def auth_token?; end

    sig { returns(T.nilable(::String)) }
    def auth_token_before_last_save; end

    sig { returns(T.untyped) }
    def auth_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def auth_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def auth_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def auth_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def auth_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def auth_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def auth_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def auth_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def auth_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def auth_token_was; end

    sig { void }
    def auth_token_will_change!; end

    sig { returns(T.nilable(::String)) }
    def bcrypt_auth_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def bcrypt_auth_token=(value); end

    sig { returns(T::Boolean) }
    def bcrypt_auth_token?; end

    sig { returns(T.nilable(::String)) }
    def bcrypt_auth_token_before_last_save; end

    sig { returns(T.untyped) }
    def bcrypt_auth_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def bcrypt_auth_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def bcrypt_auth_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def bcrypt_auth_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def bcrypt_auth_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bcrypt_auth_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def bcrypt_auth_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def bcrypt_auth_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bcrypt_auth_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def bcrypt_auth_token_was; end

    sig { void }
    def bcrypt_auth_token_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def billed_on; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def billed_on=(value); end

    sig { returns(T::Boolean) }
    def billed_on?; end

    sig { returns(T.nilable(::Date)) }
    def billed_on_before_last_save; end

    sig { returns(T.untyped) }
    def billed_on_before_type_cast; end

    sig { returns(T::Boolean) }
    def billed_on_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def billed_on_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def billed_on_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def billed_on_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def billed_on_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def billed_on_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def billed_on_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def billed_on_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def billed_on_was; end

    sig { void }
    def billed_on_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def billing_attempts=(value); end

    sig { returns(T::Boolean) }
    def billing_attempts?; end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_before_last_save; end

    sig { returns(T.untyped) }
    def billing_attempts_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_attempts_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_attempts_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_attempts_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_attempts_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def billing_attempts_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def billing_attempts_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def billing_attempts_was; end

    sig { void }
    def billing_attempts_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_extra; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_extra=(value); end

    sig { returns(T::Boolean) }
    def billing_extra?; end

    sig { returns(T.nilable(::String)) }
    def billing_extra_before_last_save; end

    sig { returns(T.untyped) }
    def billing_extra_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_extra_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_extra_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_extra_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_extra_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_extra_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_extra_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_extra_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_extra_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_extra_was; end

    sig { void }
    def billing_extra_will_change!; end

    sig { returns(::String) }
    def billing_type; end

    sig { params(value: ::String).returns(::String) }
    def billing_type=(value); end

    sig { returns(T::Boolean) }
    def billing_type?; end

    sig { returns(T.nilable(::String)) }
    def billing_type_before_last_save; end

    sig { returns(T.untyped) }
    def billing_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def billing_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def billing_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def billing_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def billing_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def billing_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_type_was; end

    sig { void }
    def billing_type_will_change!; end

    sig { returns(::Integer) }
    def business_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def business_id=(value); end

    sig { returns(T::Boolean) }
    def business_id?; end

    sig { returns(T.nilable(::Integer)) }
    def business_id_before_last_save; end

    sig { returns(T.untyped) }
    def business_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def business_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def business_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def business_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def business_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def business_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def business_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def business_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def business_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def business_id_was; end

    sig { void }
    def business_id_will_change!; end

    sig { returns(::Integer) }
    def color_mode; end

    sig { params(value: ::Integer).returns(::Integer) }
    def color_mode=(value); end

    sig { returns(T::Boolean) }
    def color_mode?; end

    sig { returns(T.nilable(::Integer)) }
    def color_mode_before_last_save; end

    sig { returns(T.untyped) }
    def color_mode_before_type_cast; end

    sig { returns(T::Boolean) }
    def color_mode_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def color_mode_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def color_mode_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def color_mode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def color_mode_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def color_mode_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def color_mode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def color_mode_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def color_mode_was; end

    sig { void }
    def color_mode_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def dark_theme; end

    sig { params(value: ::Integer).returns(::Integer) }
    def dark_theme=(value); end

    sig { returns(T::Boolean) }
    def dark_theme?; end

    sig { returns(T.nilable(::Integer)) }
    def dark_theme_before_last_save; end

    sig { returns(T.untyped) }
    def dark_theme_before_type_cast; end

    sig { returns(T::Boolean) }
    def dark_theme_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def dark_theme_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def dark_theme_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def dark_theme_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dark_theme_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def dark_theme_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def dark_theme_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dark_theme_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def dark_theme_was; end

    sig { void }
    def dark_theme_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def disabled=(value); end

    sig { returns(T::Boolean) }
    def disabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def disabled_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def disabled_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def disabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def disabled_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def disabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_was; end

    sig { void }
    def disabled_will_change!; end

    sig { returns(::String) }
    def display_login; end

    sig { params(value: ::String).returns(::String) }
    def display_login=(value); end

    sig { returns(T::Boolean) }
    def display_login?; end

    sig { returns(T.nilable(::String)) }
    def display_login_before_last_save; end

    sig { returns(T.untyped) }
    def display_login_before_type_cast; end

    sig { returns(T::Boolean) }
    def display_login_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_login_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_login_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def display_login_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def display_login_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def display_login_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def display_login_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def display_login_previously_was; end

    sig { returns(T.nilable(::String)) }
    def display_login_was; end

    sig { void }
    def display_login_will_change!; end

    sig { returns(T.nilable(::String)) }
    def gh_role; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def gh_role=(value); end

    sig { returns(T::Boolean) }
    def gh_role?; end

    sig { returns(T.nilable(::String)) }
    def gh_role_before_last_save; end

    sig { returns(T.untyped) }
    def gh_role_before_type_cast; end

    sig { returns(T::Boolean) }
    def gh_role_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gh_role_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gh_role_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def gh_role_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gh_role_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gh_role_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def gh_role_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gh_role_previously_was; end

    sig { returns(T.nilable(::String)) }
    def gh_role_was; end

    sig { void }
    def gh_role_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def gift; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def gift=(value); end

    sig { returns(T::Boolean) }
    def gift?; end

    sig { returns(T.nilable(T::Boolean)) }
    def gift_before_last_save; end

    sig { returns(T.untyped) }
    def gift_before_type_cast; end

    sig { returns(T::Boolean) }
    def gift_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def gift_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def gift_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def gift_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def gift_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def gift_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def gift_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def gift_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def gift_was; end

    sig { void }
    def gift_will_change!; end

    sig { returns(T.nilable(::String)) }
    def gravatar_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def gravatar_email=(value); end

    sig { returns(T::Boolean) }
    def gravatar_email?; end

    sig { returns(T.nilable(::String)) }
    def gravatar_email_before_last_save; end

    sig { returns(T.untyped) }
    def gravatar_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def gravatar_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gravatar_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gravatar_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def gravatar_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gravatar_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gravatar_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def gravatar_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gravatar_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def gravatar_email_was; end

    sig { void }
    def gravatar_email_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_ip=(value); end

    sig { returns(T::Boolean) }
    def last_ip?; end

    sig { returns(T.nilable(::String)) }
    def last_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_ip_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_ip_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_ip_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_ip_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_ip_was; end

    sig { void }
    def last_ip_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_read_broadcast_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_read_broadcast_id=(value); end

    sig { returns(T::Boolean) }
    def last_read_broadcast_id?; end

    sig { returns(T.nilable(::Integer)) }
    def last_read_broadcast_id_before_last_save; end

    sig { returns(T.untyped) }
    def last_read_broadcast_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_read_broadcast_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_read_broadcast_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_read_broadcast_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_read_broadcast_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_read_broadcast_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_read_broadcast_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_read_broadcast_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_read_broadcast_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_read_broadcast_id_was; end

    sig { void }
    def last_read_broadcast_id_will_change!; end

    sig { returns(::Integer) }
    def light_theme; end

    sig { params(value: ::Integer).returns(::Integer) }
    def light_theme=(value); end

    sig { returns(T::Boolean) }
    def light_theme?; end

    sig { returns(T.nilable(::Integer)) }
    def light_theme_before_last_save; end

    sig { returns(T.untyped) }
    def light_theme_before_type_cast; end

    sig { returns(T::Boolean) }
    def light_theme_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def light_theme_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def light_theme_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def light_theme_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def light_theme_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def light_theme_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def light_theme_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def light_theme_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def light_theme_was; end

    sig { void }
    def light_theme_will_change!; end

    sig { returns(::String) }
    def login; end

    sig { params(value: ::String).returns(::String) }
    def login=(value); end

    sig { returns(T::Boolean) }
    def login?; end

    sig { returns(T.nilable(::String)) }
    def login_before_last_save; end

    sig { returns(T.untyped) }
    def login_before_type_cast; end

    sig { returns(T::Boolean) }
    def login_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def login_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def login_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def login_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def login_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def login_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def login_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def login_previously_was; end

    sig { returns(T.nilable(::String)) }
    def login_was; end

    sig { void }
    def login_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def migration_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def migration_id=(value); end

    sig { returns(T::Boolean) }
    def migration_id?; end

    sig { returns(T.nilable(::Integer)) }
    def migration_id_before_last_save; end

    sig { returns(T.untyped) }
    def migration_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def migration_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def migration_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def migration_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def migration_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def migration_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def migration_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def migration_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def migration_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def migration_id_was; end

    sig { void }
    def migration_id_will_change!; end

    sig { returns(T::Boolean) }
    def ofac_flagged; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def ofac_flagged=(value); end

    sig { returns(T::Boolean) }
    def ofac_flagged?; end

    sig { returns(T.nilable(T::Boolean)) }
    def ofac_flagged_before_last_save; end

    sig { returns(T.untyped) }
    def ofac_flagged_before_type_cast; end

    sig { returns(T::Boolean) }
    def ofac_flagged_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ofac_flagged_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ofac_flagged_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ofac_flagged_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ofac_flagged_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def ofac_flagged_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def ofac_flagged_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ofac_flagged_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ofac_flagged_was; end

    sig { void }
    def ofac_flagged_will_change!; end

    sig { returns(T.nilable(::String)) }
    def organization_billing_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def organization_billing_email=(value); end

    sig { returns(T::Boolean) }
    def organization_billing_email?; end

    sig { returns(T.nilable(::String)) }
    def organization_billing_email_before_last_save; end

    sig { returns(T.untyped) }
    def organization_billing_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def organization_billing_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def organization_billing_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def organization_billing_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def organization_billing_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def organization_billing_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def organization_billing_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def organization_billing_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def organization_billing_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def organization_billing_email_was; end

    sig { void }
    def organization_billing_email_will_change!; end

    sig { returns(T.untyped) }
    def password_hash; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def password_hash=(value); end

    sig { returns(T::Boolean) }
    def password_hash?; end

    sig { returns(T.untyped) }
    def password_hash_before_last_save; end

    sig { returns(T.untyped) }
    def password_hash_before_type_cast; end

    sig { returns(T::Boolean) }
    def password_hash_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def password_hash_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def password_hash_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def password_hash_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def password_hash_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def password_hash_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def password_hash_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def password_hash_previously_was; end

    sig { returns(T.untyped) }
    def password_hash_was; end

    sig { void }
    def password_hash_will_change!; end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def pinned_api_version=(value); end

    sig { returns(T::Boolean) }
    def pinned_api_version?; end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_before_last_save; end

    sig { returns(T.untyped) }
    def pinned_api_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def pinned_api_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pinned_api_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pinned_api_version_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pinned_api_version_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pinned_api_version_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pinned_api_version_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pinned_api_version_was; end

    sig { void }
    def pinned_api_version_will_change!; end

    sig { returns(T.nilable(::String)) }
    def plan; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def plan=(value); end

    sig { returns(T::Boolean) }
    def plan?; end

    sig { returns(T.nilable(::String)) }
    def plan_before_last_save; end

    sig { returns(T.untyped) }
    def plan_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_duration; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def plan_duration=(value); end

    sig { returns(T::Boolean) }
    def plan_duration?; end

    sig { returns(T.nilable(::String)) }
    def plan_duration_before_last_save; end

    sig { returns(T.untyped) }
    def plan_duration_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_duration_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_duration_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_duration_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_duration_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_duration_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_duration_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_duration_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_duration_previously_was; end

    sig { returns(T.nilable(::String)) }
    def plan_duration_was; end

    sig { void }
    def plan_duration_will_change!; end

    sig { returns(T.nilable(::String)) }
    def plan_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_previously_was; end

    sig { returns(T.nilable(::String)) }
    def plan_was; end

    sig { void }
    def plan_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def primary_language_name_id=(value); end

    sig { returns(T::Boolean) }
    def primary_language_name_id?; end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_before_last_save; end

    sig { returns(T.untyped) }
    def primary_language_name_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def primary_language_name_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_language_name_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_language_name_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def primary_language_name_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def primary_language_name_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def primary_language_name_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def primary_language_name_id_was; end

    sig { void }
    def primary_language_name_id_will_change!; end

    sig { returns(T::Boolean) }
    def private_profile; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def private_profile=(value); end

    sig { returns(T::Boolean) }
    def private_profile?; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_profile_before_last_save; end

    sig { returns(T.untyped) }
    def private_profile_before_type_cast; end

    sig { returns(T::Boolean) }
    def private_profile_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_profile_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_profile_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def private_profile_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def private_profile_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def private_profile_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def private_profile_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def private_profile_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def private_profile_was; end

    sig { void }
    def private_profile_will_change!; end

    sig { returns(T.untyped) }
    def raw_data; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def raw_data=(value); end

    sig { returns(T::Boolean) }
    def raw_data?; end

    sig { returns(T.untyped) }
    def raw_data_before_last_save; end

    sig { returns(T.untyped) }
    def raw_data_before_type_cast; end

    sig { returns(T::Boolean) }
    def raw_data_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def raw_data_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def raw_data_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def raw_data_previously_was; end

    sig { returns(T.untyped) }
    def raw_data_was; end

    sig { void }
    def raw_data_will_change!; end

    sig { returns(T.nilable(::String)) }
    def referral_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def referral_code=(value); end

    sig { returns(T::Boolean) }
    def referral_code?; end

    sig { returns(T.nilable(::String)) }
    def referral_code_before_last_save; end

    sig { returns(T.untyped) }
    def referral_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def referral_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referral_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referral_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def referral_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def referral_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def referral_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def referral_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def referral_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def referral_code_was; end

    sig { void }
    def referral_code_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remember_token=(value); end

    sig { returns(T::Boolean) }
    def remember_token?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_before_last_save; end

    sig { returns(T.untyped) }
    def remember_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def remember_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at=(value); end

    sig { returns(T::Boolean) }
    def remember_token_expires_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_token_expires_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_token_expires_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_token_expires_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_token_expires_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def remember_token_expires_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_token_expires_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def remember_token_expires_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_token_expires_at_was; end

    sig { void }
    def remember_token_expires_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def remember_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def remember_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remember_token_was; end

    sig { void }
    def remember_token_will_change!; end

    sig { returns(T::Boolean) }
    def report_third_party_analytics; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def report_third_party_analytics=(value); end

    sig { returns(T::Boolean) }
    def report_third_party_analytics?; end

    sig { returns(T.nilable(T::Boolean)) }
    def report_third_party_analytics_before_last_save; end

    sig { returns(T.untyped) }
    def report_third_party_analytics_before_type_cast; end

    sig { returns(T::Boolean) }
    def report_third_party_analytics_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def report_third_party_analytics_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def report_third_party_analytics_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def report_third_party_analytics_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def report_third_party_analytics_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def report_third_party_analytics_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def report_third_party_analytics_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def report_third_party_analytics_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def report_third_party_analytics_was; end

    sig { void }
    def report_third_party_analytics_will_change!; end

    sig { returns(T::Boolean) }
    def require_email_verification; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def require_email_verification=(value); end

    sig { returns(T::Boolean) }
    def require_email_verification?; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_email_verification_before_last_save; end

    sig { returns(T.untyped) }
    def require_email_verification_before_type_cast; end

    sig { returns(T::Boolean) }
    def require_email_verification_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_email_verification_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_email_verification_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_email_verification_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_email_verification_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def require_email_verification_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def require_email_verification_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def require_email_verification_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def require_email_verification_was; end

    sig { void }
    def require_email_verification_will_change!; end

    sig { void }
    def restore_analytics_tracking_id!; end

    sig { void }
    def restore_archived_at!; end

    sig { void }
    def restore_auth_token!; end

    sig { void }
    def restore_bcrypt_auth_token!; end

    sig { void }
    def restore_billed_on!; end

    sig { void }
    def restore_billing_attempts!; end

    sig { void }
    def restore_billing_extra!; end

    sig { void }
    def restore_billing_type!; end

    sig { void }
    def restore_business_id!; end

    sig { void }
    def restore_color_mode!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_dark_theme!; end

    sig { void }
    def restore_disabled!; end

    sig { void }
    def restore_display_login!; end

    sig { void }
    def restore_gh_role!; end

    sig { void }
    def restore_gift!; end

    sig { void }
    def restore_gravatar_email!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_ip!; end

    sig { void }
    def restore_last_read_broadcast_id!; end

    sig { void }
    def restore_light_theme!; end

    sig { void }
    def restore_login!; end

    sig { void }
    def restore_migration_id!; end

    sig { void }
    def restore_ofac_flagged!; end

    sig { void }
    def restore_organization_billing_email!; end

    sig { void }
    def restore_password_hash!; end

    sig { void }
    def restore_pinned_api_version!; end

    sig { void }
    def restore_plan!; end

    sig { void }
    def restore_plan_duration!; end

    sig { void }
    def restore_primary_language_name_id!; end

    sig { void }
    def restore_private_profile!; end

    sig { void }
    def restore_raw_data!; end

    sig { void }
    def restore_referral_code!; end

    sig { void }
    def restore_remember_token!; end

    sig { void }
    def restore_remember_token_expires_at!; end

    sig { void }
    def restore_report_third_party_analytics!; end

    sig { void }
    def restore_require_email_verification!; end

    sig { void }
    def restore_restrict_oauth_applications!; end

    sig { void }
    def restore_seats!; end

    sig { void }
    def restore_session_fingerprint!; end

    sig { void }
    def restore_source_login!; end

    sig { void }
    def restore_spammy!; end

    sig { void }
    def restore_spammy_reason!; end

    sig { void }
    def restore_split_diff_preferred!; end

    sig { void }
    def restore_suspended_at!; end

    sig { void }
    def restore_time_zone_name!; end

    sig { void }
    def restore_token_secret!; end

    sig { void }
    def restore_two_factor_requirement_state!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_upgrade_accept!; end

    sig { void }
    def restore_upgrade_ignore!; end

    sig { void }
    def restore_wants_email!; end

    sig { void }
    def restore_warn_private_email!; end

    sig { void }
    def restore_weak_password_check_result!; end

    sig { returns(T.nilable(T::Boolean)) }
    def restrict_oauth_applications; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def restrict_oauth_applications=(value); end

    sig { returns(T::Boolean) }
    def restrict_oauth_applications?; end

    sig { returns(T.nilable(T::Boolean)) }
    def restrict_oauth_applications_before_last_save; end

    sig { returns(T.untyped) }
    def restrict_oauth_applications_before_type_cast; end

    sig { returns(T::Boolean) }
    def restrict_oauth_applications_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def restrict_oauth_applications_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def restrict_oauth_applications_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def restrict_oauth_applications_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def restrict_oauth_applications_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def restrict_oauth_applications_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def restrict_oauth_applications_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def restrict_oauth_applications_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def restrict_oauth_applications_was; end

    sig { void }
    def restrict_oauth_applications_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_analytics_tracking_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_analytics_tracking_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_archived_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_archived_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_auth_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_auth_token?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_bcrypt_auth_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_bcrypt_auth_token?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_billed_on; end

    sig { returns(T::Boolean) }
    def saved_change_to_billed_on?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_billing_attempts; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_attempts?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_extra; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_extra?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_billing_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_type?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_business_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_business_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_color_mode; end

    sig { returns(T::Boolean) }
    def saved_change_to_color_mode?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_dark_theme; end

    sig { returns(T::Boolean) }
    def saved_change_to_dark_theme?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_disabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_display_login; end

    sig { returns(T::Boolean) }
    def saved_change_to_display_login?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_gh_role; end

    sig { returns(T::Boolean) }
    def saved_change_to_gh_role?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_gift; end

    sig { returns(T::Boolean) }
    def saved_change_to_gift?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_gravatar_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_gravatar_email?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_ip?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_read_broadcast_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_read_broadcast_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_light_theme; end

    sig { returns(T::Boolean) }
    def saved_change_to_light_theme?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_login; end

    sig { returns(T::Boolean) }
    def saved_change_to_login?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_migration_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_migration_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_ofac_flagged; end

    sig { returns(T::Boolean) }
    def saved_change_to_ofac_flagged?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_organization_billing_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_organization_billing_email?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_password_hash; end

    sig { returns(T::Boolean) }
    def saved_change_to_password_hash?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_pinned_api_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_pinned_api_version?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_plan; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_plan_duration; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_duration?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_primary_language_name_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_primary_language_name_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_private_profile; end

    sig { returns(T::Boolean) }
    def saved_change_to_private_profile?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_raw_data; end

    sig { returns(T::Boolean) }
    def saved_change_to_raw_data?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_referral_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_referral_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remember_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_token_expires_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_token_expires_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_report_third_party_analytics; end

    sig { returns(T::Boolean) }
    def saved_change_to_report_third_party_analytics?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_require_email_verification; end

    sig { returns(T::Boolean) }
    def saved_change_to_require_email_verification?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_restrict_oauth_applications; end

    sig { returns(T::Boolean) }
    def saved_change_to_restrict_oauth_applications?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_seats; end

    sig { returns(T::Boolean) }
    def saved_change_to_seats?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_session_fingerprint; end

    sig { returns(T::Boolean) }
    def saved_change_to_session_fingerprint?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_source_login; end

    sig { returns(T::Boolean) }
    def saved_change_to_source_login?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_spammy; end

    sig { returns(T::Boolean) }
    def saved_change_to_spammy?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_spammy_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_spammy_reason?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_split_diff_preferred; end

    sig { returns(T::Boolean) }
    def saved_change_to_split_diff_preferred?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_suspended_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_suspended_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_time_zone_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_time_zone_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_token_secret; end

    sig { returns(T::Boolean) }
    def saved_change_to_token_secret?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_two_factor_requirement_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_two_factor_requirement_state?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_upgrade_accept; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgrade_accept?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_upgrade_ignore; end

    sig { returns(T::Boolean) }
    def saved_change_to_upgrade_ignore?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_wants_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_wants_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_warn_private_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_warn_private_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_weak_password_check_result; end

    sig { returns(T::Boolean) }
    def saved_change_to_weak_password_check_result?; end

    sig { returns(::Integer) }
    def seats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def seats=(value); end

    sig { returns(T::Boolean) }
    def seats?; end

    sig { returns(T.nilable(::Integer)) }
    def seats_before_last_save; end

    sig { returns(T.untyped) }
    def seats_before_type_cast; end

    sig { returns(T::Boolean) }
    def seats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def seats_was; end

    sig { void }
    def seats_will_change!; end

    sig { returns(T.nilable(::String)) }
    def session_fingerprint; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def session_fingerprint=(value); end

    sig { returns(T::Boolean) }
    def session_fingerprint?; end

    sig { returns(T.nilable(::String)) }
    def session_fingerprint_before_last_save; end

    sig { returns(T.untyped) }
    def session_fingerprint_before_type_cast; end

    sig { returns(T::Boolean) }
    def session_fingerprint_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def session_fingerprint_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def session_fingerprint_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def session_fingerprint_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def session_fingerprint_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def session_fingerprint_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def session_fingerprint_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def session_fingerprint_previously_was; end

    sig { returns(T.nilable(::String)) }
    def session_fingerprint_was; end

    sig { void }
    def session_fingerprint_will_change!; end

    sig { returns(T.nilable(::String)) }
    def source_login; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def source_login=(value); end

    sig { returns(T::Boolean) }
    def source_login?; end

    sig { returns(T.nilable(::String)) }
    def source_login_before_last_save; end

    sig { returns(T.untyped) }
    def source_login_before_type_cast; end

    sig { returns(T::Boolean) }
    def source_login_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_login_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_login_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def source_login_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def source_login_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_login_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def source_login_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def source_login_previously_was; end

    sig { returns(T.nilable(::String)) }
    def source_login_was; end

    sig { void }
    def source_login_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def spammy=(value); end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_before_last_save; end

    sig { returns(T.untyped) }
    def spammy_before_type_cast; end

    sig { returns(T::Boolean) }
    def spammy_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def spammy_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def spammy_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def spammy_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def spammy_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def spammy_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_previously_was; end

    sig { returns(T.nilable(::String)) }
    def spammy_reason; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def spammy_reason=(value); end

    sig { returns(T::Boolean) }
    def spammy_reason?; end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_before_last_save; end

    sig { returns(T.untyped) }
    def spammy_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def spammy_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spammy_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spammy_reason_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def spammy_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def spammy_reason_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def spammy_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def spammy_reason_was; end

    sig { void }
    def spammy_reason_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def spammy_was; end

    sig { void }
    def spammy_will_change!; end

    sig { returns(T::Boolean) }
    def split_diff_preferred; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def split_diff_preferred=(value); end

    sig { returns(T::Boolean) }
    def split_diff_preferred?; end

    sig { returns(T.nilable(T::Boolean)) }
    def split_diff_preferred_before_last_save; end

    sig { returns(T.untyped) }
    def split_diff_preferred_before_type_cast; end

    sig { returns(T::Boolean) }
    def split_diff_preferred_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def split_diff_preferred_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def split_diff_preferred_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def split_diff_preferred_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def split_diff_preferred_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def split_diff_preferred_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def split_diff_preferred_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def split_diff_preferred_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def split_diff_preferred_was; end

    sig { void }
    def split_diff_preferred_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at=(value); end

    sig { returns(T::Boolean) }
    def suspended_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_before_last_save; end

    sig { returns(T.untyped) }
    def suspended_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def suspended_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_was; end

    sig { void }
    def suspended_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def time_zone_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def time_zone_name=(value); end

    sig { returns(T::Boolean) }
    def time_zone_name?; end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_before_last_save; end

    sig { returns(T.untyped) }
    def time_zone_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def time_zone_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def time_zone_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def time_zone_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def time_zone_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def time_zone_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def time_zone_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def time_zone_name_was; end

    sig { void }
    def time_zone_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def token_secret; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def token_secret=(value); end

    sig { returns(T::Boolean) }
    def token_secret?; end

    sig { returns(T.nilable(::String)) }
    def token_secret_before_last_save; end

    sig { returns(T.untyped) }
    def token_secret_before_type_cast; end

    sig { returns(T::Boolean) }
    def token_secret_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_secret_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_secret_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def token_secret_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_secret_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def token_secret_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def token_secret_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def token_secret_previously_was; end

    sig { returns(T.nilable(::String)) }
    def token_secret_was; end

    sig { void }
    def token_secret_will_change!; end

    sig { returns(::Integer) }
    def two_factor_requirement_state; end

    sig { params(value: ::Integer).returns(::Integer) }
    def two_factor_requirement_state=(value); end

    sig { returns(T::Boolean) }
    def two_factor_requirement_state?; end

    sig { returns(T.nilable(::Integer)) }
    def two_factor_requirement_state_before_last_save; end

    sig { returns(T.untyped) }
    def two_factor_requirement_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def two_factor_requirement_state_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def two_factor_requirement_state_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def two_factor_requirement_state_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def two_factor_requirement_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def two_factor_requirement_state_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def two_factor_requirement_state_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def two_factor_requirement_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def two_factor_requirement_state_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def two_factor_requirement_state_was; end

    sig { void }
    def two_factor_requirement_state_will_change!; end

    sig { returns(::String) }
    def type; end

    sig { params(value: ::String).returns(::String) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.nilable(::String)) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_accept; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def upgrade_accept=(value); end

    sig { returns(T::Boolean) }
    def upgrade_accept?; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_accept_before_last_save; end

    sig { returns(T.untyped) }
    def upgrade_accept_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgrade_accept_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_accept_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_accept_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgrade_accept_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_accept_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upgrade_accept_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upgrade_accept_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_accept_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def upgrade_accept_was; end

    sig { void }
    def upgrade_accept_will_change!; end

    sig { returns(T.nilable(::String)) }
    def upgrade_ignore; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def upgrade_ignore=(value); end

    sig { returns(T::Boolean) }
    def upgrade_ignore?; end

    sig { returns(T.nilable(::String)) }
    def upgrade_ignore_before_last_save; end

    sig { returns(T.untyped) }
    def upgrade_ignore_before_type_cast; end

    sig { returns(T::Boolean) }
    def upgrade_ignore_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def upgrade_ignore_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def upgrade_ignore_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def upgrade_ignore_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def upgrade_ignore_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def upgrade_ignore_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def upgrade_ignore_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def upgrade_ignore_previously_was; end

    sig { returns(T.nilable(::String)) }
    def upgrade_ignore_was; end

    sig { void }
    def upgrade_ignore_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def wants_email; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def wants_email=(value); end

    sig { returns(T::Boolean) }
    def wants_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def wants_email_before_last_save; end

    sig { returns(T.untyped) }
    def wants_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def wants_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def wants_email_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def wants_email_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def wants_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def wants_email_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def wants_email_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def wants_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def wants_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def wants_email_was; end

    sig { void }
    def wants_email_will_change!; end

    sig { returns(T::Boolean) }
    def warn_private_email; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def warn_private_email=(value); end

    sig { returns(T::Boolean) }
    def warn_private_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def warn_private_email_before_last_save; end

    sig { returns(T.untyped) }
    def warn_private_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def warn_private_email_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def warn_private_email_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def warn_private_email_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def warn_private_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def warn_private_email_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def warn_private_email_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def warn_private_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def warn_private_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def warn_private_email_was; end

    sig { void }
    def warn_private_email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def weak_password_check_result; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def weak_password_check_result=(value); end

    sig { returns(T::Boolean) }
    def weak_password_check_result?; end

    sig { returns(T.nilable(::String)) }
    def weak_password_check_result_before_last_save; end

    sig { returns(T.untyped) }
    def weak_password_check_result_before_type_cast; end

    sig { returns(T::Boolean) }
    def weak_password_check_result_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def weak_password_check_result_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def weak_password_check_result_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def weak_password_check_result_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def weak_password_check_result_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def weak_password_check_result_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def weak_password_check_result_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def weak_password_check_result_previously_was; end

    sig { returns(T.nilable(::String)) }
    def weak_password_check_result_was; end

    sig { void }
    def weak_password_check_result_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_analytics_tracking_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_archived_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_auth_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bcrypt_auth_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billed_on?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_attempts?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_extra?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_business_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_color_mode?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dark_theme?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_display_login?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gh_role?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gift?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gravatar_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_read_broadcast_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_light_theme?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_login?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_migration_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ofac_flagged?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_organization_billing_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_password_hash?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pinned_api_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_duration?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_primary_language_name_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_private_profile?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_raw_data?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_referral_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_token_expires_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_report_third_party_analytics?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_require_email_verification?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_restrict_oauth_applications?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_seats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_session_fingerprint?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_source_login?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_spammy?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_spammy_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_split_diff_preferred?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suspended_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_time_zone_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_token_secret?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_two_factor_requirement_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgrade_accept?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upgrade_ignore?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_wants_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_warn_private_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_weak_password_check_result?; end
  end

  module GeneratedPreludeBatchMethods
    sig { params(viewer: T.untyped, cap_filter: T.untyped).returns(T.untyped) }
    def accessible_suggested_issue_type_names(viewer, cap_filter); end

    sig { params(viewer: T.untyped, cap_filter: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_accessible_suggested_issue_type_names(viewer, cap_filter); end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def sponsoring_viewer?(viewer); end

    sig { returns(T.untyped) }
    def visible_highest_tier_achievements; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_active_sponsorships_as_sponsor; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_can_be_added_to_memex_project?; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_coupon; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_coupon_redemption; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_sponsorable?; end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_sponsoring_viewer?(viewer); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_visible_highest_tier_achievements; end

    sig { params(repo: T.untyped).returns(T.untyped) }
    def action_and_role_level_for(repo); end

    sig { returns(T.untyped) }
    def active_sponsorships_as_sponsor; end

    sig { returns(T.untyped) }
    def can_be_added_to_memex_project?; end

    sig { returns(T.untyped) }
    def coupon; end

    sig { returns(T.untyped) }
    def coupon_redemption; end

    sig { params(current_user: T.untyped).returns(T.untyped) }
    def followed_by?(current_user); end

    sig { params(plan_name: T.untyped).returns(T.untyped) }
    def plan_trial_active?(plan_name); end

    sig { params(repo: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_action_and_role_level_for(repo); end

    sig { params(plan_name: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_plan_trial_active?(plan_name); end

    sig { returns(T.untyped) }
    def sponsorable?; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def sponsored_by_viewer?(viewer); end

    sig { params(current_user: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_followed_by?(current_user); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_sponsored_by_viewer?(viewer); end

    sig { returns(T.untyped) }
    def public_repository_count; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_public_repository_count; end

    sig { returns(T.untyped) }
    def repository_counts; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_repository_counts; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def accepts_marketing_mail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active_external_identities(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def blocking(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_ip(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_login(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def carded(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def delegates_billing_to_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def disabled_by_scim(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def exclude(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def expiring_soon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def following_starred(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def gift(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def has_verified_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def including_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invoiced(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def like_login_or_profile_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_to_oldest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_blocking(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def oldest_to_newest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def on_paid_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order_by_login_asc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paying(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def publicly_belongs_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy_or_blocking(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def suspended(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def teacher(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def two_factor_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def two_factor_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_account_two_factor_requirement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_visible_profiles_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_account_two_factor_requirement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_billing_email(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_soft_deleted_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def yearly(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ProgrammaticAccessBot } }

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def to_a; end

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ProgrammaticAccessBot } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ProgrammaticAccessBot } }

    sig do
      params(
        records: T.any(::ProgrammaticAccessBot, T::Enumerable[T.any(::ProgrammaticAccessBot, T::Enumerable[::ProgrammaticAccessBot])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ProgrammaticAccessBot, T::Enumerable[T.any(::ProgrammaticAccessBot, T::Enumerable[::ProgrammaticAccessBot])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ProgrammaticAccessBot, T::Enumerable[T.any(::ProgrammaticAccessBot, T::Enumerable[::ProgrammaticAccessBot])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ProgrammaticAccessBot, T::Enumerable[T.any(::ProgrammaticAccessBot, T::Enumerable[::ProgrammaticAccessBot])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ProgrammaticAccessBot, T::Enumerable[T.any(::ProgrammaticAccessBot, T::Enumerable[::ProgrammaticAccessBot])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ProgrammaticAccessBot, T::Enumerable[T.any(::ProgrammaticAccessBot, T::Enumerable[::ProgrammaticAccessBot])])
      ).returns(T::Array[::ProgrammaticAccessBot])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def target; end

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def to_a; end

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ProgrammaticAccessBot } }

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def to_a; end

    sig { returns(T::Array[::ProgrammaticAccessBot]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::ProgrammaticAccessBot } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Sigstore::Rekor::V1::TransparencyLogEntry`.
# Please instead update this file by running `bin/tapioca dsl Sigstore::Rekor::V1::TransparencyLogEntry`.

class Sigstore::Rekor::V1::TransparencyLogEntry
  sig do
    params(
      canonicalized_body: T.nilable(String),
      inclusion_promise: T.nilable(Sigstore::Rekor::V1::InclusionPromise),
      inclusion_proof: T.nilable(Sigstore::Rekor::V1::InclusionProof),
      integrated_time: T.nilable(Integer),
      kind_version: T.nilable(Sigstore::Rekor::V1::KindVersion),
      log_id: T.nilable(Sigstore::Common::V1::LogId),
      log_index: T.nilable(Integer)
    ).void
  end
  def initialize(canonicalized_body: nil, inclusion_promise: nil, inclusion_proof: nil, integrated_time: nil, kind_version: nil, log_id: nil, log_index: nil); end

  sig { returns(String) }
  def canonicalized_body; end

  sig { params(value: String).void }
  def canonicalized_body=(value); end

  sig { void }
  def clear_canonicalized_body; end

  sig { void }
  def clear_inclusion_promise; end

  sig { void }
  def clear_inclusion_proof; end

  sig { void }
  def clear_integrated_time; end

  sig { void }
  def clear_kind_version; end

  sig { void }
  def clear_log_id; end

  sig { void }
  def clear_log_index; end

  sig { returns(T.nilable(Sigstore::Rekor::V1::InclusionPromise)) }
  def inclusion_promise; end

  sig { params(value: T.nilable(Sigstore::Rekor::V1::InclusionPromise)).void }
  def inclusion_promise=(value); end

  sig { returns(T.nilable(Sigstore::Rekor::V1::InclusionProof)) }
  def inclusion_proof; end

  sig { params(value: T.nilable(Sigstore::Rekor::V1::InclusionProof)).void }
  def inclusion_proof=(value); end

  sig { returns(Integer) }
  def integrated_time; end

  sig { params(value: Integer).void }
  def integrated_time=(value); end

  sig { returns(T.nilable(Sigstore::Rekor::V1::KindVersion)) }
  def kind_version; end

  sig { params(value: T.nilable(Sigstore::Rekor::V1::KindVersion)).void }
  def kind_version=(value); end

  sig { returns(T.nilable(Sigstore::Common::V1::LogId)) }
  def log_id; end

  sig { params(value: T.nilable(Sigstore::Common::V1::LogId)).void }
  def log_id=(value); end

  sig { returns(Integer) }
  def log_index; end

  sig { params(value: Integer).void }
  def log_index=(value); end
end

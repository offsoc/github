{"version":3,"file":"chunk-app_components_profiles_profile-timezone-element_ts-xxxxxxxxxxxx.js","mappings":"o/BAoBE,cAuBA,cAhCF,YACMA,+BAA+BC,YAInCC,mBAAoB,CAClB,MAAI,CAAEC,GAAAA,IAAAA,CAAN,IAAI,CACN,C,8BAEA,U,kBAAA,M,GAuBA,U,kBAAA,M,UAvBCA,EAAe,KACd,GAAI,CAAC,IAAI,CAACC,eAAe,CACvB,MAEG,KAAI,CAACC,cAAc,EACtB,KAAI,CAACA,cAAc,CAAG,IAAIC,OAAOC,iBAAiB,EAAC,EAErD,IAAMC,EAAyB,CAAC,IAAI,CAACH,cAAc,CAAG,GAChDI,EAAa,IAAI,CAACL,eAAe,CAAGI,EAE1C,OAAQE,KAAKC,IAAI,CAACF,IAChB,KAAK,EACH,IAAI,CAACG,WAAW,CAAG,CAAC,EAAE,EAAE,MAAI,CAAEC,GAAAA,IAAAA,CAAN,IAAI,CAAiBJ,GAAY,MAAM,CAAC,CAChE,KACF,MAAK,GACH,IAAI,CAACG,WAAW,CAAG,CAAC,EAAE,EAAE,MAAI,CAAEC,GAAAA,IAAAA,CAAN,IAAI,CAAiBJ,GAAY,OAAO,CAAC,CACjE,KACF,SACE,IAAI,CAACG,WAAW,CAAG,aAEvB,CACF,G,OAECC,EAAiB,IAChB,IAAMC,EAAQJ,KAAKK,KAAK,CAACL,KAAKM,GAAG,CAACC,IAC5BC,EAAU,QAAMF,GAAG,CAACC,GAAsB,GAE1CE,EAAiBL,IAAAA,EAAc,CAAC,EAAEA,EAAM,CAAC,CAAC,CAAG,GAC7CM,EAAmBF,IAAAA,EAAgB,CAAC,EAAEA,EAAQ,CAAC,CAAC,CAAG,GAEzD,MAAO,CAAC,EAAEC,EAAe,EAAEC,EAAiB,CAAC,E,CAEjD,E,GAvCGC,EAAAA,EAAIA,C,CADDrB,EAAAA,SAAAA,CAAAA,kBAAAA,KAAAA,G,GAEHqB,EAAAA,EAAIA,C,CAFDrB,EAAAA,SAAAA,CAAAA,iBAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CADLsB,EAAAA,EAAUA,C,CACLtB,E","sources":["app/components/profiles/profile-timezone-element.ts"],"sourcesContent":["import {controller, attr} from '@github/catalyst'\n\n// When rendered, replace its content (a profile's timezone) with whether that\n// timezone is ahead, behind or equal to the browser/OS seeing it.\n//\n// Receives the number of hours that the profile's timezone (selected on\n// settings) is ahead of UTC (negative if behind, zero if on UTC). If not passed\n// (e.g., user viewing their own profile), does not change its content.\n//\n// Tests can also pass a timezone offset to simulate a browser timezone\n// (it will be used instead of new Date.getTimezoneOffset())\n@controller\nclass ProfileTimezoneElement extends HTMLElement {\n  @attr hoursAheadOfUtc: number\n  @attr timezoneOffset: number\n\n  connectedCallback() {\n    this.#renderOutput()\n  }\n\n  #renderOutput = () => {\n    if (!this.hoursAheadOfUtc) {\n      return\n    }\n    if (!this.timezoneOffset) {\n      this.timezoneOffset = new Date().getTimezoneOffset()\n    }\n    const browserHoursAheadOfUtc = -this.timezoneOffset / 60\n    const hoursAhead = this.hoursAheadOfUtc - browserHoursAheadOfUtc\n\n    switch (Math.sign(hoursAhead)) {\n      case 1:\n        this.textContent = `- ${this.#formatAs99h99m(hoursAhead)} ahead`\n        break\n      case -1:\n        this.textContent = `- ${this.#formatAs99h99m(hoursAhead)} behind`\n        break\n      default:\n        this.textContent = '- same time'\n        break\n    }\n  }\n\n  #formatAs99h99m = (hoursAsFloat: number) => {\n    const hours = Math.floor(Math.abs(hoursAsFloat))\n    const minutes = (Math.abs(hoursAsFloat) * 60) % 60\n\n    const formattedHours = hours !== 0 ? `${hours}h` : ''\n    const formattedMinutes = minutes !== 0 ? `${minutes}m` : ''\n\n    return `${formattedHours}${formattedMinutes}`\n  }\n}\n"],"names":["ProfileTimezoneElement","HTMLElement","connectedCallback","renderOutput","hoursAheadOfUtc","timezoneOffset","Date","getTimezoneOffset","browserHoursAheadOfUtc","hoursAhead","Math","sign","textContent","formatAs99h99m","hours","floor","abs","hoursAsFloat","minutes","formattedHours","formattedMinutes","attr","controller"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `creole` gem.
# Please instead update this file by running `bin/tapioca gem creole`.

# Main Creole parser class.  Call CreoleParser#parse to parse Creole
# formatted text.
#
# This class is not reentrant. A separate instance is needed for
# each thread that needs to convert Creole to HTML.
#
# Inherit this to provide custom handling of links. The overrideable
# methods are: make_local_link
#
# source://creole//lib/creole.rb#38
class Creole
  # Create a new CreoleParser instance.
  #
  # @return [Creole] a new instance of Creole
  #
  # source://creole//lib/creole.rb#63
  def initialize(text, options = T.unsafe(nil)); end

  # Allowed url schemes
  # Examples: http https ftp ftps
  #
  # source://creole//lib/creole.rb#56
  def allowed_schemes; end

  # Allowed url schemes
  # Examples: http https ftp ftps
  #
  # source://creole//lib/creole.rb#56
  def allowed_schemes=(_arg0); end

  # Extensions enabled?
  #
  # source://creole//lib/creole.rb#59
  def extensions=(_arg0); end

  # @return [Boolean]
  #
  # source://creole//lib/creole.rb#60
  def extensions?; end

  # Convert CCreole text to HTML and return
  # the result. The resulting HTML does not contain <html> and
  # <body> tags.
  #
  # Example:
  #
  #    parser = CreoleParser.new("**Hello //World//**", :extensions => true)
  #    parser.to_html
  #       #=> "<p><strong>Hello <em>World</em></strong></p>"
  #
  # source://creole//lib/creole.rb#78
  def to_html; end

  protected

  # source://creole//lib/creole.rb#121
  def end_paragraph; end

  # source://creole//lib/creole.rb#105
  def end_tag; end

  # Escape any characters with special meaning in HTML using HTML
  # entities.
  #
  # source://creole//lib/creole.rb#90
  def escape_html(string); end

  # Escape any characters with special meaning in URLs using URL
  # encoding.
  #
  # source://creole//lib/creole.rb#96
  def escape_url(string); end

  # Create anchor markup for direct links. This
  # method can be overridden to generate custom
  # markup, for example to add html additional attributes.
  #
  # source://creole//lib/creole.rb#139
  def make_direct_anchor(uri, text); end

  # Sanatize a direct url (e.g. http://wikipedia.org/). The default
  # behaviour returns the original link as-is.
  #
  # Must ensure that the result is properly URL-escaped. The caller
  # will handle HTML escaping as necessary. Links will not be
  # converted to HTML links if the function returns link.
  #
  # Custom versions of this function in inherited classes can
  # implement specific link handling behaviour, such as redirection
  # to intermediate pages (for example, for notifing the user that
  # he is leaving the site).
  #
  # source://creole//lib/creole.rb#183
  def make_direct_link(url); end

  # Create anchor markup for explicit links. This
  # method can be overridden to generate custom
  # markup, for example to add html additional attributes.
  #
  # source://creole//lib/creole.rb#146
  def make_explicit_anchor(uri, text); end

  # source://creole//lib/creole.rb#215
  def make_explicit_link(link); end

  # Create image markup.  This
  # method can be overridden to generate custom
  # markup, for example to add html additional attributes or
  # to put divs around the imgs.
  #
  # source://creole//lib/creole.rb#207
  def make_image(uri, alt); end

  # Sanatize and prefix image URLs. When images are encountered in
  # Creole text, this function is called to obtain the actual URL of
  # the image. The default behaviour is to return the image link
  # as-is. No image tags are inserted if the function returns nil.
  #
  # Custom version of the method can be used to sanatize URLs
  # (e.g. remove query-parts), inhibit off-site images, or add a
  # base URL, for example:
  #
  #    def make_image_link(url)
  #       URI.join("http://mywiki.org/images/", url)
  #    end
  #
  # source://creole//lib/creole.rb#199
  def make_image_link(url); end

  # Translate an explicit local link to a desired URL that is
  # properly URL-escaped. The default behaviour is to convert local
  # links directly, escaping any characters that have special
  # meaning in URLs. Relative URLs in local links are not handled.
  #
  # Examples:
  #
  #   make_local_link("LocalLink") #=> "LocalLink"
  #   make_local_link("/Foo/Bar") #=> "%2FFoo%2FBar"
  #
  # Must ensure that the result is properly URL-escaped. The caller
  # will handle HTML escaping as necessary. HTML links will not be
  # inserted if the function returns nil.
  #
  # Example custom behaviour:
  #
  #   make_local_link("LocalLink") #=> "/LocalLink"
  #   make_local_link("Wikipedia:Bread") #=> "http://en.wikipedia.org/wiki/Bread"
  #
  # source://creole//lib/creole.rb#168
  def make_local_link(link); end

  # source://creole//lib/creole.rb#310
  def make_nowikiblock(input); end

  # source://creole//lib/creole.rb#316
  def parse_block(str); end

  # source://creole//lib/creole.rb#224
  def parse_inline(str); end

  # source://creole//lib/creole.rb#297
  def parse_table_row(str); end

  # source://creole//lib/creole.rb#126
  def start_paragraph; end

  # source://creole//lib/creole.rb#100
  def start_tag(tag); end

  # source://creole//lib/creole.rb#109
  def toggle_tag(tag, match); end

  # @return [Boolean]
  #
  # source://creole//lib/creole.rb#314
  def ulol?(x); end

  class << self
    # Convert the argument in Creole format to HTML and return the
    # result. Example:
    #
    #    Creole.creolize("**Hello //World//**")
    #        #=> "<p><strong>Hello <em>World</em></strong></p>"
    #
    # This is an alias for calling Creole#parse:
    #    Creole.new(text).to_html
    #
    # source://creole//lib/creole.rb#50
    def creolize(text, options = T.unsafe(nil)); end
  end
end

# source://creole//lib/creole.rb#40
Creole::VERSION = T.let(T.unsafe(nil), String)

{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_fcl_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/fcl.js"],"sourcesContent":["var keywords = {\n  \"term\": true,\n  \"method\": true, \"accu\": true,\n  \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n  \"if\": true, \"default\": true\n};\n\nvar start_blocks = {\n  \"var_input\": true,\n  \"var_output\": true,\n  \"fuzzify\": true,\n  \"defuzzify\": true,\n  \"function_block\": true,\n  \"ruleblock\": true\n};\n\nvar end_blocks = {\n  \"end_ruleblock\": true,\n  \"end_defuzzify\": true,\n  \"end_function_block\": true,\n  \"end_fuzzify\": true,\n  \"end_var\": true\n};\n\nvar atoms = {\n  \"true\": true, \"false\": true, \"nan\": true,\n  \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n};\n\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n\n  if (ch == \"/\" || ch == \"(\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n  var cur = stream.current().toLowerCase();\n  if (keywords.propertyIsEnumerable(cur) ||\n      start_blocks.propertyIsEnumerable(cur) ||\n      end_blocks.propertyIsEnumerable(cur)) {\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \"end_block\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const fcl = {\n  name: \"fcl\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    var cur = stream.current().toLowerCase();\n\n    if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n    else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n    var ctx = state.context;\n\n    var closing = end_blocks.propertyIsEnumerable(textAfter);\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"//\", block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n\n"],"names":["keywords","start_blocks","end_blocks","atoms","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","fcl","name","startState","indentUnit","context","startOfLine","token","col","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","closing","unit","languageData","commentTokens","line","block","open","close"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PullRequestReviewRequestDelegation`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PullRequestReviewRequestDelegation`.

class Hydro::Schemas::Github::V1::PullRequestReviewRequestDelegation
  sig do
    params(
      algorithm: T.nilable(T.any(Symbol, Integer)),
      assigned_review_requests: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::PullRequestReviewRequest], T::Array[Hydro::Schemas::Github::V1::PullRequestReviewRequest])),
      count_existing_reviewers: T.nilable(T::Boolean),
      include_child_team_members: T.nilable(T::Boolean),
      max_delegated_reviewers_count: T.nilable(Integer),
      organization: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      remove_team_request: T.nilable(T::Boolean),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      team: T.nilable(Hydro::Schemas::Github::V1::Entities::Team),
      team_review_request: T.nilable(Hydro::Schemas::Github::V1::PullRequestReviewRequest)
    ).void
  end
  def initialize(algorithm: nil, assigned_review_requests: T.unsafe(nil), count_existing_reviewers: nil, include_child_team_members: nil, max_delegated_reviewers_count: nil, organization: nil, pull_request: nil, remove_team_request: nil, repository: nil, team: nil, team_review_request: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def algorithm; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def algorithm=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::PullRequestReviewRequest]) }
  def assigned_review_requests; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::PullRequestReviewRequest]).void }
  def assigned_review_requests=(value); end

  sig { void }
  def clear_algorithm; end

  sig { void }
  def clear_assigned_review_requests; end

  sig { void }
  def clear_count_existing_reviewers; end

  sig { void }
  def clear_include_child_team_members; end

  sig { void }
  def clear_max_delegated_reviewers_count; end

  sig { void }
  def clear_organization; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_remove_team_request; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_team; end

  sig { void }
  def clear_team_review_request; end

  sig { returns(T::Boolean) }
  def count_existing_reviewers; end

  sig { params(value: T::Boolean).void }
  def count_existing_reviewers=(value); end

  sig { returns(T::Boolean) }
  def include_child_team_members; end

  sig { params(value: T::Boolean).void }
  def include_child_team_members=(value); end

  sig { returns(Integer) }
  def max_delegated_reviewers_count; end

  sig { params(value: Integer).void }
  def max_delegated_reviewers_count=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)) }
  def organization; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Organization)).void }
  def organization=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T::Boolean) }
  def remove_team_request; end

  sig { params(value: T::Boolean).void }
  def remove_team_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Team)) }
  def team; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Team)).void }
  def team=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::PullRequestReviewRequest)) }
  def team_review_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::PullRequestReviewRequest)).void }
  def team_review_request=(value); end
end

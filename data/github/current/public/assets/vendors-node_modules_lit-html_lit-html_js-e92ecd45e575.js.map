{"version":3,"file":"vendors-node_modules_lit-html_lit-html_js-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/lit-html/lib/directive.js","node_modules/lit-html/lib/dom.js","node_modules/lit-html/lib/part.js","node_modules/lit-html/lib/parts.js","node_modules/lit-html/lib/template-instance.js","node_modules/lit-html/lib/template-result.js","node_modules/lit-html/lib/template.js","node_modules/lit-html/lib/default-template-processor.js","node_modules/lit-html/lib/template-factory.js","node_modules/lit-html/lib/render.js","node_modules/lit-html/lit-html.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map"],"names":["directives","WeakMap","directive","args","d","f","set","isDirective","o","has","isCEPolyfill","window","undefined","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","constructor","element","name","strings","dirty","parts","i","length","_createPart","AttributePart","_getValue","l","text","part","v","String","t","commit","setAttribute","committer","setValue","NodePart","options","__pendingValue","appendInto","startNode","appendChild","endNode","insertAfterNode","ref","appendIntoPart","__insert","insertAfterPart","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","node","parentNode","valueAsString","previousSibling","nodeType","data","document","createTextNode","template","templateFactory","update","values","instance","processor","fragment","_clone","itemPart","itemParts","partIndex","item","push","BooleanAttributePart","removeAttribute","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","handleEvent","e","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","TemplateInstance","__parts","content","cloneNode","importNode","stack","walker","createTreeWalker","nodeIndex","nextNode","index","nodeName","currentNode","pop","type","handleTextExpression","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","getHTML","html","isCommentBinding","s","commentOpen","lastIndexOf","indexOf","attributeMatch","exec","substr","getTemplateElement","createElement","innerHTML","marker","Math","random","slice","nodeMarker","markerRegex","boundAttributeSuffix","Template","result","nodesToRemove","lastPartIndex","hasAttributes","attributes","count","endsWith","lastAttributeNameRegex","attributeLookupName","toLowerCase","attributeValue","getAttribute","statics","split","tagName","parent","lastIndex","insert","createMarker","match","str","suffix","isTemplatePartActive","createComment","DefaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","key","join","render","firstChild","Object","assign"],"sourceRoot":""}
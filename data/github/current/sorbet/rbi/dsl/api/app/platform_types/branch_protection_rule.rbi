# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Api::App::PlatformTypes::BranchProtectionRule`.
# Please instead update this file by running `bin/tapioca dsl Api::App::PlatformTypes::BranchProtectionRule`.

class Api::App::PlatformTypes::BranchProtectionRule < GraphQL::Client::Schema::ObjectClass
  sig { returns(T.nilable(String)) }
  def __typename; end

  sig { returns(T::Boolean) }
  def allows_deletions; end

  sig { returns(T::Boolean) }
  def allows_deletions?; end

  sig { returns(T::Boolean) }
  def allows_force_pushes; end

  sig { returns(T::Boolean) }
  def allows_force_pushes?; end

  sig { returns(T::Boolean) }
  def blocks_creations; end

  sig { returns(T::Boolean) }
  def blocks_creations?; end

  sig { returns(Api::App::PlatformTypes::BranchProtectionRuleConflictConnection) }
  def branch_protection_rule_conflicts; end

  sig { returns(T::Boolean) }
  def branch_protection_rule_conflicts?; end

  sig { returns(Api::App::PlatformTypes::BypassForcePushAllowanceConnection) }
  def bypass_force_push_allowances; end

  sig { returns(T::Boolean) }
  def bypass_force_push_allowances?; end

  sig { returns(Api::App::PlatformTypes::BypassPullRequestAllowanceConnection) }
  def bypass_pull_request_allowances; end

  sig { returns(T::Boolean) }
  def bypass_pull_request_allowances?; end

  sig { returns(T.nilable(GraphQL::Client::Schema::InterfaceType)) }
  def creator; end

  sig { returns(T::Boolean) }
  def creator?; end

  sig { returns(T.nilable(Integer)) }
  def database_id; end

  sig { returns(T::Boolean) }
  def database_id?; end

  sig { returns(T::Boolean) }
  def dismisses_stale_reviews; end

  sig { returns(T::Boolean) }
  def dismisses_stale_reviews?; end

  sig { returns(T.any(String, Integer)) }
  def id; end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T::Boolean) }
  def ignore_approvals_from_contributors; end

  sig { returns(T::Boolean) }
  def ignore_approvals_from_contributors?; end

  sig { returns(T::Boolean) }
  def is_admin_enforced; end

  sig { returns(T::Boolean) }
  def is_admin_enforced?; end

  sig { returns(T::Boolean) }
  def lock_allows_fetch_and_merge; end

  sig { returns(T::Boolean) }
  def lock_allows_fetch_and_merge?; end

  sig { returns(T::Boolean) }
  def lock_branch; end

  sig { returns(T::Boolean) }
  def lock_branch?; end

  sig { returns(Api::App::PlatformTypes::RefConnection) }
  def matching_refs; end

  sig { returns(T::Boolean) }
  def matching_refs?; end

  sig { returns(T.nilable(Integer)) }
  def merge_queue_check_response_timeout; end

  sig { returns(T::Boolean) }
  def merge_queue_check_response_timeout?; end

  sig { returns(T.nilable(Integer)) }
  def merge_queue_check_run_retries; end

  sig { returns(T::Boolean) }
  def merge_queue_check_run_retries?; end

  sig { returns(T.nilable(Integer)) }
  def merge_queue_max_entries_to_build; end

  sig { returns(T::Boolean) }
  def merge_queue_max_entries_to_build?; end

  sig { returns(T.nilable(Integer)) }
  def merge_queue_max_entries_to_merge; end

  sig { returns(T::Boolean) }
  def merge_queue_max_entries_to_merge?; end

  sig { returns(T.nilable(Integer)) }
  def merge_queue_max_group_size; end

  sig { returns(T::Boolean) }
  def merge_queue_max_group_size?; end

  sig { returns(T.nilable(String)) }
  def merge_queue_merge_method; end

  sig { returns(T::Boolean) }
  def merge_queue_merge_method?; end

  sig { returns(T.nilable(String)) }
  def merge_queue_merging_strategy; end

  sig { returns(T::Boolean) }
  def merge_queue_merging_strategy?; end

  sig { returns(T.nilable(Integer)) }
  def merge_queue_min_entries_to_merge; end

  sig { returns(T::Boolean) }
  def merge_queue_min_entries_to_merge?; end

  sig { returns(T.nilable(Integer)) }
  def merge_queue_min_entries_to_merge_wait_time; end

  sig { returns(T::Boolean) }
  def merge_queue_min_entries_to_merge_wait_time?; end

  sig { returns(String) }
  def pattern; end

  sig { returns(T::Boolean) }
  def pattern?; end

  sig { returns(Api::App::PlatformTypes::PushAllowanceConnection) }
  def push_allowances; end

  sig { returns(T::Boolean) }
  def push_allowances?; end

  sig { returns(T.nilable(Api::App::PlatformTypes::Repository)) }
  def repository; end

  sig { returns(T::Boolean) }
  def repository?; end

  sig { returns(T::Boolean) }
  def require_last_push_approval; end

  sig { returns(T::Boolean) }
  def require_last_push_approval?; end

  sig { returns(T.nilable(Integer)) }
  def required_approving_review_count; end

  sig { returns(T::Boolean) }
  def required_approving_review_count?; end

  sig { returns(T.nilable(T::Array[String])) }
  def required_deployment_environments; end

  sig { returns(T::Boolean) }
  def required_deployment_environments?; end

  sig { returns(T.nilable(T::Array[String])) }
  def required_status_check_contexts; end

  sig { returns(T::Boolean) }
  def required_status_check_contexts?; end

  sig { returns(T.nilable(T::Array[Api::App::PlatformTypes::RequiredStatusCheckDescription])) }
  def required_status_checks; end

  sig { returns(T::Boolean) }
  def required_status_checks?; end

  sig { returns(T::Boolean) }
  def requires_approving_reviews; end

  sig { returns(T::Boolean) }
  def requires_approving_reviews?; end

  sig { returns(T::Boolean) }
  def requires_code_owner_reviews; end

  sig { returns(T::Boolean) }
  def requires_code_owner_reviews?; end

  sig { returns(T::Boolean) }
  def requires_commit_signatures; end

  sig { returns(T::Boolean) }
  def requires_commit_signatures?; end

  sig { returns(T::Boolean) }
  def requires_conversation_resolution; end

  sig { returns(T::Boolean) }
  def requires_conversation_resolution?; end

  sig { returns(T::Boolean) }
  def requires_deployments; end

  sig { returns(T::Boolean) }
  def requires_deployments?; end

  sig { returns(T::Boolean) }
  def requires_linear_history; end

  sig { returns(T::Boolean) }
  def requires_linear_history?; end

  sig { returns(T::Boolean) }
  def requires_merge_queue; end

  sig { returns(T::Boolean) }
  def requires_merge_queue?; end

  sig { returns(T::Boolean) }
  def requires_status_checks; end

  sig { returns(T::Boolean) }
  def requires_status_checks?; end

  sig { returns(T::Boolean) }
  def requires_strict_status_checks; end

  sig { returns(T::Boolean) }
  def requires_strict_status_checks?; end

  sig { returns(T::Boolean) }
  def restricts_pushes; end

  sig { returns(T::Boolean) }
  def restricts_pushes?; end

  sig { returns(T::Boolean) }
  def restricts_review_dismissals; end

  sig { returns(T::Boolean) }
  def restricts_review_dismissals?; end

  sig { returns(Api::App::PlatformTypes::ReviewDismissalAllowanceConnection) }
  def review_dismissal_allowances; end

  sig { returns(T::Boolean) }
  def review_dismissal_allowances?; end
end

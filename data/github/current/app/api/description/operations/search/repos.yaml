---
summary: Search repositories
description: |-
  Find repositories via various criteria. This method returns up to 100 results [per page](${externalDocsUrl}/rest/guides/using-pagination-in-the-rest-api).

  When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](${externalDocsUrl}/rest/search/search#text-match-metadata).

  For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:

  `q=tetris+language:assembly&sort=stars&order=desc`

  This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
tags:
  - search
operationId: search/repos
externalDocs:
  description: API method documentation
  url: '${externalDocsUrl}/rest/search/search#search-repositories'
parameters:
  - name: q
    description: The query contains one or more search keywords and qualifiers. Qualifiers
      allow you to limit your search to specific areas of ${apiName}. The REST API supports
      the same qualifiers as the web interface for ${apiName}. To learn more about the format of the query,
      see [Constructing a search query](${externalDocsUrl}/rest/search/search#constructing-a-search-query).
      See "[Searching for repositories](${externalDocsUrl}/articles/searching-for-repositories/)"
      for a detailed list of qualifiers.
    in: query
    required: true
    schema:
      type: string
  - name: sort
    description: 'Sorts the results of your query by number of `stars`, `forks`, or
      `help-wanted-issues` or how recently the items were `updated`. Default: [best
      match](${externalDocsUrl}/rest/search/search#ranking-search-results)'
    in: query
    required: false
    schema:
      type: string
      x-graceful-enum: true
      enum:
        - stars
        - forks
        - help-wanted-issues
        - updated
  - $ref: '../../components/parameters/order.yaml'
  - $ref: '../../components/parameters/per-page.yaml'
  - $ref: '../../components/parameters/page.yaml'
responses:
  '200':
    description: Response
    content:
      application/json:
        schema:
          type: object
          required:
            - total_count
            - incomplete_results
            - items
          properties:
            total_count:
              type: integer
            incomplete_results:
              type: boolean
            items:
              type: array
              items:
                $ref: '../../components/schemas/repo-search-result-item.yaml'
        examples:
          default:
            $ref: '../../components/examples/repo-search-result-item-paginated.yaml'
  '503':
    $ref: '../../components/responses/service_unavailable.yaml'
  '422':
    $ref: '../../components/responses/validation_failed.yaml'
  '304':
    $ref: '../../components/responses/not_modified.yaml'
x-github-releases:
  - ghec
  - ghes: '>= 2.18'
  - api.github.com
x-github:
  githubCloudOnly: false
  enabledForGitHubApps: true
  category: search
  subcategory: search
x-github-internal:
  owner: '@github/repos'
  path: '/search/repositories'
  http-method: get
  service-tier: 2
  published: true
x-githubEnterpriseOverlays:
  '<= 3.2':
    description: |-
      Find repositories via various criteria. This method returns up to 100 results [per page](${externalDocsUrl}/rest/guides/using-pagination-in-the-rest-api).

      When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](${externalDocsUrl}/rest/search/search#text-match-metadata).

      For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:

      `q=tetris+language:assembly&sort=stars&order=desc`

      This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.

      When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:

      `q=topic:ruby+topic:rails`
    x-github:
      previews:
        - $ref: '../../components/x-previews/mercy.yaml'
          required: false

{"version":3,"file":"copilot-actions-chat-button-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/copilot-actions-chat-button/CopilotActionsChatButton.module.css","ui/packages/copilot-actions-chat-button/CopilotActionsChatButton.tsx","ui/packages/copilot-actions-chat-button/copilot-actions-chat-button.ts","ui/packages/copilot-chat/utils/copilot-chat-events.ts","ui/packages/copilot-chat/utils/copilot-chat-types.ts","ui/packages/react-core/deferred-registry.ts","ui/packages/react-core/react-partial-anchor.ts","ui/packages/react-core/react-partial-registry.ts","ui/packages/react-core/ReactPartialElement.tsx","ui/packages/react-core/register-partial.ts","ui/packages/react-profiling-mode/src/index.ts","ui/packages/react-core/PartialRouter.tsx","ui/packages/react-core/PartialEntry.tsx","ui/packages/react-core/ReactBaseElement.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"copilotActionsChatButton\":\"CopilotActionsChatButton-module__copilotActionsChatButton--Hb7TL\",\"buttonBorder\":\"CopilotActionsChatButton-module__buttonBorder--OV8V2\",\"compact\":\"CopilotActionsChatButton-module__compact--HdJfv\",\"expanded\":\"CopilotActionsChatButton-module__expanded--XgruB\",\"expandButton\":\"CopilotActionsChatButton-module__expandButton--dgmIX\"};","import {Button, ButtonGroup, IconButton, ActionList, ActionMenu} from '@primer/react'\nimport {CopilotIcon, TriangleDownIcon} from '@primer/octicons-react'\nimport {publishOpenCopilotChat} from '@github-ui/copilot-chat/utils/copilot-chat-events'\nimport {CopilotChatIntents} from '@github-ui/copilot-chat/utils/copilot-chat-types'\nimport styles from './CopilotActionsChatButton.module.css'\nimport {clsx} from 'clsx'\n\nconst ACTIONS_CHAT_BUTTON_ID = 'copilot-actions-chat-button'\n\nexport function CopilotActionsChatButton() {\n  const handleSuggestFix = () =>\n    publishOpenCopilotChat({\n      intent: CopilotChatIntents.conversation,\n      content:\n        'Using the following logs, investigate related files and suggest code to fix the problem or problems identified.',\n      references: [],\n      id: ACTIONS_CHAT_BUTTON_ID,\n    })\n\n  const handleExplainError = () =>\n    publishOpenCopilotChat({\n      intent: CopilotChatIntents.conversation,\n      content: 'Explain the error in this job.',\n      references: [],\n      id: ACTIONS_CHAT_BUTTON_ID,\n    })\n\n  return (\n    <>\n      {/* Compact variant */}\n      <div className={clsx(styles.copilotActionsChatButton, styles.compact)}>\n        <ActionMenu>\n          <ActionMenu.Anchor>\n            <IconButton\n              icon={CopilotIcon}\n              aria-label=\"Ask Copilot about these logs\"\n              className={styles.buttonBorder}\n              style={{borderTop: 'none'}}\n            />\n          </ActionMenu.Anchor>\n          <ActionMenu.Overlay>\n            <ActionList>\n              <ActionList.Item onSelect={handleSuggestFix}>Suggest a fix</ActionList.Item>\n              <ActionList.Item onSelect={handleExplainError}>Explain error</ActionList.Item>\n            </ActionList>\n          </ActionMenu.Overlay>\n        </ActionMenu>\n      </div>\n\n      {/* Expanded variant */}\n      <div className={clsx(styles.copilotActionsChatButton, styles.expanded)}>\n        <ButtonGroup>\n          <Button\n            leadingVisual={CopilotIcon}\n            onClick={handleSuggestFix}\n            className={styles.buttonBorder}\n            style={{borderTop: 'none'}}\n          >\n            Suggest a fix\n          </Button>\n          <ActionMenu>\n            <ActionMenu.Anchor>\n              <IconButton\n                className={clsx(styles.expandButton, styles.buttonBorder)}\n                icon={TriangleDownIcon}\n                aria-label=\"Ask Copilot about these logs\"\n                style={{borderTop: 'none'}}\n              />\n            </ActionMenu.Anchor>\n\n            <ActionMenu.Overlay align=\"end\">\n              <ActionList>\n                <ActionList.Item onSelect={handleExplainError}>Explain error</ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        </ButtonGroup>\n      </div>\n    </>\n  )\n}\n\ntry{ CopilotActionsChatButton.displayName ||= 'CopilotActionsChatButton' } catch {}","import {registerReactPartial} from '@github-ui/react-core/register-partial'\nimport {CopilotActionsChatButton} from './CopilotActionsChatButton'\n\nregisterReactPartial('copilot-actions-chat-button', {\n  Component: CopilotActionsChatButton,\n})\n","import type {CopilotChatEventPayload, CopilotChatReference} from './copilot-chat-types'\n\nexport class OpenCopilotChatEvent extends Event {\n  declare payload: CopilotChatEventPayload\n  constructor(payload: CopilotChatEventPayload) {\n    super('open-copilot-chat', {\n      bubbles: false,\n      cancelable: true,\n    })\n\n    this.payload = payload\n  }\n}\n\nexport class SearchCopilotEvent extends Event {\n  declare content: string\n  declare repoNwo: string\n  constructor(content: string, repoNwo: string) {\n    super('search-copilot-chat', {\n      bubbles: false,\n      cancelable: true,\n    })\n\n    this.content = content\n    this.repoNwo = repoNwo\n  }\n}\n\nexport class AddCopilotChatReferenceEvent extends Event {\n  declare reference: CopilotChatReference\n  declare openPanel?: boolean\n  declare id?: string\n  constructor(reference: CopilotChatReference, openPanel: boolean = false, id?: string) {\n    super('add-copilot-chat-reference', {\n      bubbles: false,\n      cancelable: true,\n    })\n    this.reference = reference\n    this.openPanel = openPanel\n    this.id = id\n  }\n}\n\nexport class SymbolChangedEvent extends Event {\n  declare context: CopilotChatReference\n  constructor(context: CopilotChatReference) {\n    super('symbol-changed', {\n      bubbles: false,\n      cancelable: true,\n    })\n\n    this.context = context\n  }\n}\n\ndeclare global {\n  interface WindowEventMap {\n    'open-copilot-chat': OpenCopilotChatEvent\n    'add-copilot-chat-reference': AddCopilotChatReferenceEvent\n    'search-copilot-chat': SearchCopilotEvent\n    'symbol-changed': SymbolChangedEvent\n  }\n}\n\nexport function publishOpenCopilotChat(payload: CopilotChatEventPayload): void {\n  window.dispatchEvent(new OpenCopilotChatEvent(payload))\n}\n\nexport function publishAddCopilotChatReference(\n  payload: CopilotChatReference,\n  openPanel: boolean = false,\n  id?: string,\n): void {\n  window.dispatchEvent(new AddCopilotChatReferenceEvent(payload, openPanel, id))\n}\n\nexport function subscribeOpenCopilotChat(listener: (e: OpenCopilotChatEvent) => void): () => void {\n  window.addEventListener('open-copilot-chat', listener)\n\n  return () => {\n    window.removeEventListener('open-copilot-chat', listener)\n  }\n}\n\nexport function subscribeAddCopilotChatReference(listener: (e: AddCopilotChatReferenceEvent) => void): () => void {\n  window.addEventListener('add-copilot-chat-reference', listener)\n  return () => {\n    window.removeEventListener('add-copilot-chat-reference', listener)\n  }\n}\n\nexport function subscribeSearchCopilot(listener: (e: SearchCopilotEvent) => void): () => void {\n  window.addEventListener('search-copilot-chat', listener)\n  return () => {\n    window.removeEventListener('search-copilot-chat', listener)\n  }\n}\n\nexport function subscribeSymbolChanged(listener: (e: SymbolChangedEvent) => void): () => void {\n  window.addEventListener('symbol-changed', listener)\n\n  return () => {\n    window.removeEventListener('symbol-changed', listener)\n  }\n}\n","import type {SafeHTMLString} from '@github-ui/safe-html'\n\nexport type TopicItem = {\n  key: string\n  actionItem: JSX.Element\n}\n\nexport type CopilotChatRepo = {\n  id: number\n  name: string\n  ownerLogin: string\n  ownerType: 'User' | 'Organization'\n  readmePath?: string\n  description?: string\n  commitOID: string\n  ref: string\n  refInfo: {\n    name: string\n    type: 'branch' | 'tag'\n  }\n  visibility: string\n  languages?: Array<{name: string; percent: number}>\n}\n\nexport type CopilotChatPlan = Record<string, never>\n\nexport type CopilotChatOrg = {\n  id: string\n  login: string\n  avatarUrl: string\n}\n\nexport type CopilotChatThread = {\n  id: string\n  name: string\n  repoID?: number\n  currentReferences: CopilotChatReference[] | undefined\n  createdAt: string\n  updatedAt: string\n}\n\nexport type CopilotChatSuggestions = {\n  referenceType?: string\n  suggestions: GeneratedSuggestion[]\n}\n\nexport type GeneratedSuggestion = {\n  question: string\n  skill: string\n}\n\nexport type SkillExecution = {\n  slug: string\n  status: FunctionCalledStatus\n  arguments?: string\n  errorMessage?: string\n  references?: CopilotChatReference[]\n}\n\nexport type CopilotChatAgent = {\n  name: string\n  slug: string\n  avatarUrl: string\n  integrationUrl: string\n}\n\nexport type CopilotChatMessage = {\n  id: string\n  intent?: string\n  role: 'user' | 'assistant'\n  content?: string\n  createdAt: string\n  threadID: string\n  error?: ChatError\n  references: CopilotChatReference[] | null\n  skillExecutions?: SkillExecution[]\n  copilotAnnotations?: CopilotAnnotations\n  interrupted?: boolean\n  confirmations?: CopilotAgentConfirmation[] | null // confirmation from copilot/agent\n  clientConfirmations?: CopilotClientConfirmation[] | null // users response to agent confirmation\n  agentErrors?: CopilotAgentError[]\n}\n\nexport type CopilotAgentConfirmation = {\n  title: string\n  message: string\n  confirmation: object\n}\n\nexport type CopilotAgentError = {\n  type: string\n  code: string\n  message: string\n  identifier: string\n}\n\nexport type CopilotClientConfirmation = {\n  state: CopilotClientConfirmationState\n  confirmation: object\n}\n\nexport type CopilotClientConfirmationState = 'accepted' | 'dismissed'\n\nexport type CopilotAnnotations = {\n  CodeVulnerability?: CodeVulnerability[]\n}\n\ntype CodeVulnerability = {\n  startOffset: number\n  endOffset: number\n  details: CodeVulnerabilityDetails\n}\n\ntype CodeVulnerabilityDetails = {\n  type: string\n  uiType: string\n  description: string\n  uiDescription: string\n}\n\nexport type RepositoryReference = CopilotChatRepo & {\n  type: 'repository'\n}\n\nexport interface ReferenceHeaderInfo {\n  blobSize: string\n  displayName: string\n  isLfs: boolean\n  lineInfo: {truncatedLoc: number; truncatedSloc: number}\n  rawBlobUrl: string\n  viewable: boolean\n}\n\ntype APIResponseResource =\n  | {resourceType: 'Repository'; data: Omit<RepositoryAPIReference, 'type'>}\n  | {resourceType: 'Issue'; data: Omit<IssueAPIReference, 'type'>}\n  | {resourceType: 'Release'; data: Omit<ReleaseAPIReference, 'type'>}\n  | {resourceType: 'PullRequest'; data: Omit<PullRequestAPIReference, 'type'>}\n  | {resourceType: 'Commit'; data: Omit<CommitAPIReference, 'type'>}\n  | {resourceType: 'Topic'; data: Omit<TopicAPIReference, 'type'>}\n\nexport type APIResponseReference = APIResponseResource & {\n  type: 'api-response'\n  id: number\n  repo?: string\n}\n\nexport type FileReference = {\n  type: 'file' | 'file-v2'\n  url: string\n  path: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  languageName?: string\n  languageId?: number\n}\n\nexport type FileChangesReference = {\n  type: 'file-changes'\n  ref: string\n  path: string\n  url: string\n  commits: Array<{\n    oid: string\n    shortSha: string\n    message: string\n    createdAt: string\n    author: {\n      name: string\n      email: string\n      login: string\n    }\n    blameLines: Array<{\n      lineNo: number\n      text: string\n    }>\n  }>\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface FileReferenceDetails extends FileReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  range: LineRange\n  expandedRange: LineRange\n  headerInfo: ReferenceHeaderInfo\n}\n\nexport interface FileDiffReference {\n  type: 'file-diff'\n  id: string\n  url: string\n  base: SnippetReference | null // will be null if a file was 'added'\n  head: SnippetReference | null // will be null if a file was 'removed'\n  baseFile: FileReference | null // will be null if a file was 'added'\n  headFile: FileReference | null // will be null if a file was 'removed'\n  // user-selected, shown in location.hash, ex L1-R5\n  // won't be populated in the server props but should be present when calling CAPI\n  selectedRange?: {\n    start?: string\n    end?: string\n  }\n}\n\nexport interface FileDiffReferenceDetails extends FileDiffReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  expandedRange: LineRange\n}\n\nexport interface SnippetReference {\n  type: 'snippet'\n  url: string\n  path: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  range: LineRange\n  languageID?: number\n  languageName?: string\n  title?: string\n}\n\nexport interface SnippetReferenceDetails extends SnippetReference {\n  contents: string\n  highlightedContents: SafeHTMLString[]\n  repoIsOrgOwned: boolean\n  expandedRange: LineRange\n  headerInfo: ReferenceHeaderInfo\n}\n\nexport interface CommitReference {\n  type: 'commit'\n  oid: string\n  message: string\n  permalink: string\n  author: {\n    name: string\n    email: string\n    login: string\n  }\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface PullRequestReference {\n  type: 'pull-request'\n  title: string\n  url: string\n  commit?: string\n  authorLogin: string\n  repository: CopilotChatRepo\n}\n\nexport const TREE_COMPARISON_REFERENCE_TYPE = 'tree-comparison'\nexport interface TreeComparisonReference {\n  type: typeof TREE_COMPARISON_REFERENCE_TYPE\n  baseRepoId: number\n  headRepoId: number\n  baseRevision: string\n  headRevision: string\n  diffHunks: DiffHunk[]\n}\n\nexport interface DiffHunk {\n  type: 'diff-hunk'\n  changeReference: string\n  diff: string\n  fileName: string\n  headerContext: string\n}\n\nexport interface IssueReference {\n  type: 'issue'\n  id: number\n  number: number\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n  title?: string\n  body?: string\n  state?: string\n  authorLogin?: string\n  url?: string\n  assignees?: string[]\n  pullRequestUrl?: string\n}\n\nexport interface DiscussionReference {\n  type: 'discussion'\n  number: number\n  title: string\n  body: string\n  user: {\n    login: string\n  }\n  state: string\n  id: number\n  url: string\n  authorLogin: string\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n}\n\nexport interface ReleaseReference {\n  type: 'release'\n  name?: string\n  tagName?: string\n  url?: string\n  repository: {\n    id: number\n    name: string\n    owner: string\n  }\n  body?: string\n  isDraft: boolean\n  isPrerelease: boolean\n  authorLogin?: string\n  targetCommitish?: string\n}\n\nexport interface ReleaseAPIReference {\n  type: 'release.api'\n  name?: string\n  tag_name: string\n  html_url?: string\n}\n\nexport interface PullRequestAPIReference {\n  type: 'pull-request.api'\n  title?: string\n  html_url?: string\n  number: number\n  repo?: string\n}\n\nexport interface AlertReference {\n  type: 'alert.api'\n  number: number\n  repo?: string\n}\n\nexport interface IssueAPIReference {\n  type: 'issue.api'\n  title?: string\n  html_url: string\n  number: number\n  repo?: string\n  state: string\n}\n\nexport interface RepositoryAPIReference {\n  type: 'repository.api'\n  name: string\n  description?: string\n  html_url?: string\n}\n\nexport interface CommitAPIReference {\n  type: 'commit.api'\n  sha: string\n  commit: {\n    message?: string\n  }\n  html_url?: string\n}\n\nexport interface DiffAPIReference {\n  type: 'diff.api'\n}\n\nexport interface FileAPIReference {\n  type: 'file.api'\n}\n\nexport interface TopicAPIReference {\n  type: 'topic.api'\n  name: string\n  display_name?: string\n  short_description?: string\n}\n\nexport interface TextReference {\n  type: 'text'\n  text?: string\n}\n\nexport interface UnsupportedAPIReference {\n  type: 'unsupported'\n  text?: string\n}\n\nexport interface LineRange {\n  start: number\n  end: number\n}\n\nexport interface CodeNavSymbolReference {\n  type: 'symbol'\n  kind: 'codeNavSymbol'\n  name: string\n  languageID?: number\n  codeNavDefinitions?: CodeNavSymbol[]\n  codeNavReferences?: CodeReference[]\n  languageName?: string\n}\n\nexport interface CodeNavSymbolReferenceDetails extends CodeNavSymbolReference {\n  codeNavDefinitions?: CodeNavSymbolDetails[]\n  codeNavReferences?: CodeReferenceDetails[]\n}\n\nexport interface SuggestionSymbolReference {\n  type: 'symbol'\n  kind: 'suggestionSymbol'\n  name: string\n  languageID?: number\n  suggestionDefinitions?: SuggestionSymbol[]\n}\n\nexport interface SuggestionSymbolReferenceDetails extends SuggestionSymbolReference {\n  suggestionDefinitions?: SuggestionSymbolDetails[]\n}\n\nexport type DocsetReference = {\n  type: 'docset'\n  name: string\n  id: string\n  scopingQuery: string // TODO: is this the correct name for CAPI?\n  avatarUrl: string\n  // Docset references coming from previous threads in CAPI currently don't have their\n  // repos serialized.\n  repos?: string[]\n  description: string\n}\n\nexport type GitHubAgentReference = {\n  type: 'github.agent'\n  login: string\n  avatarURL: string\n}\n\nexport type WebSearchReference = {\n  type: 'web-search'\n  query: string\n  results: Array<{title: string; excerpt: string; url: string}>\n  status: string\n}\n\nexport type SupportDocumentReference = {\n  type: 'support-document'\n  query: string\n  results: Array<{title: string; content: string; url: string}>\n  status: string\n}\n\nexport type JobReference = {\n  type: 'job'\n  id: string\n  repoId: number\n  repoName: string\n  repoOwner: string\n}\n\nexport type PlanReference = {\n  type: 'plan'\n}\n\ntype CodeNavSymbol = {\n  ident: Range\n  extent: Range\n} & CodeSymbol\n\ntype SuggestionSymbol = {\n  identOffset?: ByteOffset\n  extentOffset?: ByteOffset\n} & CodeSymbol\n\ntype CodeSymbol = {\n  kind: string\n  fullyQualifiedName: string\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  path: string\n}\n\ntype CodeReference = {\n  ident: Range\n  repoID: number\n  repoOwner: string\n  repoName: string\n  ref: string\n  commitOID: string\n  path: string\n}\n\ntype SymbolDetails = {\n  repoIsOrgOwned: boolean\n  highlightedContents?: SafeHTMLString[]\n  range?: LineRange\n}\n\nexport type CodeNavSymbolDetails = CodeNavSymbol & SymbolDetails\nexport type SuggestionSymbolDetails = SuggestionSymbol & SymbolDetails\nexport type CodeReferenceDetails = CodeReference & SymbolDetails\n\ntype Range = {\n  start: Position\n  end: Position\n}\n\ntype Position = {\n  line: number\n  column: number\n}\n\ntype ByteOffset = {\n  start: number\n  end: number\n}\n\nexport type CopilotChatReference =\n  | FileReference\n  | FileChangesReference\n  | SnippetReference\n  | FileDiffReference\n  | RepositoryReference\n  | CodeNavSymbolReference\n  | SuggestionSymbolReference\n  | DocsetReference\n  | CommitReference\n  | PullRequestReference\n  | GitHubAgentReference\n  | WebSearchReference\n  | TreeComparisonReference\n  | IssueReference\n  | TextReference\n  | ReleaseReference\n  | DiscussionReference\n  | JobReference\n  | PlanReference\n  | ReleaseAPIReference\n  | PullRequestAPIReference\n  | AlertReference\n  | IssueAPIReference\n  | RepositoryAPIReference\n  | CommitAPIReference\n  | DiffAPIReference\n  | FileAPIReference\n  | TopicAPIReference\n  | APIResponseReference\n  | UnsupportedAPIReference\n\nexport type NumberedCopilotChatReference = CopilotChatReference & {n: number}\n\nexport type CopilotChatReferenceDetails = SnippetReferenceDetails\n\nexport type ReferenceDetails<TReference extends CopilotChatReference> = TReference extends SnippetReference\n  ? SnippetReferenceDetails\n  : TReference extends FileReference\n    ? FileReferenceDetails\n    : TReference extends CodeNavSymbolReference\n      ? CodeNavSymbolReferenceDetails\n      : TReference extends SuggestionSymbolReference\n        ? SuggestionSymbolReferenceDetails\n        : TReference extends FileDiffReference\n          ? FileDiffReferenceDetails\n          : unknown\n\ntype CopilotChatExplainEventPayload = {\n  intent: typeof CopilotChatIntents.explain\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatAskEventPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  references?: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatAskPrEventPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatExplainPrEventPayload = {\n  intent: typeof CopilotChatIntents.explainFileDiff\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatSuggestEventPayload = {\n  intent: typeof CopilotChatIntents.suggest\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\ntype CopilotChatReviewPrEventPayload = {\n  intent: typeof CopilotChatIntents.reviewPr\n  content: string\n  references: CopilotChatReference[]\n  completion: string\n  thread: CopilotChatThread\n  id?: string\n}\n\ntype CopilotChatStartConversationPayload = {\n  intent: typeof CopilotChatIntents.conversation\n  content: string\n  references: CopilotChatReference[]\n  id?: string\n}\n\nexport type CopilotChatEventPayload =\n  | CopilotChatExplainEventPayload\n  | CopilotChatAskEventPayload\n  | CopilotChatSuggestEventPayload\n  | CopilotChatAskPrEventPayload\n  | CopilotChatExplainPrEventPayload\n  | CopilotChatReviewPrEventPayload\n  | CopilotChatStartConversationPayload\n\nexport const CopilotChatIntents = {\n  explain: 'explain',\n  conversation: 'conversation',\n  suggest: 'suggest',\n  askDocs: 'ask-docs',\n  discussFileDiff: 'discuss-file-diff',\n  explainFileDiff: 'explain-file-diff',\n  reviewPr: 'review-pull-request',\n} as const\nexport type CopilotChatIntentsType = (typeof CopilotChatIntents)[keyof typeof CopilotChatIntents]\n\ninterface ChatErrorBase {\n  type: MessageStreamingErrorType | 'basic'\n  isError: boolean\n  message?: string\n  details?: unknown\n}\n\ninterface BasicChatError extends ChatErrorBase {\n  type: 'basic'\n  isError: true\n}\n\ninterface AgentError<TType extends MessageStreamingErrorType, TDetails> extends ChatErrorBase {\n  type: TType\n  isError: true\n  details: TDetails\n}\n\nexport type AgentUnauthorizedChatError = AgentError<'agentUnauthorized', NotAuthorizedForAgentErrorPayload>\nexport type AgentRequestChatError = AgentError<'agentRequest', AppAgentRequestErrorPayload>\nexport type AgentChatError = AgentUnauthorizedChatError | AgentRequestChatError\n\nexport type ChatError = BasicChatError | AgentChatError\n\nexport type BlackbirdSymbol = {\n  fully_qualified_name: string\n  kind: string\n  ident_start: number\n  ident_end: number\n  extent_start: number\n  extent_end: number\n}\n\nexport interface BlackbirdSuggestion {\n  kind: string\n  query: string\n  repository_nwo: string\n  language_id: number\n  path: string\n  repository_id: number\n  commit_sha: string\n  line_number: number\n  symbol: BlackbirdSymbol | null\n}\n\nexport type SuggestionsResponse = {\n  suggestions: BlackbirdSuggestion[]\n  queryErrors: string[]\n  failed: boolean\n}\n\nexport type KnowledgeBasesResponse = {\n  knowledgeBases: Docset[]\n  administratedCopilotEnterpriseOrganizations: CopilotChatOrg[] | null\n}\n\nexport interface Docset {\n  id: string\n  name: string\n  description: string\n  createdByID: number\n  ownerID: number\n  ownerLogin: string\n  ownerType: string\n  visibility: string\n  scopingQuery: string\n  repos: string[]\n  sourceRepos?: SourceRepo[]\n  visibleOutsideOrg: boolean\n  iconHtml?: SafeHTMLString\n  avatarUrl: string\n  adminableByUser: boolean\n  /**\n   * Orgs which own at least one repo in the docset but that the current user is not currently SSO'd into\n   */\n  protectedOrganizations: string[]\n}\n\nexport interface RepoData {\n  databaseId: number | null | undefined\n  name: string\n  nameWithOwner: string\n  isInOrganization: boolean\n  shortDescriptionHTML: string\n  paths?: string[]\n  owner: {\n    databaseId: number | null | undefined\n    avatarUrl: string\n    login: string\n  }\n}\n\nexport interface DocsetRepo extends RepoData {\n  paths: string[]\n}\n\nexport interface SourceRepo {\n  id: number\n  ownerID: number\n  paths: string[]\n}\n\nexport type MessageStreamingResponse =\n  | MessageStreamingResponseContent\n  | MessageStreamingResponseError\n  | MessageStreamingResponseComplete\n  | MessageStreamingResponseDebug\n  | MessageStreamingResponseFunctionCall\n  | MessageStreamingResponseConfirmation\n  | MessageStreamingResponseAgentError\n\nexport type MessageStreamingResponseContent = {\n  type: 'content'\n  body: string\n}\n\nexport type MessageStreamingResponseDebug = {\n  type: 'debug'\n  body: string\n}\n\nexport const MESSAGE_STREAMING_ERROR_TYPES = [\n  'exception',\n  'filtered',\n  'contentTooLarge',\n  'rateLimit',\n  'agentUnauthorized',\n  'agentRequest',\n  'networkError',\n  'multipleAgentsAttempt',\n] as const\n\ntype MessageStreamingErrorTypes = typeof MESSAGE_STREAMING_ERROR_TYPES\nexport type MessageStreamingErrorType = MessageStreamingErrorTypes[number]\n\nexport type MessageStreamingResponseError = {\n  type: 'error'\n  errorType: MessageStreamingErrorType\n  description: string\n}\n\nexport type MessageStreamingResponseComplete = {\n  type: 'complete'\n  id: string\n  turnID: string\n  createdAt: string\n  intent: string\n  references: CopilotChatReference[] | null\n  copilotAnnotations?: CopilotAnnotations\n}\n\nexport type MessageStreamingResponseFunctionCall = {\n  arguments: string\n  type: 'functionCall'\n  name: string\n  status: FunctionCalledStatus\n  errorMessage: string\n  references: CopilotChatReference[]\n}\n\nexport type MessageStreamingResponseConfirmation = {\n  type: 'confirmation'\n  title: string\n  message: string\n  confirmation: object\n}\n\nexport type MessageStreamingResponseAgentError = {\n  type: 'agentError'\n  agentErrorType: string\n  code: string\n  message: string\n  identifier: string\n}\n\nexport type FunctionArguments =\n  | BingSearchArguments\n  | FilePathSearchArguments\n  | SymbolSearchArguments\n  | CodeSearchArguments\n  | CreateIssueArguments\n  | GetIssueArguments\n  | GetPullRequestCommitsArguments\n  | GetCommitArguments\n  | GetAlertArguments\n  | GetReleaseArguments\n  | GetRepoArguments\n  | JobLogsArguments\n  | GetDiffArguments\n  | GetDiffByRangeArguments\n  | KnowledgeBaseSearchArguments\n  | GetFileArguments\n  | GetFileChangesArguments\n  | GetDiscussionArguments\n  | GetPullRequestArguments\n  | PlanArguments\n  | GitHubAPIArguments\n  | SupportSearchArguments\n\nexport type BingSearchArguments = {kind: 'bing-search'; query: string; freshness?: string}\nexport type SupportSearchArguments = {kind: 'support-search'; rawUserQuery: string}\nexport type CodeSearchArguments = {kind: 'codesearch'; query: string; scopingQuery: string}\nexport type KnowledgeBaseSearchArguments = {kind: 'kb-search'; query: string; kbID: string}\nexport type FilePathSearchArguments = {kind: 'pathsearch'; filename: string; scopingQuery: string}\nexport type GetFileArguments = {kind: 'getfile'; repo: string; path: string; ref?: string}\nexport type GetFileChangesArguments = {kind: 'getfilechanges'; repo: string; path: string; ref: string; max?: number}\nexport type SymbolSearchArguments = {kind: 'show-symbol-definition'; symbolName: string; scopingQuery: string}\nexport type CreateIssueArguments = {\n  kind: 'githubissuecreate'\n  repo: string\n  assignees: string[]\n  labels: string[]\n  title: string\n  body: string\n}\nexport type GetIssueArguments = {kind: 'getissue'; issueNumber: number; repo: string}\nexport type GetAlertArguments = {kind: 'getalert'; url: string}\nexport type GetPullRequestCommitsArguments = {kind: 'getprcommits'; pullRequestNumber: number; repo: string}\nexport type GetCommitArguments = {kind: 'getcommit'; commitish: number; repo: string}\nexport type GetReleaseArguments = {kind: 'getrelease'; repo: string; tagName?: string}\nexport type GetRepoArguments = {kind: 'getrepo'; repo: string}\nexport type JobLogsArguments = {\n  kind: 'get-actions-job-logs'\n  repo: string\n  jobId?: number\n  pullRequestNumber?: number\n  runId?: number\n  workflowPath?: string\n}\nexport type GetDiffArguments = {\n  kind: 'getdiff'\n  baseRepoId: number\n  headRepoId: number\n  baseRevision: string\n  headRevision: string\n}\nexport type GetDiffByRangeArguments = {kind: 'get-diff-by-range'; repo: string; range: string}\nexport type GetDiscussionArguments = {kind: 'getdiscussion'; repo: string; discussionNumber: number; owner: string}\nexport type GetPullRequestArguments = {kind: 'getpullrequest'; pullRequestNumber: number; repo: string}\nexport type PlanArguments = {kind: 'planskill'; user_query: string}\nexport type GitHubAPIArguments = {\n  kind: 'get-github-data'\n  endpoint: string\n  repo: string\n  endpointDescription?: string\n  task?: string\n}\n\nexport const SUPPORTED_FUNCTIONS = [\n  'bing-search',\n  'codesearch',\n  'kb-search',\n  'pathsearch',\n  'show-symbol-definition',\n  'getissue',\n  'getprcommits',\n  'getcommit',\n  'getrelease',\n  'getrepo',\n  'getdiff',\n  'get-diff-by-range',\n  'getfile',\n  'getfilechanges',\n  'getdiscussion',\n  'get-actions-job-logs',\n  'getpullrequest',\n  'getalert',\n  'planskill',\n  'get-github-data',\n  'support-search',\n]\n\nexport type FunctionCalledStatus = 'completed' | 'started' | 'error' | 'unsupported'\n\nexport type NotAuthorizedForAgentErrorPayload = {\n  authorize_url: string\n  client_id: string\n  name: string\n  avatar_url: string\n  slug: string\n  description: string\n}\n\nexport type AppAgentRequestErrorPayload = {\n  type: string\n  code: string\n  identifier: string\n  message: string\n}\n\nexport type CopilotChatMode = 'immersive' | 'assistive'\n\nexport type SuccessfulAPIResult<T> = {\n  status: number\n  ok: true\n  payload: T\n}\n\nexport type FailedAPIResult = {\n  status: number\n  ok: false\n  error: string\n}\n\nexport type APIResult<T> = SuccessfulAPIResult<T> | FailedAPIResult\n\ntype SuccessfulAPIStreamingResult = {\n  status: number\n  ok: true\n  response: Response\n}\n\nexport type APIStreamingResult = SuccessfulAPIStreamingResult | FailedAPIResult\n\nexport interface CopilotChatPayload {\n  agentsPath: string\n  apiURL: string\n  currentUserLogin: string\n  customInstructions?: string\n  renderKnowledgeBases?: boolean\n  optedInToUserFeedback: boolean\n  renderAttachKnowledgeBaseHerePopover?: boolean\n  renderKnowledgeBaseAttachedToChatPopover?: boolean\n  reviewLab: boolean\n}\n","export class DeferredRegistry<T> {\n  private registrationEntries: Record<\n    string,\n    {\n      promise: Promise<T>\n      resolve?: (r: T) => void\n    }\n  > = {}\n\n  public register(name: string, registration: T) {\n    const entry = this.registrationEntries[name]\n    if (entry) {\n      entry.resolve?.(registration)\n    } else {\n      this.registrationEntries[name] = {\n        promise: Promise.resolve(registration),\n      }\n    }\n  }\n\n  public getRegistration(name: string): Promise<T> {\n    this.registrationEntries[name] ||= new Deferred()\n    return this.registrationEntries[name].promise\n  }\n}\n\nclass Deferred<T> {\n  declare promise\n  declare resolve: (r: T) => void\n\n  constructor() {\n    this.promise = new Promise<T>(resolve => {\n      this.resolve = resolve\n    })\n  }\n}\n","import type {ReactPartialAnchorElement} from '@github-ui/react-partial-anchor-element'\nimport {useCallback, useEffect, useRef, useState} from 'react'\n\ninterface ReactPartialAnchor {\n  /**\n   * DO NOT USE THIS PROPERTY DIRECTLY. It is meant to be used with useExternalAnchor and useOnAnchorClick\n   */\n  __wrapperElement: ReactPartialAnchorElement\n}\n\nexport interface ReactPartialAnchorProps {\n  reactPartialAnchor?: ReactPartialAnchor\n}\n\nexport function usePartialAnchorProps(\n  anchorElement: ReactPartialAnchorElement | undefined | null,\n): ReactPartialAnchorProps {\n  useEffect(() => {\n    const anchor = anchorElement?.anchor\n\n    if (!anchor) {\n      return\n    }\n\n    if ('disabled' in anchor) {\n      anchor.disabled = false\n    }\n    anchor.classList.remove('cursor-wait')\n  }, [anchorElement])\n\n  if (!anchorElement) {\n    return {}\n  }\n\n  return {\n    reactPartialAnchor: {\n      __wrapperElement: anchorElement,\n    },\n  }\n}\n\nexport function useExternalAnchor(reactPartialAnchor: ReactPartialAnchor) {\n  const ref = useRef(reactPartialAnchor.__wrapperElement.anchor || null)\n  const [open, setOpen] = useState(false)\n\n  const onClick = useCallback(() => {\n    // toggle the open state when clicked\n    setOpen(!open)\n  }, [open, setOpen])\n\n  useEffect(() => {\n    if (!ref.current) return\n\n    ref.current.setAttribute('aria-expanded', open.toString())\n    ref.current.setAttribute('aria-haspopup', 'true')\n  }, [ref, open])\n\n  useOnAnchorClick(reactPartialAnchor, onClick)\n\n  return {\n    ref,\n    open,\n    setOpen,\n  }\n}\n\nexport function useOnAnchorClick(reactPartialAnchor: ReactPartialAnchor, onClick: (event: MouseEvent) => void) {\n  const ref = useRef(reactPartialAnchor.__wrapperElement.anchor)\n\n  useEffect(() => {\n    const element = ref.current\n    if (!element) {\n      return\n    }\n\n    element.addEventListener('click', onClick)\n    return () => element.removeEventListener('click', onClick)\n  }, [ref, onClick])\n}\n\nexport type PropsWithPartialAnchor<T> = T & Required<ReactPartialAnchorProps>\n","import {DeferredRegistry} from './deferred-registry'\n\nexport interface PartialRegistration {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Component: React.ComponentType<any>\n}\n\nexport const partialRegistry = new DeferredRegistry<PartialRegistration>()\n\nexport function getReactPartial(appName: string) {\n  return partialRegistry.getRegistration(appName)\n}\n","import {controller} from '@github/catalyst'\nimport {getReactPartial} from './react-partial-registry'\nimport type {EmbeddedPartialData} from './embedded-data-types'\nimport {ReactBaseElement} from './ReactBaseElement'\nimport {PartialEntry} from './PartialEntry'\nimport type {ReactPartialAnchorElement} from '@github-ui/react-partial-anchor-element'\n\n// What is this silliness? Is it react or a web component?!\n// It's a web component we use to bootstrap react partials within the monolith.\n@controller\nclass ReactPartialElement extends ReactBaseElement<EmbeddedPartialData> {\n  nameAttribute = 'partial-name'\n\n  async getReactNode(embeddedData: EmbeddedPartialData) {\n    const {Component} = await getReactPartial(this.name)\n\n    // Some React Partials will be wrapped in a react-partial-anchor, which is used to conditionally render the Partial\n    const anchorElement = this.closest<ReactPartialAnchorElement>('react-partial-anchor')\n\n    return (\n      <PartialEntry\n        partialName={this.name}\n        embeddedData={embeddedData}\n        Component={Component}\n        wasServerRendered={this.hasSSRContent}\n        ssrError={this.ssrError}\n        anchorElement={anchorElement}\n      />\n    )\n  }\n}\n","import {partialRegistry, type PartialRegistration} from './react-partial-registry'\n// Import the web component to get it registered on the window\nimport './ReactPartialElement'\n\n// NOTE: if the signature of this method changes, also update the react-partial-name ESLint rule\n// /workspaces/github/ui/packages/eslint-plugin-github-monorepo/rules/react-partial-name.js\nexport function registerReactPartial(name: string, registration: PartialRegistration) {\n  partialRegistry.register(name, registration)\n}\n","import safeStorage from '@github-ui/safe-storage'\n\nconst {getItem, setItem, removeItem} = safeStorage('localStorage')\nconst REACT_PROFILING_ENABLED = 'REACT_PROFILING_ENABLED'\n\ninterface ReactProfilingModeMethods {\n  enable: () => void\n  disable: () => void\n  isEnabled: () => boolean\n}\n\nconst ReactProfilingMode: ReactProfilingModeMethods = {\n  enable: () => setItem(REACT_PROFILING_ENABLED, 'true'),\n  disable: () => removeItem(REACT_PROFILING_ENABLED),\n  isEnabled: () => !!getItem(REACT_PROFILING_ENABLED),\n}\n\nexport default ReactProfilingMode\n","import {useState} from 'react'\nimport type {BrowserHistory, MemoryHistory} from '@remix-run/router'\nimport {Router} from 'react-router-dom'\n// eslint-disable-next-line no-restricted-imports\nimport {useHydratedEffect} from '@github-ui/use-hydrated-effect'\n\ntype Props = {\n  children: React.ReactNode\n  history: BrowserHistory | MemoryHistory\n}\n\nexport function PartialRouter({children, history}: Props) {\n  const [state, setState] = useState({\n    location: history.location,\n  })\n\n  useHydratedEffect(() => history.listen(setState), [history])\n\n  return (\n    <Router location={state.location} navigator={history}>\n      {children}\n    </Router>\n  )\n}\n\ntry{ PartialRouter.displayName ||= 'PartialRouter' } catch {}","// Think of this as the entry point into the framework\nimport React from 'react'\nimport type {EmbeddedPartialData} from './embedded-data-types'\nimport {BaseProviders} from './BaseProviders'\nimport type {BrowserHistory} from '@remix-run/router'\nimport {createMemoryHistory} from '@remix-run/router'\nimport {AppContextProvider} from './AppContextProvider'\nimport {PartialRouter} from './PartialRouter'\nimport {CommonElements} from './CommonElements'\nimport {createBrowserHistory} from './create-browser-history'\nimport type {ReactPartialAnchorElement} from '@github-ui/react-partial-anchor-element'\nimport {usePartialAnchorProps} from './react-partial-anchor'\n\ninterface Props {\n  partialName: string\n  embeddedData: EmbeddedPartialData\n  Component: React.ComponentType\n  wasServerRendered: boolean\n  ssrError?: HTMLScriptElement\n  anchorElement?: ReactPartialAnchorElement | null\n}\n\nexport function PartialEntry({\n  partialName,\n  embeddedData,\n  Component,\n  wasServerRendered,\n  ssrError,\n  anchorElement,\n}: Props) {\n  // Create a ref to track the browser history:\n  const historyRef = React.useRef<BrowserHistory>()\n  const window = globalThis.window as Window | undefined\n\n  // For linking to work, we can just pass a dummy pathname here. We may consider plumbing the actual path in\n  if (!historyRef.current) {\n    historyRef.current = !window\n      ? createMemoryHistory({initialEntries: [{pathname: '/'}]})\n      : createBrowserHistory({window})\n  }\n  const history = historyRef.current\n  const partialAnchorProps = usePartialAnchorProps(anchorElement)\n\n  // Wrap the partial in an AppContextProvider and static Router so that react-core links\n  // will be functional.\n  return (\n    <BaseProviders appName={partialName} wasServerRendered={wasServerRendered}>\n      <AppContextProvider history={history} routes={[]}>\n        <PartialRouter history={history}>\n          <Component {...embeddedData.props} {...(partialAnchorProps as object)} />\n          <CommonElements ssrError={ssrError} />\n        </PartialRouter>\n      </AppContextProvider>\n    </BaseProviders>\n  )\n}\n\ntry{ PartialEntry.displayName ||= 'PartialEntry' } catch {}","import {target} from '@github/catalyst'\nimport {createRoot, hydrateRoot} from 'react-dom/client'\nimport type {createRoot as createRootType, hydrateRoot as hydrateRootType, Root} from 'react-dom/client'\nimport React from 'react'\nimport ReactProfilingMode from '@github-ui/react-profiling-mode'\nimport {EXPECTED_ERRORS} from './expected-errors'\nimport {sendStats} from '@github-ui/stats'\n\ntype ReactDOM = {\n  createRoot: typeof createRootType\n  hydrateRoot: typeof hydrateRootType\n}\n\nconst REACT_INVARIANT_ERROR_REGEX = /Minified React error #(?<invariant>\\d+)/\n\nexport abstract class ReactBaseElement<T> extends HTMLElement {\n  @target embeddedData: HTMLScriptElement | undefined\n  @target ssrError: HTMLScriptElement | undefined\n  @target reactRoot: HTMLElement | undefined\n  private root: Root | undefined\n\n  abstract nameAttribute: string\n  abstract getReactNode(embeddedData: T): Promise<React.ReactNode>\n\n  protected get name() {\n    return this.getAttribute(this.nameAttribute) as string\n  }\n\n  private get embeddedDataText() {\n    const text = this.embeddedData?.textContent\n\n    if (!text) {\n      throw new Error(`No embedded data provided for react element ${this.name}`)\n    }\n\n    return text\n  }\n\n  get hasSSRContent() {\n    return this.getAttribute('data-ssr') === 'true'\n  }\n\n  connectedCallback() {\n    this.renderReact()\n  }\n\n  disconnectedCallback() {\n    this.root?.unmount()\n    this.root = undefined\n  }\n\n  private async renderReact() {\n    if (!this.reactRoot) throw new Error('No react root provided')\n    let reactDom: ReactDOM = {\n      createRoot,\n      hydrateRoot,\n    }\n\n    // Override the react-dom import if we're in profiling mode\n    if (ReactProfilingMode.isEnabled()) {\n      reactDom = await this.getReactDomWithProfiling()\n    }\n\n    const embeddedData = JSON.parse(this.embeddedDataText) as T\n    const ssrErrorText = this.ssrError?.textContent\n    const node = await this.getReactNode(embeddedData)\n    const baseNode = <React.StrictMode>{node}</React.StrictMode>\n\n    if (ssrErrorText) {\n      this.logSSRError(ssrErrorText)\n    }\n\n    if (this.hasSSRContent) {\n      /**\n       * Styled-components automatically looks for style tags to hydrate on first page load, but will not detect them\n       * if they are added after the initial page load. This causes a hydration error because React isn't expecting\n       * a style tag within the app. To work around this, we need to manually move the style tags to the head before\n       * hydrating the app.\n       *\n       * During hydration, styled-components will create a new style tag which matches the one we moved to the head.\n       * This means that after hydration, we can safely remove the style tag we manually moved to the head.\n       */\n      const styles = this.querySelector('style[data-styled=\"true\"]')\n      if (styles) document.head.appendChild(styles)\n\n      // Hydrate the react app\n      // onRecoverableError is disabled until we have a react version with this fix in:\n      // https://github.com/facebook/react/pull/25692\n      this.root = reactDom.hydrateRoot(this.reactRoot, baseNode, {\n        onRecoverableError: error => {\n          if (!(error instanceof Error)) return\n\n          const match = REACT_INVARIANT_ERROR_REGEX.exec(error.message)\n          const invariant = String(match?.groups?.invariant)\n\n          sendStats({\n            incrementKey: 'REACT_HYDRATION_ERROR',\n            incrementTags: {\n              appName: this.name,\n              invariant,\n            },\n          })\n        },\n      })\n\n      // Remove the manually moved style tag after hydration\n      if (styles) {\n        // Wait until things are idle to remove the style tag. If we do it immediately, we can cause a flash of unstyled content.\n        requestIdleCallback(() => {\n          // styles could have already been removed by Turbo if a navigation happens quickly. Only remove it from the DOM if it's still there.\n          styles.parentElement?.removeChild(styles)\n        })\n      }\n    } else {\n      this.root = reactDom.createRoot(this.reactRoot)\n      this.root.render(baseNode)\n    }\n\n    this.classList.add('loaded')\n  }\n\n  private getReactDomWithProfiling() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return import('react-dom/profiling') as any as Promise<ReactDOM>\n  }\n\n  private logSSRError(ssrErrorText: string) {\n    if (EXPECTED_ERRORS[ssrErrorText]) {\n      // eslint-disable-next-line no-console\n      return console.error('SSR failed with an expected error:', EXPECTED_ERRORS[ssrErrorText])\n    }\n\n    try {\n      const error = JSON.parse(ssrErrorText) as PlatformJavascriptError\n      const stacktrace = parseFailbotStacktrace(error)\n      // eslint-disable-next-line no-console\n      console.error('Error During Alloy SSR:', `${error.type}: ${error.value}\\n`, error, stacktrace)\n    } catch {\n      /**\n       * In the event we couldn't log the error, we should not break the application\n       */\n      // eslint-disable-next-line no-console\n      console.error('Error During Alloy SSR:', ssrErrorText, 'unable to parse as json')\n    }\n  }\n}\n\nfunction parseFailbotStacktrace(error: PlatformJavascriptError) {\n  if (!error.stacktrace) return ''\n  let prefix = '\\n '\n  const stack = error.stacktrace.map((frame: PlatformStackframe) => {\n    const {function: func, filename, lineno, colno} = frame\n    const line = `${prefix} at ${func} (${filename}:${lineno}:${colno})`\n    prefix = ' '\n    return line\n  })\n  return stack.join('\\n')\n}\n\ntry{ REACT_INVARIANT_ERROR_REGEX.displayName ||= 'REACT_INVARIANT_ERROR_REGEX' } catch {}"],"names":["ACTIONS_CHAT_BUTTON_ID","CopilotActionsChatButton","handleSuggestFix","publishOpenCopilotChat","intent","CopilotChatIntents","conversation","content","references","id","handleExplainError","div","className","clsx","styles","copilotActionsChatButton","compact","ActionMenu","Anchor","IconButton","icon","CopilotIcon","aria-label","buttonBorder","style","borderTop","Overlay","ActionList","Item","onSelect","expanded","ButtonGroup","Button","leadingVisual","onClick","expandButton","TriangleDownIcon","align","displayName","registerReactPartial","Component","OpenCopilotChatEvent","Event","constructor","payload","bubbles","cancelable","AddCopilotChatReferenceEvent","reference","openPanel","SymbolChangedEvent","context","window","dispatchEvent","publishAddCopilotChatReference","subscribeOpenCopilotChat","listener","addEventListener","removeEventListener","subscribeAddCopilotChatReference","subscribeSearchCopilot","subscribeSymbolChanged","TREE_COMPARISON_REFERENCE_TYPE","explain","suggest","askDocs","discussFileDiff","explainFileDiff","reviewPr","MESSAGE_STREAMING_ERROR_TYPES","SUPPORTED_FUNCTIONS","DeferredRegistry","register","name","registration","entry","registrationEntries","resolve","promise","Promise","getRegistration","Deferred","usePartialAnchorProps","anchorElement","useEffect","anchor","disabled","classList","remove","reactPartialAnchor","__wrapperElement","useExternalAnchor","ref","useRef","open","setOpen","useState","useCallback","current","setAttribute","toString","useOnAnchorClick","element","partialRegistry","ReactPartialElement","ReactBaseElement","getReactNode","embeddedData","appName","closest","PartialEntry","partialName","wasServerRendered","hasSSRContent","ssrError","nameAttribute","controller","getItem","setItem","removeItem","safeStorage","REACT_PROFILING_ENABLED","enable","disable","isEnabled","PartialRouter","children","history","state","setState","location","useHydratedEffect","listen","Router","navigator","historyRef","React","globalThis","createBrowserHistory","createMemoryHistory","initialEntries","pathname","partialAnchorProps","BaseProviders","AppContextProvider","routes","props","CommonElements","REACT_INVARIANT_ERROR_REGEX","HTMLElement","getAttribute","embeddedDataText","text","textContent","connectedCallback","renderReact","disconnectedCallback","root","unmount","undefined","reactRoot","reactDom","createRoot","hydrateRoot","ReactProfilingMode","getReactDomWithProfiling","JSON","parse","ssrErrorText","node","baseNode","logSSRError","querySelector","document","head","appendChild","onRecoverableError","error","Error","match","exec","message","invariant","String","groups","sendStats","incrementKey","incrementTags","requestIdleCallback","parentElement","removeChild","render","add","EXPECTED_ERRORS","console","stacktrace","parseFailbotStacktrace","prefix","stack","map","function","func","filename","lineno","colno","frame","line","join","type","value","target"],"sourceRoot":""}
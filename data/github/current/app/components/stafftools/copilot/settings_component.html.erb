
  <%= render(Primer::Beta::BorderBox.new(padding: :condensed, mb: 4)) do |component| %>
    <% component.with_header do |h| %>
      <% h.with_title(tag: :h2) do %>
        Copilot Settings
      <% end %>
    <% end %>
    <% if has_cfi_access %>
      <% component.with_row do %>
        <%= render Stafftools::Copilot::DetailComponent.new(
          "Telemetry",
          @configurable.telemetry_enabled? ? "Enabled" : "Disabled",
          "Whether this user has allowed GitHub to use their code snippets for product improvements (Default Enabled)",
          label_scheme: @configurable.telemetry_enabled? ? :success : :danger
        ) %>
      <% end %>
    <% end %>
    <% component.with_row do %>
      <% text = "GitHub.com Copilot Features" %>
      <% unless dotcom_chat_enabled? %>
        <% text += policy_blocked_by(:dotcom_chat) %>
      <% end %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Copilot in github.com",
        dotcom_chat_enabled? ? "Enabled" : "Disabled",
        text.html_safe, # rubocop:disable Rails/OutputSafety
        label_scheme: dotcom_chat_enabled? ? :success : :danger
      ) %>
    <% end %>
    <% component.with_row do %>
      <% text = "Whether this user has access to Copilot in the CLI" %>
      <% unless cli_enabled? %>
        <% text += policy_blocked_by(:cli) %>
      <% end %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Copilot in the CLI",
        cli_enabled? ? "Enabled" : "Disabled",
        text.html_safe, # rubocop:disable Rails/OutputSafety
        label_scheme: cli_enabled? ? :success : :danger
      ) %>
    <% end %>
    <% component.with_row do %>
      <% text = "Whether this user has access to Copilot Chat in IDEs" %>
      <% unless chat_enabled? %>
        <% text += policy_blocked_by(:chat_enabled) %>
      <% end %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Copilot Chat in the IDE",
        chat_enabled? ? "Enabled" : "Disabled",
        text.html_safe, # rubocop:disable Rails/OutputSafety
        label_scheme: chat_enabled? ? :success : :danger
      ) %>
    <% end %>
    <% component.with_row do %>
      <% text = "Whether this user has access to Copilot Chat in GitHub Mobile" %>
      <% unless mobile_chat_enabled? %>
        <% text += policy_blocked_by(:mobile_chat) %>
      <% end %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Copilot Chat in GitHub Mobile",
        mobile_chat_enabled? ? "Enabled" : "Disabled",
        text.html_safe, # rubocop:disable Rails/OutputSafety
        label_scheme: mobile_chat_enabled? ? :success : :danger
      ) %>
    <% end %>
    <% component.with_row do %>
      <% text = "Whether this user has allowed or blocked suggestions matching public code" %>
      <% unless @configurable.allow_public_code_suggestions? %>
        <% text += policy_blocked_by(:public_code_suggestions) %>
      <% end %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Public Code Suggestions",
        !@configurable.public_code_suggestions_configured? ? "Unconfigured" : allow_public_code_suggestions? ? "Allow" : "Block",
        text.html_safe, # rubocop:disable Rails/OutputSafety
        label_scheme: allow_public_code_suggestions? ? :success : :danger
      ) %>
    <% end %>
    <% component.with_row do %>
      <% text = "Whether Copilot can access Bing for this user" %>
      <% unless @configurable.bing_github_chat_enabled? %>
        <% text += policy_blocked_by(:bing_github_chat) %>
      <% end %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Copilot access to Bing",
        bing_github_chat_enabled? ? "Allow" : "Block",
        text.html_safe, # rubocop:disable Rails/OutputSafety
        label_scheme: bing_github_chat_enabled? ? :success : :danger
      ) %>
    <% end %>
    <% component.with_row do %>
      <% text = "Whether this user has access to Copilot Extensions" %>
      <% unless copilot_extensions_enabled? %>
        <% text += policy_blocked_by(:copilot_extensions) %>
      <% end %>
      <%= render Stafftools::Copilot::DetailComponent.new(
        "Copilot Extensions",
        copilot_extensions_enabled? ? "Enabled" : "Disabled",
        text.html_safe, # rubocop:disable Rails/OutputSafety
        label_scheme: copilot_extensions_enabled? ? :success : :danger
      ) %>
    <% end %>
  <% end %>

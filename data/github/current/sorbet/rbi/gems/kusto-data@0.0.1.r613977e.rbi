# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kusto-data` gem.
# Please instead update this file by running `bin/tapioca gem kusto-data`.

# source://kusto-data//lib/kusto.rb#4
module Kusto; end

# source://kusto-data//lib/kusto/auth.rb#5
module Kusto::Auth; end

# source://kusto-data//lib/kusto/auth/app_auth.rb#11
class Kusto::Auth::AppAuth < ::Kusto::Auth::AuthBase
  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/auth/app_auth.rb#13
  sig { params(tenant_id: ::String, client_id: ::String, client_secret: ::String).void }
  def initialize(tenant_id, client_id, client_secret); end

  # source://kusto-data//lib/kusto/auth/app_auth.rb#22
  sig { override.params(cluster_url: ::String).returns(T::Hash[::String, T.untyped]) }
  def get_access_token(cluster_url); end
end

# @abstract It cannot be directly instantiated. Subclasses must implement the `abstract` methods below.
#
# source://kusto-data//lib/kusto/auth.rb#6
class Kusto::Auth::AuthBase
  abstract!

  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/auth.rb#13
  sig { params(tenant_id: ::String, client_id: ::String).void }
  def initialize(tenant_id, client_id); end

  # source://kusto-data//lib/kusto/auth.rb#26
  sig(:final) { params(cluster_url: ::String, force_refresh: T::Boolean).returns(::String) }
  def access_token(cluster_url, force_refresh: T.unsafe(nil)); end

  protected

  # source://kusto-data//lib/kusto/auth.rb#45
  sig { returns(::String) }
  def client_id; end

  # @abstract
  #
  # source://kusto-data//lib/kusto/auth.rb#60
  sig { abstract.params(cluster_url: ::String).returns(T::Hash[::String, T.untyped]) }
  def get_access_token(cluster_url); end

  # source://kusto-data//lib/kusto/auth.rb#50
  sig { returns(::String) }
  def oauth_base_url; end

  # source://kusto-data//lib/kusto/auth.rb#40
  sig { returns(::String) }
  def tenant_id; end

  # source://kusto-data//lib/kusto/auth.rb#55
  sig { returns(::URI::Generic) }
  def token_uri; end
end

# source://kusto-data//lib/kusto/auth/device_code_auth.rb#9
class Kusto::Auth::DeviceCodeAuth < ::Kusto::Auth::AuthBase
  # source://kusto-data//lib/kusto/auth/device_code_auth.rb#11
  sig { params(tenant_id: ::String, client_id: ::String, use_persistent_storage: T::Boolean).void }
  def initialize(tenant_id, client_id, use_persistent_storage: T.unsafe(nil)); end

  # source://kusto-data//lib/kusto/auth/device_code_auth.rb#19
  sig { override.params(cluster_url: ::String).returns(T::Hash[::String, T.untyped]) }
  def get_access_token(cluster_url); end

  private

  # source://kusto-data//lib/kusto/auth/device_code_auth.rb#42
  sig { params(device_code_hash: T::Hash[::String, T.untyped]).returns(T::Hash[::String, T.untyped]) }
  def get_token_hash_from_device_code(device_code_hash); end

  # source://kusto-data//lib/kusto/auth/device_code_auth.rb#82
  def load_token_hash_from_file; end

  # source://kusto-data//lib/kusto/auth/device_code_auth.rb#76
  def save_token_hash_to_file(token_hash); end

  # @return [Boolean]
  #
  # source://kusto-data//lib/kusto/auth/device_code_auth.rb#86
  def token_valid?(token_hash); end
end

# source://kusto-data//lib/kusto/auth/device_code_auth.rb#74
Kusto::Auth::DeviceCodeAuth::TOKEN_SAVE_PATH = T.let(T.unsafe(nil), String)

# source://kusto-data//lib/kusto.rb#25
class Kusto::BadRequestError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#29
class Kusto::ConflictError < ::Kusto::Error; end

# source://kusto-data//lib/kusto/data/column.rb#5
module Kusto::Data; end

# source://kusto-data//lib/kusto/data/client.rb#9
class Kusto::Data::Client
  include ::Kusto::Data::KQL

  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/data/client.rb#14
  sig { params(cluster_url: ::String, auth: T.nilable(::Kusto::Auth::AuthBase)).void }
  def initialize(cluster_url, auth); end

  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/data/client.rb#23
  sig do
    params(
      database: ::String,
      query: ::String,
      parameters: T::Hash[::String, T.untyped]
    ).returns(::Kusto::Data::Dataset)
  end
  def query(database, query, parameters = T.unsafe(nil)); end

  private

  # source://kusto-data//lib/kusto/data/client.rb#34
  sig do
    params(
      database: ::String,
      query: ::String,
      parameters: T::Hash[::String, T.untyped]
    ).returns(T::Array[T::Hash[::String, T.untyped]])
  end
  def query_raw(database, query, parameters = T.unsafe(nil)); end

  # source://kusto-data//lib/kusto/data/client.rb#68
  sig do
    params(
      headers: T::Hash[::String, ::String],
      body: ::String,
      force_token_refresh: T::Boolean
    ).returns(::Net::HTTPResponse)
  end
  def send_query_request(headers, body, force_token_refresh: T.unsafe(nil)); end
end

# source://kusto-data//lib/kusto/data/builder.rb#10
class Kusto::Data::ClientBuilder
  # source://kusto-data//lib/kusto/data/builder.rb#19
  sig { returns(T.nilable(::Kusto::Auth::AuthBase)) }
  def auth; end

  # @raise [RuntimeError]
  #
  # source://kusto-data//lib/kusto/data/builder.rb#63
  sig { returns(::Kusto::Data::Client) }
  def build; end

  # source://kusto-data//lib/kusto/data/builder.rb#16
  sig { returns(::String) }
  def cluster_url; end

  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/data/builder.rb#42
  sig do
    params(
      tenant_id: ::String,
      client_id: ::String,
      client_secret: ::String
    ).returns(::Kusto::Data::ClientBuilder)
  end
  def use_app_auth(tenant_id, client_id, client_secret); end

  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/data/builder.rb#22
  sig { params(cluster_name: ::String).returns(::Kusto::Data::ClientBuilder) }
  def use_azure_cluster(cluster_name); end

  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/data/builder.rb#53
  sig do
    params(
      tenant_id: ::String,
      client_id: ::String,
      use_persistent_storage: T::Boolean
    ).returns(::Kusto::Data::ClientBuilder)
  end
  def use_device_code_auth(tenant_id, client_id, use_persistent_storage: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://kusto-data//lib/kusto/data/builder.rb#32
  sig { params(host: ::String, port: ::Integer, secure: T::Boolean).returns(::Kusto::Data::ClientBuilder) }
  def use_local_cluster(host: T.unsafe(nil), port: T.unsafe(nil), secure: T.unsafe(nil)); end
end

# source://kusto-data//lib/kusto/data/builder.rb#13
Kusto::Data::ClientBuilder::AZURE_KUSTO_DOMAIN = T.let(T.unsafe(nil), String)

# source://kusto-data//lib/kusto/data/column.rb#6
class Kusto::Data::Column
  # source://kusto-data//lib/kusto/data/column.rb#16
  sig { params(column_hash: T::Hash[::String, T.untyped]).void }
  def initialize(column_hash); end

  # source://kusto-data//lib/kusto/data/column.rb#10
  sig { returns(::String) }
  def name; end

  # source://kusto-data//lib/kusto/data/column.rb#13
  sig { returns(::String) }
  def type; end
end

# source://kusto-data//lib/kusto/data/dataset.rb#8
class Kusto::Data::Dataset
  # source://kusto-data//lib/kusto/data/dataset.rb#15
  sig { params(frame_hashes: T::Array[T::Hash[::String, T.untyped]]).void }
  def initialize(frame_hashes); end

  # source://kusto-data//lib/kusto/data/dataset.rb#27
  sig { returns(::Kusto::Data::Table) }
  def primary_result_table; end

  # source://kusto-data//lib/kusto/data/dataset.rb#22
  sig { returns(T::Array[::Kusto::Data::Table]) }
  def primary_result_tables; end

  # source://kusto-data//lib/kusto/data/dataset.rb#12
  sig { returns(T::Array[::Kusto::Data::Table]) }
  def tables; end
end

# source://kusto-data//lib/kusto/data/kql.rb#6
module Kusto::Data::KQL
  include ::Kernel

  # source://kusto-data//lib/kusto/data/kql.rb#22
  sig { params(parameters: T::Hash[::String, T.untyped]).returns(::String) }
  def declaration_for(parameters); end

  # source://kusto-data//lib/kusto/data/kql.rb#64
  sig { params(parameters: T::Hash[::String, T.untyped]).returns(T::Hash[::String, ::String]) }
  def parameters_for(parameters); end

  # source://kusto-data//lib/kusto/data/kql.rb#11
  sig { params(value: ::String).returns(T::Boolean) }
  def requires_quoting?(value); end

  # source://kusto-data//lib/kusto/data/kql.rb#84
  sig { params(value: ::String).returns(T::Boolean) }
  def timespan?(value); end

  # source://kusto-data//lib/kusto/data/kql.rb#32
  sig { params(value: T.untyped).returns(::String) }
  def type_for(value); end
end

# source://kusto-data//lib/kusto/data/table.rb#8
class Kusto::Data::Table
  # source://kusto-data//lib/kusto/data/table.rb#30
  sig { params(index: ::Integer, table_hash: T::Hash[::String, T.untyped]).void }
  def initialize(index, table_hash); end

  # source://kusto-data//lib/kusto/data/table.rb#24
  sig { returns(T::Array[::Kusto::Data::Column]) }
  def columns; end

  # source://kusto-data//lib/kusto/data/table.rb#12
  sig { returns(::Integer) }
  def id; end

  # source://kusto-data//lib/kusto/data/table.rb#15
  sig { returns(::Integer) }
  def index; end

  # source://kusto-data//lib/kusto/data/table.rb#21
  sig { returns(::String) }
  def kind; end

  # source://kusto-data//lib/kusto/data/table.rb#18
  sig { returns(::String) }
  def name; end

  # source://kusto-data//lib/kusto/data/table.rb#42
  sig { returns(T::Boolean) }
  def primary_result?; end

  # source://kusto-data//lib/kusto/data/table.rb#27
  sig { returns(T::Array[T::Array[T.untyped]]) }
  def rows; end
end

# source://kusto-data//lib/kusto.rb#5
class Kusto::Error < ::StandardError
  # source://kusto-data//lib/kusto.rb#15
  sig do
    params(
      message: ::String,
      details: T.nilable(T::Hash[::String, T.untyped]),
      http_response: T.nilable(::Net::HTTPResponse)
    ).void
  end
  def initialize(message, details = T.unsafe(nil), http_response = T.unsafe(nil)); end

  # source://kusto-data//lib/kusto.rb#9
  sig { returns(T::Hash[::String, T.untyped]) }
  def details; end

  # source://kusto-data//lib/kusto.rb#12
  sig { returns(T.nilable(::Net::HTTPResponse)) }
  def http_response; end
end

# source://kusto-data//lib/kusto.rb#36
module Kusto::Errors
  class << self
    # source://kusto-data//lib/kusto.rb#52
    sig { params(message: ::String, http_response: ::Net::HTTPResponse).returns(::Kusto::Error) }
    def create_error(message, http_response); end
  end
end

# source://kusto-data//lib/kusto.rb#39
Kusto::Errors::ERROR_MAP = T.let(T.unsafe(nil), Hash)

# source://kusto-data//lib/kusto.rb#27
class Kusto::ForbiddenError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#33
class Kusto::GatewayTimeoutError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#31
class Kusto::InternalServerError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#28
class Kusto::NotFoundError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#32
class Kusto::ServiceUnavailableError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#30
class Kusto::TooManyRequestsError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#26
class Kusto::UnauthorizedError < ::Kusto::Error; end

# source://kusto-data//lib/kusto.rb#34
class Kusto::UnknownError < ::Kusto::Error; end

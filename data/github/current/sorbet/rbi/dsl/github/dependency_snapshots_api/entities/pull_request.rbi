# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Github::DependencySnapshotsApi::Entities::PullRequest`.
# Please instead update this file by running `bin/tapioca dsl Github::DependencySnapshotsApi::Entities::PullRequest`.

class Github::DependencySnapshotsApi::Entities::PullRequest
  sig do
    params(
      author_id: T.nilable(Integer),
      base_branch: T.nilable(String),
      base_sha: T.nilable(String),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      draft: T.nilable(T::Boolean),
      head_branch: T.nilable(String),
      head_sha: T.nilable(String),
      id: T.nilable(Integer),
      merged_at: T.nilable(Google::Protobuf::Timestamp),
      pull_request_state: T.nilable(T.any(Symbol, Integer)),
      total_commits: T.nilable(Integer),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(author_id: nil, base_branch: nil, base_sha: nil, created_at: nil, draft: nil, head_branch: nil, head_sha: nil, id: nil, merged_at: nil, pull_request_state: nil, total_commits: nil, updated_at: nil); end

  sig { returns(Integer) }
  def author_id; end

  sig { params(value: Integer).void }
  def author_id=(value); end

  sig { returns(String) }
  def base_branch; end

  sig { params(value: String).void }
  def base_branch=(value); end

  sig { returns(String) }
  def base_sha; end

  sig { params(value: String).void }
  def base_sha=(value); end

  sig { void }
  def clear_author_id; end

  sig { void }
  def clear_base_branch; end

  sig { void }
  def clear_base_sha; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_draft; end

  sig { void }
  def clear_head_branch; end

  sig { void }
  def clear_head_sha; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_merged_at; end

  sig { void }
  def clear_pull_request_state; end

  sig { void }
  def clear_total_commits; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def draft; end

  sig { params(value: T::Boolean).void }
  def draft=(value); end

  sig { returns(String) }
  def head_branch; end

  sig { params(value: String).void }
  def head_branch=(value); end

  sig { returns(String) }
  def head_sha; end

  sig { params(value: String).void }
  def head_sha=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def merged_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def merged_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def pull_request_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def pull_request_state=(value); end

  sig { returns(Integer) }
  def total_commits; end

  sig { params(value: Integer).void }
  def total_commits=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

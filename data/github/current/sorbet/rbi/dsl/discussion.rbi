# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Discussion`.
# Please instead update this file by running `bin/tapioca dsl Discussion`.

class Discussion
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedSpammableMethods
  extend GeneratedSpammableClassMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def discussion_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def error_reasons; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def state_reasons; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def states; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Discussion).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Discussion]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Discussion)) }
    def fifth; end

    sig { returns(::Discussion) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Discussion)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Discussion) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(T.nilable(T::Enumerator[::Discussion]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Discussion]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Discussion]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Discussion)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Discussion) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Discussion) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Discussion) }
    def first!; end

    sig { returns(T.nilable(::Discussion)) }
    def forty_two; end

    sig { returns(::Discussion) }
    def forty_two!; end

    sig { returns(T.nilable(::Discussion)) }
    def fourth; end

    sig { returns(::Discussion) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Discussion) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Discussion).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Discussion).void)
      ).returns(::Discussion)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Discussion).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Discussion).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Discussion)) }
    def second; end

    sig { returns(::Discussion) }
    def second!; end

    sig { returns(T.nilable(::Discussion)) }
    def second_to_last; end

    sig { returns(::Discussion) }
    def second_to_last!; end

    sig { returns(::Discussion) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Discussion) }
    def take!; end

    sig { returns(T.nilable(::Discussion)) }
    def third; end

    sig { returns(::Discussion) }
    def third!; end

    sig { returns(T.nilable(::Discussion)) }
    def third_to_last; end

    sig { returns(::Discussion) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def close_failure!; end

    sig { returns(T::Boolean) }
    def close_failure?; end

    sig { void }
    def closed!; end

    sig { returns(T::Boolean) }
    def closed?; end

    sig { void }
    def comment_copy_failure!; end

    sig { returns(T::Boolean) }
    def comment_copy_failure?; end

    sig { void }
    def converting!; end

    sig { returns(T::Boolean) }
    def converting?; end

    sig { void }
    def default!; end

    sig { returns(T::Boolean) }
    def default?; end

    sig { void }
    def error!; end

    sig { returns(T::Boolean) }
    def error?; end

    sig { void }
    def no_error!; end

    sig { returns(T::Boolean) }
    def no_error?; end

    sig { void }
    def open!; end

    sig { returns(T::Boolean) }
    def open?; end

    sig { void }
    def reset_conversion_failure!; end

    sig { returns(T::Boolean) }
    def reset_conversion_failure?; end

    sig { void }
    def state_reason_duplicate!; end

    sig { returns(T::Boolean) }
    def state_reason_duplicate?; end

    sig { void }
    def state_reason_outdated!; end

    sig { returns(T::Boolean) }
    def state_reason_outdated?; end

    sig { void }
    def state_reason_reopened!; end

    sig { returns(T::Boolean) }
    def state_reason_reopened?; end

    sig { void }
    def state_reason_resolved!; end

    sig { returns(T::Boolean) }
    def state_reason_resolved?; end

    sig { void }
    def transferring!; end

    sig { returns(T::Boolean) }
    def transferring?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :abuse_reports`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def abuse_reports=(value); end

    sig { returns(T::Array[T.untyped]) }
    def applied_discussion_label_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def applied_discussion_label_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :applied_discussion_labels`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AppliedDiscussionLabel::PrivateCollectionProxy) }
    def applied_discussion_labels; end

    sig { params(value: T::Enumerable[::AppliedDiscussionLabel]).void }
    def applied_discussion_labels=(value); end

    sig { returns(T::Array[T.untyped]) }
    def attachment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def attachment_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :attachments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Attachment::PrivateCollectionProxy) }
    def attachments; end

    sig { params(value: T::Enumerable[::Attachment]).void }
    def attachments=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionCategory) }
    def build_category(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionCategoryPin) }
    def build_category_pin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionComment) }
    def build_chosen_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def build_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionTransfer) }
    def build_last_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionEdit) }
    def build_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def build_performed_via_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionPoll) }
    def build_poll(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def build_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionSpotlight) }
    def build_spotlight(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionPost) }
    def build_team_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { returns(T.nilable(::DiscussionCategory)) }
    def category; end

    sig { params(value: T.nilable(::DiscussionCategory)).void }
    def category=(value); end

    sig { returns(T.nilable(::DiscussionCategoryPin)) }
    def category_pin; end

    sig { params(value: T.nilable(::DiscussionCategoryPin)).void }
    def category_pin=(value); end

    sig { returns(T.nilable(::DiscussionComment)) }
    def chosen_comment; end

    sig { params(value: T.nilable(::DiscussionComment)).void }
    def chosen_comment=(value); end

    sig { returns(T::Array[T.untyped]) }
    def comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def comment_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def commenter_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def commenter_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :commenters, through: :comments`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def commenters; end

    sig { params(value: T::Enumerable[::User]).void }
    def commenters=(value); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :comments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionComment::PrivateCollectionProxy) }
    def comments; end

    sig { params(value: T::Enumerable[::DiscussionComment]).void }
    def comments=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionCategory) }
    def create_category(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionCategory) }
    def create_category!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionCategoryPin) }
    def create_category_pin(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionCategoryPin) }
    def create_category_pin!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionComment) }
    def create_chosen_comment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionComment) }
    def create_chosen_comment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_issue!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionTransfer) }
    def create_last_transfer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionTransfer) }
    def create_last_transfer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionEdit) }
    def create_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionEdit) }
    def create_latest_user_content_edit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_performed_via_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Integration) }
    def create_performed_via_integration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionPoll) }
    def create_poll(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionPoll) }
    def create_poll!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def create_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def create_release!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionSpotlight) }
    def create_spotlight(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionSpotlight) }
    def create_spotlight!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionPost) }
    def create_team_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::DiscussionPost) }
    def create_team_discussion!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def downvote_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def downvote_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :downvotes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionVote::PrivateCollectionProxy) }
    def downvotes; end

    sig { params(value: T::Enumerable[::DiscussionVote]).void }
    def downvotes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :events`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionEvent::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::DiscussionEvent]).void }
    def events=(value); end

    sig { returns(T.nilable(::Issue)) }
    def issue; end

    sig { params(value: T.nilable(::Issue)).void }
    def issue=(value); end

    sig { returns(T::Array[T.untyped]) }
    def label_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def label_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :labels, through: :applied_discussion_labels`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Label::PrivateCollectionProxy) }
    def labels; end

    sig { params(value: T::Enumerable[::Label]).void }
    def labels=(value); end

    sig { returns(T.nilable(::DiscussionTransfer)) }
    def last_transfer; end

    sig { params(value: T.nilable(::DiscussionTransfer)).void }
    def last_transfer=(value); end

    sig { returns(T.nilable(::DiscussionEdit)) }
    def latest_user_content_edit; end

    sig { params(value: T.nilable(::DiscussionEdit)).void }
    def latest_user_content_edit=(value); end

    sig { returns(T.nilable(::Integration)) }
    def performed_via_integration; end

    sig { params(value: T.nilable(::Integration)).void }
    def performed_via_integration=(value); end

    sig { returns(T.nilable(::DiscussionPoll)) }
    def poll; end

    sig { params(value: T.nilable(::DiscussionPoll)).void }
    def poll=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def poll_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def reaction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reaction_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :reactions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionReaction::PrivateCollectionProxy) }
    def reactions; end

    sig { params(value: T::Enumerable[::DiscussionReaction]).void }
    def reactions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reference_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :references`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CrossReference::PrivateCollectionProxy) }
    def references; end

    sig { params(value: T::Enumerable[::CrossReference]).void }
    def references=(value); end

    sig { returns(T.nilable(::Release)) }
    def release; end

    sig { params(value: T.nilable(::Release)).void }
    def release=(value); end

    sig { returns(T.nilable(::DiscussionCategory)) }
    def reload_category; end

    sig { returns(T.nilable(::DiscussionCategoryPin)) }
    def reload_category_pin; end

    sig { returns(T.nilable(::DiscussionComment)) }
    def reload_chosen_comment; end

    sig { returns(T.nilable(::Issue)) }
    def reload_issue; end

    sig { returns(T.nilable(::DiscussionTransfer)) }
    def reload_last_transfer; end

    sig { returns(T.nilable(::DiscussionEdit)) }
    def reload_latest_user_content_edit; end

    sig { returns(T.nilable(::Integration)) }
    def reload_performed_via_integration; end

    sig { returns(T.nilable(::DiscussionPoll)) }
    def reload_poll; end

    sig { returns(T.nilable(::Release)) }
    def reload_release; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::DiscussionSpotlight)) }
    def reload_spotlight; end

    sig { returns(T.nilable(::DiscussionPost)) }
    def reload_team_discussion; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T.nilable(::DiscussionSpotlight)) }
    def spotlight; end

    sig { params(value: T.nilable(::DiscussionSpotlight)).void }
    def spotlight=(value); end

    sig { returns(T.nilable(::DiscussionPost)) }
    def team_discussion; end

    sig { params(value: T.nilable(::DiscussionPost)).void }
    def team_discussion=(value); end

    sig { returns(T::Array[T.untyped]) }
    def upvote_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def upvote_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :upvotes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionVote::PrivateCollectionProxy) }
    def upvotes; end

    sig { params(value: T::Enumerable[::DiscussionVote]).void }
    def upvotes=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_content_edit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_content_edit_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :user_content_edits`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionEdit::PrivateCollectionProxy) }
    def user_content_edits; end

    sig { params(value: T::Enumerable[::DiscussionEdit]).void }
    def user_content_edits=(value); end

    sig { returns(T::Array[T.untyped]) }
    def vote_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vote_ids=(ids); end

    # This method is created by ActiveRecord on the `Discussion` class because it declared `has_many :votes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DiscussionVote::PrivateCollectionProxy) }
    def votes; end

    sig { params(value: T::Enumerable[::DiscussionVote]).void }
    def votes=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def answerables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def answered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def authored_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def authored_by_and_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def close_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def comment_copy_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def commented_on_and_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def commented_on_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def converted_from_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def converted_from_issue_numbered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def converted_from_team_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def converting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def default(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_categories(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_by_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_created_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def highest_score_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def least_commented_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def least_recently_updated_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lowest_score_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_commented_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_upvotes_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_close_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_comment_copy_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_converting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_default(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_no_error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_reset_conversion_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_transferring(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def oldest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def recently_bumped_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reset_conversion_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def suggestions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def transferring(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unanswered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def updated_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_number(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_abuse_reports; end

    sig { returns(Promise[T.untyped]) }
    def async_applied_discussion_labels; end

    sig { returns(Promise[T.untyped]) }
    def async_attachments; end

    sig { returns(Promise[T.untyped]) }
    def async_category; end

    sig { returns(Promise[T.untyped]) }
    def async_category_pin; end

    sig { returns(Promise[T.untyped]) }
    def async_chosen_comment; end

    sig { returns(Promise[T.untyped]) }
    def async_commenters; end

    sig { returns(Promise[T.untyped]) }
    def async_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_downvotes; end

    sig { returns(Promise[T.untyped]) }
    def async_events; end

    sig { returns(Promise[T.untyped]) }
    def async_issue; end

    sig { returns(Promise[T.untyped]) }
    def async_labels; end

    sig { returns(Promise[T.untyped]) }
    def async_last_transfer; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_user_content_edit; end

    sig { returns(Promise[T.untyped]) }
    def async_performed_via_integration; end

    sig { returns(Promise[T.untyped]) }
    def async_poll; end

    sig { returns(Promise[T.untyped]) }
    def async_reactions; end

    sig { returns(Promise[T.untyped]) }
    def async_references; end

    sig { returns(Promise[T.untyped]) }
    def async_release; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_spotlight; end

    sig { returns(Promise[T.untyped]) }
    def async_team_discussion; end

    sig { returns(Promise[T.untyped]) }
    def async_upvotes; end

    sig { returns(Promise[T.untyped]) }
    def async_user; end

    sig { returns(Promise[T.untyped]) }
    def async_user_content_edits; end

    sig { returns(Promise[T.untyped]) }
    def async_votes; end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def allow_reactions; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def allow_reactions=(value); end

    sig { returns(T::Boolean) }
    def allow_reactions?; end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_reactions_before_last_save; end

    sig { returns(T.untyped) }
    def allow_reactions_before_type_cast; end

    sig { returns(T::Boolean) }
    def allow_reactions_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def allow_reactions_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def allow_reactions_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def allow_reactions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_reactions_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def allow_reactions_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def allow_reactions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_reactions_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_reactions_was; end

    sig { void }
    def allow_reactions_will_change!; end

    sig { returns(T.untyped) }
    def body; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def body=(value); end

    sig { returns(T::Boolean) }
    def body?; end

    sig { returns(T.untyped) }
    def body_before_last_save; end

    sig { returns(T.untyped) }
    def body_before_type_cast; end

    sig { returns(T::Boolean) }
    def body_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def body_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def body_previously_was; end

    sig { returns(T.untyped) }
    def body_was; end

    sig { void }
    def body_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def bumped_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def bumped_at=(value); end

    sig { returns(T::Boolean) }
    def bumped_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def bumped_at_before_last_save; end

    sig { returns(T.untyped) }
    def bumped_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def bumped_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def bumped_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def bumped_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def bumped_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def bumped_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def bumped_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def bumped_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def bumped_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def bumped_at_was; end

    sig { void }
    def bumped_at_will_change!; end

    sig { returns(::Integer) }
    def category_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def category_id=(value); end

    sig { returns(T::Boolean) }
    def category_id?; end

    sig { returns(T.nilable(::Integer)) }
    def category_id_before_last_save; end

    sig { returns(T.untyped) }
    def category_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def category_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def category_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def category_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def category_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def category_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def category_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def category_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def category_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def category_id_was; end

    sig { void }
    def category_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def chosen_comment_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def chosen_comment_id=(value); end

    sig { returns(T::Boolean) }
    def chosen_comment_id?; end

    sig { returns(T.nilable(::Integer)) }
    def chosen_comment_id_before_last_save; end

    sig { returns(T.untyped) }
    def chosen_comment_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def chosen_comment_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def chosen_comment_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def chosen_comment_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def chosen_comment_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def chosen_comment_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def chosen_comment_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def chosen_comment_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def chosen_comment_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def chosen_comment_id_was; end

    sig { void }
    def chosen_comment_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at=(value); end

    sig { returns(T::Boolean) }
    def closed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_before_last_save; end

    sig { returns(T.untyped) }
    def closed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def closed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def closed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def closed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def closed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def closed_at_was; end

    sig { void }
    def closed_at_will_change!; end

    sig { returns(::Integer) }
    def comment_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def comment_count=(value); end

    sig { returns(T::Boolean) }
    def comment_count?; end

    sig { returns(T.nilable(::Integer)) }
    def comment_count_before_last_save; end

    sig { returns(T.untyped) }
    def comment_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def comment_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def comment_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def comment_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def comment_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def comment_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def comment_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def comment_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def comment_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def comment_count_was; end

    sig { void }
    def comment_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def converted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def converted_at=(value); end

    sig { returns(T::Boolean) }
    def converted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def converted_at_before_last_save; end

    sig { returns(T.untyped) }
    def converted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def converted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def converted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def converted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def converted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def converted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def converted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def converted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def converted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def converted_at_was; end

    sig { void }
    def converted_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def detected_language; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def detected_language=(value); end

    sig { returns(T::Boolean) }
    def detected_language?; end

    sig { returns(T.nilable(::String)) }
    def detected_language_before_last_save; end

    sig { returns(T.untyped) }
    def detected_language_before_type_cast; end

    sig { returns(T::Boolean) }
    def detected_language_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def detected_language_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def detected_language_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def detected_language_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def detected_language_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def detected_language_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def detected_language_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def detected_language_previously_was; end

    sig { returns(T.nilable(::String)) }
    def detected_language_was; end

    sig { void }
    def detected_language_will_change!; end

    sig { returns(::Integer) }
    def direct_comment_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def direct_comment_count=(value); end

    sig { returns(T::Boolean) }
    def direct_comment_count?; end

    sig { returns(T.nilable(::Integer)) }
    def direct_comment_count_before_last_save; end

    sig { returns(T.untyped) }
    def direct_comment_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def direct_comment_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def direct_comment_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def direct_comment_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def direct_comment_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def direct_comment_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def direct_comment_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def direct_comment_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def direct_comment_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def direct_comment_count_was; end

    sig { void }
    def direct_comment_count_will_change!; end

    sig { returns(::Integer) }
    def discussion_category_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def discussion_category_id=(value); end

    sig { returns(T::Boolean) }
    def discussion_category_id?; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_category_id_before_last_save; end

    sig { returns(T.untyped) }
    def discussion_category_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def discussion_category_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_category_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_category_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_category_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_category_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def discussion_category_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def discussion_category_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discussion_category_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def discussion_category_id_was; end

    sig { void }
    def discussion_category_id_will_change!; end

    sig { returns(::String) }
    def discussion_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def discussion_type=(value); end

    sig { returns(T::Boolean) }
    def discussion_type?; end

    sig { returns(T.nilable(::String)) }
    def discussion_type_before_last_save; end

    sig { returns(T.untyped) }
    def discussion_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def discussion_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def discussion_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def discussion_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def discussion_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def discussion_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def discussion_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def discussion_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def discussion_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def discussion_type_was; end

    sig { void }
    def discussion_type_will_change!; end

    sig { returns(::String) }
    def error_reason; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def error_reason=(value); end

    sig { returns(T::Boolean) }
    def error_reason?; end

    sig { returns(T.nilable(::String)) }
    def error_reason_before_last_save; end

    sig { returns(T.untyped) }
    def error_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def error_reason_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def error_reason_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def error_reason_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def error_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def error_reason_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def error_reason_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def error_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def error_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def error_reason_was; end

    sig { void }
    def error_reason_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def issue_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def issue_id=(value); end

    sig { returns(T::Boolean) }
    def issue_id?; end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_before_last_save; end

    sig { returns(T.untyped) }
    def issue_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def issue_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def issue_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def issue_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def issue_id_was; end

    sig { void }
    def issue_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_edited_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_edited_at=(value); end

    sig { returns(T::Boolean) }
    def last_edited_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_edited_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_edited_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_edited_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_edited_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_edited_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_edited_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_edited_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_edited_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def last_edited_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_edited_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_edited_at_was; end

    sig { void }
    def last_edited_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at=(value); end

    sig { returns(T::Boolean) }
    def locked_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_before_last_save; end

    sig { returns(T.untyped) }
    def locked_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def locked_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def locked_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def locked_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def locked_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def locked_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def locked_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def locked_at_was; end

    sig { void }
    def locked_at_will_change!; end

    sig { returns(::Integer) }
    def number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::Integer)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def performed_by_integration_id=(value); end

    sig { returns(T::Boolean) }
    def performed_by_integration_id?; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_before_last_save; end

    sig { returns(T.untyped) }
    def performed_by_integration_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def performed_by_integration_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_integration_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def performed_by_integration_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def performed_by_integration_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def performed_by_integration_id_was; end

    sig { void }
    def performed_by_integration_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def release_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def release_id=(value); end

    sig { returns(T::Boolean) }
    def release_id?; end

    sig { returns(T.nilable(::Integer)) }
    def release_id_before_last_save; end

    sig { returns(T.untyped) }
    def release_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def release_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def release_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def release_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def release_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def release_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def release_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def release_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def release_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def release_id_was; end

    sig { void }
    def release_id_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_allow_reactions!; end

    sig { void }
    def restore_body!; end

    sig { void }
    def restore_bumped_at!; end

    sig { void }
    def restore_category_id!; end

    sig { void }
    def restore_chosen_comment_id!; end

    sig { void }
    def restore_closed_at!; end

    sig { void }
    def restore_comment_count!; end

    sig { void }
    def restore_converted_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_detected_language!; end

    sig { void }
    def restore_direct_comment_count!; end

    sig { void }
    def restore_discussion_category_id!; end

    sig { void }
    def restore_discussion_type!; end

    sig { void }
    def restore_error_reason!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_issue_id!; end

    sig { void }
    def restore_last_edited_at!; end

    sig { void }
    def restore_locked_at!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_performed_by_integration_id!; end

    sig { void }
    def restore_release_id!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_state_reason!; end

    sig { void }
    def restore_team_post_id!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_total_downvotes!; end

    sig { void }
    def restore_total_upvotes!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_allow_reactions; end

    sig { returns(T::Boolean) }
    def saved_change_to_allow_reactions?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_body?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_bumped_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_bumped_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_category_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_category_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_chosen_comment_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_chosen_comment_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_closed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_closed_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_comment_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_comment_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_converted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_converted_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_detected_language; end

    sig { returns(T::Boolean) }
    def saved_change_to_detected_language?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_direct_comment_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_direct_comment_count?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_discussion_category_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_discussion_category_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_discussion_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_discussion_type?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_error_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_error_reason?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_issue_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_issue_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_edited_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_edited_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_locked_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_locked_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_performed_by_integration_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_performed_by_integration_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_release_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_release_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state_reason; end

    sig { returns(T::Boolean) }
    def saved_change_to_state_reason?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_team_post_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_team_post_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_title?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_total_downvotes; end

    sig { returns(T::Boolean) }
    def saved_change_to_total_downvotes?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_total_upvotes; end

    sig { returns(T::Boolean) }
    def saved_change_to_total_upvotes?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(::String) }
    def state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_reason; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def state_reason=(value); end

    sig { returns(T::Boolean) }
    def state_reason?; end

    sig { returns(T.nilable(::String)) }
    def state_reason_before_last_save; end

    sig { returns(T.untyped) }
    def state_reason_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_reason_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_reason_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def state_reason_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_reason_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_reason_was; end

    sig { void }
    def state_reason_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def team_post_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def team_post_id=(value); end

    sig { returns(T::Boolean) }
    def team_post_id?; end

    sig { returns(T.nilable(::Integer)) }
    def team_post_id_before_last_save; end

    sig { returns(T.untyped) }
    def team_post_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def team_post_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_post_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_post_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def team_post_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def team_post_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def team_post_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def team_post_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def team_post_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def team_post_id_was; end

    sig { void }
    def team_post_id_will_change!; end

    sig { returns(T.untyped) }
    def title; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(T.untyped) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def title_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def title_previously_was; end

    sig { returns(T.untyped) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(::Integer) }
    def total_downvotes; end

    sig { params(value: ::Integer).returns(::Integer) }
    def total_downvotes=(value); end

    sig { returns(T::Boolean) }
    def total_downvotes?; end

    sig { returns(T.nilable(::Integer)) }
    def total_downvotes_before_last_save; end

    sig { returns(T.untyped) }
    def total_downvotes_before_type_cast; end

    sig { returns(T::Boolean) }
    def total_downvotes_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_downvotes_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_downvotes_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_downvotes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_downvotes_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_downvotes_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_downvotes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_downvotes_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def total_downvotes_was; end

    sig { void }
    def total_downvotes_will_change!; end

    sig { returns(::Integer) }
    def total_upvotes; end

    sig { params(value: ::Integer).returns(::Integer) }
    def total_upvotes=(value); end

    sig { returns(T::Boolean) }
    def total_upvotes?; end

    sig { returns(T.nilable(::Integer)) }
    def total_upvotes_before_last_save; end

    sig { returns(T.untyped) }
    def total_upvotes_before_type_cast; end

    sig { returns(T::Boolean) }
    def total_upvotes_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_upvotes_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_upvotes_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_upvotes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_upvotes_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def total_upvotes_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def total_upvotes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def total_upvotes_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def total_upvotes_was; end

    sig { void }
    def total_upvotes_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def user_hidden; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_allow_reactions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bumped_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_category_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_chosen_comment_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_closed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comment_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_converted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_detected_language?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_direct_comment_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_discussion_category_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_discussion_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_error_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issue_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_edited_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locked_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_performed_by_integration_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_release_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state_reason?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_team_post_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_total_downvotes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_total_upvotes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedPreludeBatchMethods
    sig { params(options: T.untyped).returns(T.untyped) }
    def prelude_body_html(options); end

    sig { params(options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_body_html(options); end

    sig { params(emotion: T.untyped).returns(T.untyped) }
    def prelude_reaction_count_for_reaction(emotion); end

    sig { returns(T.untyped) }
    def prelude_user_logins_by_reaction; end

    sig { returns(Promise[T.untyped]) }
    def async_batch_prelude_user_logins_by_reaction; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_viewer_can_react(viewer); end

    sig { params(emotion: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_reaction_count_for_reaction(emotion); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_viewer_can_react(viewer); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def answerables(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def answered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def authored_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def authored_by_and_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def close_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def comment_copy_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def commented_on_and_visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def commented_on_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def converted_from_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def converted_from_issue_numbered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def converted_from_team_discussion(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def converting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def default(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_categories(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_by_type(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_created_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_organization(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def highest_score_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def least_commented_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def least_recently_updated_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lowest_score_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_commented_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_upvotes_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_close_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_closed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_comment_copy_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_converting(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_default(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_no_error(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_reset_conversion_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_transferring(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def oldest_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def recently_bumped_first(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reset_conversion_failure(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_duplicate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_outdated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_reopened(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def state_reason_resolved(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def suggestions(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def transferring(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unanswered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def updated_since(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_number(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedSpammableClassMethods
    sig { returns(Symbol) }
    def spammable_user_foreign_key; end
  end

  module GeneratedSpammableMethods
    sig { params(viewer: User).returns(Promise[T::Boolean]) }
    def async_hide_from_user?(viewer); end

    sig { params(viewer: User).returns(T::Boolean) }
    def hide_from_user?(viewer); end

    sig { returns(Integer) }
    def set_user_hidden; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(Symbol) }
    def user_association_for_spammy; end

    sig { params(viewer: User).returns(T::Boolean) }
    def user_authored_content?(viewer); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Discussion } }

    sig { returns(T::Array[::Discussion]) }
    def to_a; end

    sig { returns(T::Array[::Discussion]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Discussion } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Discussion } }

    sig do
      params(
        records: T.any(::Discussion, T::Enumerable[T.any(::Discussion, T::Enumerable[::Discussion])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Discussion, T::Enumerable[T.any(::Discussion, T::Enumerable[::Discussion])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Discussion, T::Enumerable[T.any(::Discussion, T::Enumerable[::Discussion])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Discussion]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Discussion, T::Enumerable[T.any(::Discussion, T::Enumerable[::Discussion])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Discussion, T::Enumerable[T.any(::Discussion, T::Enumerable[::Discussion])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Discussion, T::Enumerable[T.any(::Discussion, T::Enumerable[::Discussion])])
      ).returns(T::Array[::Discussion])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Discussion]) }
    def target; end

    sig { returns(T::Array[::Discussion]) }
    def to_a; end

    sig { returns(T::Array[::Discussion]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Discussion } }

    sig { returns(T::Array[::Discussion]) }
    def to_a; end

    sig { returns(T::Array[::Discussion]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Discussion } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

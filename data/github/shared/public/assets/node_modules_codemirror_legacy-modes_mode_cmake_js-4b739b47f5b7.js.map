{"version":3,"file":"chunk-node_modules_codemirror_legacy-modes_mode_cmake_js-xxxxxxxxxxxx.js","mappings":"6KAAA,IAAIA,EAAiB,wBAErB,SAASC,EAAYC,CAAM,CAAEC,CAAK,EAEhC,IADA,IAAIC,EAASC,EAAMC,EAAY,GACxB,CAACJ,EAAOK,GAAG,IAAM,CAACH,EAAUF,EAAOM,IAAI,EAAC,GAAML,EAAMM,OAAO,EAAE,CAClE,GAAIL,MAAAA,GAAmBC,MAAAA,GAAgBF,KAAAA,EAAMM,OAAO,CAAS,CAC3DH,EAAY,GACZ,KACF,CACAD,EAAOD,CACT,CASA,OARIE,GACFJ,EAAOQ,MAAM,CAAC,GAEZN,GAAWD,EAAMM,OAAO,CAC1BN,EAAMQ,cAAc,CAAG,GAEvBR,EAAMQ,cAAc,CAAG,GAElB,QACT,CA4CO,IAAMC,EAAQ,CACnBC,KAAM,QACNC,WAAY,WACV,IAAIX,EAAQ,CAAC,EAKb,OAJAA,EAAMY,YAAY,CAAG,GACrBZ,EAAMa,SAAS,CAAG,GAClBb,EAAMQ,cAAc,CAAG,GACvBR,EAAMM,OAAO,CAAG,GACTN,CACT,EACAc,MAAO,SAAUf,CAAM,CAAEC,CAAK,MAnD1Be,SAoDF,EAAWC,QAAQ,GAAW,KAjDhC,OAHID,EAAKhB,EAAOM,IAAI,IAIlB,EAAWY,KAAK,CAACpB,GACR,uBAEF,WAGT,EAAUW,cAAc,EAEtBT,EAAOQ,MAAM,CAAC,GACPT,EAwCSC,EAAQC,IApCtBD,EAAOkB,KAAK,CAAC,gBAAkBlB,EAAOkB,KAAK,CAAC,kBAC9ClB,EAAOQ,MAAM,CAAC,GACP,OAELQ,KAAAA,GACFhB,EAAOmB,SAAS,GACT,WAGLH,KAAAA,GAAaA,KAAAA,GAEff,EAAMM,OAAO,CAAGS,EAETjB,EAuBSC,EAAQC,IArBtBe,KAAAA,GAAaA,KAAAA,EACR,UAELA,EAAGE,KAAK,CAAC,SACJ,UAETlB,EAAOoB,QAAQ,CAAC,SACT,KAeP,CACF,C","sources":["node_modules/@codemirror/legacy-modes/mode/cmake.js"],"sourcesContent":["var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\nfunction tokenString(stream, state) {\n  var current, prev, found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\n\nfunction tokenize(stream, state) {\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      return 'variableName.special';\n    }\n    return 'variable';\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Do we just have a function on our hands?\n  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  if (ch == '(' || ch == ')') {\n    return 'bracket';\n  }\n  if (ch.match(/[0-9]/)) {\n    return 'number';\n  }\n  stream.eatWhile(/[\\w-]/);\n  return null;\n}\nexport const cmake = {\n  name: \"cmake\",\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return tokenize(stream, state);\n  }\n};\n\n"],"names":["variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","cmake","name","startState","inDefinition","inInclude","token","ch","eatSpace","match","skipToEnd","eatWhile"],"sourceRoot":""}
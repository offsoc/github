{"version":3,"file":"repository-code-scanning-settings-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/repository-code-scanning-settings/App.tsx","ui/packages/repository-code-scanning-settings/routes/DefaultSetup.tsx","ui/packages/repository-code-scanning-settings/repository-code-scanning-settings.ts","ui/packages/use-csrf-token/use-csrf-token.ts","ui/packages/react-core/JsonRoute.tsx"],"sourcesContent":["import type React from 'react'\n\n/**\n * The App component is used to render content which should be present on _all_ routes within this app\n */\nexport function App(props: {children?: React.ReactNode}) {\n  return <>{props.children}</>\n}\n\ntry{ App.displayName ||= 'App' } catch {}","import {useMemo, useState} from 'react'\nimport {useCSRFToken} from '@github-ui/use-csrf-token'\nimport {useRoutePayload} from '@github-ui/react-core/use-route-payload'\nimport {CheckIcon} from '@primer/octicons-react'\nimport {Blankslate} from '@primer/react/drafts'\nimport {\n  Box,\n  BranchName,\n  Button,\n  Checkbox,\n  CheckboxGroup,\n  FormControl,\n  Label,\n  Heading,\n  Text,\n  Link,\n  RelativeTime,\n  ActionList,\n  ActionMenu,\n} from '@primer/react'\n\nexport interface DefaultSetupPayload {\n  securityAnalysisUrl: string\n  querySuitesDocumentationUrl: string\n  taintedDataDocumentationUrl: string\n  customBuildDocumentationUrl: string\n  codeqlLanguagesDocumentationUrl: string\n  defaultBranch: string\n  protectedBranchesUrl: string\n  formUrl: string\n  formMethod: string\n  isDefaultSetupEnabled: boolean\n  selectableLanguages: string[]\n  selectedLanguages: string[]\n  selectedQuerySuite: string\n  recommendedQuerySuite: string\n  querySuiteOptions: Array<{label: string; value: string; description: string}>\n  selectedThreatModel: string\n  showThreatModelInput: boolean\n  hasMacOsRunner: boolean\n  nextScheduledRunAt: string | null\n  isRepoActive: boolean\n}\n\nconst HIGH_FAILURE_LANGUAGES = new Set(['c-cpp', 'csharp', 'java-kotlin', 'swift'])\n\nconst threatModelOptions: Array<{label: string; value: string; description: string}> = [\n  {\n    label: 'Remote sources',\n    value: 'remote',\n    description: 'For applications that do not trust data from remote sources such as the network',\n  },\n  {\n    label: 'Remote and local sources',\n    value: 'remote_local',\n    description: 'For applications that do not trust data from local sources such as files or CLI commands',\n  },\n]\n\nexport function DefaultSetup() {\n  const {\n    securityAnalysisUrl,\n    querySuitesDocumentationUrl,\n    taintedDataDocumentationUrl,\n    customBuildDocumentationUrl,\n    codeqlLanguagesDocumentationUrl,\n    defaultBranch,\n    protectedBranchesUrl,\n    formUrl,\n    formMethod,\n    isDefaultSetupEnabled,\n    selectableLanguages,\n    selectedLanguages: initialLanguages,\n    selectedQuerySuite: initialQuerySuite,\n    recommendedQuerySuite,\n    querySuiteOptions,\n    selectedThreatModel: initialThreatModel,\n    showThreatModelInput,\n    hasMacOsRunner,\n    nextScheduledRunAt,\n    isRepoActive,\n  } = useRoutePayload<DefaultSetupPayload>()\n\n  const csrf = useCSRFToken(formUrl, formMethod)\n\n  const submitButtonText = isDefaultSetupEnabled ? 'Save changes' : 'Enable CodeQL'\n\n  const showScheduleRow = !isDefaultSetupEnabled || isRepoActive\n\n  const highFailureLanguagesPresent = useMemo(\n    () => selectableLanguages.some(language => HIGH_FAILURE_LANGUAGES.has(language)),\n    [selectableLanguages],\n  )\n  const swiftPresent = useMemo(() => selectableLanguages.includes('swift'), [selectableLanguages])\n\n  const sortedSelectableLanguages = useMemo(() => {\n    const allLanguages = new Set(selectableLanguages.concat(initialLanguages))\n\n    return Array.from(allLanguages).sort()\n  }, [selectableLanguages, initialLanguages])\n\n  const [languages, setLanguages] = useState<Set<string>>(() => new Set<string>(initialLanguages))\n  const [selectedQuerySuite, setSelectedQuerySuite] = useState(initialQuerySuite)\n\n  const querySuiteOptionElements = []\n  for (const suite of querySuiteOptions) {\n    const value = suite.value\n    const label = suite.label\n    const description = suite.description\n\n    let recommendedLabel = <></>\n    if (recommendedQuerySuite === value) {\n      recommendedLabel = <Label variant=\"accent\">Recommended</Label>\n    }\n\n    querySuiteOptionElements.push(\n      <ActionList.Item key={value} onSelect={() => setSelectedQuerySuite(value)}>\n        {label} {recommendedLabel}\n        <ActionList.LeadingVisual>{value === selectedQuerySuite && <CheckIcon />} </ActionList.LeadingVisual>\n        <ActionList.Description variant=\"block\">{description}</ActionList.Description>\n      </ActionList.Item>,\n    )\n  }\n\n  const querySuiteActionMenuLabel = querySuiteOptions.find(\n    querySuiteOption => querySuiteOption.value === selectedQuerySuite,\n  )?.label\n\n  const [selectedThreatModel, setSelectedThreatModel] = useState(initialThreatModel)\n\n  const threatModelOptionElements = []\n  for (const suite of threatModelOptions) {\n    const value = suite.value\n    const label = suite.label\n    const description = suite.description\n\n    threatModelOptionElements.push(\n      <ActionList.Item key={value} onSelect={() => setSelectedThreatModel(value)}>\n        {label}\n        <ActionList.LeadingVisual>{value === selectedThreatModel && <CheckIcon />} </ActionList.LeadingVisual>\n        <ActionList.Description variant=\"block\">{description}</ActionList.Description>\n      </ActionList.Item>,\n    )\n  }\n\n  const threatModelActionMenuLabel = threatModelOptions.find(\n    threatModelOption => threatModelOption.value === selectedThreatModel,\n  )?.label\n\n  return (\n    <form noValidate action={formUrl} method=\"post\" data-testid=\"default-setup-form\">\n      {\n        // eslint-disable-next-line github/authenticity-token\n        <input type=\"hidden\" name=\"authenticity_token\" value={csrf} />\n      }\n      <input type=\"hidden\" name=\"_method\" value={formMethod} autoComplete=\"off\" />\n      <Box sx={{borderColor: 'border.default', borderBottomWidth: 1, borderBottomStyle: 'solid', pb: 2, mb: 3}}>\n        <Heading as=\"h1\" sx={{fontSize: 4, fontWeight: 400, display: 'flex'}}>\n          <Link href={securityAnalysisUrl}>Code security and analysis</Link>\n          <Text as=\"span\" sx={{ml: 2}}>\n            / CodeQL default configuration\n          </Text>\n        </Heading>\n      </Box>\n\n      {selectableLanguages.length === 0 ? (\n        <>\n          <Heading as=\"h2\" sx={{fontSize: 3, fontWeight: 400}}>\n            Languages\n          </Heading>\n          <div className=\"border rounded-2 mt-2\">\n            <Blankslate narrow>\n              <Blankslate.Heading>\n                <Text sx={{fontSize: 1, display: 'block', textAlign: 'center'}}>\n                  No CodeQL supported languages to scan in this repository\n                </Text>\n              </Blankslate.Heading>\n              <Blankslate.Description>\n                <Text sx={{color: 'fg.muted', fontSize: 1, display: 'block', textAlign: 'center'}}>\n                  CodeQL will automatically perform the first scan when it detects{' '}\n                  <Link href={codeqlLanguagesDocumentationUrl} target=\"_blank\" inline={true}>\n                    a supported language\n                  </Link>{' '}\n                  on the default branch.\n                </Text>\n              </Blankslate.Description>\n            </Blankslate>\n          </div>\n        </>\n      ) : (\n        <CheckboxGroup id=\"default-setup--languages\">\n          <CheckboxGroup.Label sx={{fontSize: 3, fontWeight: 400}}>Languages</CheckboxGroup.Label>\n          <CheckboxGroup.Caption sx={{color: 'fg.muted', fontSize: 0, fontWeight: 400}}>\n            Select one or more languages detected on the default branch for CodeQL to scan.\n          </CheckboxGroup.Caption>\n\n          <Box\n            sx={{\n              display: 'grid',\n              gap: 2,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: 'border.default',\n              borderRadius: 2,\n              mb: 0,\n              p: 3,\n            }}\n          >\n            {sortedSelectableLanguages.map(language => (\n              <FormControl\n                key={language}\n                id={`default-setup--language--${language}`}\n                disabled={!hasMacOsRunner && language === 'swift'}\n              >\n                <Checkbox\n                  name=\"config[languages][]\"\n                  value={language}\n                  checked={languages.has(language)}\n                  onChange={e => {\n                    const newLanguages = new Set(languages)\n                    if (e.target.checked) {\n                      newLanguages.add(language)\n                    } else {\n                      newLanguages.delete(language)\n                    }\n\n                    setLanguages(newLanguages)\n                  }}\n                />\n                <FormControl.Label>\n                  <span data-testid=\"language-display-name\">\n                    {getLanguageDisplayName(language)}\n                    {HIGH_FAILURE_LANGUAGES.has(language) && <span> *</span>}\n                  </span>\n                  {language === 'swift' && (\n                    <Label variant=\"success\" sx={{ml: 2}}>\n                      Beta\n                    </Label>\n                  )}\n                </FormControl.Label>\n              </FormControl>\n            ))}\n          </Box>\n          {highFailureLanguagesPresent && (\n            <Text sx={{color: 'fg.muted', fontSize: 0, fontWeight: 400}}>\n              * These languages may{' '}\n              <Link inline href={customBuildDocumentationUrl} target=\"_blank\">\n                require a custom build configuration\n              </Link>{' '}\n              for a successful setup.\n              {swiftPresent && !hasMacOsRunner && (\n                <>\n                  {' '}\n                  Swift requires <code>macOS</code> runners.\n                </>\n              )}\n            </Text>\n          )}\n        </CheckboxGroup>\n      )}\n\n      {/* Query Suite Elements */}\n      <Box sx={{mt: 4, mb: 2}}>\n        <Heading as=\"h2\" sx={{fontSize: 3, fontWeight: 400}}>\n          Scan settings\n        </Heading>\n        <Text sx={{color: 'fg.muted', fontSize: 0, fontWeight: 400}}>\n          Adjust the CodeQL scanning strategy to suit the needs of this application\n        </Text>\n      </Box>\n      <input type=\"hidden\" name=\"config[query_suite]\" value={selectedQuerySuite} />\n\n      <Box\n        sx={{\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: 'border.default',\n          borderRadius: 2,\n          pr: 3,\n          pl: 3,\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            pt: 3,\n            pb: 3,\n          }}\n        >\n          <div>\n            <Text sx={{fontSize: 1, fontWeight: 'bold', display: 'block'}}>Query suite</Text>\n            <Text sx={{color: 'fg.muted', fontSize: 0, fontWeight: 400}}>\n              Select the{' '}\n              <Link href={querySuitesDocumentationUrl} target=\"_blank\" inline={true}>\n                group of CodeQL queries\n              </Link>{' '}\n              to run against your code\n            </Text>\n          </div>\n          <ActionMenu>\n            <ActionMenu.Button data-testid=\"querySuiteActionMenuLabel\">{querySuiteActionMenuLabel}</ActionMenu.Button>\n            <ActionMenu.Overlay width=\"medium\">\n              <ActionList showDividers>{querySuiteOptionElements}</ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        </Box>\n\n        {showThreatModelInput && (\n          <>\n            <input type=\"hidden\" name=\"config[threat_model]\" value={selectedThreatModel} />\n            <Box\n              sx={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                borderTopWidth: 1,\n                borderTopStyle: 'solid',\n                borderColor: 'border.default',\n                pt: 3,\n                pb: 3,\n              }}\n            >\n              <div>\n                <Text sx={{fontSize: 1, fontWeight: 'bold', display: 'block'}}>Threat model</Text>\n                <Text sx={{color: 'fg.muted', fontSize: 0, fontWeight: 400, display: 'block'}}>\n                  Select the sources of{' '}\n                  <Link inline href={taintedDataDocumentationUrl} target=\"_blank\">\n                    tainted data\n                  </Link>{' '}\n                  that may pose a risk to this application.\n                </Text>\n                <Text sx={{color: 'fg.muted', fontSize: 0, fontWeight: 400}}>\n                  This setting only applies to Java / Kotlin and C# analysis.\n                </Text>\n              </div>\n              <ActionMenu>\n                <ActionMenu.Button data-testid=\"threatModelActionModelLabel\">\n                  {threatModelActionMenuLabel}\n                </ActionMenu.Button>\n                <ActionMenu.Overlay width=\"medium\">\n                  <ActionList showDividers>{threatModelOptionElements}</ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            </Box>\n          </>\n        )}\n      </Box>\n\n      <Box sx={{mt: 4, mb: 2}}>\n        <Heading as=\"h2\" sx={{fontSize: 3, fontWeight: 400}}>\n          Scan events\n        </Heading>\n        <Text sx={{color: 'fg.muted', fontSize: 0, fontWeight: 400}}>These events will trigger a new scan.</Text>\n      </Box>\n\n      <Box\n        sx={{\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: 'border.default',\n          borderRadius: 2,\n          pr: 3,\n          pl: 3,\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            pt: 3,\n            pb: 3,\n          }}\n        >\n          <Text sx={{fontSize: 1, fontWeight: 'bold', mr: 'auto'}}>On push and pull requests to</Text>\n          <Text sx={{fontSize: 0, color: 'fg.subtle'}}>\n            <BranchName as=\"span\">{defaultBranch}</BranchName> and{' '}\n            <Link inline href={protectedBranchesUrl}>\n              protected branches\n            </Link>\n          </Text>\n        </Box>\n        {showScheduleRow && (\n          <Box\n            sx={{\n              display: 'flex',\n              borderTopWidth: 1,\n              borderTopStyle: 'solid',\n              borderColor: 'border.default',\n              pt: 3,\n              pb: 3,\n            }}\n          >\n            <Text sx={{fontSize: 1, fontWeight: 'bold', mr: 'auto'}}>On a weekly schedule</Text>\n            {nextScheduledRunAt != null && (\n              <Text sx={{fontSize: 0, color: 'fg.subtle'}}>\n                Next scan of <BranchName as=\"span\">{defaultBranch}</BranchName>{' '}\n                <RelativeTime datetime={nextScheduledRunAt} threshold=\"PT0S\" hour=\"numeric\" minute=\"numeric\" />\n              </Text>\n            )}\n          </Box>\n        )}\n      </Box>\n\n      <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center', mt: 5}}>\n        <Button type=\"submit\" variant=\"primary\" sx={{mr: 2}}>\n          {submitButtonText}\n        </Button>\n        <Button as=\"a\" href={securityAnalysisUrl}>\n          Cancel\n        </Button>\n      </Box>\n    </form>\n  )\n}\n\nfunction getLanguageDisplayName(language: string): string {\n  switch (language) {\n    case 'c-cpp':\n    case 'cpp':\n      return 'C / C++'\n    case 'csharp':\n      return 'C#'\n    case 'java':\n    case 'java-kotlin':\n      return 'Java / Kotlin'\n    case 'javascript':\n    case 'javascript-typescript':\n      return 'JavaScript / TypeScript'\n    default:\n      return language.charAt(0).toUpperCase() + language.slice(1)\n  }\n}\n\ntry{ HIGH_FAILURE_LANGUAGES.displayName ||= 'HIGH_FAILURE_LANGUAGES' } catch {}\ntry{ DefaultSetup.displayName ||= 'DefaultSetup' } catch {}","import {App} from './App'\nimport {DefaultSetup} from './routes/DefaultSetup'\nimport {registerReactAppFactory} from '@github-ui/react-core/register-app'\nimport {jsonRoute} from '@github-ui/react-core/json-route'\n\nregisterReactAppFactory('repository-code-scanning-settings', () => ({\n  App,\n  routes: [jsonRoute({path: '/:owner/:repo/settings/code-scanning/default-setup', Component: DefaultSetup})],\n}))\n","import {useRoutePayload} from '@github-ui/react-core/use-route-payload'\n\nexport interface CSRFTokens {\n  csrf_tokens?: {\n    [path: string]:\n      | {\n          [method: string]: string | undefined\n        }\n      | undefined\n  }\n}\n\nexport function useCSRFToken(path: string, method: string): string | undefined {\n  const {csrf_tokens} = useRoutePayload<CSRFTokens>()\n  return csrf_tokens?.[path]?.[method]\n}\n","import type {ChildRoute, LoaderResult, RouteRegistration, TransitionType} from './app-routing-types'\nimport type React from 'react'\nimport type {Location} from '@remix-run/router'\n\nexport interface JsonRouteProps {\n  path: string\n  Component: React.ComponentType\n  transitionType?: TransitionType\n  shouldNavigateOnError?: boolean\n  children?: ChildRoute[]\n}\n/**\n * A utility for building a route registration for a route that consumes a JSON object (either via embedding in a\n * script tag or via a JSON fetch on React soft navigations).\n */\nexport function jsonRoute<TRouteData, TEmbeddedData>({\n  path,\n  Component,\n  /**\n   * Some routes want to handle their own errors and not just show a generic error page. In this case,\n   * the error is just handled like any other payload for the route.\n   * NOTE: We might consider replacing the shouldNavigateOnError flag with a parallel implementation to jsonRoute.\n   */\n  shouldNavigateOnError,\n  transitionType,\n  children,\n}: JsonRouteProps): RouteRegistration<TRouteData, TEmbeddedData> {\n  async function coreLoader({location}: {location: Location}): Promise<LoaderResult<TRouteData>> {\n    let response: Response\n    try {\n      const fetchPath = `${location.pathname}${location.search}`\n      response = await window.fetch(fetchPath, {\n        headers: {\n          Accept: 'application/json',\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-GitHub-Target': 'dotcom',\n          'X-React-Router': 'json',\n        },\n      })\n    } catch (error) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'fetchError'},\n      }\n    }\n    if (response.redirected) {\n      return {\n        type: 'redirect',\n        url: response.url,\n      }\n    } else if (!response.ok) {\n      return {\n        type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n        error: {type: 'httpError', httpStatus: response.status},\n      }\n    } else {\n      try {\n        const responseJson = await response.json()\n        return {\n          type: 'loaded',\n          data: responseJson,\n          title: responseJson.title,\n        }\n      } catch (error) {\n        return {\n          type: shouldNavigateOnError ? 'route-handled-error' : 'error',\n          error: {type: 'badResponseError'},\n        }\n      }\n    }\n  }\n\n  function loadFromEmbeddedData({embeddedData}: {embeddedData: TEmbeddedData}): {data: TRouteData; title: string} {\n    const data = embeddedData as unknown as TRouteData & {title: string}\n    return {data, title: data.title}\n  }\n\n  return {\n    path,\n    // TODO: consider wrapping Component with a component that passes payload as a prop — ideally as part of migrating\n    // away from useRoutePayload.\n    Component,\n    coreLoader,\n    loadFromEmbeddedData,\n    transitionType,\n    children,\n  }\n}\n"],"names":["App","props","children","displayName","HIGH_FAILURE_LANGUAGES","Set","threatModelOptions","label","value","description","DefaultSetup","securityAnalysisUrl","querySuitesDocumentationUrl","taintedDataDocumentationUrl","customBuildDocumentationUrl","codeqlLanguagesDocumentationUrl","defaultBranch","protectedBranchesUrl","formUrl","formMethod","isDefaultSetupEnabled","selectableLanguages","selectedLanguages","initialLanguages","selectedQuerySuite","initialQuerySuite","recommendedQuerySuite","querySuiteOptions","selectedThreatModel","initialThreatModel","showThreatModelInput","hasMacOsRunner","nextScheduledRunAt","isRepoActive","useRoutePayload","csrf","useCSRFToken","highFailureLanguagesPresent","useMemo","some","language","has","swiftPresent","includes","sortedSelectableLanguages","Array","from","concat","sort","languages","setLanguages","useState","setSelectedQuerySuite","querySuiteOptionElements","suite","recommendedLabel","Label","variant","push","ActionList","Item","onSelect","LeadingVisual","CheckIcon","Description","querySuiteActionMenuLabel","find","querySuiteOption","setSelectedThreatModel","threatModelOptionElements","threatModelActionMenuLabel","threatModelOption","form","noValidate","action","method","data-testid","input","type","name","autoComplete","Box","sx","borderColor","borderBottomWidth","borderBottomStyle","pb","mb","Heading","as","fontSize","fontWeight","display","Link","href","Text","ml","length","div","className","Blankslate","narrow","textAlign","color","target","inline","CheckboxGroup","id","Caption","gap","borderWidth","borderStyle","borderRadius","p","map","FormControl","disabled","Checkbox","checked","onChange","e","newLanguages","add","delete","span","getLanguageDisplayName","charAt","toUpperCase","slice","code","mt","pr","pl","justifyContent","alignItems","pt","ActionMenu","Button","Overlay","width","showDividers","borderTopWidth","borderTopStyle","mr","BranchName","showScheduleRow","RelativeTime","datetime","threshold","hour","minute","flexDirection","registerReactAppFactory","routes","jsonRoute","path","Component","csrf_tokens","shouldNavigateOnError","transitionType","coreLoader","location","response","fetchPath","pathname","search","window","fetch","headers","Accept","error","redirected","url","ok","httpStatus","status","responseJson","json","data","title","loadFromEmbeddedData","embeddedData"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Discussions::V1::MigrateTeamDiscussionsSubmitted`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Discussions::V1::MigrateTeamDiscussionsSubmitted`.

class Hydro::Schemas::Github::Discussions::V1::MigrateTeamDiscussionsSubmitted
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      include_private: T.nilable(T::Boolean),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      team: T.nilable(Hydro::Schemas::Github::V1::Entities::Team)
    ).void
  end
  def initialize(actor: nil, include_private: nil, repository: nil, repository_owner: nil, request_context: nil, team: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_include_private; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_team; end

  sig { returns(T::Boolean) }
  def include_private; end

  sig { params(value: T::Boolean).void }
  def include_private=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Team)) }
  def team; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Team)).void }
  def team=(value); end
end

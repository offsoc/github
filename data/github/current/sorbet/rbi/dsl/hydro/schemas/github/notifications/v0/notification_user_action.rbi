# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Notifications::V0::NotificationUserAction`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Notifications::V0::NotificationUserAction`.

class Hydro::Schemas::Github::Notifications::V0::NotificationUserAction
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      comment_id: T.nilable(String),
      comment_type: T.nilable(String),
      handler: T.nilable(T.any(Symbol, Integer)),
      list_id: T.nilable(String),
      list_type: T.nilable(String),
      thread_id: T.nilable(String),
      thread_type: T.nilable(String),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      version: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(action: nil, comment_id: nil, comment_type: nil, handler: nil, list_id: nil, list_type: nil, thread_id: nil, thread_type: nil, user: nil, version: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_comment_id; end

  sig { void }
  def clear_comment_type; end

  sig { void }
  def clear_handler; end

  sig { void }
  def clear_list_id; end

  sig { void }
  def clear_list_type; end

  sig { void }
  def clear_thread_id; end

  sig { void }
  def clear_thread_type; end

  sig { void }
  def clear_user; end

  sig { void }
  def clear_version; end

  sig { returns(String) }
  def comment_id; end

  sig { params(value: String).void }
  def comment_id=(value); end

  sig { returns(String) }
  def comment_type; end

  sig { params(value: String).void }
  def comment_type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def handler; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def handler=(value); end

  sig { returns(String) }
  def list_id; end

  sig { params(value: String).void }
  def list_id=(value); end

  sig { returns(String) }
  def list_type; end

  sig { params(value: String).void }
  def list_type=(value); end

  sig { returns(String) }
  def thread_id; end

  sig { params(value: String).void }
  def thread_id=(value); end

  sig { returns(String) }
  def thread_type; end

  sig { params(value: String).void }
  def thread_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def version; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def version=(value); end
end

{"version":3,"file":"chunk-app_components_tracking_blocks_tasklist-block-title-element_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/components/tracking_blocks/tasklist-block-title-element.ts","ui/packages/tasklist-block-operations/utils.ts"],"sourcesContent":["import {controller, target} from '@github/catalyst'\nimport {transformMarkdownToHTML, type UpdateTasklistTitlePayload} from '@github-ui/tasklist-block-operations'\n\n@controller\nexport default class TasklistBlockTitleElement extends HTMLElement {\n  @target titleEditMode: HTMLElement | null\n  @target titleViewMode: HTMLElement | null\n  @target titleInput: HTMLInputElement | null\n  @target titleText: HTMLElement | null\n\n  #keysPressed: {\n    Control: boolean\n    Meta: boolean\n  } = {\n    Control: false,\n    Meta: false,\n  }\n\n  handleSubmit(event: Event) {\n    event.preventDefault()\n    const allInputs = Array.from((event.currentTarget as HTMLElement).querySelectorAll<HTMLElement>('input, button'))\n    const titleInputElement = this.titleInput\n    const currentTitleValue = this.titleText?.textContent?.trim() ?? ''\n    const inputFormData = new FormData(event.currentTarget as HTMLFormElement).get('tasklist_title')\n    const inputValue = inputFormData?.toString().trim() ?? ''\n\n    if (inputValue !== currentTitleValue) {\n      // Disable inputs while saving title\n      for (const input of allInputs) {\n        input.toggleAttribute('disabled', true)\n      }\n\n      if (titleInputElement) {\n        const payload = this.#composeUpdateTasklistTitlePayload(titleInputElement, inputValue)\n        this.#dispatchSubmit(payload)\n      }\n\n      this.#handleTitleOptimisticUpdates(inputValue)\n    }\n\n    this.#hideTitleEditMode()\n\n    // Re-enable inputs\n    for (const input of allInputs) {\n      input.toggleAttribute('disabled', false)\n    }\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    const {key} = event\n    if (key === 'Escape') {\n      event.stopPropagation()\n\n      this.#hideTitleEditMode()\n    }\n\n    if (key === 'Meta' || key === 'Control') {\n      this.#keysPressed[key] = true\n    }\n\n    if (key === 'Enter' && (this.#keysPressed.Control || this.#keysPressed.Meta)) {\n      const form = this.titleEditMode?.querySelector('form')\n      if (form) {\n        form.dispatchEvent(new SubmitEvent('submit'))\n      }\n    }\n  }\n\n  handleKeyUp(event: KeyboardEvent) {\n    const {key} = event\n    if (key === 'Meta' || key === 'Control') {\n      this.#keysPressed[key] = false\n    }\n  }\n\n  #hideTitleEditMode() {\n    this.titleEditMode?.toggleAttribute('hidden', true)\n    this.titleViewMode?.toggleAttribute('hidden', false)\n    this.titleText?.focus()\n  }\n\n  #composeUpdateTasklistTitlePayload(input: HTMLInputElement, inputValue: string): UpdateTasklistTitlePayload {\n    let comment = input.closest<HTMLDivElement>('.js-comment')!\n    let form = null\n\n    // The js-comment class is a dotcom convention that is used to determine whether the call\n    // is occuring in issues#show or in a react view.\n    const isReact = !comment\n    if (isReact) {\n      comment = input.closest<HTMLDivElement>('.markdown-body')!\n    } else {\n      form = comment.querySelector<HTMLFormElement>('.js-comment-update')!\n    }\n\n    const tasklistBlock = input.closest<HTMLDivElement>('tracking-block')!\n    const tasklistBlocks = Array.from(comment.querySelectorAll('tracking-block'))\n    const position = tasklistBlocks.findIndex(block => block === tasklistBlock)\n\n    return {\n      operation: 'update_tasklist_title',\n      position,\n      name: inputValue,\n      formId: form?.id || '',\n    }\n  }\n\n  #dispatchSubmit(payload: UpdateTasklistTitlePayload) {\n    this.dispatchEvent(\n      new CustomEvent('tasklist-block-title-update', {\n        bubbles: true,\n        detail: payload,\n      }),\n    )\n  }\n\n  async #handleTitleOptimisticUpdates(inputValue: string) {\n    if (!this.titleText) return\n    this.titleText.innerHTML = (await transformMarkdownToHTML(inputValue)) || 'Tasks'\n  }\n}\n","import type {AppendItemMDPayload, MDOperationPayload} from './types'\n\nexport async function performTasklistBlockOperation(body: string, args: MDOperationPayload) {\n  const {\n    appendItem,\n    removeItem,\n    removeTasklistBlock,\n    updateItemPosition,\n    updateItemState,\n    updateItemTitle,\n    updateTasklistTitle,\n  } = await import('./operations')\n\n  if (args.operation === 'append_item') {\n    // Let the backend handle URLs so that issues can be rendered correctly.\n    if (!/^\\s*(https?:|#)/.test(args.value)) {\n      return appendItem(body, args.position, args.value)\n    }\n  } else if (args.operation === 'update_item_title') {\n    return updateItemTitle(body, args.position, args.value)\n  } else if (args.operation === 'update_item_state') {\n    return updateItemState(body, args.position, args.closed)\n  } else if (args.operation === 'update_item_position') {\n    return updateItemPosition(body, args.src, args.dst)\n  } else if (args.operation === 'remove_item') {\n    return removeItem(body, args.position)\n  } else if (args.operation === 'remove_tasklist_block') {\n    return removeTasklistBlock(body, args.position)\n  } else if (args.operation === 'update_tasklist_title') {\n    return updateTasklistTitle(body, args.position, args.name)\n  }\n\n  return null\n}\n\nexport async function transformMarkdownToHTML(body: string) {\n  const {transformToHTML} = await import('./operations')\n  return transformToHTML(body)\n}\n\nexport function isAppendItemMDPayload(payload: MDOperationPayload): payload is AppendItemMDPayload {\n  return payload.operation === 'append_item'\n}\n"],"names":["TasklistBlockTitleElement","HTMLElement","handleSubmit","event","preventDefault","allInputs","Array","from","currentTarget","querySelectorAll","titleInputElement","titleInput","currentTitleValue","titleText","textContent","trim","inputFormData","FormData","get","inputValue","toString","input","toggleAttribute","payload","composeUpdateTasklistTitlePayload","dispatchSubmit","handleTitleOptimisticUpdates","hideTitleEditMode","handleKeyDown","key","stopPropagation","keysPressed","Control","Meta","form","titleEditMode","querySelector","dispatchEvent","SubmitEvent","handleKeyUp","titleViewMode","focus","comment","closest","tasklistBlock","operation","position","tasklistBlocks","findIndex","block","name","formId","id","CustomEvent","bubbles","detail","innerHTML","transformMarkdownToHTML","target","controller","performTasklistBlockOperation","body","args","appendItem","removeItem","removeTasklistBlock","updateItemPosition","updateItemState","updateItemTitle","updateTasklistTitle","test","value","closed","src","dst","transformToHTML","isAppendItemMDPayload"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Api::App::PlatformTypes::RepositoryRuleType`.
# Please instead update this file by running `bin/tapioca dsl Api::App::PlatformTypes::RepositoryRuleType`.

module Api::App::PlatformTypes::RepositoryRuleType
  sig { returns(T::Boolean) }
  def authorization?; end

  sig { returns(T::Boolean) }
  def branch_name_pattern?; end

  sig { returns(T::Boolean) }
  def code_scanning?; end

  sig { returns(T::Boolean) }
  def commit_author_email_pattern?; end

  sig { returns(T::Boolean) }
  def commit_message_pattern?; end

  sig { returns(T::Boolean) }
  def commit_oid?; end

  sig { returns(T::Boolean) }
  def committer_email_pattern?; end

  sig { returns(T::Boolean) }
  def creation?; end

  sig { returns(T::Boolean) }
  def deletion?; end

  sig { returns(T::Boolean) }
  def file_extension_restriction?; end

  sig { returns(T::Boolean) }
  def file_path_restriction?; end

  sig { returns(T::Boolean) }
  def lock_branch?; end

  sig { returns(T::Boolean) }
  def max_file_path_length?; end

  sig { returns(T::Boolean) }
  def max_file_size?; end

  sig { returns(T::Boolean) }
  def max_ref_updates?; end

  sig { returns(T::Boolean) }
  def merge_queue?; end

  sig { returns(T::Boolean) }
  def merge_queue_locked_ref?; end

  sig { returns(T::Boolean) }
  def non_fast_forward?; end

  sig { returns(T::Boolean) }
  def pull_request?; end

  sig { returns(T::Boolean) }
  def repository_transfer?; end

  sig { returns(T::Boolean) }
  def required_deployments?; end

  sig { returns(T::Boolean) }
  def required_linear_history?; end

  sig { returns(T::Boolean) }
  def required_review_thread_resolution?; end

  sig { returns(T::Boolean) }
  def required_signatures?; end

  sig { returns(T::Boolean) }
  def required_status_checks?; end

  sig { returns(T::Boolean) }
  def required_workflow_status_checks?; end

  sig { returns(T::Boolean) }
  def restrict_repo_delete?; end

  sig { returns(T::Boolean) }
  def restrict_repo_visibility?; end

  sig { returns(T::Boolean) }
  def restrict_repository_name?; end

  sig { returns(T::Boolean) }
  def secret_scanning?; end

  sig { returns(T::Boolean) }
  def tag?; end

  sig { returns(T::Boolean) }
  def tag_name_pattern?; end

  sig { returns(T::Boolean) }
  def update?; end

  sig { returns(T::Boolean) }
  def workflow_updates?; end

  sig { returns(T::Boolean) }
  def workflows?; end

  AUTHORIZATION = T.let("AUTHORIZATION", String)
  BRANCH_NAME_PATTERN = T.let("BRANCH_NAME_PATTERN", String)
  CODE_SCANNING = T.let("CODE_SCANNING", String)
  COMMITTER_EMAIL_PATTERN = T.let("COMMITTER_EMAIL_PATTERN", String)
  COMMIT_AUTHOR_EMAIL_PATTERN = T.let("COMMIT_AUTHOR_EMAIL_PATTERN", String)
  COMMIT_MESSAGE_PATTERN = T.let("COMMIT_MESSAGE_PATTERN", String)
  COMMIT_OID = T.let("COMMIT_OID", String)
  CREATION = T.let("CREATION", String)
  DELETION = T.let("DELETION", String)
  FILE_EXTENSION_RESTRICTION = T.let("FILE_EXTENSION_RESTRICTION", String)
  FILE_PATH_RESTRICTION = T.let("FILE_PATH_RESTRICTION", String)
  LOCK_BRANCH = T.let("LOCK_BRANCH", String)
  MAX_FILE_PATH_LENGTH = T.let("MAX_FILE_PATH_LENGTH", String)
  MAX_FILE_SIZE = T.let("MAX_FILE_SIZE", String)
  MAX_REF_UPDATES = T.let("MAX_REF_UPDATES", String)
  MERGE_QUEUE = T.let("MERGE_QUEUE", String)
  MERGE_QUEUE_LOCKED_REF = T.let("MERGE_QUEUE_LOCKED_REF", String)
  NON_FAST_FORWARD = T.let("NON_FAST_FORWARD", String)
  PULL_REQUEST = T.let("PULL_REQUEST", String)
  REPOSITORY_TRANSFER = T.let("REPOSITORY_TRANSFER", String)
  REQUIRED_DEPLOYMENTS = T.let("REQUIRED_DEPLOYMENTS", String)
  REQUIRED_LINEAR_HISTORY = T.let("REQUIRED_LINEAR_HISTORY", String)
  REQUIRED_REVIEW_THREAD_RESOLUTION = T.let("REQUIRED_REVIEW_THREAD_RESOLUTION", String)
  REQUIRED_SIGNATURES = T.let("REQUIRED_SIGNATURES", String)
  REQUIRED_STATUS_CHECKS = T.let("REQUIRED_STATUS_CHECKS", String)
  REQUIRED_WORKFLOW_STATUS_CHECKS = T.let("REQUIRED_WORKFLOW_STATUS_CHECKS", String)
  RESTRICT_REPOSITORY_NAME = T.let("RESTRICT_REPOSITORY_NAME", String)
  RESTRICT_REPO_DELETE = T.let("RESTRICT_REPO_DELETE", String)
  RESTRICT_REPO_VISIBILITY = T.let("RESTRICT_REPO_VISIBILITY", String)
  SECRET_SCANNING = T.let("SECRET_SCANNING", String)
  TAG = T.let("TAG", String)
  TAG_NAME_PATTERN = T.let("TAG_NAME_PATTERN", String)
  UPDATE = T.let("UPDATE", String)
  WORKFLOWS = T.let("WORKFLOWS", String)
  WORKFLOW_UPDATES = T.let("WORKFLOW_UPDATES", String)
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::RepositoryPush`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::RepositoryPush`.

class Hydro::Schemas::Github::V1::RepositoryPush
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      after: T.nilable(String),
      before: T.nilable(String),
      branch_protection_rule: T.nilable(Hydro::Schemas::Github::V1::Entities::BranchProtectionRule),
      changed_files: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::RepositoryPush::ChangedFile], T::Array[Hydro::Schemas::Github::V1::RepositoryPush::ChangedFile])),
      commit_count: T.nilable(Integer),
      commit_oids: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      forced: T.nilable(T::Boolean),
      large: T.nilable(T::Boolean),
      owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      push_id: T.nilable(Integer),
      push_options: T.nilable(T.any(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)], T::Array[T.any(Symbol, Integer)])),
      ref: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      tree_oid: T.nilable(Google::Protobuf::StringValue)
    ).void
  end
  def initialize(actor: nil, after: nil, before: nil, branch_protection_rule: nil, changed_files: T.unsafe(nil), commit_count: nil, commit_oids: T.unsafe(nil), feature_flags: T.unsafe(nil), forced: nil, large: nil, owner: nil, push_id: nil, push_options: T.unsafe(nil), ref: nil, repository: nil, request_context: nil, tree_oid: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(String) }
  def after; end

  sig { params(value: String).void }
  def after=(value); end

  sig { returns(String) }
  def before; end

  sig { params(value: String).void }
  def before=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::BranchProtectionRule)) }
  def branch_protection_rule; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::BranchProtectionRule)).void }
  def branch_protection_rule=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::RepositoryPush::ChangedFile]) }
  def changed_files; end

  sig { params(value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::V1::RepositoryPush::ChangedFile]).void }
  def changed_files=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_after; end

  sig { void }
  def clear_before; end

  sig { void }
  def clear_branch_protection_rule; end

  sig { void }
  def clear_changed_files; end

  sig { void }
  def clear_commit_count; end

  sig { void }
  def clear_commit_oids; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_forced; end

  sig { void }
  def clear_large; end

  sig { void }
  def clear_owner; end

  sig { void }
  def clear_push_id; end

  sig { void }
  def clear_push_options; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_tree_oid; end

  sig { returns(Integer) }
  def commit_count; end

  sig { params(value: Integer).void }
  def commit_count=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def commit_oids; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def commit_oids=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T::Boolean) }
  def forced; end

  sig { params(value: T::Boolean).void }
  def forced=(value); end

  sig { returns(T::Boolean) }
  def large; end

  sig { params(value: T::Boolean).void }
  def large=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def owner=(value); end

  sig { returns(Integer) }
  def push_id; end

  sig { params(value: Integer).void }
  def push_id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]) }
  def push_options; end

  sig { params(value: Google::Protobuf::RepeatedField[T.any(Symbol, Integer)]).void }
  def push_options=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def tree_oid; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def tree_oid=(value); end
end

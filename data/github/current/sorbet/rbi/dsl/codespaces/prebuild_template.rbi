# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Codespaces::PrebuildTemplate`.
# Please instead update this file by running `bin/tapioca dsl Codespaces::PrebuildTemplate`.

class Codespaces::PrebuildTemplate
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def states; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Codespaces::PrebuildTemplate).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def fifth; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Codespaces::PrebuildTemplate) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(T.nilable(T::Enumerator[::Codespaces::PrebuildTemplate]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Codespaces::PrebuildTemplate]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Codespaces::PrebuildTemplate]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Codespaces::PrebuildTemplate) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Codespaces::PrebuildTemplate) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def first!; end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def forty_two; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def forty_two!; end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def fourth; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Codespaces::PrebuildTemplate).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Codespaces::PrebuildTemplate).void)
      ).returns(::Codespaces::PrebuildTemplate)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Codespaces::PrebuildTemplate).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Codespaces::PrebuildTemplate).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def second; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def second!; end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def second_to_last; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def second_to_last!; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def take!; end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def third; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def third!; end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplate)) }
    def third_to_last; end

    sig { returns(::Codespaces::PrebuildTemplate) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def archived!; end

    sig { returns(T::Boolean) }
    def archived?; end

    sig { void }
    def failed!; end

    sig { returns(T::Boolean) }
    def failed?; end

    sig { void }
    def pending!; end

    sig { returns(T::Boolean) }
    def pending?; end

    sig { void }
    def provisioned!; end

    sig { returns(T::Boolean) }
    def provisioned?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Codespaces::PrebuildTemplateBillingEntry)) }
    def billing_entry; end

    sig { params(value: T.nilable(::Codespaces::PrebuildTemplateBillingEntry)).void }
    def billing_entry=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::PrebuildTemplateBillingEntry) }
    def build_billing_entry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::PrebuildConfiguration) }
    def build_configuration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::Plan) }
    def build_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { returns(T.nilable(::Codespaces::PrebuildConfiguration)) }
    def configuration; end

    sig { params(value: T.nilable(::Codespaces::PrebuildConfiguration)).void }
    def configuration=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::PrebuildTemplateBillingEntry) }
    def create_billing_entry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::PrebuildTemplateBillingEntry) }
    def create_billing_entry!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::PrebuildConfiguration) }
    def create_configuration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::PrebuildConfiguration) }
    def create_configuration!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::Plan) }
    def create_plan(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Codespaces::Plan) }
    def create_plan!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { returns(T.nilable(::Codespaces::Plan)) }
    def plan; end

    sig { params(value: T.nilable(::Codespaces::Plan)).void }
    def plan=(value); end

    sig { returns(T.nilable(::Codespaces::PrebuildTemplateBillingEntry)) }
    def reload_billing_entry; end

    sig { returns(T.nilable(::Codespaces::PrebuildConfiguration)) }
    def reload_configuration; end

    sig { returns(T.nilable(::Codespaces::Plan)) }
    def reload_plan; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def archived(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_archived(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_provisioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def provisioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_billing_entry; end

    sig { returns(Promise[T.untyped]) }
    def async_configuration; end

    sig { returns(Promise[T.untyped]) }
    def async_plan; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def branch; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def branch=(value); end

    sig { returns(T::Boolean) }
    def branch?; end

    sig { returns(T.untyped) }
    def branch_before_last_save; end

    sig { returns(T.untyped) }
    def branch_before_type_cast; end

    sig { returns(T::Boolean) }
    def branch_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def branch_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def branch_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def branch_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def branch_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def branch_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def branch_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def branch_previously_was; end

    sig { returns(T.untyped) }
    def branch_was; end

    sig { void }
    def branch_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def codespace_prebuild_configuration_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def codespace_prebuild_configuration_id=(value); end

    sig { returns(T::Boolean) }
    def codespace_prebuild_configuration_id?; end

    sig { returns(T.nilable(::Integer)) }
    def codespace_prebuild_configuration_id_before_last_save; end

    sig { returns(T.untyped) }
    def codespace_prebuild_configuration_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def codespace_prebuild_configuration_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def codespace_prebuild_configuration_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def codespace_prebuild_configuration_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def codespace_prebuild_configuration_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def codespace_prebuild_configuration_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def codespace_prebuild_configuration_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def codespace_prebuild_configuration_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def codespace_prebuild_configuration_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def codespace_prebuild_configuration_id_was; end

    sig { void }
    def codespace_prebuild_configuration_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def devcontainer_path; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def devcontainer_path=(value); end

    sig { returns(T::Boolean) }
    def devcontainer_path?; end

    sig { returns(T.nilable(::String)) }
    def devcontainer_path_before_last_save; end

    sig { returns(T.untyped) }
    def devcontainer_path_before_type_cast; end

    sig { returns(T::Boolean) }
    def devcontainer_path_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def devcontainer_path_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def devcontainer_path_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def devcontainer_path_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def devcontainer_path_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def devcontainer_path_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def devcontainer_path_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def devcontainer_path_previously_was; end

    sig { returns(T.nilable(::String)) }
    def devcontainer_path_was; end

    sig { void }
    def devcontainer_path_will_change!; end

    sig { returns(T.nilable(::String)) }
    def guid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def guid=(value); end

    sig { returns(T::Boolean) }
    def guid?; end

    sig { returns(T.nilable(::String)) }
    def guid_before_last_save; end

    sig { returns(T.untyped) }
    def guid_before_type_cast; end

    sig { returns(T::Boolean) }
    def guid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def guid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def guid_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def guid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def guid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def guid_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def guid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def guid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def guid_was; end

    sig { void }
    def guid_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def location; end

    sig { params(value: ::String).returns(::String) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.nilable(::String)) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def location_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def location_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def location_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::String) }
    def oid; end

    sig { params(value: ::String).returns(::String) }
    def oid=(value); end

    sig { returns(T::Boolean) }
    def oid?; end

    sig { returns(T.nilable(::String)) }
    def oid_before_last_save; end

    sig { returns(T.untyped) }
    def oid_before_type_cast; end

    sig { returns(T::Boolean) }
    def oid_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def oid_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def oid_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def oid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def oid_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def oid_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def oid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def oid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def oid_was; end

    sig { void }
    def oid_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def plan_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def plan_id=(value); end

    sig { returns(T::Boolean) }
    def plan_id?; end

    sig { returns(T.nilable(::Integer)) }
    def plan_id_before_last_save; end

    sig { returns(T.untyped) }
    def plan_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def plan_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def plan_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def plan_id_was; end

    sig { void }
    def plan_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def prebuild_hash; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def prebuild_hash=(value); end

    sig { returns(T::Boolean) }
    def prebuild_hash?; end

    sig { returns(T.nilable(::String)) }
    def prebuild_hash_before_last_save; end

    sig { returns(T.untyped) }
    def prebuild_hash_before_type_cast; end

    sig { returns(T::Boolean) }
    def prebuild_hash_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def prebuild_hash_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def prebuild_hash_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def prebuild_hash_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def prebuild_hash_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def prebuild_hash_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def prebuild_hash_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def prebuild_hash_previously_was; end

    sig { returns(T.nilable(::String)) }
    def prebuild_hash_was; end

    sig { void }
    def prebuild_hash_will_change!; end

    sig { returns(T.nilable(::String)) }
    def provisioning_job_status_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def provisioning_job_status_id=(value); end

    sig { returns(T::Boolean) }
    def provisioning_job_status_id?; end

    sig { returns(T.nilable(::String)) }
    def provisioning_job_status_id_before_last_save; end

    sig { returns(T.untyped) }
    def provisioning_job_status_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def provisioning_job_status_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provisioning_job_status_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provisioning_job_status_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def provisioning_job_status_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def provisioning_job_status_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provisioning_job_status_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def provisioning_job_status_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def provisioning_job_status_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def provisioning_job_status_id_was; end

    sig { void }
    def provisioning_job_status_id_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_branch!; end

    sig { void }
    def restore_codespace_prebuild_configuration_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_devcontainer_path!; end

    sig { void }
    def restore_guid!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_oid!; end

    sig { void }
    def restore_plan_id!; end

    sig { void }
    def restore_prebuild_hash!; end

    sig { void }
    def restore_provisioning_job_status_id!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_sku_name!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_vscs_target!; end

    sig { void }
    def restore_vscs_target_url!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_branch; end

    sig { returns(T::Boolean) }
    def saved_change_to_branch?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_codespace_prebuild_configuration_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_codespace_prebuild_configuration_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_devcontainer_path; end

    sig { returns(T::Boolean) }
    def saved_change_to_devcontainer_path?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_guid; end

    sig { returns(T::Boolean) }
    def saved_change_to_guid?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_oid; end

    sig { returns(T::Boolean) }
    def saved_change_to_oid?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_plan_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_prebuild_hash; end

    sig { returns(T::Boolean) }
    def saved_change_to_prebuild_hash?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_provisioning_job_status_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_provisioning_job_status_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sku_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_sku_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_vscs_target; end

    sig { returns(T::Boolean) }
    def saved_change_to_vscs_target?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_vscs_target_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_vscs_target_url?; end

    sig { returns(::Integer) }
    def sku_name; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sku_name=(value); end

    sig { returns(T::Boolean) }
    def sku_name?; end

    sig { returns(T.nilable(::Integer)) }
    def sku_name_before_last_save; end

    sig { returns(T.untyped) }
    def sku_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def sku_name_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sku_name_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sku_name_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sku_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sku_name_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sku_name_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sku_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sku_name_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sku_name_was; end

    sig { void }
    def sku_name_will_change!; end

    sig { returns(::String) }
    def state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def vscs_target; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def vscs_target=(value); end

    sig { returns(T::Boolean) }
    def vscs_target?; end

    sig { returns(T.nilable(::String)) }
    def vscs_target_before_last_save; end

    sig { returns(T.untyped) }
    def vscs_target_before_type_cast; end

    sig { returns(T::Boolean) }
    def vscs_target_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vscs_target_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vscs_target_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vscs_target_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vscs_target_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vscs_target_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vscs_target_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vscs_target_previously_was; end

    sig { returns(T.nilable(::String)) }
    def vscs_target_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def vscs_target_url=(value); end

    sig { returns(T::Boolean) }
    def vscs_target_url?; end

    sig { returns(T.nilable(::String)) }
    def vscs_target_url_before_last_save; end

    sig { returns(T.untyped) }
    def vscs_target_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def vscs_target_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vscs_target_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vscs_target_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vscs_target_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vscs_target_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def vscs_target_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def vscs_target_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def vscs_target_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def vscs_target_url_was; end

    sig { void }
    def vscs_target_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def vscs_target_was; end

    sig { void }
    def vscs_target_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_branch?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_codespace_prebuild_configuration_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_devcontainer_path?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_guid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_oid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prebuild_hash?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_provisioning_job_status_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sku_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vscs_target?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_vscs_target_url?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def archived(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_archived(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_provisioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def provisioned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Codespaces::PrebuildTemplate } }

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def to_a; end

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Codespaces::PrebuildTemplate } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Codespaces::PrebuildTemplate } }

    sig do
      params(
        records: T.any(::Codespaces::PrebuildTemplate, T::Enumerable[T.any(::Codespaces::PrebuildTemplate, T::Enumerable[::Codespaces::PrebuildTemplate])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Codespaces::PrebuildTemplate, T::Enumerable[T.any(::Codespaces::PrebuildTemplate, T::Enumerable[::Codespaces::PrebuildTemplate])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Codespaces::PrebuildTemplate, T::Enumerable[T.any(::Codespaces::PrebuildTemplate, T::Enumerable[::Codespaces::PrebuildTemplate])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Codespaces::PrebuildTemplate, T::Enumerable[T.any(::Codespaces::PrebuildTemplate, T::Enumerable[::Codespaces::PrebuildTemplate])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Codespaces::PrebuildTemplate, T::Enumerable[T.any(::Codespaces::PrebuildTemplate, T::Enumerable[::Codespaces::PrebuildTemplate])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Codespaces::PrebuildTemplate, T::Enumerable[T.any(::Codespaces::PrebuildTemplate, T::Enumerable[::Codespaces::PrebuildTemplate])])
      ).returns(T::Array[::Codespaces::PrebuildTemplate])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def target; end

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def to_a; end

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Codespaces::PrebuildTemplate } }

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def to_a; end

    sig { returns(T::Array[::Codespaces::PrebuildTemplate]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Codespaces::PrebuildTemplate } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::CommentToggleMinimize`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::CommentToggleMinimize`.

class Hydro::Schemas::Github::V1::CommentToggleMinimize
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      actor_was_staff: T.nilable(T::Boolean),
      classifier: T.nilable(T.any(Symbol, Integer)),
      comment_id: T.nilable(Integer),
      comment_type: T.nilable(T.any(Symbol, Integer)),
      event_type: T.nilable(T.any(Symbol, Integer)),
      reason: T.nilable(String),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(actor: nil, actor_was_staff: nil, classifier: nil, comment_id: nil, comment_type: nil, event_type: nil, reason: nil, request_context: nil, user: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T::Boolean) }
  def actor_was_staff; end

  sig { params(value: T::Boolean).void }
  def actor_was_staff=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def classifier; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def classifier=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_actor_was_staff; end

  sig { void }
  def clear_classifier; end

  sig { void }
  def clear_comment_id; end

  sig { void }
  def clear_comment_type; end

  sig { void }
  def clear_event_type; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user; end

  sig { returns(Integer) }
  def comment_id; end

  sig { params(value: Integer).void }
  def comment_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def comment_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def comment_type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def event_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def event_type=(value); end

  sig { returns(String) }
  def reason; end

  sig { params(value: String).void }
  def reason=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

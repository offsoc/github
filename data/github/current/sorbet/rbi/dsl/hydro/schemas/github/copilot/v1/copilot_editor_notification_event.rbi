# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V1::CopilotEditorNotificationEvent`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V1::CopilotEditorNotificationEvent`.

class Hydro::Schemas::Github::Copilot::V1::CopilotEditorNotificationEvent
  sig do
    params(
      copilot_user_details: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails),
      editor_plugin_version: T.nilable(String),
      editor_version: T.nilable(String),
      notification_event_name: T.nilable(String),
      notification_event_type: T.nilable(T.any(Symbol, Integer)),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(copilot_user_details: nil, editor_plugin_version: nil, editor_version: nil, notification_event_name: nil, notification_event_type: nil, request_context: nil, user: nil); end

  sig { void }
  def clear_copilot_user_details; end

  sig { void }
  def clear_editor_plugin_version; end

  sig { void }
  def clear_editor_version; end

  sig { void }
  def clear_notification_event_name; end

  sig { void }
  def clear_notification_event_type; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_user; end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)) }
  def copilot_user_details; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)).void }
  def copilot_user_details=(value); end

  sig { returns(String) }
  def editor_plugin_version; end

  sig { params(value: String).void }
  def editor_plugin_version=(value); end

  sig { returns(String) }
  def editor_version; end

  sig { params(value: String).void }
  def editor_version=(value); end

  sig { returns(String) }
  def notification_event_name; end

  sig { params(value: String).void }
  def notification_event_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def notification_event_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def notification_event_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Billing::BillingTransaction`.
# Please instead update this file by running `bin/tapioca dsl Billing::BillingTransaction`.

class Billing::BillingTransaction
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def last_statuses; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def payment_types; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def platforms; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def renewal_frequencies; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def fifth; end

    sig { returns(::Billing::BillingTransaction) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Billing::BillingTransaction)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Billing::BillingTransaction) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(T.nilable(T::Enumerator[::Billing::BillingTransaction]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Billing::BillingTransaction]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Billing::BillingTransaction]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Billing::BillingTransaction)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Billing::BillingTransaction) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Billing::BillingTransaction) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Billing::BillingTransaction) }
    def first!; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def forty_two; end

    sig { returns(::Billing::BillingTransaction) }
    def forty_two!; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def fourth; end

    sig { returns(::Billing::BillingTransaction) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Billing::BillingTransaction) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Billing::BillingTransaction).void)
      ).returns(::Billing::BillingTransaction)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Billing::BillingTransaction).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def second; end

    sig { returns(::Billing::BillingTransaction) }
    def second!; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def second_to_last; end

    sig { returns(::Billing::BillingTransaction) }
    def second_to_last!; end

    sig { returns(::Billing::BillingTransaction) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Billing::BillingTransaction) }
    def take!; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def third; end

    sig { returns(::Billing::BillingTransaction) }
    def third!; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def third_to_last; end

    sig { returns(::Billing::BillingTransaction) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def authorization_cancelled!; end

    sig { returns(T::Boolean) }
    def authorization_cancelled?; end

    sig { void }
    def authorization_expired!; end

    sig { returns(T::Boolean) }
    def authorization_expired?; end

    sig { void }
    def authorized!; end

    sig { returns(T::Boolean) }
    def authorized?; end

    sig { void }
    def authorizing!; end

    sig { returns(T::Boolean) }
    def authorizing?; end

    sig { void }
    def braintree!; end

    sig { returns(T::Boolean) }
    def braintree?; end

    sig { void }
    def charged_back!; end

    sig { returns(T::Boolean) }
    def charged_back?; end

    sig { void }
    def credit_balance_adjusted!; end

    sig { returns(T::Boolean) }
    def credit_balance_adjusted?; end

    sig { void }
    def credit_card!; end

    sig { returns(T::Boolean) }
    def credit_card?; end

    sig { void }
    def failed!; end

    sig { returns(T::Boolean) }
    def failed?; end

    sig { void }
    def gateway_rejected!; end

    sig { returns(T::Boolean) }
    def gateway_rejected?; end

    sig { void }
    def legacy_braintree!; end

    sig { returns(T::Boolean) }
    def legacy_braintree?; end

    sig { void }
    def monthly!; end

    sig { returns(T::Boolean) }
    def monthly?; end

    sig { void }
    def no_charge!; end

    sig { returns(T::Boolean) }
    def no_charge?; end

    sig { void }
    def paypal!; end

    sig { returns(T::Boolean) }
    def paypal?; end

    sig { void }
    def processor_declined!; end

    sig { returns(T::Boolean) }
    def processor_declined?; end

    sig { void }
    def settled!; end

    sig { returns(T::Boolean) }
    def settled?; end

    sig { void }
    def settlement_declined!; end

    sig { returns(T::Boolean) }
    def settlement_declined?; end

    sig { void }
    def settlement_pending!; end

    sig { returns(T::Boolean) }
    def settlement_pending?; end

    sig { void }
    def settling!; end

    sig { returns(T::Boolean) }
    def settling?; end

    sig { void }
    def submitted_for_settlement!; end

    sig { returns(T::Boolean) }
    def submitted_for_settlement?; end

    sig { void }
    def voided!; end

    sig { returns(T::Boolean) }
    def voided?; end

    sig { void }
    def yearly!; end

    sig { returns(T::Boolean) }
    def yearly?; end

    sig { void }
    def zuora!; end

    sig { returns(T::Boolean) }
    def zuora?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def build_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_live_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def build_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def build_refund(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def build_sale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Customer) }
    def create_customer!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_live_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_live_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::PlanSubscription) }
    def create_plan_subscription!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_refund(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_refund!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_sale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction) }
    def create_sale!(*args, &blk); end

    sig { returns(T.nilable(::Customer)) }
    def customer; end

    sig { params(value: T.nilable(::Customer)).void }
    def customer=(value); end

    sig { returns(T::Array[T.untyped]) }
    def dispute_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def dispute_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::BillingTransaction` class because it declared `has_many :disputes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::Dispute::PrivateCollectionProxy) }
    def disputes; end

    sig { params(value: T::Enumerable[::Billing::Dispute]).void }
    def disputes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def line_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def line_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::BillingTransaction` class because it declared `has_many :line_items`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransaction::LineItem::PrivateCollectionProxy) }
    def line_items; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction::LineItem]).void }
    def line_items=(value); end

    sig { returns(T.nilable(::User)) }
    def live_user; end

    sig { params(value: T.nilable(::User)).void }
    def live_user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def note_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def note_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::BillingTransaction` class because it declared `has_many :notes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransactionNote::PrivateCollectionProxy) }
    def notes; end

    sig { params(value: T::Enumerable[::Billing::BillingTransactionNote]).void }
    def notes=(value); end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def plan_subscription; end

    sig { params(value: T.nilable(::Billing::PlanSubscription)).void }
    def plan_subscription=(value); end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def refund; end

    sig { params(value: T.nilable(::Billing::BillingTransaction)).void }
    def refund=(value); end

    sig { returns(T.nilable(::Customer)) }
    def reload_customer; end

    sig { returns(T.nilable(::User)) }
    def reload_live_user; end

    sig { returns(T.nilable(::Billing::PlanSubscription)) }
    def reload_plan_subscription; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def reload_refund; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def reload_sale; end

    sig { returns(T.nilable(::Billing::BillingTransaction)) }
    def sale; end

    sig { params(value: T.nilable(::Billing::BillingTransaction)).void }
    def sale=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sponsorship_stripe_radar_risk_score_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sponsorship_stripe_radar_risk_score_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::BillingTransaction` class because it declared `has_many :sponsorship_stripe_radar_risk_scores`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SponsorshipStripeRadarRiskScore::PrivateCollectionProxy) }
    def sponsorship_stripe_radar_risk_scores; end

    sig { params(value: T::Enumerable[::SponsorshipStripeRadarRiskScore]).void }
    def sponsorship_stripe_radar_risk_scores=(value); end

    sig { returns(T::Array[T.untyped]) }
    def status_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def status_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::BillingTransaction` class because it declared `has_many :statuses`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransactionStatus::PrivateCollectionProxy) }
    def statuses; end

    sig { params(value: T::Enumerable[::Billing::BillingTransactionStatus]).void }
    def statuses=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tax_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tax_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Billing::BillingTransaction` class because it declared `has_many :tax_items, through: :line_items`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Billing::BillingTransaction::TaxItem::PrivateCollectionProxy) }
    def tax_items; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction::TaxItem]).void }
    def tax_items=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def authorization_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def authorization_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def authorizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def authorized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def authorizing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def charged_back(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_at_or_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def credit_balance_adjusted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def credit_card(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def current(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def current_authorizations_for_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def descending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_authorizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_no_charges(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_prorated_charges(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def first_time_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_zuora_transaction_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def gateway_rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def legacy_braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def monthly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def non_refunds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_authorization_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_authorization_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_authorized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_authorizing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_charged_back(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_credit_balance_adjusted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_credit_card(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_gateway_rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_legacy_braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_monthly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_no_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_paypal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_processor_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_settled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_settlement_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_settlement_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_settling(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_submitted_for_settlement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_yearly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_zuora(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paypal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending_status_updates(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def processor_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def refunds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sales(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def settled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def settlement_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def settlement_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def settling(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def submitted_for_settlement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def successful(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def yearly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def zuora(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_customer; end

    sig { returns(Promise[T.untyped]) }
    def async_disputes; end

    sig { returns(Promise[T.untyped]) }
    def async_line_items; end

    sig { returns(Promise[T.untyped]) }
    def async_live_user; end

    sig { returns(Promise[T.untyped]) }
    def async_notes; end

    sig { returns(Promise[T.untyped]) }
    def async_plan_subscription; end

    sig { returns(Promise[T.untyped]) }
    def async_refund; end

    sig { returns(Promise[T.untyped]) }
    def async_sale; end

    sig { returns(Promise[T.untyped]) }
    def async_sponsorship_stripe_radar_risk_scores; end

    sig { returns(Promise[T.untyped]) }
    def async_statuses; end

    sig { returns(Promise[T.untyped]) }
    def async_tax_items; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def amount_in_cents=(value); end

    sig { returns(T::Boolean) }
    def amount_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def amount_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_in_cents_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def amount_in_cents_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def amount_in_cents_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def amount_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def amount_in_cents_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def amount_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_cents_was; end

    sig { void }
    def amount_in_cents_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def arr_in_cents=(value); end

    sig { returns(T::Boolean) }
    def arr_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def arr_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def arr_in_cents_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def arr_in_cents_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def arr_in_cents_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def arr_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def arr_in_cents_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def arr_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def arr_in_cents_was; end

    sig { void }
    def arr_in_cents_will_change!; end

    sig { returns(::Integer) }
    def asset_pack_unit_price_in_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def asset_pack_unit_price_in_cents=(value); end

    sig { returns(T::Boolean) }
    def asset_pack_unit_price_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def asset_pack_unit_price_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def asset_pack_unit_price_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def asset_pack_unit_price_in_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_pack_unit_price_in_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_pack_unit_price_in_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def asset_pack_unit_price_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def asset_pack_unit_price_in_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_pack_unit_price_in_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def asset_pack_unit_price_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def asset_pack_unit_price_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def asset_pack_unit_price_in_cents_was; end

    sig { void }
    def asset_pack_unit_price_in_cents_will_change!; end

    sig { returns(::Integer) }
    def asset_packs_delta; end

    sig { params(value: ::Integer).returns(::Integer) }
    def asset_packs_delta=(value); end

    sig { returns(T::Boolean) }
    def asset_packs_delta?; end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_delta_before_last_save; end

    sig { returns(T.untyped) }
    def asset_packs_delta_before_type_cast; end

    sig { returns(T::Boolean) }
    def asset_packs_delta_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_packs_delta_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_packs_delta_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def asset_packs_delta_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_delta_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_packs_delta_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def asset_packs_delta_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_delta_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_delta_was; end

    sig { void }
    def asset_packs_delta_will_change!; end

    sig { returns(::Integer) }
    def asset_packs_total; end

    sig { params(value: ::Integer).returns(::Integer) }
    def asset_packs_total=(value); end

    sig { returns(T::Boolean) }
    def asset_packs_total?; end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_total_before_last_save; end

    sig { returns(T.untyped) }
    def asset_packs_total_before_type_cast; end

    sig { returns(T::Boolean) }
    def asset_packs_total_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_packs_total_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_packs_total_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def asset_packs_total_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_total_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def asset_packs_total_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def asset_packs_total_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_total_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def asset_packs_total_was; end

    sig { void }
    def asset_packs_total_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def bank_identification_number; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def bank_identification_number=(value); end

    sig { returns(T::Boolean) }
    def bank_identification_number?; end

    sig { returns(T.nilable(::Integer)) }
    def bank_identification_number_before_last_save; end

    sig { returns(T.untyped) }
    def bank_identification_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def bank_identification_number_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bank_identification_number_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bank_identification_number_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bank_identification_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bank_identification_number_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bank_identification_number_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bank_identification_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bank_identification_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def bank_identification_number_was; end

    sig { void }
    def bank_identification_number_will_change!; end

    sig { returns(T.nilable(::String)) }
    def billing_email_address; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def billing_email_address=(value); end

    sig { returns(T::Boolean) }
    def billing_email_address?; end

    sig { returns(T.nilable(::String)) }
    def billing_email_address_before_last_save; end

    sig { returns(T.untyped) }
    def billing_email_address_before_type_cast; end

    sig { returns(T::Boolean) }
    def billing_email_address_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_email_address_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_email_address_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_email_address_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_email_address_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def billing_email_address_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def billing_email_address_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def billing_email_address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def billing_email_address_was; end

    sig { void }
    def billing_email_address_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable(::String)) }
    def country_of_issuance; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country_of_issuance=(value); end

    sig { returns(T::Boolean) }
    def country_of_issuance?; end

    sig { returns(T.nilable(::String)) }
    def country_of_issuance_before_last_save; end

    sig { returns(T.untyped) }
    def country_of_issuance_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_of_issuance_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_of_issuance_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_of_issuance_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_of_issuance_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_of_issuance_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_of_issuance_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_of_issuance_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_of_issuance_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_of_issuance_was; end

    sig { void }
    def country_of_issuance_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(T.nilable(::String)) }
    def coupon_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def coupon_name=(value); end

    sig { returns(T::Boolean) }
    def coupon_name?; end

    sig { returns(T.nilable(::String)) }
    def coupon_name_before_last_save; end

    sig { returns(T.untyped) }
    def coupon_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def coupon_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def coupon_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def coupon_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def coupon_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def coupon_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def coupon_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def coupon_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def coupon_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def coupon_name_was; end

    sig { void }
    def coupon_name_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def customer_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def customer_id=(value); end

    sig { returns(T::Boolean) }
    def customer_id?; end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def customer_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def customer_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def customer_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def customer_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def customer_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def customer_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def customer_id_was; end

    sig { void }
    def customer_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def discount_in_cents; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def discount_in_cents=(value); end

    sig { returns(T::Boolean) }
    def discount_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def discount_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def discount_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def discount_in_cents_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def discount_in_cents_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def discount_in_cents_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def discount_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discount_in_cents_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def discount_in_cents_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def discount_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def discount_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def discount_in_cents_was; end

    sig { void }
    def discount_in_cents_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_four; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_four=(value); end

    sig { returns(T::Boolean) }
    def last_four?; end

    sig { returns(T.nilable(::String)) }
    def last_four_before_last_save; end

    sig { returns(T.untyped) }
    def last_four_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_four_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_four_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_four_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_four_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_four_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_four_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_four_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_four_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_four_was; end

    sig { void }
    def last_four_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def last_status=(value); end

    sig { returns(T::Boolean) }
    def last_status?; end

    sig { returns(T.nilable(::String)) }
    def last_status_before_last_save; end

    sig { returns(T.untyped) }
    def last_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_status_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def last_status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_status_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def last_status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_status_was; end

    sig { void }
    def last_status_will_change!; end

    sig { returns(T.nilable(::String)) }
    def old_plan_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def old_plan_name=(value); end

    sig { returns(T::Boolean) }
    def old_plan_name?; end

    sig { returns(T.nilable(::String)) }
    def old_plan_name_before_last_save; end

    sig { returns(T.untyped) }
    def old_plan_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def old_plan_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def old_plan_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def old_plan_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def old_plan_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def old_plan_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def old_plan_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def old_plan_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def old_plan_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def old_plan_name_was; end

    sig { void }
    def old_plan_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def old_renewal_frequency; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def old_renewal_frequency=(value); end

    sig { returns(T::Boolean) }
    def old_renewal_frequency?; end

    sig { returns(T.nilable(::Integer)) }
    def old_renewal_frequency_before_last_save; end

    sig { returns(T.untyped) }
    def old_renewal_frequency_before_type_cast; end

    sig { returns(T::Boolean) }
    def old_renewal_frequency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def old_renewal_frequency_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def old_renewal_frequency_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def old_renewal_frequency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def old_renewal_frequency_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def old_renewal_frequency_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def old_renewal_frequency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def old_renewal_frequency_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def old_renewal_frequency_was; end

    sig { void }
    def old_renewal_frequency_will_change!; end

    sig { returns(T.nilable(::String)) }
    def payment_type; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def payment_type=(value); end

    sig { returns(T::Boolean) }
    def payment_type?; end

    sig { returns(T.nilable(::String)) }
    def payment_type_before_last_save; end

    sig { returns(T.untyped) }
    def payment_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def payment_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_type_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def payment_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payment_type_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def payment_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payment_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payment_type_was; end

    sig { void }
    def payment_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def paypal_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def paypal_email=(value); end

    sig { returns(T::Boolean) }
    def paypal_email?; end

    sig { returns(T.nilable(::String)) }
    def paypal_email_before_last_save; end

    sig { returns(T.untyped) }
    def paypal_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def paypal_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def paypal_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def paypal_email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def paypal_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def paypal_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def paypal_email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def paypal_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def paypal_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def paypal_email_was; end

    sig { void }
    def paypal_email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def plan_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def plan_name=(value); end

    sig { returns(T::Boolean) }
    def plan_name?; end

    sig { returns(T.nilable(::String)) }
    def plan_name_before_last_save; end

    sig { returns(T.untyped) }
    def plan_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def plan_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def plan_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def plan_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def plan_name_was; end

    sig { void }
    def plan_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def plan_price_in_cents; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def plan_price_in_cents=(value); end

    sig { returns(T::Boolean) }
    def plan_price_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def plan_price_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def plan_price_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_price_in_cents_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_price_in_cents_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_price_in_cents_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def plan_price_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_price_in_cents_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_price_in_cents_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def plan_price_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_price_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def plan_price_in_cents_was; end

    sig { void }
    def plan_price_in_cents_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def plan_subscription_id=(value); end

    sig { returns(T::Boolean) }
    def plan_subscription_id?; end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_before_last_save; end

    sig { returns(T.untyped) }
    def plan_subscription_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def plan_subscription_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_subscription_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_subscription_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def plan_subscription_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def plan_subscription_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def plan_subscription_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def plan_subscription_id_was; end

    sig { void }
    def plan_subscription_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def platform; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def platform=(value); end

    sig { returns(T::Boolean) }
    def platform?; end

    sig { returns(T.nilable(::String)) }
    def platform_before_last_save; end

    sig { returns(T.untyped) }
    def platform_before_type_cast; end

    sig { returns(T::Boolean) }
    def platform_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def platform_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def platform_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def platform_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def platform_previously_was; end

    sig { returns(T.nilable(::String)) }
    def platform_transaction_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def platform_transaction_id=(value); end

    sig { returns(T::Boolean) }
    def platform_transaction_id?; end

    sig { returns(T.nilable(::String)) }
    def platform_transaction_id_before_last_save; end

    sig { returns(T.untyped) }
    def platform_transaction_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def platform_transaction_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_transaction_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_transaction_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def platform_transaction_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def platform_transaction_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def platform_transaction_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def platform_transaction_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def platform_transaction_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def platform_transaction_id_was; end

    sig { void }
    def platform_transaction_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def platform_was; end

    sig { void }
    def platform_will_change!; end

    sig { returns(T.nilable(::String)) }
    def postal_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def postal_code=(value); end

    sig { returns(T::Boolean) }
    def postal_code?; end

    sig { returns(T.nilable(::String)) }
    def postal_code_before_last_save; end

    sig { returns(T.untyped) }
    def postal_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def postal_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postal_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postal_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def postal_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def postal_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postal_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def postal_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def postal_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def postal_code_was; end

    sig { void }
    def postal_code_will_change!; end

    sig { returns(::String) }
    def product; end

    sig { params(value: ::String).returns(::String) }
    def product=(value); end

    sig { returns(T::Boolean) }
    def product?; end

    sig { returns(T.nilable(::String)) }
    def product_before_last_save; end

    sig { returns(T.untyped) }
    def product_before_type_cast; end

    sig { returns(T::Boolean) }
    def product_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def product_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def product_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def product_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def product_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def product_previously_was; end

    sig { returns(T.nilable(::String)) }
    def product_was; end

    sig { void }
    def product_will_change!; end

    sig { returns(::Integer) }
    def prorated_days; end

    sig { params(value: ::Integer).returns(::Integer) }
    def prorated_days=(value); end

    sig { returns(T::Boolean) }
    def prorated_days?; end

    sig { returns(T.nilable(::Integer)) }
    def prorated_days_before_last_save; end

    sig { returns(T.untyped) }
    def prorated_days_before_type_cast; end

    sig { returns(T::Boolean) }
    def prorated_days_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prorated_days_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prorated_days_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def prorated_days_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def prorated_days_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prorated_days_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def prorated_days_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def prorated_days_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def prorated_days_was; end

    sig { void }
    def prorated_days_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region=(value); end

    sig { returns(T::Boolean) }
    def region?; end

    sig { returns(T.nilable(::String)) }
    def region_before_last_save; end

    sig { returns(T.untyped) }
    def region_before_type_cast; end

    sig { returns(T::Boolean) }
    def region_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region_was; end

    sig { void }
    def region_will_change!; end

    sig { returns(T.nilable(::String)) }
    def renewal_frequency; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def renewal_frequency=(value); end

    sig { returns(T::Boolean) }
    def renewal_frequency?; end

    sig { returns(T.nilable(::String)) }
    def renewal_frequency_before_last_save; end

    sig { returns(T.untyped) }
    def renewal_frequency_before_type_cast; end

    sig { returns(T::Boolean) }
    def renewal_frequency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def renewal_frequency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def renewal_frequency_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def renewal_frequency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def renewal_frequency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def renewal_frequency_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def renewal_frequency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def renewal_frequency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def renewal_frequency_was; end

    sig { void }
    def renewal_frequency_will_change!; end

    sig { void }
    def restore_amount_in_cents!; end

    sig { void }
    def restore_arr_in_cents!; end

    sig { void }
    def restore_asset_pack_unit_price_in_cents!; end

    sig { void }
    def restore_asset_packs_delta!; end

    sig { void }
    def restore_asset_packs_total!; end

    sig { void }
    def restore_bank_identification_number!; end

    sig { void }
    def restore_billing_email_address!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_country_of_issuance!; end

    sig { void }
    def restore_coupon_name!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_customer_id!; end

    sig { void }
    def restore_discount_in_cents!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_four!; end

    sig { void }
    def restore_last_status!; end

    sig { void }
    def restore_old_plan_name!; end

    sig { void }
    def restore_old_renewal_frequency!; end

    sig { void }
    def restore_payment_type!; end

    sig { void }
    def restore_paypal_email!; end

    sig { void }
    def restore_plan_name!; end

    sig { void }
    def restore_plan_price_in_cents!; end

    sig { void }
    def restore_plan_subscription_id!; end

    sig { void }
    def restore_platform!; end

    sig { void }
    def restore_platform_transaction_id!; end

    sig { void }
    def restore_postal_code!; end

    sig { void }
    def restore_product!; end

    sig { void }
    def restore_prorated_days!; end

    sig { void }
    def restore_region!; end

    sig { void }
    def restore_renewal_frequency!; end

    sig { void }
    def restore_sale_transaction_id!; end

    sig { void }
    def restore_seats_delta!; end

    sig { void }
    def restore_seats_total!; end

    sig { void }
    def restore_service_ends_at!; end

    sig { void }
    def restore_settlement_batch_id!; end

    sig { void }
    def restore_transaction_id!; end

    sig { void }
    def restore_transaction_type!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_created_at!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_user_login!; end

    sig { void }
    def restore_user_type!; end

    sig { void }
    def restore_volume_discount!; end

    sig { void }
    def restore_volume_discount_in_cents!; end

    sig { returns(T.nilable(::String)) }
    def sale_transaction_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def sale_transaction_id=(value); end

    sig { returns(T::Boolean) }
    def sale_transaction_id?; end

    sig { returns(T.nilable(::String)) }
    def sale_transaction_id_before_last_save; end

    sig { returns(T.untyped) }
    def sale_transaction_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sale_transaction_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sale_transaction_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sale_transaction_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sale_transaction_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sale_transaction_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sale_transaction_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sale_transaction_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sale_transaction_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def sale_transaction_id_was; end

    sig { void }
    def sale_transaction_id_will_change!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_amount_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_amount_in_cents?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_arr_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_arr_in_cents?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_asset_pack_unit_price_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_asset_pack_unit_price_in_cents?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_asset_packs_delta; end

    sig { returns(T::Boolean) }
    def saved_change_to_asset_packs_delta?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_asset_packs_total; end

    sig { returns(T::Boolean) }
    def saved_change_to_asset_packs_total?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_bank_identification_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_bank_identification_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_billing_email_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_billing_email_address?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country_of_issuance; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_of_issuance?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_coupon_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_coupon_name?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_customer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_customer_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_discount_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_discount_in_cents?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_four; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_four?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_status?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_old_plan_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_old_plan_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_old_renewal_frequency; end

    sig { returns(T::Boolean) }
    def saved_change_to_old_renewal_frequency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_payment_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_payment_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_paypal_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_paypal_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_plan_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_plan_price_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_price_in_cents?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_plan_subscription_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_plan_subscription_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_platform; end

    sig { returns(T::Boolean) }
    def saved_change_to_platform?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_platform_transaction_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_platform_transaction_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_postal_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_postal_code?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_product; end

    sig { returns(T::Boolean) }
    def saved_change_to_product?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_prorated_days; end

    sig { returns(T::Boolean) }
    def saved_change_to_prorated_days?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region; end

    sig { returns(T::Boolean) }
    def saved_change_to_region?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_renewal_frequency; end

    sig { returns(T::Boolean) }
    def saved_change_to_renewal_frequency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_sale_transaction_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sale_transaction_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_seats_delta; end

    sig { returns(T::Boolean) }
    def saved_change_to_seats_delta?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_seats_total; end

    sig { returns(T::Boolean) }
    def saved_change_to_seats_total?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_service_ends_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_service_ends_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_settlement_batch_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_settlement_batch_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_transaction_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_transaction_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_transaction_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_transaction_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_user_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_user_login; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_login?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_user_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_type?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_volume_discount; end

    sig { returns(T::Boolean) }
    def saved_change_to_volume_discount?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_volume_discount_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_volume_discount_in_cents?; end

    sig { returns(::Integer) }
    def seats_delta; end

    sig { params(value: ::Integer).returns(::Integer) }
    def seats_delta=(value); end

    sig { returns(T::Boolean) }
    def seats_delta?; end

    sig { returns(T.nilable(::Integer)) }
    def seats_delta_before_last_save; end

    sig { returns(T.untyped) }
    def seats_delta_before_type_cast; end

    sig { returns(T::Boolean) }
    def seats_delta_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_delta_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_delta_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_delta_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_delta_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_delta_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_delta_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_delta_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def seats_delta_was; end

    sig { void }
    def seats_delta_will_change!; end

    sig { returns(::Integer) }
    def seats_total; end

    sig { params(value: ::Integer).returns(::Integer) }
    def seats_total=(value); end

    sig { returns(T::Boolean) }
    def seats_total?; end

    sig { returns(T.nilable(::Integer)) }
    def seats_total_before_last_save; end

    sig { returns(T.untyped) }
    def seats_total_before_type_cast; end

    sig { returns(T::Boolean) }
    def seats_total_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_total_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_total_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_total_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_total_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def seats_total_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def seats_total_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def seats_total_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def seats_total_was; end

    sig { void }
    def seats_total_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def service_ends_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def service_ends_at=(value); end

    sig { returns(T::Boolean) }
    def service_ends_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def service_ends_at_before_last_save; end

    sig { returns(T.untyped) }
    def service_ends_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def service_ends_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def service_ends_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def service_ends_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def service_ends_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def service_ends_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def service_ends_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def service_ends_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def service_ends_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def service_ends_at_was; end

    sig { void }
    def service_ends_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def settlement_batch_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def settlement_batch_id=(value); end

    sig { returns(T::Boolean) }
    def settlement_batch_id?; end

    sig { returns(T.nilable(::String)) }
    def settlement_batch_id_before_last_save; end

    sig { returns(T.untyped) }
    def settlement_batch_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def settlement_batch_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def settlement_batch_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def settlement_batch_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def settlement_batch_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def settlement_batch_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def settlement_batch_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def settlement_batch_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def settlement_batch_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def settlement_batch_id_was; end

    sig { void }
    def settlement_batch_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def transaction_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def transaction_id=(value); end

    sig { returns(T::Boolean) }
    def transaction_id?; end

    sig { returns(T.nilable(::String)) }
    def transaction_id_before_last_save; end

    sig { returns(T.untyped) }
    def transaction_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def transaction_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def transaction_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def transaction_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def transaction_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def transaction_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def transaction_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def transaction_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def transaction_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def transaction_id_was; end

    sig { void }
    def transaction_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def transaction_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def transaction_type=(value); end

    sig { returns(T::Boolean) }
    def transaction_type?; end

    sig { returns(T.nilable(::String)) }
    def transaction_type_before_last_save; end

    sig { returns(T.untyped) }
    def transaction_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def transaction_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def transaction_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def transaction_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def transaction_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def transaction_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def transaction_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def transaction_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def transaction_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def transaction_type_was; end

    sig { void }
    def transaction_type_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_created_at=(value); end

    sig { returns(T::Boolean) }
    def user_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def user_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def user_created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def user_created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def user_created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def user_created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def user_created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def user_created_at_was; end

    sig { void }
    def user_created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def user_login; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def user_login=(value); end

    sig { returns(T::Boolean) }
    def user_login?; end

    sig { returns(T.nilable(::String)) }
    def user_login_before_last_save; end

    sig { returns(T.untyped) }
    def user_login_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_login_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_login_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_login_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def user_login_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_login_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_login_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def user_login_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_login_previously_was; end

    sig { returns(T.nilable(::String)) }
    def user_login_was; end

    sig { void }
    def user_login_will_change!; end

    sig { returns(T.nilable(::String)) }
    def user_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def user_type=(value); end

    sig { returns(T::Boolean) }
    def user_type?; end

    sig { returns(T.nilable(::String)) }
    def user_type_before_last_save; end

    sig { returns(T.untyped) }
    def user_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def user_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def user_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def user_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def user_type_was; end

    sig { void }
    def user_type_will_change!; end

    sig { returns(::Integer) }
    def volume_discount; end

    sig { params(value: ::Integer).returns(::Integer) }
    def volume_discount=(value); end

    sig { returns(T::Boolean) }
    def volume_discount?; end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_before_last_save; end

    sig { returns(T.untyped) }
    def volume_discount_before_type_cast; end

    sig { returns(T::Boolean) }
    def volume_discount_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def volume_discount_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def volume_discount_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def volume_discount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::Integer) }
    def volume_discount_in_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def volume_discount_in_cents=(value); end

    sig { returns(T::Boolean) }
    def volume_discount_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def volume_discount_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def volume_discount_in_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def volume_discount_in_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def volume_discount_in_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def volume_discount_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_in_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def volume_discount_in_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def volume_discount_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_in_cents_was; end

    sig { void }
    def volume_discount_in_cents_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def volume_discount_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def volume_discount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def volume_discount_was; end

    sig { void }
    def volume_discount_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_amount_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_arr_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_asset_pack_unit_price_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_asset_packs_delta?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_asset_packs_total?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bank_identification_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_billing_email_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_of_issuance?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_coupon_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_customer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_discount_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_four?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_old_plan_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_old_renewal_frequency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payment_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_paypal_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_price_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_plan_subscription_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_platform?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_platform_transaction_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_postal_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_product?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prorated_days?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_renewal_frequency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sale_transaction_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_seats_delta?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_seats_total?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_service_ends_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_settlement_batch_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_transaction_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_transaction_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_login?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_volume_discount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_volume_discount_in_cents?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def authorization_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def authorization_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def authorizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def authorized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def authorizing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def charged_back(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_at_or_after(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created_before(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def credit_balance_adjusted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def credit_card(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def current(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def current_authorizations_for_customer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def descending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_authorizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_no_charges(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_prorated_charges(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def first_time_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_sponsors_plan_subscription(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_transaction(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_zuora_transaction_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def gateway_rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def legacy_braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def monthly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def non_refunds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_authorization_cancelled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_authorization_expired(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_authorized(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_authorizing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_charged_back(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_credit_balance_adjusted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_credit_card(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_failed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_gateway_rejected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_legacy_braintree(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_monthly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_no_charge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_paypal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_processor_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_settled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_settlement_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_settlement_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_settling(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_submitted_for_settlement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_yearly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_zuora(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paypal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending_status_updates(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def processor_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def refunds(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sales(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def settled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def settlement_declined(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def settlement_pending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def settling(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def submitted_for_settlement(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def successful(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def voided(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def yearly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def zuora(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::BillingTransaction } }

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def to_a; end

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Billing::BillingTransaction } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Billing::BillingTransaction } }

    sig do
      params(
        records: T.any(::Billing::BillingTransaction, T::Enumerable[T.any(::Billing::BillingTransaction, T::Enumerable[::Billing::BillingTransaction])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction, T::Enumerable[T.any(::Billing::BillingTransaction, T::Enumerable[::Billing::BillingTransaction])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction, T::Enumerable[T.any(::Billing::BillingTransaction, T::Enumerable[::Billing::BillingTransaction])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction, T::Enumerable[T.any(::Billing::BillingTransaction, T::Enumerable[::Billing::BillingTransaction])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Billing::BillingTransaction, T::Enumerable[T.any(::Billing::BillingTransaction, T::Enumerable[::Billing::BillingTransaction])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Billing::BillingTransaction, T::Enumerable[T.any(::Billing::BillingTransaction, T::Enumerable[::Billing::BillingTransaction])])
      ).returns(T::Array[::Billing::BillingTransaction])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def target; end

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def to_a; end

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Billing::BillingTransaction } }

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def to_a; end

    sig { returns(T::Array[::Billing::BillingTransaction]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Billing::BillingTransaction } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

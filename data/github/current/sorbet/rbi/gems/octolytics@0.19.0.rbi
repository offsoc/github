# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `octolytics` gem.
# Please instead update this file by running `bin/tapioca gem octolytics`.

# source://octolytics//lib/octolytics.rb#1
module Octolytics; end

# source://octolytics//lib/octolytics/adapters/net_http.rb#7
module Octolytics::Adapters; end

# source://octolytics//lib/octolytics/adapters/net_http.rb#8
class Octolytics::Adapters::NetHttp
  # @return [NetHttp] a new instance of NetHttp
  #
  # source://octolytics//lib/octolytics/adapters/net_http.rb#36
  def initialize(options = T.unsafe(nil)); end

  # source://octolytics//lib/octolytics/adapters/net_http.rb#41
  def get(url, params = T.unsafe(nil), headers = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Public: Where should net http output be logged to, if anywhere.
  #
  # source://octolytics//lib/octolytics/adapters/net_http.rb#34
  def logger; end

  # Public: Where should net http output be logged to, if anywhere.
  #
  # source://octolytics//lib/octolytics/adapters/net_http.rb#34
  def logger=(_arg0); end

  # source://octolytics//lib/octolytics/adapters/net_http.rb#45
  def post(url, body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://octolytics//lib/octolytics/adapters/net_http.rb#49
  def put(url, body = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Public: Timeout (in seconds) for retrieving data
  #
  # source://octolytics//lib/octolytics/adapters/net_http.rb#31
  def timeout; end

  # Public: Timeout (in seconds) for retrieving data
  #
  # source://octolytics//lib/octolytics/adapters/net_http.rb#31
  def timeout=(_arg0); end

  private

  # source://octolytics//lib/octolytics/adapters/net_http.rb#79
  def build_http(uri); end

  # source://octolytics//lib/octolytics/adapters/net_http.rb#96
  def build_request(request_class, uri, options = T.unsafe(nil)); end

  # source://octolytics//lib/octolytics/adapters/net_http.rb#121
  def normalize_request_body(body); end

  # source://octolytics//lib/octolytics/adapters/net_http.rb#55
  def perform(http_method, url, headers = T.unsafe(nil), options = T.unsafe(nil)); end
end

# Url scheme used to determine if ssl should be on for http instance.
#
# source://octolytics//lib/octolytics/adapters/net_http.rb#28
Octolytics::Adapters::NetHttp::HttpsScheme = T.let(T.unsafe(nil), String)

# https://gist.github.com/tenderlove/245188
# http://tammersaleh.com/posts/rescuing-net-http-exceptions/
#
# source://octolytics//lib/octolytics/adapters/net_http.rb#11
Octolytics::Adapters::NetHttp::ServerErrors = T.let(T.unsafe(nil), Array)

# source://octolytics//lib/octolytics/adapters/net_http.rb#22
Octolytics::Adapters::NetHttp::TimeoutErrors = T.let(T.unsafe(nil), Array)

# source://octolytics//lib/octolytics/authorization_token.rb#6
class Octolytics::AuthorizationToken
  # Public: Initializes a new authorization token
  #
  # secret - Application's secret token preshared by the analytics API
  #
  # @return [AuthorizationToken] a new instance of AuthorizationToken
  #
  # source://octolytics//lib/octolytics/authorization_token.rb#10
  def initialize(secret); end

  # Public: Generates an authorization token string
  #
  # expires_at - `Time` or number of seconds since epoch when the
  #               token will expire (ideally should be a short; e.g., a few
  #               minutes)
  # params - Parameters to be embedded in the token
  #
  # source://octolytics//lib/octolytics/authorization_token.rb#21
  def generate(expires_at, params); end

  # Public: Verifies an authorization token is valid
  #
  # token_str - Token string generated earlier with `#generate`
  # params - Parameters expected to be embedded in the token
  # now - The current time
  #
  # source://octolytics//lib/octolytics/authorization_token.rb#34
  def verify(token_str, params, now = T.unsafe(nil)); end

  private

  # source://octolytics//lib/octolytics/authorization_token.rb#47
  def generate_digest(data); end

  # Private: Verifies that the parameters embedded the token match the
  # expected parameters
  #
  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/authorization_token.rb#58
  def satisfies_params?(token_params, params); end

  # source://octolytics//lib/octolytics/authorization_token.rb#66
  def secure_compare(a, b); end

  # Private: Verifies that the token is unexpired
  #
  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/authorization_token.rb#52
  def unexpired?(token_params, now); end
end

# source://octolytics//lib/octolytics/client.rb#7
class Octolytics::Client
  # @return [Client] a new instance of Client
  #
  # source://octolytics//lib/octolytics/client.rb#14
  def initialize(app_id, options = T.unsafe(nil)); end

  # Public: Which app are the events for.
  #
  # source://octolytics//lib/octolytics/client.rb#12
  def app_id; end

  # Private: Lazily-initialized collector instance
  #
  # source://octolytics//lib/octolytics/client.rb#165
  def collector; end

  # Public: The host of where events should be sent.
  #
  # source://octolytics//lib/octolytics/client.rb#32
  def collector_host; end

  # Public: The host the javascript should be loaded from.
  #
  # source://octolytics//lib/octolytics/client.rb#42
  def collector_script_host; end

  # Public: The full url of where the javascript should be loaded from.
  #
  # source://octolytics//lib/octolytics/client.rb#37
  def collector_script_url; end

  # Public: The full url of where events should be sent.
  #
  # source://octolytics//lib/octolytics/client.rb#27
  def collector_url; end

  # Public: Retrieves a list of content
  #
  # options: A Hash of options
  #   - event_type: Event type (e.g., "page_view")
  #   - dimension: Dimension (e.g., "repository_id")
  #   - dimension_value: Value for dimension (e.g., 1234)
  #
  # source://octolytics//lib/octolytics/client.rb#116
  def content(options = T.unsafe(nil)); end

  # Public: Retrieves a list of counts, bucketed by time
  #
  # options: A Hash of options
  #   - bucket: Time bucket (e.g., "hourly")
  #   - event_type: Event type (e.g., "page_view")
  #   - dimension: Dimension (e.g., "repository_id")
  #   - dimension_value: Value for dimension (e.g., 1234)
  #
  # source://octolytics//lib/octolytics/client.rb#127
  def counts(options = T.unsafe(nil)); end

  # Private: The default secret from the environment
  #
  # source://octolytics//lib/octolytics/client.rb#181
  def default_secret; end

  # Public: Given an actor_id it generates a hash based on the app secret for
  # use in validating that the actor_id has not been tampered with.
  #
  # source://octolytics//lib/octolytics/client.rb#53
  def generate_actor_hash(actor_id); end

  # Public: Retrieves raw event data from the analytics streaming endpoint.
  # You specify an event type and, optionally, 'from' and 'to' dates, which
  # can be Graphite-style relative values such as "-2w" for two weeks ago.
  #
  # Additionally, you provide a block that will be called with content from
  # the server as it is read, which may be potentially a large volume
  # of data.
  #
  # block: A block which will be called with data in chunks as it is read from
  #        the server.
  # options: A Hash of options
  #   - event_type: Event type (e.g., "page_view")
  #   - from:       A timestamp (in seconds since epoch) or relative date value to fetch
  #                 events from; server default is "-1d".
  #   - to:         A timestamp or relative date value to fetch events until; defaults to "now".
  #   - decompress: A boolean flag; whether to pass the block compressed data
  #                 directly from the server, or to decompress it on the fly.
  #
  # source://octolytics//lib/octolytics/client.rb#160
  def raw_events(options = T.unsafe(nil), &block); end

  # Public: Send events to the analytics collector.
  #
  # The parameters and return value of this method are identical to #record!. However,
  # if an exception occurs when recording the given events, the exception will be
  # caught and stored in the Octolytics::Response returned to the caller. The
  # Response will be marked as failed.
  #
  # source://octolytics//lib/octolytics/client.rb#83
  def record(*args); end

  # Public: Send events to the analytics collector.
  #
  # event_type - A String or Symbol name for the event (ie: "tweet", "user_create", or "user.create")
  # dimensions - A Hash of String keys and String values that provide more context.
  # measures - A Hash of String keys and Integer values.
  # context - A Hash to pass along with the event. Can be nested multiple levels and use any types you like that work in JSON.
  # timestamp - A Time or Integer of when the event occurred. Defaults to now.
  #
  # Alternatively, multiple events can be sent at once by passing an array of hashes:
  #
  #     client.record([
  #       {event_type: "tweet", dimensions: {"user_id": 1234}, measures: {}, context: {}},
  #     ])
  #
  # Returns an Octolytics::Response. If an exception occurs while recording the given events,
  # it will be propagated to the caller.
  #
  # source://octolytics//lib/octolytics/client.rb#73
  def record!(*args); end

  # Public: Retrieves a list of paths for a referrer
  #
  # options: A Hash of options
  #   - referrer: (required) referrer (e.g., "github.com")
  #   - event_type: Event type (e.g., "page_view")
  #   - dimension: Dimension (e.g., "repository_id")
  #   - dimension_value: Value for dimension (e.g., 1234)
  #
  # source://octolytics//lib/octolytics/client.rb#106
  def referrer_paths(options = T.unsafe(nil)); end

  # Public: Retrieves a list of referring referrers
  #
  # options: A Hash of options
  #   - event_type: Event type (e.g., "page_view")
  #   - dimension: Dimension (e.g., "repository_id")
  #   - dimension_value: Value for dimension (e.g., 1234)
  #
  # Returns an Octolytics::Response.
  #
  # source://octolytics//lib/octolytics/client.rb#95
  def referrers(options = T.unsafe(nil)); end

  # Private: Lazily-initialized reporter instance
  #
  # source://octolytics//lib/octolytics/client.rb#173
  def reporter; end

  # Public: What secret is the client using to verify stuff.
  #
  # source://octolytics//lib/octolytics/client.rb#47
  def secret; end

  # Public: Easy generating of the necessary meta tags.
  #
  # source://octolytics//lib/octolytics/client.rb#22
  def tags; end

  # Public: Retrieves a list of most frequent values for a target
  # grouped dimension when filtered by another dimension and value.
  #
  # options: A Hash of options
  #   - event_type: Event type (e.g., "page_view")
  #   - grouped_dimension: Dimension to be grouped, counted, and ranked (e.g., "repository_id")
  #   - dimension: Dimension (e.g., "actor_id")
  #   - dimension_Value: value for dimension (e.g., 1234)
  #
  # source://octolytics//lib/octolytics/client.rb#139
  def top(options = T.unsafe(nil)); end
end

# Private: The algorithm used for generating an actor hash
#
# source://octolytics//lib/octolytics/client.rb#9
Octolytics::Client::SHA256 = T.let(T.unsafe(nil), OpenSSL::Digest::SHA256)

# source://octolytics//lib/octolytics/response_errors.rb#72
class Octolytics::ClientError < ::Octolytics::Error; end

# Abstract superclass that exposes some common methods expected to be implemented by subclasses.
#
# source://octolytics//lib/octolytics/collector.rb#5
class Octolytics::Collector
  # @return [Collector] a new instance of Collector
  #
  # source://octolytics//lib/octolytics/collector.rb#19
  def initialize(app_id, options); end

  # Public: The app all events will be created for.
  #
  # source://octolytics//lib/octolytics/collector.rb#10
  def app_id; end

  # Private: The environment of the app using octolytics. Determines which
  # octolytics environment should receive the event.
  #
  # source://octolytics//lib/octolytics/collector.rb#17
  def environment; end

  # source://octolytics//lib/octolytics/collector.rb#70
  def record(*args); end

  # source://octolytics//lib/octolytics/collector.rb#34
  def record!(*args); end

  # Private: The application's secret for generating authorization tokens
  #
  # source://octolytics//lib/octolytics/collector.rb#13
  def secret; end

  private

  # source://octolytics//lib/octolytics/collector.rb#96
  def default_environment; end

  # Private: Generates an HMAC signature for the serialized JSON request
  # body. An HMAC is required for server-side events to ensure event data
  # comes from a client holding a secret.
  #
  # source://octolytics//lib/octolytics/collector.rb#103
  def generate_authorization_signature(request_body); end

  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/collector.rb#92
  def local_environment?; end

  # source://octolytics//lib/octolytics/collector.rb#88
  def post_events(body); end
end

# Private: The algorithm used for generating an authorization signature
#
# source://octolytics//lib/octolytics/collector.rb#7
Octolytics::Collector::SHA256 = T.let(T.unsafe(nil), OpenSSL::Digest::SHA256)

# source://octolytics//lib/octolytics/response_errors.rb#75
class Octolytics::ConflictError < ::Octolytics::HttpClientError; end

# source://octolytics//lib/octolytics/response_errors.rb#4
class Octolytics::Error < ::StandardError
  # Public: Initializes a new error
  #
  # options: Hash of options or String error message
  #          :original_exception - An Exception being wrapped (optional)
  #
  # @return [Error] a new instance of Error
  #
  # source://octolytics//lib/octolytics/response_errors.rb#11
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute original_exception.
  #
  # source://octolytics//lib/octolytics/response_errors.rb#5
  def original_exception; end
end

# Represents failure represented by an Exception object.
#
# source://octolytics//lib/octolytics/response.rb#31
class Octolytics::FailedResponse < ::Octolytics::Response
  # @return [FailedResponse] a new instance of FailedResponse
  #
  # source://octolytics//lib/octolytics/response.rb#34
  def initialize(error); end

  # Returns the value of attribute error.
  #
  # source://octolytics//lib/octolytics/response.rb#32
  def error; end

  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/response.rb#38
  def success?; end
end

# Decompress an incremental stream of GZip-compressed bytes from a producer,
# sending decompressed chunks to another handler as they are formed.
#
# source://octolytics//lib/octolytics/gzipped_stream.rb#4
class Octolytics::GzippedStream
  # @return [GzippedStream] a new instance of GzippedStream
  #
  # source://octolytics//lib/octolytics/gzipped_stream.rb#7
  def initialize(decompressed_content_handler); end

  # source://octolytics//lib/octolytics/gzipped_stream.rb#23
  def call(chunk); end

  # source://octolytics//lib/octolytics/gzipped_stream.rb#34
  def close; end

  # source://octolytics//lib/octolytics/gzipped_stream.rb#11
  def pipe; end
end

# source://octolytics//lib/octolytics/gzipped_stream.rb#5
Octolytics::GzippedStream::MAX_CHUNK_SIZE = T.let(T.unsafe(nil), Integer)

# source://octolytics//lib/octolytics/response_errors.rb#73
class Octolytics::HttpClientError < ::Octolytics::ClientError
  include ::Octolytics::HttpError
end

# source://octolytics//lib/octolytics/http_collector.rb#9
class Octolytics::HttpCollector < ::Octolytics::Collector
  # @return [HttpCollector] a new instance of HttpCollector
  #
  # source://octolytics//lib/octolytics/http_collector.rb#31
  def initialize(app_id, options = T.unsafe(nil)); end

  # Private: The adapter being used to record events.
  #
  # source://octolytics//lib/octolytics/http_collector.rb#26
  def adapter; end

  # Private: The content type to send with all requests to record an event.
  #
  # source://octolytics//lib/octolytics/http_collector.rb#23
  def content_type; end

  # Public: The host that events should be sent to.
  #
  # source://octolytics//lib/octolytics/http_collector.rb#11
  def host; end

  # Private: The instrumenter that all instrumentation runs through.
  #
  # source://octolytics//lib/octolytics/http_collector.rb#29
  def instrumenter; end

  # Public: The host the javascript should be loaded from.
  #
  # source://octolytics//lib/octolytics/http_collector.rb#17
  def script_host; end

  # Public: The url of where the javascript is located.
  #
  # source://octolytics//lib/octolytics/http_collector.rb#20
  def script_url; end

  # Public: The url that events should be sent to.
  #
  # source://octolytics//lib/octolytics/http_collector.rb#14
  def url; end

  private

  # source://octolytics//lib/octolytics/http_collector.rb#96
  def default_content_type; end

  # source://octolytics//lib/octolytics/http_collector.rb#73
  def default_host; end

  # source://octolytics//lib/octolytics/http_collector.rb#86
  def default_script_host; end

  # source://octolytics//lib/octolytics/http_collector.rb#58
  def post_events(body); end

  # source://octolytics//lib/octolytics/http_collector.rb#69
  def scheme; end
end

# source://octolytics//lib/octolytics/response_errors.rb#21
module Octolytics::HttpError
  # Public: Initializes a new error resulting from a non-successful HTTP
  # response.
  #
  # options: Hash of options or String error message
  #          :code - HTTP status code (integer)
  #
  # source://octolytics//lib/octolytics/response_errors.rb#60
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://octolytics//lib/octolytics/response_errors.rb#53
  def code; end

  class << self
    # source://octolytics//lib/octolytics/response_errors.rb#22
    def from_response(code, headers, body); end

    private

    # source://octolytics//lib/octolytics/response_errors.rb#37
    def error_message_from_http_response(code, headers, body); end
  end
end

# Response object that is returned from all adapter requests.
#
# source://octolytics//lib/octolytics/http_response.rb#7
class Octolytics::HttpResponse < ::Octolytics::Response
  # Public: Construct a new Response from an HTTP response
  #
  # status - HTTP status code (e.g., 200)
  # headers - Hash of HTTP headers
  # body - String of HTTP response body
  #
  # An Octolytics::Error exception is raised if the response is a client or
  # server error.
  #
  # @return [HttpResponse] a new instance of HttpResponse
  #
  # source://octolytics//lib/octolytics/http_response.rb#21
  def initialize(status, headers, body); end

  # Returns the value of attribute body.
  #
  # source://octolytics//lib/octolytics/http_response.rb#11
  def body; end

  # Public: The body converted from json to ruby.
  #
  # source://octolytics//lib/octolytics/http_response.rb#34
  def data; end

  # Returns the value of attribute headers.
  #
  # source://octolytics//lib/octolytics/http_response.rb#11
  def headers; end

  # Returns the value of attribute status.
  #
  # source://octolytics//lib/octolytics/http_response.rb#11
  def status; end

  # If no error was raised by the constructor, this response was successful.
  #
  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/http_response.rb#43
  def success?; end

  private

  # Private: Is the response body json?
  #
  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/http_response.rb#50
  def json?; end

  # {"Content-Type" => ["application/json"]} to {"content-type" => "application/json"}.
  #
  # source://octolytics//lib/octolytics/http_response.rb#55
  def normalize_headers(headers); end
end

# source://octolytics//lib/octolytics/http_response.rb#9
Octolytics::HttpResponse::ContentType = T.let(T.unsafe(nil), String)

# source://octolytics//lib/octolytics/http_response.rb#8
Octolytics::HttpResponse::JsonRegex = T.let(T.unsafe(nil), Regexp)

# source://octolytics//lib/octolytics/response_errors.rb#70
class Octolytics::HttpServerError < ::Octolytics::ServerError
  include ::Octolytics::HttpError
end

# source://octolytics//lib/octolytics/instrumentation.rb#2
module Octolytics::Instrumentation; end

# source://octolytics//lib/octolytics/instrumentation.rb#3
Octolytics::Instrumentation::Namespace = T.let(T.unsafe(nil), String)

# source://octolytics//lib/octolytics/instrumenters/noop.rb#2
module Octolytics::Instrumenters; end

# source://octolytics//lib/octolytics/instrumenters/noop.rb#3
class Octolytics::Instrumenters::Noop
  class << self
    # @yield [payload]
    #
    # source://octolytics//lib/octolytics/instrumenters/noop.rb#4
    def instrument(name, payload = T.unsafe(nil)); end
  end
end

# source://octolytics//lib/octolytics/response_errors.rb#74
class Octolytics::NotFoundError < ::Octolytics::HttpClientError; end

# Wraps communication with Pond's API.
#
# source://octolytics//lib/octolytics/pond.rb#9
class Octolytics::Pond
  # @return [Pond] a new instance of Pond
  #
  # source://octolytics//lib/octolytics/pond.rb#29
  def initialize(options = T.unsafe(nil)); end

  # Private: What should be used to perform requests.
  #
  # source://octolytics//lib/octolytics/pond.rb#20
  def adapter; end

  # Private: Builds a URL by joining components together with forward slashes
  #
  # source://octolytics//lib/octolytics/pond.rb#119
  def build_url_from_path_components(*components); end

  # Public: get top content per repository.
  #
  # source://octolytics//lib/octolytics/pond.rb#82
  def content(repository_id, options = T.unsafe(nil)); end

  # Public: Get repository hourly counts for supported event types.
  #
  # source://octolytics//lib/octolytics/pond.rb#97
  def counts(repository_id, event_type, bucket = T.unsafe(nil), options = T.unsafe(nil)); end

  # Private: Figures out what environment we are dealing with based on some
  # common ones.
  #
  # source://octolytics//lib/octolytics/pond.rb#142
  def default_environment; end

  # Private: Figures out where to send events based on environment.
  #
  # source://octolytics//lib/octolytics/pond.rb#147
  def default_url; end

  # Private: What environment should we send things to.
  #
  # source://octolytics//lib/octolytics/pond.rb#17
  def environment; end

  # Private: Generates a token suitable to authorize a future request
  #
  # source://octolytics//lib/octolytics/pond.rb#135
  def generate_token(token_params); end

  # Private: Generates common HTTP headers used for all requests
  #
  # token - Authorization token (see #generate_token)
  #
  # source://octolytics//lib/octolytics/pond.rb#126
  def headers(token); end

  # Private: The instrumenter that all instrumentation runs through.
  #
  # source://octolytics//lib/octolytics/pond.rb#23
  def instrumenter; end

  # Public: get top paths for a given referrer.
  #
  # source://octolytics//lib/octolytics/pond.rb#66
  def referrer_paths(repository_id, referrer, options = T.unsafe(nil)); end

  # Public: Get top referrers per repo.
  #
  # source://octolytics//lib/octolytics/pond.rb#50
  def referrers(repository_id, options = T.unsafe(nil)); end

  # Private: The application's secret for generating authorization tokens
  #
  # source://octolytics//lib/octolytics/pond.rb#14
  def secret; end

  # Public: Where is the API endpoint?
  #
  # source://octolytics//lib/octolytics/pond.rb#11
  def url; end
end

# Private: How long an authorization token will remain valid.
# 3 minutes by default.
#
# source://octolytics//lib/octolytics/pond.rb#27
Octolytics::Pond::TOKEN_EXPIRATION_LENGTH = T.let(T.unsafe(nil), Integer)

# source://octolytics//lib/octolytics/reporter.rb#9
class Octolytics::Reporter
  # @return [Reporter] a new instance of Reporter
  #
  # source://octolytics//lib/octolytics/reporter.rb#32
  def initialize(app_id, options = T.unsafe(nil)); end

  # Private: What should be used to perform requests.
  #
  # source://octolytics//lib/octolytics/reporter.rb#23
  def adapter; end

  # Public: Which app are the events for.
  #
  # source://octolytics//lib/octolytics/reporter.rb#11
  def app_id; end

  # Private: Builds a URL by joining components together with forward slashes
  #
  # source://octolytics//lib/octolytics/reporter.rb#161
  def build_url_from_path_components(*components); end

  # See Octolytics::Client#content
  #
  # source://octolytics//lib/octolytics/reporter.rb#90
  def content(options = T.unsafe(nil)); end

  # See Octolytics::Client#counts
  #
  # source://octolytics//lib/octolytics/reporter.rb#104
  def counts(options = T.unsafe(nil)); end

  # Private: Figures out what environment we are dealing with based on some
  # common ones.
  #
  # source://octolytics//lib/octolytics/reporter.rb#184
  def default_environment; end

  # Private: Figures out where to send events based on environment.
  #
  # source://octolytics//lib/octolytics/reporter.rb#189
  def default_url; end

  # Private: What environment should we send things too.
  #
  # source://octolytics//lib/octolytics/reporter.rb#20
  def environment; end

  # Private: Generates a token suitable to authorize a future request
  #
  # source://octolytics//lib/octolytics/reporter.rb#177
  def generate_token(token_params); end

  # Private: Generates common HTTP headers used for all requests
  #
  # token - Authorization token (see #generate_token)
  #
  # source://octolytics//lib/octolytics/reporter.rb#168
  def headers(token); end

  # Private: The instrumenter that all instrumentation runs through.
  #
  # source://octolytics//lib/octolytics/reporter.rb#26
  def instrumenter; end

  # See Octolytics::Client#raw_events
  #
  # source://octolytics//lib/octolytics/reporter.rb#135
  def raw_events(options = T.unsafe(nil), &block); end

  # See Octolytics::Client#referrer_paths
  #
  # source://octolytics//lib/octolytics/reporter.rb#73
  def referrer_paths(options = T.unsafe(nil)); end

  # See Octolytics::Client#referrers
  #
  # source://octolytics//lib/octolytics/reporter.rb#58
  def referrers(options = T.unsafe(nil)); end

  # Private: The application's secret for generating authorization tokens
  #
  # source://octolytics//lib/octolytics/reporter.rb#17
  def secret; end

  # See Octolytics::Client#top
  #
  # source://octolytics//lib/octolytics/reporter.rb#120
  def top(options = T.unsafe(nil)); end

  # Public: Where should all the events be sent.
  #
  # source://octolytics//lib/octolytics/reporter.rb#14
  def url; end
end

# Private: How long an authorization token will remain valid.
# 3 minutes
#
# source://octolytics//lib/octolytics/reporter.rb#30
Octolytics::Reporter::TOKEN_EXPIRATION_LENGTH = T.let(T.unsafe(nil), Integer)

# Response object that is returned from all adapter requests.
#
# source://octolytics//lib/octolytics/response.rb#3
class Octolytics::Response
  # Public: Return an Exception instance, if available, for
  # the error raised by the underlying request.
  #
  # source://octolytics//lib/octolytics/response.rb#16
  def error; end

  # Public : Return the failure state of the given request.
  #
  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/response.rb#10
  def failure?; end

  # Public: Return the success state of the given request.
  #
  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/response.rb#5
  def success?; end
end

# source://octolytics//lib/octolytics/response_errors.rb#68
class Octolytics::ServerError < ::Octolytics::Error; end

# Represents success without any accompanying metadata.
#
# source://octolytics//lib/octolytics/response.rb#24
class Octolytics::SuccessfulResponse < ::Octolytics::Response
  # @return [Boolean]
  #
  # source://octolytics//lib/octolytics/response.rb#25
  def success?; end
end

# Private: Should never need to be used directly. Just use the Client#tags
# method instead.
#
# source://octolytics//lib/octolytics/tags.rb#6
class Octolytics::Tags
  # @return [Tags] a new instance of Tags
  #
  # source://octolytics//lib/octolytics/tags.rb#10
  def initialize(client); end

  # Public: Output the necessary actor tags if actor_id is not nil. Using this
  # method requires that the secret is set for the client.
  #
  # Example:
  #
  #   <%= Octolytics::Client.new("github", secret: "asdf").tags.actor(1) %>
  #
  #   # would output:
  #   <meta name="octolytics-actor-id" content="1" />
  #   <meta name="octolytics-actor-hash" content="387fd038f785331698bc2345968aa71d3852f972b996392f7b37df0c9005327b" />
  #
  # source://octolytics//lib/octolytics/tags.rb#40
  def actor(actor_id); end

  # Private: The client whose config should be used.
  #
  # source://octolytics//lib/octolytics/tags.rb#8
  def client; end

  # Public: Output dimension meta tag for each key/value pair.
  #
  # Example:
  #
  #   <%= Octolytics::Client.new("github").tags.dimension(repository_id: 234) %>
  #
  #   # would output:
  #   <meta name="octolytics-dimension-repository_id" content="234" />
  #
  # source://octolytics//lib/octolytics/tags.rb#55
  def dimension(dimensions = T.unsafe(nil)); end

  # Public: Output dimension meta tag for each key/value pair.
  #
  # Example:
  #
  #   <%= Octolytics::Client.new("github").tags.dimension(repository_id: 234) %>
  #
  #   # would output:
  #   <meta name="octolytics-dimension-repository_id" content="234" />
  #
  # source://octolytics//lib/octolytics/tags.rb#55
  def dimensions(dimensions = T.unsafe(nil)); end

  # Public: Output measure meta tag for each key/value pair.
  #
  # Example:
  #
  #   <%= Octolytics::Client.new("github").tags.measure(latency: 22) %>
  #
  #   # would output:
  #   <meta name="octolytics-measure-latency" content="22" />
  #
  # source://octolytics//lib/octolytics/tags.rb#70
  def measure(measures = T.unsafe(nil)); end

  # Public: Output measure meta tag for each key/value pair.
  #
  # Example:
  #
  #   <%= Octolytics::Client.new("github").tags.measure(latency: 22) %>
  #
  #   # would output:
  #   <meta name="octolytics-measure-latency" content="22" />
  #
  # source://octolytics//lib/octolytics/tags.rb#70
  def measures(measures = T.unsafe(nil)); end

  # Public: Output required meta tags for octolytics to work.
  #
  # Example:
  #
  #   <%= Octolytics::Client.new("github").tags.required %>
  #
  #   # would output:
  #   <meta name="octolytics-app-id" content="github" />
  #   <meta name="octolytics-host" content="collector.githubapp.com" />
  #   <meta name="octolytics-script-host" content="collector-cdn.githubapp.com" />
  #
  # source://octolytics//lib/octolytics/tags.rb#24
  def required; end

  private

  # source://octolytics//lib/octolytics/tags.rb#79
  def meta_tag(name, content); end
end

# source://octolytics//lib/octolytics/response_errors.rb#69
class Octolytics::Timeout < ::Octolytics::ServerError; end

# source://octolytics//lib/octolytics/response_errors.rb#76
class Octolytics::UnprocessableEntityError < ::Octolytics::HttpClientError; end

# source://octolytics//lib/octolytics/util.rb#2
class Octolytics::Util
  class << self
    # source://octolytics//lib/octolytics/util.rb#11
    def html_escape(s); end
  end
end

# source://octolytics//lib/octolytics/util.rb#3
Octolytics::Util::HTML_ESCAPE = T.let(T.unsafe(nil), Hash)

# source://octolytics//lib/octolytics/version.rb#2
Octolytics::VERSION = T.let(T.unsafe(nil), String)

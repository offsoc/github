# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `turbomodel-client` gem.
# Please instead update this file by running `bin/tapioca gem turbomodel-client`.

module Google::Protobuf::MessageExts::ClassMethods; end

# source://turbomodel-client//ruby/lib/turbomodel_pb.rb#23
module Turbomodel; end

# source://turbomodel-client//ruby/lib/turbomodel.rb#5
Turbomodel::ModelingAPI = Turbomodel::Proto::ModelingAPIClient

# source://turbomodel-client//ruby/lib/turbomodel_pb.rb#24
module Turbomodel::Proto; end

module Turbomodel::Proto::AutoModelMode
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

# source://turbomodel-client//ruby/lib/turbomodel_pb.rb#27
Turbomodel::Proto::AutoModelMode::AUTOMODEL_MODE_APPLICATION = T.let(T.unsafe(nil), Integer)

# source://turbomodel-client//ruby/lib/turbomodel_pb.rb#27
Turbomodel::Proto::AutoModelMode::AUTOMODEL_MODE_FRAMEWORK = T.let(T.unsafe(nil), Integer)

# source://turbomodel-client//ruby/lib/turbomodel_pb.rb#27
Turbomodel::Proto::AutoModelMode::AUTOMODEL_MODE_UNSPECIFIED = T.let(T.unsafe(nil), Integer)

class Turbomodel::Proto::AutoModelRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

class Turbomodel::Proto::AutoModelResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  def initialize(*_arg0); end

  def ==(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def clone; end
  def dup; end
  def eql?(_arg0); end
  def hash; end
  def inspect; end
  def method_missing(*_arg0); end
  def to_h; end
  def to_s; end

  private

  def respond_to_missing?(*_arg0); end

  class << self
    def decode(_arg0); end
    def decode_json(*_arg0); end
    def descriptor; end
    def encode(_arg0); end
    def encode_json(*_arg0); end
  end
end

# source://turbomodel-client//ruby/lib/turbomodel_twirp.rb#13
class Turbomodel::Proto::ModelingAPIClient < ::Twirp::Client
  # source://twirp/1.10.0/lib/twirp/client.rb#42
  def auto_model(input, req_opts = T.unsafe(nil)); end
end

# source://turbomodel-client//ruby/lib/turbomodel_twirp.rb#7
class Turbomodel::Proto::ModelingAPIService < ::Twirp::Service; end

# source://turbomodel-client//ruby/lib/turbomodel_vcr.rb#6
module TurbomodelVCR; end

# source://turbomodel-client//ruby/lib/turbomodel_vcr.rb#9
module TurbomodelVCR::Persister
  extend ::TurbomodelVCR::Persister

  # source://turbomodel-client//ruby/lib/turbomodel_vcr.rb#18
  def [](path); end

  # source://turbomodel-client//ruby/lib/turbomodel_vcr.rb#14
  def []=(path, value); end

  # source://turbomodel-client//ruby/lib/turbomodel_vcr.rb#26
  def absolute_path_to_file(path); end
end

# source://turbomodel-client//ruby/lib/turbomodel_vcr.rb#10
class TurbomodelVCR::Persister::Error < ::StandardError; end

# source://turbomodel-client//ruby/lib/turbomodel_vcr.rb#7
TurbomodelVCR::VCR_DIR = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::References::V1::UpdateRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::References::V1::UpdateRequest`.

class GitHub::Spokes::Proto::References::V1::UpdateRequest
  sig do
    params(
      fileservers: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      nwo: T.nilable(String),
      priority: T.nilable(GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      sockstat: T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat),
      txn: T.nilable(GitHub::Spokes::Proto::References::V1::Transaction)
    ).void
  end
  def initialize(fileservers: T.unsafe(nil), nwo: nil, priority: nil, repository: nil, sockstat: nil, txn: nil); end

  sig { void }
  def clear_fileservers; end

  sig { void }
  def clear_nwo; end

  sig { void }
  def clear_priority; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_sockstat; end

  sig { void }
  def clear_txn; end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def fileservers; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def fileservers=(value); end

  sig { returns(String) }
  def nwo; end

  sig { params(value: String).void }
  def nwo=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority)) }
  def priority; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::UpdateReferencesPriority)).void }
  def priority=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)) }
  def sockstat; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Sockstat)).void }
  def sockstat=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::References::V1::Transaction)) }
  def txn; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::References::V1::Transaction)).void }
  def txn=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Marketplace::ListingPlan`.
# Please instead update this file by running `bin/tapioca dsl Marketplace::ListingPlan`.

class Marketplace::ListingPlan
  include GeneratedAsyncReflectionAssociations
  extend GeneratedWorkflowClassMethods
  include GeneratedWorkflowMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def subscription_rules; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingPlan).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def fifth; end

    sig { returns(::Marketplace::ListingPlan) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Marketplace::ListingPlan)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Marketplace::ListingPlan) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(T.nilable(T::Enumerator[::Marketplace::ListingPlan]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Marketplace::ListingPlan]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Marketplace::ListingPlan]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Marketplace::ListingPlan)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Marketplace::ListingPlan) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Marketplace::ListingPlan) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Marketplace::ListingPlan) }
    def first!; end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def forty_two; end

    sig { returns(::Marketplace::ListingPlan) }
    def forty_two!; end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def fourth; end

    sig { returns(::Marketplace::ListingPlan) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Marketplace::ListingPlan) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingPlan).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Marketplace::ListingPlan).void)
      ).returns(::Marketplace::ListingPlan)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingPlan).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Marketplace::ListingPlan).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def second; end

    sig { returns(::Marketplace::ListingPlan) }
    def second!; end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def second_to_last; end

    sig { returns(::Marketplace::ListingPlan) }
    def second_to_last!; end

    sig { returns(::Marketplace::ListingPlan) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Marketplace::ListingPlan) }
    def take!; end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def third; end

    sig { returns(::Marketplace::ListingPlan) }
    def third!; end

    sig { returns(T.nilable(::Marketplace::ListingPlan)) }
    def third_to_last; end

    sig { returns(::Marketplace::ListingPlan) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def for_organizations_only!; end

    sig { returns(T::Boolean) }
    def for_organizations_only?; end

    sig { void }
    def for_users_only!; end

    sig { returns(T::Boolean) }
    def for_users_only?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def billing_transaction_line_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def billing_transaction_line_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::ListingPlan` class because it declared `has_many :billing_transaction_line_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::BillingTransaction::LineItem::PrivateCollectionProxy) }
    def billing_transaction_line_items; end

    sig { params(value: T::Enumerable[::Billing::BillingTransaction::LineItem]).void }
    def billing_transaction_line_items=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction::LineItem) }
    def build_last_billing_transaction_line_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def build_listing(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def bullet_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def bullet_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::ListingPlan` class because it declared `has_many :bullets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Marketplace::ListingPlanBullet::PrivateCollectionProxy) }
    def bullets; end

    sig { params(value: T::Enumerable[::Marketplace::ListingPlanBullet]).void }
    def bullets=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction::LineItem) }
    def create_last_billing_transaction_line_item(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Billing::BillingTransaction::LineItem) }
    def create_last_billing_transaction_line_item!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_listing(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Marketplace::Listing) }
    def create_listing!(*args, &blk); end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def last_billing_transaction_line_item; end

    sig { params(value: T.nilable(::Billing::BillingTransaction::LineItem)).void }
    def last_billing_transaction_line_item=(value); end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def listing; end

    sig { params(value: T.nilable(::Marketplace::Listing)).void }
    def listing=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pending_subscription_item_change_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::ListingPlan` class because it declared `has_many :pending_subscription_item_changes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::PendingSubscriptionItemChange::PrivateCollectionProxy) }
    def pending_subscription_item_changes; end

    sig { params(value: T::Enumerable[::Billing::PendingSubscriptionItemChange]).void }
    def pending_subscription_item_changes=(value); end

    sig { returns(T.nilable(::Billing::BillingTransaction::LineItem)) }
    def reload_last_billing_transaction_line_item; end

    sig { returns(T.nilable(::Marketplace::Listing)) }
    def reload_listing; end

    sig { returns(T::Array[T.untyped]) }
    def subscription_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def subscription_item_ids=(ids); end

    # This method is created by ActiveRecord on the `Marketplace::ListingPlan` class because it declared `has_many :subscription_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Billing::SubscriptionItem::PrivateCollectionProxy) }
    def subscription_items; end

    sig { params(value: T::Enumerable[::Billing::SubscriptionItem]).void }
    def subscription_items=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_organizations_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_users_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def free(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes_listings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_for_organizations_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_for_users_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_free_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_billing_transaction_line_items; end

    sig { returns(Promise[T.untyped]) }
    def async_bullets; end

    sig { returns(Promise[T.untyped]) }
    def async_last_billing_transaction_line_item; end

    sig { returns(Promise[T.untyped]) }
    def async_listing; end

    sig { returns(Promise[T.untyped]) }
    def async_pending_subscription_item_changes; end

    sig { returns(Promise[T.untyped]) }
    def async_subscription_items; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.untyped) }
    def description; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.untyped) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def description_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def description_previously_was; end

    sig { returns(T.untyped) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T::Boolean) }
    def direct_billing; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def direct_billing=(value); end

    sig { returns(T::Boolean) }
    def direct_billing?; end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_before_last_save; end

    sig { returns(T.untyped) }
    def direct_billing_before_type_cast; end

    sig { returns(T::Boolean) }
    def direct_billing_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_billing_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_billing_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def direct_billing_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def direct_billing_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def direct_billing_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def direct_billing_was; end

    sig { void }
    def direct_billing_will_change!; end

    sig { returns(T::Boolean) }
    def has_free_trial; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def has_free_trial=(value); end

    sig { returns(T::Boolean) }
    def has_free_trial?; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_free_trial_before_last_save; end

    sig { returns(T.untyped) }
    def has_free_trial_before_type_cast; end

    sig { returns(T::Boolean) }
    def has_free_trial_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_free_trial_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_free_trial_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_free_trial_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_free_trial_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def has_free_trial_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def has_free_trial_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def has_free_trial_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def has_free_trial_was; end

    sig { void }
    def has_free_trial_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def listing_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def listing_id=(value); end

    sig { returns(T::Boolean) }
    def listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def listing_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def listing_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def listing_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def listing_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def listing_id_was; end

    sig { void }
    def listing_id_will_change!; end

    sig { returns(::Integer) }
    def marketplace_listing_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def marketplace_listing_id=(value); end

    sig { returns(T::Boolean) }
    def marketplace_listing_id?; end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_before_last_save; end

    sig { returns(T.untyped) }
    def marketplace_listing_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def marketplace_listing_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def marketplace_listing_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def marketplace_listing_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def marketplace_listing_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def marketplace_listing_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def marketplace_listing_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def marketplace_listing_id_was; end

    sig { void }
    def marketplace_listing_id_will_change!; end

    sig { returns(::Integer) }
    def monthly_price_in_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def monthly_price_in_cents=(value); end

    sig { returns(T::Boolean) }
    def monthly_price_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def monthly_price_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def monthly_price_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def monthly_price_in_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def monthly_price_in_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def monthly_price_in_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def monthly_price_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def monthly_price_in_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def monthly_price_in_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def monthly_price_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def monthly_price_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def monthly_price_in_cents_was; end

    sig { void }
    def monthly_price_in_cents_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def number=(value); end

    sig { returns(T::Boolean) }
    def number?; end

    sig { returns(T.nilable(::Integer)) }
    def number_before_last_save; end

    sig { returns(T.untyped) }
    def number_before_type_cast; end

    sig { returns(T::Boolean) }
    def number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def number_was; end

    sig { void }
    def number_will_change!; end

    sig { returns(T::Boolean) }
    def per_unit; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def per_unit=(value); end

    sig { returns(T::Boolean) }
    def per_unit?; end

    sig { returns(T.nilable(T::Boolean)) }
    def per_unit_before_last_save; end

    sig { returns(T.untyped) }
    def per_unit_before_type_cast; end

    sig { returns(T::Boolean) }
    def per_unit_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def per_unit_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def per_unit_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def per_unit_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def per_unit_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def per_unit_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def per_unit_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def per_unit_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def per_unit_was; end

    sig { void }
    def per_unit_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_direct_billing!; end

    sig { void }
    def restore_has_free_trial!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_listing_id!; end

    sig { void }
    def restore_marketplace_listing_id!; end

    sig { void }
    def restore_monthly_price_in_cents!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_number!; end

    sig { void }
    def restore_per_unit!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_subscription_rules!; end

    sig { void }
    def restore_unit_name!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_yearly_price_in_cents!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_direct_billing; end

    sig { returns(T::Boolean) }
    def saved_change_to_direct_billing?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_has_free_trial; end

    sig { returns(T::Boolean) }
    def saved_change_to_has_free_trial?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_listing_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_marketplace_listing_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_marketplace_listing_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_monthly_price_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_monthly_price_in_cents?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_number?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_per_unit; end

    sig { returns(T::Boolean) }
    def saved_change_to_per_unit?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_subscription_rules; end

    sig { returns(T::Boolean) }
    def saved_change_to_subscription_rules?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_unit_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_unit_name?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_yearly_price_in_cents; end

    sig { returns(T::Boolean) }
    def saved_change_to_yearly_price_in_cents?; end

    sig { returns(::Integer) }
    def state; end

    sig { params(value: ::Integer).returns(::Integer) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::Integer)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def state_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def state_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def subscription_rules; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def subscription_rules=(value); end

    sig { returns(T::Boolean) }
    def subscription_rules?; end

    sig { returns(T.nilable(::String)) }
    def subscription_rules_before_last_save; end

    sig { returns(T.untyped) }
    def subscription_rules_before_type_cast; end

    sig { returns(T::Boolean) }
    def subscription_rules_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscription_rules_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscription_rules_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def subscription_rules_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subscription_rules_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def subscription_rules_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def subscription_rules_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subscription_rules_previously_was; end

    sig { returns(T.nilable(::String)) }
    def subscription_rules_was; end

    sig { void }
    def subscription_rules_will_change!; end

    sig { returns(T.nilable(::String)) }
    def unit_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def unit_name=(value); end

    sig { returns(T::Boolean) }
    def unit_name?; end

    sig { returns(T.nilable(::String)) }
    def unit_name_before_last_save; end

    sig { returns(T.untyped) }
    def unit_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def unit_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unit_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unit_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unit_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unit_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unit_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unit_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unit_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def unit_name_was; end

    sig { void }
    def unit_name_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_direct_billing?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_has_free_trial?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_listing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_marketplace_listing_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_monthly_price_in_cents?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_per_unit?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subscription_rules?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unit_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_yearly_price_in_cents?; end

    sig { returns(::Integer) }
    def yearly_price_in_cents; end

    sig { params(value: ::Integer).returns(::Integer) }
    def yearly_price_in_cents=(value); end

    sig { returns(T::Boolean) }
    def yearly_price_in_cents?; end

    sig { returns(T.nilable(::Integer)) }
    def yearly_price_in_cents_before_last_save; end

    sig { returns(T.untyped) }
    def yearly_price_in_cents_before_type_cast; end

    sig { returns(T::Boolean) }
    def yearly_price_in_cents_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def yearly_price_in_cents_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def yearly_price_in_cents_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def yearly_price_in_cents_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def yearly_price_in_cents_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def yearly_price_in_cents_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def yearly_price_in_cents_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def yearly_price_in_cents_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def yearly_price_in_cents_was; end

    sig { void }
    def yearly_price_in_cents_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_organizations_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_users_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def free(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes_listings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_for_organizations_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_for_users_only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paid(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_free_trial(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedWorkflowClassMethods
    sig { params(val: String).returns(T.untyped) }
    def state=(val); end

    sig { returns(PrivateRelationWhereChain) }
    def with_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_published_state; end

    sig { returns(PrivateRelationWhereChain) }
    def with_retired_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_published_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_retired_state; end
  end

  module GeneratedWorkflowMethods
    sig { returns(T::Boolean) }
    def can_publish?; end

    sig { returns(T::Boolean) }
    def can_retire?; end

    sig { returns(T::Boolean) }
    def draft?; end

    sig { void }
    def publish!; end

    sig { returns(T::Boolean) }
    def published?; end

    sig { void }
    def retire!; end

    sig { returns(T::Boolean) }
    def retired?; end

    sig { returns(PrivateRelationWhereChain) }
    def without_draft_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_published_state; end

    sig { returns(PrivateRelationWhereChain) }
    def without_retired_state; end
  end

  class PrivateAssocationRelation < ::ActiveRecord::AssociationRelation
    include GeneratedWorkflowClassMethods
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Marketplace::ListingPlan } }

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Marketplace::ListingPlan } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Marketplace::ListingPlan } }

    sig do
      params(
        records: T.any(::Marketplace::ListingPlan, T::Enumerable[T.any(::Marketplace::ListingPlan, T::Enumerable[::Marketplace::ListingPlan])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Marketplace::ListingPlan, T::Enumerable[T.any(::Marketplace::ListingPlan, T::Enumerable[::Marketplace::ListingPlan])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Marketplace::ListingPlan, T::Enumerable[T.any(::Marketplace::ListingPlan, T::Enumerable[::Marketplace::ListingPlan])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Marketplace::ListingPlan, T::Enumerable[T.any(::Marketplace::ListingPlan, T::Enumerable[::Marketplace::ListingPlan])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Marketplace::ListingPlan, T::Enumerable[T.any(::Marketplace::ListingPlan, T::Enumerable[::Marketplace::ListingPlan])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Marketplace::ListingPlan, T::Enumerable[T.any(::Marketplace::ListingPlan, T::Enumerable[::Marketplace::ListingPlan])])
      ).returns(T::Array[::Marketplace::ListingPlan])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def target; end

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include GeneratedWorkflowClassMethods
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Marketplace::ListingPlan } }

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def to_a; end

    sig { returns(T::Array[::Marketplace::ListingPlan]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Marketplace::ListingPlan } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

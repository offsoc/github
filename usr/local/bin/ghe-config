#!/bin/bash
#/ ghe-config provides simple key/value storage for the system-level
#/ configuration values for the GitHub Enterprise appliance.
#/ It leverages the `git` config file format by wrapping `git config`.
#/
#/ OPTIONS:
#/   -h | --help        Show this message.
#/   --ctmpl            Default to empty string when fetching missing keys.
#/ 
#/   Following are boolean tests that return 0 if true, otherwise 1:
#/   --exists [key]     True if key exists
#/   --absent [key]     True if key is absent
#/   --true [key]       True if key exists and its value is a literal "true"
#/   --present [key]    True if key exists and is non-empty
#/   --blank [key]      True if key is missing, present with an empty value
#/   --eq [key] [value] True if key exists and its value equals the second argument
#/   --ne [key] [value] True if key exists and its value does not equal the second argument,
#/                        or if the key is missing.
#/
#/ EXAMPLES:
#/   `if ghe-config --true my.key; then` ...
#/
#/ Depending on the key prefix, one of three config files is used, unless
#/ overridden by the `GHE_CONFIG` environment variable:
#/ `secrets.` -> `/data/user/common/secrets.conf`
#/ `cluster.` -> `/data/user/common/cluster.conf`
#/ otherwise  -> `/data/user/common/github.conf`
#/
#/ The underlying `git config` will return various exit codes on failure;
#/ see git-config(1).
set -e

usage() {
  grep '^#/' <"$0" | cut -c 4-
}

if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ -z "$1" ]; then
  # Display usage directly from `git config`.
  git config 2>&1 | sed 's/git config/ghe-config/'
  # Followed by some additional `ghe-config` specific usage.
  usage
  exit 2
fi

if [ "$1" = "--ctmpl" ]; then
  CTMPL=true
  shift 1
fi

case $1 in
  --exists)
    $0 "$2" &>/dev/null && exit 0 || exit 1
    ;;
  --absent)
    $0 "$2" &>/dev/null && exit 1 || exit 0
    ;;
  --true)
    [[ $($0 "$2") = true ]] && exit 0 || exit 1
    ;;
  --present)
    [[ -n $($0 "$2") ]] && exit 0 || exit 1
    ;;
  --blank)
    [[ -z $($0 "$2" || true) ]] && exit 0 || exit 1
    ;;
  --eq)
    [[ $($0 "$2") = "$3" ]] && exit 0 || exit 1
    ;;
  --ne)
    [[ $($0 "$2") != "$3" ]] && exit 0 || exit 1
    ;;
esac

export GIT_CONFIG_NOSYSTEM=1
export GIT_CONFIG=${GHE_CONFIG:-/data/user/common/github.conf}

if [ -n "$ENTERPRISE_MOCK" ]; then
  exec git config "$@"
  exit 1
fi

key=''
for arg in "$@"; do
  if [[ "$arg" == -* ]]; then continue; fi
  key=$arg
  break
done
primary_key=$(echo "$key" | tr "." "\\n" | head -n 1)
config_dir=$(dirname "$GIT_CONFIG")
if [ "$primary_key" = "secrets" ]; then
  export GIT_CONFIG="${SECRETS_CONFIG:-$config_dir/secrets.conf}"
elif [[ "$primary_key" = cluster* ]]; then
  export GIT_CONFIG="${CLUSTER_CONFIG:-$config_dir/cluster.conf}"
fi

# Warn when enabling Actions
if [ "$key" = "app.actions.enabled" ] && [ "$2" = "true" ]; then
  echo "Hardware requirements, such as memory and vCPU, increase when GitHub Actions is enabled. Ensure you have reviewed the requirements for your platform before applying this configuration change: https://docs.github.com/admin/installation/setting-up-a-github-enterprise-server-instance"
fi

# Warn when disabling artifactcache
if [ "$key" = "app.actions.artifactcache.enabled" ] && [ "$2" = "false" ]; then
  echo "Disabling Actions Cache service. Some features (like artifact caching) might not work as expected."
fi

# Warn when disabling Actions updates
if [ "$key" = "app.actions.updates-disabled" ] && [ "$2" = "true" ]; then
  echo "WARNING: The app.actions.updates-disabled flag is only meant to be used at the direction of GitHub Support in order to temporarily get around certain issues. The flag should be unset once the issues are resolved, or it could lead to the system getting into an unsupported state."
fi

if [ -n "$CTMPL" ]; then
  existing_default=false
  # Check for an existing default
  for arg in "$@"; do
    if [[ "$arg" == "--default" ]]; then
      existing_default=true
    fi
  done

  if ! $existing_default; then
    exec git config --default "" "$@"
  fi
fi

exec git config "$@"

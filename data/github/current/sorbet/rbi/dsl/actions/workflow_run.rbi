# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Actions::WorkflowRun`.
# Please instead update this file by running `bin/tapioca dsl Actions::WorkflowRun`.

class Actions::WorkflowRun
  include GeneratedAsyncReflectionAssociations
  include GeneratedSpammableMethods
  extend GeneratedSpammableClassMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Actions::WorkflowRun).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Actions::WorkflowRun)) }
    def fifth; end

    sig { returns(::Actions::WorkflowRun) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Actions::WorkflowRun)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Actions::WorkflowRun) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(T.nilable(T::Enumerator[::Actions::WorkflowRun]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Actions::WorkflowRun]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Actions::WorkflowRun]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Actions::WorkflowRun)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Actions::WorkflowRun) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Actions::WorkflowRun) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Actions::WorkflowRun) }
    def first!; end

    sig { returns(T.nilable(::Actions::WorkflowRun)) }
    def forty_two; end

    sig { returns(::Actions::WorkflowRun) }
    def forty_two!; end

    sig { returns(T.nilable(::Actions::WorkflowRun)) }
    def fourth; end

    sig { returns(::Actions::WorkflowRun) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Actions::WorkflowRun) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Actions::WorkflowRun).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Actions::WorkflowRun).void)
      ).returns(::Actions::WorkflowRun)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Actions::WorkflowRun).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Actions::WorkflowRun).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Actions::WorkflowRun)) }
    def second; end

    sig { returns(::Actions::WorkflowRun) }
    def second!; end

    sig { returns(T.nilable(::Actions::WorkflowRun)) }
    def second_to_last; end

    sig { returns(::Actions::WorkflowRun) }
    def second_to_last!; end

    sig { returns(::Actions::WorkflowRun) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Actions::WorkflowRun) }
    def take!; end

    sig { returns(T.nilable(::Actions::WorkflowRun)) }
    def third; end

    sig { returns(::Actions::WorkflowRun) }
    def third!; end

    sig { returns(T.nilable(::Actions::WorkflowRun)) }
    def third_to_last; end

    sig { returns(::Actions::WorkflowRun) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def actor; end

    sig { params(value: T.nilable(::User)).void }
    def actor=(value); end

    sig { returns(T::Array[T.untyped]) }
    def artifact_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def artifact_ids=(ids); end

    # This method is created by ActiveRecord on the `Actions::WorkflowRun` class because it declared `has_many :artifacts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Artifact::PrivateCollectionProxy) }
    def artifacts; end

    sig { params(value: T::Enumerable[::Artifact]).void }
    def artifacts=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CheckSuite) }
    def build_check_suite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::WorkflowRunExecution) }
    def build_latest_workflow_run_execution(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::WorkflowJobRun) }
    def build_latest_workflow_run_job(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::Workflow) }
    def build_workflow(*args, &blk); end

    sig { returns(T.nilable(::CheckSuite)) }
    def check_suite; end

    sig { params(value: T.nilable(::CheckSuite)).void }
    def check_suite=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_actor(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_actor!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CheckSuite) }
    def create_check_suite(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CheckSuite) }
    def create_check_suite!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::WorkflowRunExecution) }
    def create_latest_workflow_run_execution(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::WorkflowRunExecution) }
    def create_latest_workflow_run_execution!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::WorkflowJobRun) }
    def create_latest_workflow_run_job(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::WorkflowJobRun) }
    def create_latest_workflow_run_job!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::Workflow) }
    def create_workflow(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Actions::Workflow) }
    def create_workflow!(*args, &blk); end

    sig { returns(T.nilable(::Actions::WorkflowRunExecution)) }
    def latest_workflow_run_execution; end

    sig { params(value: T.nilable(::Actions::WorkflowRunExecution)).void }
    def latest_workflow_run_execution=(value); end

    sig { returns(T.nilable(::Actions::WorkflowJobRun)) }
    def latest_workflow_run_job; end

    sig { params(value: T.nilable(::Actions::WorkflowJobRun)).void }
    def latest_workflow_run_job=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_actor; end

    sig { returns(T.nilable(::CheckSuite)) }
    def reload_check_suite; end

    sig { returns(T.nilable(::Actions::WorkflowRunExecution)) }
    def reload_latest_workflow_run_execution; end

    sig { returns(T.nilable(::Actions::WorkflowJobRun)) }
    def reload_latest_workflow_run_job; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.untyped) }
    def reload_trigger; end

    sig { returns(T.nilable(::Actions::Workflow)) }
    def reload_workflow; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T.untyped) }
    def trigger; end

    sig { params(value: T.untyped).void }
    def trigger=(value); end

    sig { returns(T.nilable(::Actions::Workflow)) }
    def workflow; end

    sig { params(value: T.nilable(::Actions::Workflow)).void }
    def workflow=(value); end

    sig { returns(T::Array[T.untyped]) }
    def workflow_job_run_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def workflow_job_run_ids=(ids); end

    # This method is created by ActiveRecord on the `Actions::WorkflowRun` class because it declared `has_many :workflow_job_runs`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Actions::WorkflowJobRun::PrivateCollectionProxy) }
    def workflow_job_runs; end

    sig { params(value: T::Enumerable[::Actions::WorkflowJobRun]).void }
    def workflow_job_runs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def workflow_run_execution_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def workflow_run_execution_ids=(ids); end

    # This method is created by ActiveRecord on the `Actions::WorkflowRun` class because it declared `has_many :workflow_run_executions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Actions::WorkflowRunExecution::PrivateCollectionProxy) }
    def workflow_run_executions; end

    sig { params(value: T::Enumerable[::Actions::WorkflowRunExecution]).void }
    def workflow_run_executions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_recent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_execution_graph(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_actor; end

    sig { returns(Promise[T.untyped]) }
    def async_artifacts; end

    sig { returns(Promise[T.untyped]) }
    def async_check_suite; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_workflow_run_execution; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_workflow_run_job; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_trigger; end

    sig { returns(Promise[T.untyped]) }
    def async_workflow; end

    sig { returns(Promise[T.untyped]) }
    def async_workflow_job_runs; end

    sig { returns(Promise[T.untyped]) }
    def async_workflow_run_executions; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def action; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def action=(value); end

    sig { returns(T::Boolean) }
    def action?; end

    sig { returns(T.untyped) }
    def action_before_last_save; end

    sig { returns(T.untyped) }
    def action_before_type_cast; end

    sig { returns(T::Boolean) }
    def action_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def action_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def action_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def action_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def action_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def action_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def action_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def action_previously_was; end

    sig { returns(T.untyped) }
    def action_was; end

    sig { void }
    def action_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def actor_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def actor_id=(value); end

    sig { returns(T::Boolean) }
    def actor_id?; end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_before_last_save; end

    sig { returns(T.untyped) }
    def actor_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def actor_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def actor_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def actor_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def actor_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def actor_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def actor_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def actor_id_was; end

    sig { void }
    def actor_id_will_change!; end

    sig { returns(::Integer) }
    def check_suite_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def check_suite_id=(value); end

    sig { returns(T::Boolean) }
    def check_suite_id?; end

    sig { returns(T.nilable(::Integer)) }
    def check_suite_id_before_last_save; end

    sig { returns(T.untyped) }
    def check_suite_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def check_suite_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def check_suite_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def check_suite_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def check_suite_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def check_suite_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def check_suite_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def check_suite_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def check_suite_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def check_suite_id_was; end

    sig { void }
    def check_suite_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def cloned_workflow_run_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def cloned_workflow_run_id=(value); end

    sig { returns(T::Boolean) }
    def cloned_workflow_run_id?; end

    sig { returns(T.nilable(::Integer)) }
    def cloned_workflow_run_id_before_last_save; end

    sig { returns(T.untyped) }
    def cloned_workflow_run_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def cloned_workflow_run_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def cloned_workflow_run_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def cloned_workflow_run_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def cloned_workflow_run_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cloned_workflow_run_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def cloned_workflow_run_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def cloned_workflow_run_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def cloned_workflow_run_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def cloned_workflow_run_id_was; end

    sig { void }
    def cloned_workflow_run_id_will_change!; end

    sig { returns(T.untyped) }
    def concurrency; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def concurrency=(value); end

    sig { returns(T::Boolean) }
    def concurrency?; end

    sig { returns(T.untyped) }
    def concurrency_before_last_save; end

    sig { returns(T.untyped) }
    def concurrency_before_type_cast; end

    sig { returns(T::Boolean) }
    def concurrency_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def concurrency_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def concurrency_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def concurrency_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def concurrency_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def concurrency_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def concurrency_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def concurrency_previously_was; end

    sig { returns(T.untyped) }
    def concurrency_was; end

    sig { void }
    def concurrency_will_change!; end

    sig { returns(T.nilable(::String)) }
    def event; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def event=(value); end

    sig { returns(T::Boolean) }
    def event?; end

    sig { returns(T.nilable(::String)) }
    def event_before_last_save; end

    sig { returns(T.untyped) }
    def event_before_type_cast; end

    sig { returns(T::Boolean) }
    def event_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def event_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def event_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def event_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def event_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def event_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def event_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def event_previously_was; end

    sig { returns(T.nilable(::String)) }
    def event_was; end

    sig { void }
    def event_will_change!; end

    sig { returns(T.untyped) }
    def execution_graph; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def execution_graph=(value); end

    sig { returns(T::Boolean) }
    def execution_graph?; end

    sig { returns(T.untyped) }
    def execution_graph_before_last_save; end

    sig { returns(T.untyped) }
    def execution_graph_before_type_cast; end

    sig { returns(T::Boolean) }
    def execution_graph_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def execution_graph_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def execution_graph_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def execution_graph_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def execution_graph_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def execution_graph_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def execution_graph_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def execution_graph_previously_was; end

    sig { returns(T.untyped) }
    def execution_graph_was; end

    sig { void }
    def execution_graph_will_change!; end

    sig { returns(T::Boolean) }
    def explicit_name; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def explicit_name=(value); end

    sig { returns(T::Boolean) }
    def explicit_name?; end

    sig { returns(T.nilable(T::Boolean)) }
    def explicit_name_before_last_save; end

    sig { returns(T.untyped) }
    def explicit_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def explicit_name_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def explicit_name_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def explicit_name_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def explicit_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def explicit_name_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def explicit_name_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def explicit_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def explicit_name_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def explicit_name_was; end

    sig { void }
    def explicit_name_will_change!; end

    sig { returns(T.untyped) }
    def head_branch; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def head_branch=(value); end

    sig { returns(T::Boolean) }
    def head_branch?; end

    sig { returns(T.untyped) }
    def head_branch_before_last_save; end

    sig { returns(T.untyped) }
    def head_branch_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_branch_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_branch_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_branch_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def head_branch_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def head_branch_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_branch_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def head_branch_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def head_branch_previously_was; end

    sig { returns(T.untyped) }
    def head_branch_was; end

    sig { void }
    def head_branch_will_change!; end

    sig { returns(T.nilable(::String)) }
    def head_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def head_sha=(value); end

    sig { returns(T::Boolean) }
    def head_sha?; end

    sig { returns(T.nilable(::String)) }
    def head_sha_before_last_save; end

    sig { returns(T.untyped) }
    def head_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def head_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def head_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def head_sha_was; end

    sig { void }
    def head_sha_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def imposer_repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def imposer_repository_id=(value); end

    sig { returns(T::Boolean) }
    def imposer_repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def imposer_repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def imposer_repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def imposer_repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def imposer_repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def imposer_repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def imposer_repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def imposer_repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def imposer_repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def imposer_repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def imposer_repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def imposer_repository_id_was; end

    sig { void }
    def imposer_repository_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def latest_workflow_run_execution_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def latest_workflow_run_execution_id=(value); end

    sig { returns(T::Boolean) }
    def latest_workflow_run_execution_id?; end

    sig { returns(T.nilable(::Integer)) }
    def latest_workflow_run_execution_id_before_last_save; end

    sig { returns(T.untyped) }
    def latest_workflow_run_execution_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def latest_workflow_run_execution_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def latest_workflow_run_execution_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def latest_workflow_run_execution_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def latest_workflow_run_execution_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def latest_workflow_run_execution_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def latest_workflow_run_execution_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def latest_workflow_run_execution_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def latest_workflow_run_execution_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def latest_workflow_run_execution_id_was; end

    sig { void }
    def latest_workflow_run_execution_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def logs_deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def logs_deleted_at=(value); end

    sig { returns(T::Boolean) }
    def logs_deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def logs_deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def logs_deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def logs_deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def logs_deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def logs_deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def logs_deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def logs_deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def logs_deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def logs_deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def logs_deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def logs_deleted_at_was; end

    sig { void }
    def logs_deleted_at_will_change!; end

    sig { returns(T.untyped) }
    def name; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.untyped) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def name_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def name_previously_was; end

    sig { returns(T.untyped) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_action!; end

    sig { void }
    def restore_actor_id!; end

    sig { void }
    def restore_check_suite_id!; end

    sig { void }
    def restore_cloned_workflow_run_id!; end

    sig { void }
    def restore_concurrency!; end

    sig { void }
    def restore_event!; end

    sig { void }
    def restore_execution_graph!; end

    sig { void }
    def restore_explicit_name!; end

    sig { void }
    def restore_head_branch!; end

    sig { void }
    def restore_head_sha!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_imposer_repository_id!; end

    sig { void }
    def restore_latest_workflow_run_execution_id!; end

    sig { void }
    def restore_logs_deleted_at!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_run_number!; end

    sig { void }
    def restore_tree_id!; end

    sig { void }
    def restore_trigger_id!; end

    sig { void }
    def restore_trigger_type!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_workflow_file_checkout_sha!; end

    sig { void }
    def restore_workflow_file_path!; end

    sig { void }
    def restore_workflow_file_ref!; end

    sig { void }
    def restore_workflow_id!; end

    sig { returns(::Integer) }
    def run_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def run_number=(value); end

    sig { returns(T::Boolean) }
    def run_number?; end

    sig { returns(T.nilable(::Integer)) }
    def run_number_before_last_save; end

    sig { returns(T.untyped) }
    def run_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def run_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def run_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def run_number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def run_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def run_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def run_number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def run_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def run_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def run_number_was; end

    sig { void }
    def run_number_will_change!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_action; end

    sig { returns(T::Boolean) }
    def saved_change_to_action?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_actor_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_actor_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_check_suite_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_check_suite_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_cloned_workflow_run_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_cloned_workflow_run_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_concurrency; end

    sig { returns(T::Boolean) }
    def saved_change_to_concurrency?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_event; end

    sig { returns(T::Boolean) }
    def saved_change_to_event?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_execution_graph; end

    sig { returns(T::Boolean) }
    def saved_change_to_execution_graph?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_explicit_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_explicit_name?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_head_branch; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_branch?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_head_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_sha?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_imposer_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_imposer_repository_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_latest_workflow_run_execution_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_latest_workflow_run_execution_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_logs_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_logs_deleted_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_run_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_run_number?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tree_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_tree_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_trigger_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_trigger_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_trigger_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_trigger_type?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_workflow_file_checkout_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_workflow_file_checkout_sha?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_workflow_file_path; end

    sig { returns(T::Boolean) }
    def saved_change_to_workflow_file_path?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_workflow_file_ref; end

    sig { returns(T::Boolean) }
    def saved_change_to_workflow_file_ref?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_workflow_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_workflow_id?; end

    sig { returns(T.nilable(::String)) }
    def tree_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tree_id=(value); end

    sig { returns(T::Boolean) }
    def tree_id?; end

    sig { returns(T.nilable(::String)) }
    def tree_id_before_last_save; end

    sig { returns(T.untyped) }
    def tree_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def tree_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tree_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tree_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tree_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tree_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tree_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tree_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tree_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tree_id_was; end

    sig { void }
    def tree_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def trigger_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def trigger_id=(value); end

    sig { returns(T::Boolean) }
    def trigger_id?; end

    sig { returns(T.nilable(::Integer)) }
    def trigger_id_before_last_save; end

    sig { returns(T.untyped) }
    def trigger_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def trigger_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def trigger_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def trigger_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def trigger_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def trigger_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def trigger_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def trigger_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def trigger_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def trigger_id_was; end

    sig { void }
    def trigger_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def trigger_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def trigger_type=(value); end

    sig { returns(T::Boolean) }
    def trigger_type?; end

    sig { returns(T.nilable(::String)) }
    def trigger_type_before_last_save; end

    sig { returns(T.untyped) }
    def trigger_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def trigger_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trigger_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trigger_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def trigger_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def trigger_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def trigger_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def trigger_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def trigger_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def trigger_type_was; end

    sig { void }
    def trigger_type_will_change!; end

    sig { returns(T::Boolean) }
    def user_hidden; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def user_hidden_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_action?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_actor_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_check_suite_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cloned_workflow_run_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_concurrency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_event?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_execution_graph?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_explicit_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_branch?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_imposer_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latest_workflow_run_execution_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_logs_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_run_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tree_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trigger_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_trigger_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_workflow_file_checkout_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_workflow_file_path?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_workflow_file_ref?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_workflow_id?; end

    sig { returns(T.nilable(::String)) }
    def workflow_file_checkout_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def workflow_file_checkout_sha=(value); end

    sig { returns(T::Boolean) }
    def workflow_file_checkout_sha?; end

    sig { returns(T.nilable(::String)) }
    def workflow_file_checkout_sha_before_last_save; end

    sig { returns(T.untyped) }
    def workflow_file_checkout_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def workflow_file_checkout_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def workflow_file_checkout_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def workflow_file_checkout_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def workflow_file_checkout_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def workflow_file_checkout_sha_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def workflow_file_checkout_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def workflow_file_checkout_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def workflow_file_checkout_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def workflow_file_checkout_sha_was; end

    sig { void }
    def workflow_file_checkout_sha_will_change!; end

    sig { returns(T.untyped) }
    def workflow_file_path; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def workflow_file_path=(value); end

    sig { returns(T::Boolean) }
    def workflow_file_path?; end

    sig { returns(T.untyped) }
    def workflow_file_path_before_last_save; end

    sig { returns(T.untyped) }
    def workflow_file_path_before_type_cast; end

    sig { returns(T::Boolean) }
    def workflow_file_path_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workflow_file_path_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workflow_file_path_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def workflow_file_path_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def workflow_file_path_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workflow_file_path_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def workflow_file_path_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def workflow_file_path_previously_was; end

    sig { returns(T.untyped) }
    def workflow_file_path_was; end

    sig { void }
    def workflow_file_path_will_change!; end

    sig { returns(T.untyped) }
    def workflow_file_ref; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def workflow_file_ref=(value); end

    sig { returns(T::Boolean) }
    def workflow_file_ref?; end

    sig { returns(T.untyped) }
    def workflow_file_ref_before_last_save; end

    sig { returns(T.untyped) }
    def workflow_file_ref_before_type_cast; end

    sig { returns(T::Boolean) }
    def workflow_file_ref_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workflow_file_ref_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workflow_file_ref_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def workflow_file_ref_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def workflow_file_ref_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def workflow_file_ref_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def workflow_file_ref_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def workflow_file_ref_previously_was; end

    sig { returns(T.untyped) }
    def workflow_file_ref_was; end

    sig { void }
    def workflow_file_ref_will_change!; end

    sig { returns(::Integer) }
    def workflow_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def workflow_id=(value); end

    sig { returns(T::Boolean) }
    def workflow_id?; end

    sig { returns(T.nilable(::Integer)) }
    def workflow_id_before_last_save; end

    sig { returns(T.untyped) }
    def workflow_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def workflow_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def workflow_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def workflow_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def workflow_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def workflow_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def workflow_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def workflow_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def workflow_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def workflow_id_was; end

    sig { void }
    def workflow_id_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_recent(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_execution_graph(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedSpammableClassMethods
    sig { returns(Symbol) }
    def spammable_user_foreign_key; end
  end

  module GeneratedSpammableMethods
    sig { params(viewer: User).returns(Promise[T::Boolean]) }
    def async_hide_from_user?(viewer); end

    sig { params(viewer: User).returns(T::Boolean) }
    def hide_from_user?(viewer); end

    sig { returns(Integer) }
    def set_user_hidden; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(Symbol) }
    def user_association_for_spammy; end

    sig { params(viewer: User).returns(T::Boolean) }
    def user_authored_content?(viewer); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Actions::WorkflowRun } }

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def to_a; end

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Actions::WorkflowRun } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Actions::WorkflowRun } }

    sig do
      params(
        records: T.any(::Actions::WorkflowRun, T::Enumerable[T.any(::Actions::WorkflowRun, T::Enumerable[::Actions::WorkflowRun])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Actions::WorkflowRun, T::Enumerable[T.any(::Actions::WorkflowRun, T::Enumerable[::Actions::WorkflowRun])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Actions::WorkflowRun, T::Enumerable[T.any(::Actions::WorkflowRun, T::Enumerable[::Actions::WorkflowRun])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Actions::WorkflowRun, T::Enumerable[T.any(::Actions::WorkflowRun, T::Enumerable[::Actions::WorkflowRun])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Actions::WorkflowRun, T::Enumerable[T.any(::Actions::WorkflowRun, T::Enumerable[::Actions::WorkflowRun])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Actions::WorkflowRun, T::Enumerable[T.any(::Actions::WorkflowRun, T::Enumerable[::Actions::WorkflowRun])])
      ).returns(T::Array[::Actions::WorkflowRun])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def target; end

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def to_a; end

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Actions::WorkflowRun } }

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def to_a; end

    sig { returns(T::Array[::Actions::WorkflowRun]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Actions::WorkflowRun } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Auditlog::Streaming::V1::SplunkSink`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Auditlog::Streaming::V1::SplunkSink`.

class MonolithTwirp::Auditlog::Streaming::V1::SplunkSink
  sig do
    params(
      are_api_events_enabled: T.nilable(T::Boolean),
      domain: T.nilable(String),
      encrypted_token: T.nilable(String),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      idx: T.nilable(Integer),
      is_disabled: T.nilable(T::Boolean),
      is_gh_staff_disabled: T.nilable(T::Boolean),
      key_id: T.nilable(String),
      paused_at: T.nilable(Google::Protobuf::Timestamp),
      port: T.nilable(Integer),
      ssl_verify: T.nilable(T::Boolean),
      subject_id: T.nilable(Integer),
      subject_name: T.nilable(String),
      subject_type: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(are_api_events_enabled: nil, domain: nil, encrypted_token: nil, feature_flags: T.unsafe(nil), idx: nil, is_disabled: nil, is_gh_staff_disabled: nil, key_id: nil, paused_at: nil, port: nil, ssl_verify: nil, subject_id: nil, subject_name: nil, subject_type: nil); end

  sig { returns(T::Boolean) }
  def are_api_events_enabled; end

  sig { params(value: T::Boolean).void }
  def are_api_events_enabled=(value); end

  sig { void }
  def clear_are_api_events_enabled; end

  sig { void }
  def clear_domain; end

  sig { void }
  def clear_encrypted_token; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_idx; end

  sig { void }
  def clear_is_disabled; end

  sig { void }
  def clear_is_gh_staff_disabled; end

  sig { void }
  def clear_key_id; end

  sig { void }
  def clear_paused_at; end

  sig { void }
  def clear_port; end

  sig { void }
  def clear_ssl_verify; end

  sig { void }
  def clear_subject_id; end

  sig { void }
  def clear_subject_name; end

  sig { void }
  def clear_subject_type; end

  sig { returns(String) }
  def domain; end

  sig { params(value: String).void }
  def domain=(value); end

  sig { returns(String) }
  def encrypted_token; end

  sig { params(value: String).void }
  def encrypted_token=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(Integer) }
  def idx; end

  sig { params(value: Integer).void }
  def idx=(value); end

  sig { returns(T::Boolean) }
  def is_disabled; end

  sig { params(value: T::Boolean).void }
  def is_disabled=(value); end

  sig { returns(T::Boolean) }
  def is_gh_staff_disabled; end

  sig { params(value: T::Boolean).void }
  def is_gh_staff_disabled=(value); end

  sig { returns(String) }
  def key_id; end

  sig { params(value: String).void }
  def key_id=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def paused_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def paused_at=(value); end

  sig { returns(Integer) }
  def port; end

  sig { params(value: Integer).void }
  def port=(value); end

  sig { returns(T::Boolean) }
  def ssl_verify; end

  sig { params(value: T::Boolean).void }
  def ssl_verify=(value); end

  sig { returns(Integer) }
  def subject_id; end

  sig { params(value: Integer).void }
  def subject_id=(value); end

  sig { returns(String) }
  def subject_name; end

  sig { params(value: String).void }
  def subject_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def subject_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def subject_type=(value); end
end

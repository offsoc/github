# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `PullRequest`.
# Please instead update this file by running `bin/tapioca dsl PullRequest`.

class PullRequest
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedSpammableMethods
  extend GeneratedSpammableClassMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def fork_collab_states; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def reviewable_states; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::PullRequest).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::PullRequest]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::PullRequest)) }
    def fifth; end

    sig { returns(::PullRequest) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::PullRequest)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::PullRequest) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(T.nilable(T::Enumerator[::PullRequest]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::PullRequest]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::PullRequest]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::PullRequest)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::PullRequest) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::PullRequest) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::PullRequest) }
    def first!; end

    sig { returns(T.nilable(::PullRequest)) }
    def forty_two; end

    sig { returns(::PullRequest) }
    def forty_two!; end

    sig { returns(T.nilable(::PullRequest)) }
    def fourth; end

    sig { returns(::PullRequest) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::PullRequest) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::PullRequest).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::PullRequest).void)
      ).returns(::PullRequest)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::PullRequest).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::PullRequest).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::PullRequest)) }
    def second; end

    sig { returns(::PullRequest) }
    def second!; end

    sig { returns(T.nilable(::PullRequest)) }
    def second_to_last; end

    sig { returns(::PullRequest) }
    def second_to_last!; end

    sig { returns(::PullRequest) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::PullRequest) }
    def take!; end

    sig { returns(T.nilable(::PullRequest)) }
    def third; end

    sig { returns(::PullRequest) }
    def third!; end

    sig { returns(T.nilable(::PullRequest)) }
    def third_to_last; end

    sig { returns(::PullRequest) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def draft_state!; end

    sig { returns(T::Boolean) }
    def draft_state?; end

    sig { void }
    def fork_collab_allowed!; end

    sig { returns(T::Boolean) }
    def fork_collab_allowed?; end

    sig { void }
    def fork_collab_denied!; end

    sig { returns(T::Boolean) }
    def fork_collab_denied?; end

    sig { void }
    def in_progress_state!; end

    sig { returns(T::Boolean) }
    def in_progress_state?; end

    sig { void }
    def ready_state!; end

    sig { returns(T::Boolean) }
    def ready_state?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def abuse_report_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def abuse_report_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :abuse_reports`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AbuseReport::PrivateCollectionProxy) }
    def abuse_reports; end

    sig { params(value: T::Enumerable[::AbuseReport]).void }
    def abuse_reports=(value); end

    sig { returns(T.nilable(::AutoMergeRequest)) }
    def auto_merge_request; end

    sig { params(value: T.nilable(::AutoMergeRequest)).void }
    def auto_merge_request=(value); end

    sig { returns(T.nilable(::Repository)) }
    def base_repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def base_repository=(value); end

    sig { returns(T.nilable(::User)) }
    def base_user; end

    sig { params(value: T.nilable(::User)).void }
    def base_user=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AutoMergeRequest) }
    def build_auto_merge_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_base_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_base_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def build_conflict(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_head_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_head_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def build_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def build_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestLastPush) }
    def build_last_push(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserContentEdit) }
    def build_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def build_merge_queue_conflict(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueueEntry) }
    def build_merge_queue_entry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryDependencyUpdate) }
    def build_most_recent_vulnerability_dependency_update(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestImport) }
    def build_pull_request_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def build_rebase_conflict(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def build_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def close_issue_reference_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def close_issue_reference_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :close_issue_references`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CloseIssueReference::PrivateCollectionProxy) }
    def close_issue_references; end

    sig { params(value: T::Enumerable[::CloseIssueReference]).void }
    def close_issue_references=(value); end

    sig { returns(T::Array[T.untyped]) }
    def code_scanning_review_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def code_scanning_review_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :code_scanning_review_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CodeScanningReviewComment::PrivateCollectionProxy) }
    def code_scanning_review_comments; end

    sig { params(value: T::Enumerable[::CodeScanningReviewComment]).void }
    def code_scanning_review_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def codespace_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def codespace_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :codespaces`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Codespace::PrivateCollectionProxy) }
    def codespaces; end

    sig { params(value: T::Enumerable[::Codespace]).void }
    def codespaces=(value); end

    sig { returns(T.nilable(::PullRequestConflict)) }
    def conflict; end

    sig { params(value: T.nilable(::PullRequestConflict)).void }
    def conflict=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AutoMergeRequest) }
    def create_auto_merge_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AutoMergeRequest) }
    def create_auto_merge_request!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_base_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_base_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_base_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_base_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def create_conflict(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def create_conflict!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_head_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_head_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_head_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_head_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def create_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Import) }
    def create_import!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Issue) }
    def create_issue!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestLastPush) }
    def create_last_push(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestLastPush) }
    def create_last_push!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserContentEdit) }
    def create_latest_user_content_edit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::UserContentEdit) }
    def create_latest_user_content_edit!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def create_merge_queue_conflict(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def create_merge_queue_conflict!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueueEntry) }
    def create_merge_queue_entry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::MergeQueueEntry) }
    def create_merge_queue_entry!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryDependencyUpdate) }
    def create_most_recent_vulnerability_dependency_update(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RepositoryDependencyUpdate) }
    def create_most_recent_vulnerability_dependency_update!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestImport) }
    def create_pull_request_import(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestImport) }
    def create_pull_request_import!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def create_rebase_conflict(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PullRequestConflict) }
    def create_rebase_conflict!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Repository) }
    def create_repository!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def dependency_update_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def dependency_update_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :dependency_updates`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::RepositoryDependencyUpdate::PrivateCollectionProxy) }
    def dependency_updates; end

    sig { params(value: T::Enumerable[::RepositoryDependencyUpdate]).void }
    def dependency_updates=(value); end

    sig { returns(T::Array[T.untyped]) }
    def file_review_thread_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def file_review_thread_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :file_review_threads`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewThread::PrivateCollectionProxy) }
    def file_review_threads; end

    sig { params(value: T::Enumerable[::PullRequestReviewThread]).void }
    def file_review_threads=(value); end

    sig { returns(T.nilable(::Repository)) }
    def head_repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def head_repository=(value); end

    sig { returns(T.nilable(::User)) }
    def head_user; end

    sig { params(value: T.nilable(::User)).void }
    def head_user=(value); end

    sig { returns(T.nilable(::Import)) }
    def import; end

    sig { params(value: T.nilable(::Import)).void }
    def import=(value); end

    sig { returns(T.nilable(::Issue)) }
    def issue; end

    sig { params(value: T.nilable(::Issue)).void }
    def issue=(value); end

    sig { returns(T.nilable(::PullRequestLastPush)) }
    def last_push; end

    sig { params(value: T.nilable(::PullRequestLastPush)).void }
    def last_push=(value); end

    sig { returns(T::Array[T.untyped]) }
    def last_seen_pull_request_revision_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def last_seen_pull_request_revision_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :last_seen_pull_request_revisions`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::LastSeenPullRequestRevision::PrivateCollectionProxy) }
    def last_seen_pull_request_revisions; end

    sig { params(value: T::Enumerable[::LastSeenPullRequestRevision]).void }
    def last_seen_pull_request_revisions=(value); end

    sig { returns(T.nilable(::UserContentEdit)) }
    def latest_user_content_edit; end

    sig { params(value: T.nilable(::UserContentEdit)).void }
    def latest_user_content_edit=(value); end

    sig { returns(T::Array[T.untyped]) }
    def legacy_review_thread_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def legacy_review_thread_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :legacy_review_threads`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewThread::PrivateCollectionProxy) }
    def legacy_review_threads; end

    sig { params(value: T::Enumerable[::PullRequestReviewThread]).void }
    def legacy_review_threads=(value); end

    sig { returns(T::Array[T.untyped]) }
    def line_review_thread_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def line_review_thread_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :line_review_threads`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewThread::PrivateCollectionProxy) }
    def line_review_threads; end

    sig { params(value: T::Enumerable[::PullRequestReviewThread]).void }
    def line_review_threads=(value); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def memex_project_item_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def memex_project_item_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :memex_project_items`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::MemexProjectItem::PrivateCollectionProxy) }
    def memex_project_items; end

    sig { params(value: T::Enumerable[::MemexProjectItem]).void }
    def memex_project_items=(value); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :memex_projects, through: :memex_project_items`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::MemexProject::PrivateCollectionProxy) }
    def memex_projects; end

    sig { params(value: T::Enumerable[::MemexProject]).void }
    def memex_projects=(value); end

    sig { returns(T.nilable(::PullRequestConflict)) }
    def merge_queue_conflict; end

    sig { params(value: T.nilable(::PullRequestConflict)).void }
    def merge_queue_conflict=(value); end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def merge_queue_entry; end

    sig { params(value: T.nilable(::MergeQueueEntry)).void }
    def merge_queue_entry=(value); end

    sig { returns(T.nilable(::RepositoryDependencyUpdate)) }
    def most_recent_vulnerability_dependency_update; end

    sig { params(value: T.nilable(::RepositoryDependencyUpdate)).void }
    def most_recent_vulnerability_dependency_update=(value); end

    sig { returns(T.nilable(::PullRequestImport)) }
    def pull_request_import; end

    sig { params(value: T.nilable(::PullRequestImport)).void }
    def pull_request_import=(value); end

    sig { returns(T::Array[T.untyped]) }
    def pull_request_source_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def pull_request_source_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :pull_request_sources`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestSource::PrivateCollectionProxy) }
    def pull_request_sources; end

    sig { params(value: T::Enumerable[::PullRequestSource]).void }
    def pull_request_sources=(value); end

    sig { returns(T.nilable(::PullRequestConflict)) }
    def rebase_conflict; end

    sig { params(value: T.nilable(::PullRequestConflict)).void }
    def rebase_conflict=(value); end

    sig { returns(T.nilable(::AutoMergeRequest)) }
    def reload_auto_merge_request; end

    sig { returns(T.nilable(::Repository)) }
    def reload_base_repository; end

    sig { returns(T.nilable(::User)) }
    def reload_base_user; end

    sig { returns(T.nilable(::PullRequestConflict)) }
    def reload_conflict; end

    sig { returns(T.nilable(::Repository)) }
    def reload_head_repository; end

    sig { returns(T.nilable(::User)) }
    def reload_head_user; end

    sig { returns(T.nilable(::Import)) }
    def reload_import; end

    sig { returns(T.nilable(::Issue)) }
    def reload_issue; end

    sig { returns(T.nilable(::PullRequestLastPush)) }
    def reload_last_push; end

    sig { returns(T.nilable(::UserContentEdit)) }
    def reload_latest_user_content_edit; end

    sig { returns(T.nilable(::PullRequestConflict)) }
    def reload_merge_queue_conflict; end

    sig { returns(T.nilable(::MergeQueueEntry)) }
    def reload_merge_queue_entry; end

    sig { returns(T.nilable(::RepositoryDependencyUpdate)) }
    def reload_most_recent_vulnerability_dependency_update; end

    sig { returns(T.nilable(::PullRequestImport)) }
    def reload_pull_request_import; end

    sig { returns(T.nilable(::PullRequestConflict)) }
    def reload_rebase_conflict; end

    sig { returns(T.nilable(::Repository)) }
    def reload_repository; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::Repository)) }
    def repository; end

    sig { params(value: T.nilable(::Repository)).void }
    def repository=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_comment_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :review_comments`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewComment::PrivateCollectionProxy) }
    def review_comments; end

    sig { params(value: T::Enumerable[::PullRequestReviewComment]).void }
    def review_comments=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def review_point_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_point_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :review_points`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewPoint::PrivateCollectionProxy) }
    def review_points; end

    sig { params(value: T::Enumerable[::PullRequestReviewPoint]).void }
    def review_points=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_request_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :review_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReviewRequest::PrivateCollectionProxy) }
    def review_requests; end

    sig { params(value: T::Enumerable[::ReviewRequest]).void }
    def review_requests=(value); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :review_requests_pending`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReviewRequest::PrivateCollectionProxy) }
    def review_requests_pending; end

    sig { params(value: T::Enumerable[::ReviewRequest]).void }
    def review_requests_pending=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_requests_pending_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_requests_pending_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def review_thread_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_thread_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :review_threads`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReviewThread::PrivateCollectionProxy) }
    def review_threads; end

    sig { params(value: T::Enumerable[::PullRequestReviewThread]).void }
    def review_threads=(value); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :reviews`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestReview::PrivateCollectionProxy) }
    def reviews; end

    sig { params(value: T::Enumerable[::PullRequestReview]).void }
    def reviews=(value); end

    sig { returns(T::Array[T.untyped]) }
    def unscoped_review_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def unscoped_review_request_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :unscoped_review_requests`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReviewRequest::PrivateCollectionProxy) }
    def unscoped_review_requests; end

    sig { params(value: T::Enumerable[::ReviewRequest]).void }
    def unscoped_review_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def update_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def update_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :updates`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PullRequestUpdate::PrivateCollectionProxy) }
    def updates; end

    sig { params(value: T::Enumerable[::PullRequestUpdate]).void }
    def updates=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_content_edit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_content_edit_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :user_content_edits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserContentEdit::PrivateCollectionProxy) }
    def user_content_edits; end

    sig { params(value: T::Enumerable[::UserContentEdit]).void }
    def user_content_edits=(value); end

    sig { returns(T::Array[T.untyped]) }
    def user_reviewed_file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def user_reviewed_file_ids=(ids); end

    # This method is created by ActiveRecord on the `PullRequest` class because it declared `has_many :user_reviewed_files`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::UserReviewedFile::PrivateCollectionProxy) }
    def user_reviewed_files; end

    sig { params(value: T::Enumerable[::UserReviewedFile]).void }
    def user_reviewed_files=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_creation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_updates(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closed_pulls(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def closes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def draft_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def drafts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_base_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_base_repo_and_base_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_head_repo_and_head_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fork_collab_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fork_collab_denied(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_progress_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def labeled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_draft_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_fork_collab_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_fork_collab_denied(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_in_progress_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_ready_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open_based_on_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open_pull_requests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def open_pulls(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ready_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def to_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_abuse_reports; end

    sig { returns(Promise[T.untyped]) }
    def async_auto_merge_request; end

    sig { returns(Promise[T.untyped]) }
    def async_base_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_base_user; end

    sig { returns(Promise[T.untyped]) }
    def async_close_issue_references; end

    sig { returns(Promise[T.untyped]) }
    def async_code_scanning_review_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_codespaces; end

    sig { returns(Promise[T.untyped]) }
    def async_conflict; end

    sig { returns(Promise[T.untyped]) }
    def async_dependency_updates; end

    sig { returns(Promise[T.untyped]) }
    def async_file_review_threads; end

    sig { returns(Promise[T.untyped]) }
    def async_head_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_head_user; end

    sig { returns(Promise[T.untyped]) }
    def async_import; end

    sig { returns(Promise[T.untyped]) }
    def async_issue; end

    sig { returns(Promise[T.untyped]) }
    def async_last_push; end

    sig { returns(Promise[T.untyped]) }
    def async_last_seen_pull_request_revisions; end

    sig { returns(Promise[T.untyped]) }
    def async_latest_user_content_edit; end

    sig { returns(Promise[T.untyped]) }
    def async_legacy_review_threads; end

    sig { returns(Promise[T.untyped]) }
    def async_line_review_threads; end

    sig { returns(Promise[T.untyped]) }
    def async_memex_project_items; end

    sig { returns(Promise[T.untyped]) }
    def async_memex_projects; end

    sig { returns(Promise[T.untyped]) }
    def async_merge_queue_conflict; end

    sig { returns(Promise[T.untyped]) }
    def async_merge_queue_entry; end

    sig { returns(Promise[T.untyped]) }
    def async_most_recent_vulnerability_dependency_update; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request_import; end

    sig { returns(Promise[T.untyped]) }
    def async_pull_request_sources; end

    sig { returns(Promise[T.untyped]) }
    def async_rebase_conflict; end

    sig { returns(Promise[T.untyped]) }
    def async_repository; end

    sig { returns(Promise[T.untyped]) }
    def async_review_comments; end

    sig { returns(Promise[T.untyped]) }
    def async_review_points; end

    sig { returns(Promise[T.untyped]) }
    def async_review_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_review_requests_pending; end

    sig { returns(Promise[T.untyped]) }
    def async_review_threads; end

    sig { returns(Promise[T.untyped]) }
    def async_reviews; end

    sig { returns(Promise[T.untyped]) }
    def async_unscoped_review_requests; end

    sig { returns(Promise[T.untyped]) }
    def async_updates; end

    sig { returns(Promise[T.untyped]) }
    def async_user; end

    sig { returns(Promise[T.untyped]) }
    def async_user_content_edits; end

    sig { returns(Promise[T.untyped]) }
    def async_user_reviewed_files; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def base_ref; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def base_ref=(value); end

    sig { returns(T::Boolean) }
    def base_ref?; end

    sig { returns(T.untyped) }
    def base_ref_before_last_save; end

    sig { returns(T.untyped) }
    def base_ref_before_type_cast; end

    sig { returns(T::Boolean) }
    def base_ref_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def base_ref_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def base_ref_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def base_ref_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def base_ref_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def base_ref_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def base_ref_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def base_ref_previously_was; end

    sig { returns(T.untyped) }
    def base_ref_was; end

    sig { void }
    def base_ref_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def base_repository_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def base_repository_id=(value); end

    sig { returns(T::Boolean) }
    def base_repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def base_repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def base_repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def base_repository_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def base_repository_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def base_repository_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def base_repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def base_repository_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def base_repository_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def base_repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def base_repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def base_repository_id_was; end

    sig { void }
    def base_repository_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def base_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def base_sha=(value); end

    sig { returns(T::Boolean) }
    def base_sha?; end

    sig { returns(T.nilable(::String)) }
    def base_sha_before_last_save; end

    sig { returns(T.untyped) }
    def base_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def base_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def base_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def base_sha_in_database; end

    sig { returns(T.nilable(::String)) }
    def base_sha_on_merge; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def base_sha_on_merge=(value); end

    sig { returns(T::Boolean) }
    def base_sha_on_merge?; end

    sig { returns(T.nilable(::String)) }
    def base_sha_on_merge_before_last_save; end

    sig { returns(T.untyped) }
    def base_sha_on_merge_before_type_cast; end

    sig { returns(T::Boolean) }
    def base_sha_on_merge_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_on_merge_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_on_merge_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def base_sha_on_merge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def base_sha_on_merge_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_on_merge_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def base_sha_on_merge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def base_sha_on_merge_previously_was; end

    sig { returns(T.nilable(::String)) }
    def base_sha_on_merge_was; end

    sig { void }
    def base_sha_on_merge_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def base_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def base_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def base_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def base_sha_was; end

    sig { void }
    def base_sha_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def base_user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def base_user_id=(value); end

    sig { returns(T::Boolean) }
    def base_user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def base_user_id_before_last_save; end

    sig { returns(T.untyped) }
    def base_user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def base_user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def base_user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def base_user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def base_user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def base_user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def base_user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def base_user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def base_user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def base_user_id_was; end

    sig { void }
    def base_user_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def contributed_at_offset=(value); end

    sig { returns(T::Boolean) }
    def contributed_at_offset?; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_before_last_save; end

    sig { returns(T.untyped) }
    def contributed_at_offset_before_type_cast; end

    sig { returns(T::Boolean) }
    def contributed_at_offset_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_offset_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_offset_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_offset_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_offset_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_offset_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_offset_was; end

    sig { void }
    def contributed_at_offset_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def contributed_at_timestamp=(value); end

    sig { returns(T::Boolean) }
    def contributed_at_timestamp?; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_before_last_save; end

    sig { returns(T.untyped) }
    def contributed_at_timestamp_before_type_cast; end

    sig { returns(T::Boolean) }
    def contributed_at_timestamp_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_timestamp_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_timestamp_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_timestamp_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def contributed_at_timestamp_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def contributed_at_timestamp_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def contributed_at_timestamp_was; end

    sig { void }
    def contributed_at_timestamp_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T::Boolean) }
    def draft; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def draft=(value); end

    sig { returns(T::Boolean) }
    def draft?; end

    sig { returns(T.nilable(T::Boolean)) }
    def draft_before_last_save; end

    sig { returns(T.untyped) }
    def draft_before_type_cast; end

    sig { returns(T::Boolean) }
    def draft_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def draft_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def draft_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def draft_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def draft_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def draft_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def draft_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def draft_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def draft_was; end

    sig { void }
    def draft_will_change!; end

    sig { returns(::String) }
    def fork_collab_state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def fork_collab_state=(value); end

    sig { returns(T::Boolean) }
    def fork_collab_state?; end

    sig { returns(T.nilable(::String)) }
    def fork_collab_state_before_last_save; end

    sig { returns(T.untyped) }
    def fork_collab_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def fork_collab_state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def fork_collab_state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def fork_collab_state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def fork_collab_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def fork_collab_state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def fork_collab_state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def fork_collab_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def fork_collab_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def fork_collab_state_was; end

    sig { void }
    def fork_collab_state_will_change!; end

    sig { returns(T.untyped) }
    def head_ref; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def head_ref=(value); end

    sig { returns(T::Boolean) }
    def head_ref?; end

    sig { returns(T.untyped) }
    def head_ref_before_last_save; end

    sig { returns(T.untyped) }
    def head_ref_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_ref_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_ref_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_ref_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def head_ref_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def head_ref_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def head_ref_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def head_ref_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def head_ref_previously_was; end

    sig { returns(T.untyped) }
    def head_ref_was; end

    sig { void }
    def head_ref_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def head_repository_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def head_repository_id=(value); end

    sig { returns(T::Boolean) }
    def head_repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def head_repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def head_repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_repository_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def head_repository_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def head_repository_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def head_repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def head_repository_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def head_repository_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def head_repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def head_repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def head_repository_id_was; end

    sig { void }
    def head_repository_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def head_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def head_sha=(value); end

    sig { returns(T::Boolean) }
    def head_sha?; end

    sig { returns(T.nilable(::String)) }
    def head_sha_before_last_save; end

    sig { returns(T.untyped) }
    def head_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def head_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def head_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def head_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def head_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def head_sha_was; end

    sig { void }
    def head_sha_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def head_user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def head_user_id=(value); end

    sig { returns(T::Boolean) }
    def head_user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def head_user_id_before_last_save; end

    sig { returns(T.untyped) }
    def head_user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def head_user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def head_user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def head_user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def head_user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def head_user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def head_user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def head_user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def head_user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def head_user_id_was; end

    sig { void }
    def head_user_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def merge_commit_sha; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def merge_commit_sha=(value); end

    sig { returns(T::Boolean) }
    def merge_commit_sha?; end

    sig { returns(T.nilable(::String)) }
    def merge_commit_sha_before_last_save; end

    sig { returns(T.untyped) }
    def merge_commit_sha_before_type_cast; end

    sig { returns(T::Boolean) }
    def merge_commit_sha_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def merge_commit_sha_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def merge_commit_sha_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def merge_commit_sha_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def merge_commit_sha_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def merge_commit_sha_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def merge_commit_sha_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def merge_commit_sha_previously_was; end

    sig { returns(T.nilable(::String)) }
    def merge_commit_sha_was; end

    sig { void }
    def merge_commit_sha_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def mergeable; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def mergeable=(value); end

    sig { returns(T::Boolean) }
    def mergeable?; end

    sig { returns(T.nilable(T::Boolean)) }
    def mergeable_before_last_save; end

    sig { returns(T.untyped) }
    def mergeable_before_type_cast; end

    sig { returns(T::Boolean) }
    def mergeable_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def mergeable_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def mergeable_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def mergeable_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def mergeable_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def mergeable_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def mergeable_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def mergeable_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def mergeable_was; end

    sig { void }
    def mergeable_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def merged_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def merged_at=(value); end

    sig { returns(T::Boolean) }
    def merged_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def merged_at_before_last_save; end

    sig { returns(T.untyped) }
    def merged_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def merged_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def merged_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def merged_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def merged_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def merged_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def merged_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def merged_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def merged_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def merged_at_was; end

    sig { void }
    def merged_at_will_change!; end

    sig { returns(::Integer) }
    def repository_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repository_id=(value); end

    sig { returns(T::Boolean) }
    def repository_id?; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_before_last_save; end

    sig { returns(T.untyped) }
    def repository_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def repository_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repository_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def repository_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repository_id_was; end

    sig { void }
    def repository_id_will_change!; end

    sig { void }
    def restore_base_ref!; end

    sig { void }
    def restore_base_repository_id!; end

    sig { void }
    def restore_base_sha!; end

    sig { void }
    def restore_base_sha_on_merge!; end

    sig { void }
    def restore_base_user_id!; end

    sig { void }
    def restore_contributed_at_offset!; end

    sig { void }
    def restore_contributed_at_timestamp!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_draft!; end

    sig { void }
    def restore_fork_collab_state!; end

    sig { void }
    def restore_head_ref!; end

    sig { void }
    def restore_head_repository_id!; end

    sig { void }
    def restore_head_sha!; end

    sig { void }
    def restore_head_user_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_merge_commit_sha!; end

    sig { void }
    def restore_mergeable!; end

    sig { void }
    def restore_merged_at!; end

    sig { void }
    def restore_repository_id!; end

    sig { void }
    def restore_review_comments_with_body_count!; end

    sig { void }
    def restore_reviewable_state!; end

    sig { void }
    def restore_reviews_with_body_count!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_hidden!; end

    sig { void }
    def restore_user_id!; end

    sig { void }
    def restore_work_in_progress!; end

    sig { returns(T.nilable(::Integer)) }
    def review_comments_with_body_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def review_comments_with_body_count=(value); end

    sig { returns(T::Boolean) }
    def review_comments_with_body_count?; end

    sig { returns(T.nilable(::Integer)) }
    def review_comments_with_body_count_before_last_save; end

    sig { returns(T.untyped) }
    def review_comments_with_body_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def review_comments_with_body_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_comments_with_body_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_comments_with_body_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def review_comments_with_body_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def review_comments_with_body_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def review_comments_with_body_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def review_comments_with_body_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def review_comments_with_body_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def review_comments_with_body_count_was; end

    sig { void }
    def review_comments_with_body_count_will_change!; end

    sig { returns(::String) }
    def reviewable_state; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def reviewable_state=(value); end

    sig { returns(T::Boolean) }
    def reviewable_state?; end

    sig { returns(T.nilable(::String)) }
    def reviewable_state_before_last_save; end

    sig { returns(T.untyped) }
    def reviewable_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def reviewable_state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def reviewable_state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def reviewable_state_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def reviewable_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reviewable_state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def reviewable_state_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def reviewable_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reviewable_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reviewable_state_was; end

    sig { void }
    def reviewable_state_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def reviews_with_body_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def reviews_with_body_count=(value); end

    sig { returns(T::Boolean) }
    def reviews_with_body_count?; end

    sig { returns(T.nilable(::Integer)) }
    def reviews_with_body_count_before_last_save; end

    sig { returns(T.untyped) }
    def reviews_with_body_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def reviews_with_body_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def reviews_with_body_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def reviews_with_body_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def reviews_with_body_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def reviews_with_body_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def reviews_with_body_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def reviews_with_body_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def reviews_with_body_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def reviews_with_body_count_was; end

    sig { void }
    def reviews_with_body_count_will_change!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_base_ref; end

    sig { returns(T::Boolean) }
    def saved_change_to_base_ref?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_base_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_base_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_base_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_base_sha?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_base_sha_on_merge; end

    sig { returns(T::Boolean) }
    def saved_change_to_base_sha_on_merge?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_base_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_base_user_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_contributed_at_offset; end

    sig { returns(T::Boolean) }
    def saved_change_to_contributed_at_offset?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_contributed_at_timestamp; end

    sig { returns(T::Boolean) }
    def saved_change_to_contributed_at_timestamp?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_draft; end

    sig { returns(T::Boolean) }
    def saved_change_to_draft?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_fork_collab_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_fork_collab_state?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_head_ref; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_ref?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_head_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_repository_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_head_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_sha?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_head_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_head_user_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_merge_commit_sha; end

    sig { returns(T::Boolean) }
    def saved_change_to_merge_commit_sha?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_mergeable; end

    sig { returns(T::Boolean) }
    def saved_change_to_mergeable?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_merged_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_merged_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repository_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_repository_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_review_comments_with_body_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_review_comments_with_body_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_reviewable_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_reviewable_state?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_reviews_with_body_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_reviews_with_body_count?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_hidden; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_hidden?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_work_in_progress; end

    sig { returns(T::Boolean) }
    def saved_change_to_work_in_progress?; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_hidden; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_hidden=(value); end

    sig { returns(T::Boolean) }
    def user_hidden?; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_before_last_save; end

    sig { returns(T.untyped) }
    def user_hidden_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_hidden_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_hidden_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_hidden_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_hidden_was; end

    sig { void }
    def user_hidden_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_base_ref?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_base_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_base_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_base_sha_on_merge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_base_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contributed_at_offset?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contributed_at_timestamp?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_draft?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_fork_collab_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_ref?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_head_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_merge_commit_sha?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mergeable?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_merged_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repository_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_review_comments_with_body_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reviewable_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reviews_with_body_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_hidden?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_work_in_progress?; end

    sig { returns(T::Boolean) }
    def work_in_progress; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def work_in_progress=(value); end

    sig { returns(T::Boolean) }
    def work_in_progress?; end

    sig { returns(T.nilable(T::Boolean)) }
    def work_in_progress_before_last_save; end

    sig { returns(T.untyped) }
    def work_in_progress_before_type_cast; end

    sig { returns(T::Boolean) }
    def work_in_progress_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def work_in_progress_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def work_in_progress_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def work_in_progress_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def work_in_progress_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def work_in_progress_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def work_in_progress_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def work_in_progress_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def work_in_progress_was; end

    sig { void }
    def work_in_progress_will_change!; end
  end

  module GeneratedPreludeBatchMethods
    sig { returns(T.nilable(::BranchRuleEvaluator)) }
    def base_branch_rule_evaluator; end

    sig { returns(Promise[T.nilable(::BranchRuleEvaluator)]) }
    def async_batch_base_branch_rule_evaluator; end

    sig { returns(T.untyped) }
    def prelude_user_logins_by_reaction; end

    sig { params(emotion: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_reaction_count_for_reaction(emotion); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_prelude_user_logins_by_reaction; end

    sig { params(viewer: T.untyped).returns(T.untyped) }
    def prelude_viewer_can_react(viewer); end

    sig { params(viewer: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_viewer_can_react(viewer); end

    sig { returns(T.untyped) }
    def prelude_changed_commits; end

    sig { params(emotion: T.untyped).returns(T.untyped) }
    def prelude_reaction_count_for_reaction(emotion); end

    sig { returns(Promise[T.untyped]) }
    def async_batch_prelude_changed_commits; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_creation(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_updates(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closed_pulls(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def closes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def draft_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def drafts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding_states(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def filter_spam_for(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_base_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_base_repo_and_base_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_head_repo_and_head_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def for_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fork_collab_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fork_collab_denied(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_progress_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def labeled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_draft_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_fork_collab_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_fork_collab_denied(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_in_progress_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_ready_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open_based_on_ref(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open_pull_requests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def open_pulls(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ready_state(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sorted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def spammy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def to_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedSpammableClassMethods
    sig { returns(Symbol) }
    def spammable_user_foreign_key; end
  end

  module GeneratedSpammableMethods
    sig { params(viewer: User).returns(Promise[T::Boolean]) }
    def async_hide_from_user?(viewer); end

    sig { params(viewer: User).returns(T::Boolean) }
    def hide_from_user?(viewer); end

    sig { returns(Integer) }
    def set_user_hidden; end

    sig { returns(T::Boolean) }
    def spammy?; end

    sig { returns(Symbol) }
    def user_association_for_spammy; end

    sig { params(viewer: User).returns(T::Boolean) }
    def user_authored_content?(viewer); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::PullRequest } }

    sig { returns(T::Array[::PullRequest]) }
    def to_a; end

    sig { returns(T::Array[::PullRequest]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::PullRequest } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::PullRequest } }

    sig do
      params(
        records: T.any(::PullRequest, T::Enumerable[T.any(::PullRequest, T::Enumerable[::PullRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::PullRequest, T::Enumerable[T.any(::PullRequest, T::Enumerable[::PullRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::PullRequest, T::Enumerable[T.any(::PullRequest, T::Enumerable[::PullRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::PullRequest]) }
    def load_target; end

    sig do
      params(
        records: T.any(::PullRequest, T::Enumerable[T.any(::PullRequest, T::Enumerable[::PullRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::PullRequest, T::Enumerable[T.any(::PullRequest, T::Enumerable[::PullRequest])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::PullRequest, T::Enumerable[T.any(::PullRequest, T::Enumerable[::PullRequest])])
      ).returns(T::Array[::PullRequest])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::PullRequest]) }
    def target; end

    sig { returns(T::Array[::PullRequest]) }
    def to_a; end

    sig { returns(T::Array[::PullRequest]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::PullRequest } }

    sig { returns(T::Array[::PullRequest]) }
    def to_a; end

    sig { returns(T::Array[::PullRequest]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::PullRequest } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

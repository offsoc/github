# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Repositories::V1::Entities::RuleRun`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Repositories::V1::Entities::RuleRun`.

class Hydro::Schemas::Github::Repositories::V1::Entities::RuleRun
  sig do
    params(
      enforcement: T.nilable(T.any(Symbol, Integer)),
      evaluation_metadata: T.nilable(String),
      id: T.nilable(Integer),
      message: T.nilable(String),
      result: T.nilable(T.any(Symbol, Integer)),
      rule_configuration_id: T.nilable(Integer),
      rule_provider: T.nilable(String),
      rule_suite_id: T.nilable(Integer),
      rule_type: T.nilable(String),
      ruleset_id: T.nilable(Integer),
      ruleset_name: T.nilable(String),
      ruleset_source_type: T.nilable(T.any(Symbol, Integer)),
      ruleset_target: T.nilable(T.any(Symbol, Integer)),
      violations: T.nilable(String)
    ).void
  end
  def initialize(enforcement: nil, evaluation_metadata: nil, id: nil, message: nil, result: nil, rule_configuration_id: nil, rule_provider: nil, rule_suite_id: nil, rule_type: nil, ruleset_id: nil, ruleset_name: nil, ruleset_source_type: nil, ruleset_target: nil, violations: nil); end

  sig { void }
  def clear_enforcement; end

  sig { void }
  def clear_evaluation_metadata; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_message; end

  sig { void }
  def clear_result; end

  sig { void }
  def clear_rule_configuration_id; end

  sig { void }
  def clear_rule_provider; end

  sig { void }
  def clear_rule_suite_id; end

  sig { void }
  def clear_rule_type; end

  sig { void }
  def clear_ruleset_id; end

  sig { void }
  def clear_ruleset_name; end

  sig { void }
  def clear_ruleset_source_type; end

  sig { void }
  def clear_ruleset_target; end

  sig { void }
  def clear_violations; end

  sig { returns(T.any(Symbol, Integer)) }
  def enforcement; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def enforcement=(value); end

  sig { returns(String) }
  def evaluation_metadata; end

  sig { params(value: String).void }
  def evaluation_metadata=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(String) }
  def message; end

  sig { params(value: String).void }
  def message=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def result; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def result=(value); end

  sig { returns(Integer) }
  def rule_configuration_id; end

  sig { params(value: Integer).void }
  def rule_configuration_id=(value); end

  sig { returns(String) }
  def rule_provider; end

  sig { params(value: String).void }
  def rule_provider=(value); end

  sig { returns(Integer) }
  def rule_suite_id; end

  sig { params(value: Integer).void }
  def rule_suite_id=(value); end

  sig { returns(String) }
  def rule_type; end

  sig { params(value: String).void }
  def rule_type=(value); end

  sig { returns(Integer) }
  def ruleset_id; end

  sig { params(value: Integer).void }
  def ruleset_id=(value); end

  sig { returns(String) }
  def ruleset_name; end

  sig { params(value: String).void }
  def ruleset_name=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def ruleset_source_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def ruleset_source_type=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def ruleset_target; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def ruleset_target=(value); end

  sig { returns(String) }
  def violations; end

  sig { params(value: String).void }
  def violations=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aleph::Proto::FindReferencesForSearchKeysRequest`.
# Please instead update this file by running `bin/tapioca dsl Aleph::Proto::FindReferencesForSearchKeysRequest`.

class Aleph::Proto::FindReferencesForSearchKeysRequest
  sig do
    params(
      commit_oid: T.nilable(String),
      network_id: T.nilable(Integer),
      ref: T.nilable(String),
      references_to_consider: T.nilable(T.any(Symbol, Integer)),
      repository_id: T.nilable(Integer),
      search_keys: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String]))
    ).void
  end
  def initialize(commit_oid: nil, network_id: nil, ref: nil, references_to_consider: nil, repository_id: nil, search_keys: T.unsafe(nil)); end

  sig { void }
  def clear_commit_oid; end

  sig { void }
  def clear_network_id; end

  sig { void }
  def clear_ref; end

  sig { void }
  def clear_references_to_consider; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_search_keys; end

  sig { returns(String) }
  def commit_oid; end

  sig { params(value: String).void }
  def commit_oid=(value); end

  sig { returns(Integer) }
  def network_id; end

  sig { params(value: Integer).void }
  def network_id=(value); end

  sig { returns(String) }
  def ref; end

  sig { params(value: String).void }
  def ref=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def references_to_consider; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def references_to_consider=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def search_keys; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def search_keys=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Registry::PackageVersion`.
# Please instead update this file by running `bin/tapioca dsl Registry::PackageVersion`.

class Registry::PackageVersion
  include GeneratedAsyncReflectionAssociations
  include GeneratedPreludeBatchMethods
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Registry::PackageVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Registry::PackageVersion)) }
    def fifth; end

    sig { returns(::Registry::PackageVersion) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Registry::PackageVersion)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Registry::PackageVersion) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(T.nilable(T::Enumerator[::Registry::PackageVersion]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Registry::PackageVersion]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Registry::PackageVersion]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Registry::PackageVersion)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Registry::PackageVersion) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Registry::PackageVersion) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Registry::PackageVersion) }
    def first!; end

    sig { returns(T.nilable(::Registry::PackageVersion)) }
    def forty_two; end

    sig { returns(::Registry::PackageVersion) }
    def forty_two!; end

    sig { returns(T.nilable(::Registry::PackageVersion)) }
    def fourth; end

    sig { returns(::Registry::PackageVersion) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Registry::PackageVersion) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Registry::PackageVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Registry::PackageVersion).void)
      ).returns(::Registry::PackageVersion)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Registry::PackageVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Registry::PackageVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Registry::PackageVersion)) }
    def second; end

    sig { returns(::Registry::PackageVersion) }
    def second!; end

    sig { returns(T.nilable(::Registry::PackageVersion)) }
    def second_to_last; end

    sig { returns(::Registry::PackageVersion) }
    def second_to_last!; end

    sig { returns(::Registry::PackageVersion) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Registry::PackageVersion) }
    def take!; end

    sig { returns(T.nilable(::Registry::PackageVersion)) }
    def third; end

    sig { returns(::Registry::PackageVersion) }
    def third!; end

    sig { returns(T.nilable(::Registry::PackageVersion)) }
    def third_to_last; end

    sig { returns(::Registry::PackageVersion) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def author; end

    sig { params(value: T.nilable(::User)).void }
    def author=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_deleted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Package) }
    def build_package(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def build_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Metadatum) }
    def build_rubygem_readme(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Metadatum) }
    def build_rubygem_summary(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_author!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_deleted_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_deleted_by!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Package) }
    def create_package(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Package) }
    def create_package!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def create_release(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Release) }
    def create_release!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Metadatum) }
    def create_rubygem_readme(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Metadatum) }
    def create_rubygem_readme!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Metadatum) }
    def create_rubygem_summary(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Registry::Metadatum) }
    def create_rubygem_summary!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def deleted_by; end

    sig { params(value: T.nilable(::User)).void }
    def deleted_by=(value); end

    # This method is created by ActiveRecord on the `Registry::PackageVersion` class because it declared `has_many :dependencies`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::Dependency::PrivateCollectionProxy) }
    def dependencies; end

    sig { params(value: T::Enumerable[::Registry::Dependency]).void }
    def dependencies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def dependency_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def dependency_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def download_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def download_ids=(ids); end

    # This method is created by ActiveRecord on the `Registry::PackageVersion` class because it declared `has_many :downloads`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::PackageDownloadActivity::PrivateCollectionProxy) }
    def downloads; end

    sig { params(value: T::Enumerable[::Registry::PackageDownloadActivity]).void }
    def downloads=(value); end

    sig { returns(T::Array[T.untyped]) }
    def file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def file_ids=(ids); end

    # This method is created by ActiveRecord on the `Registry::PackageVersion` class because it declared `has_many :files`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::File::PrivateCollectionProxy) }
    def files; end

    sig { params(value: T::Enumerable[::Registry::File]).void }
    def files=(value); end

    # This method is created by ActiveRecord on the `Registry::PackageVersion` class because it declared `has_many :manifest_entries`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::ManifestEntry::PrivateCollectionProxy) }
    def manifest_entries; end

    sig { params(value: T::Enumerable[::Registry::ManifestEntry]).void }
    def manifest_entries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def manifest_entry_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def manifest_entry_ids=(ids); end

    # This method is created by ActiveRecord on the `Registry::PackageVersion` class because it declared `has_many :metadata`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::Metadatum::PrivateCollectionProxy) }
    def metadata; end

    sig { params(value: T::Enumerable[::Registry::Metadatum]).void }
    def metadata=(value); end

    sig { returns(T::Array[T.untyped]) }
    def metadatum_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def metadatum_ids=(ids); end

    sig { returns(T.nilable(::Registry::Package)) }
    def package; end

    sig { params(value: T.nilable(::Registry::Package)).void }
    def package=(value); end

    sig { returns(T::Array[T.untyped]) }
    def package_file_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def package_file_ids=(ids); end

    # This method is created by ActiveRecord on the `Registry::PackageVersion` class because it declared `has_many :package_files, through: :manifest_entries`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Registry::File::PrivateCollectionProxy) }
    def package_files; end

    sig { params(value: T::Enumerable[::Registry::File]).void }
    def package_files=(value); end

    sig { returns(T.nilable(::Release)) }
    def release; end

    sig { params(value: T.nilable(::Release)).void }
    def release=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_author; end

    sig { returns(T.nilable(::User)) }
    def reload_deleted_by; end

    sig { returns(T.nilable(::Registry::Package)) }
    def reload_package; end

    sig { returns(T.nilable(::Release)) }
    def reload_release; end

    sig { returns(T.nilable(::Registry::Metadatum)) }
    def reload_rubygem_readme; end

    sig { returns(T.nilable(::Registry::Metadatum)) }
    def reload_rubygem_summary; end

    sig { returns(T.nilable(::Registry::Metadatum)) }
    def rubygem_readme; end

    sig { params(value: T.nilable(::Registry::Metadatum)).void }
    def rubygem_readme=(value); end

    sig { returns(T.nilable(::Registry::Metadatum)) }
    def rubygem_summary; end

    sig { params(value: T.nilable(::Registry::Metadatum)).void }
    def rubygem_summary=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tag_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tag_ids=(ids); end

    # This method is created by ActiveRecord on the `Registry::PackageVersion` class because it declared `has_many :tags`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Registry::Tag::PrivateCollectionProxy) }
    def tags; end

    sig { params(value: T::Enumerable[::Registry::Tag]).void }
    def tags=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def any_deleted_version_migrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def exclude_docker_base_layer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def migratable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def migrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def migration_in_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_migrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def on_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def under_migration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unmigrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unmigrated_only_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unmigrated_undeleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_author; end

    sig { returns(Promise[T.untyped]) }
    def async_deleted_by; end

    sig { returns(Promise[T.untyped]) }
    def async_dependencies; end

    sig { returns(Promise[T.untyped]) }
    def async_downloads; end

    sig { returns(Promise[T.untyped]) }
    def async_files; end

    sig { returns(Promise[T.untyped]) }
    def async_manifest_entries; end

    sig { returns(Promise[T.untyped]) }
    def async_metadata; end

    sig { returns(Promise[T.untyped]) }
    def async_package; end

    sig { returns(Promise[T.untyped]) }
    def async_package_files; end

    sig { returns(Promise[T.untyped]) }
    def async_release; end

    sig { returns(Promise[T.untyped]) }
    def async_rubygem_readme; end

    sig { returns(Promise[T.untyped]) }
    def async_rubygem_summary; end

    sig { returns(Promise[T.untyped]) }
    def async_tags; end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def author_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def author_id=(value); end

    sig { returns(T::Boolean) }
    def author_id?; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_before_last_save; end

    sig { returns(T.untyped) }
    def author_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def author_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def author_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def author_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def author_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def author_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def author_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def author_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def author_id_was; end

    sig { void }
    def author_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def commit_oid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def commit_oid=(value); end

    sig { returns(T::Boolean) }
    def commit_oid?; end

    sig { returns(T.nilable(::String)) }
    def commit_oid_before_last_save; end

    sig { returns(T.untyped) }
    def commit_oid_before_type_cast; end

    sig { returns(T::Boolean) }
    def commit_oid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def commit_oid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def commit_oid_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def commit_oid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def commit_oid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def commit_oid_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def commit_oid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def commit_oid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def commit_oid_was; end

    sig { void }
    def commit_oid_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def deleted_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def deleted_by_id=(value); end

    sig { returns(T::Boolean) }
    def deleted_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def deleted_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deleted_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deleted_by_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def deleted_by_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def deleted_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def deleted_by_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def deleted_by_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def deleted_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def deleted_by_id_was; end

    sig { void }
    def deleted_by_id_will_change!; end

    sig { returns(::Integer) }
    def files_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def files_count=(value); end

    sig { returns(T::Boolean) }
    def files_count?; end

    sig { returns(T.nilable(::Integer)) }
    def files_count_before_last_save; end

    sig { returns(T.untyped) }
    def files_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def files_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def files_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def files_count_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def files_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def files_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def files_count_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def files_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def files_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def files_count_was; end

    sig { void }
    def files_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.untyped) }
    def manifest; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def manifest=(value); end

    sig { returns(T::Boolean) }
    def manifest?; end

    sig { returns(T.untyped) }
    def manifest_before_last_save; end

    sig { returns(T.untyped) }
    def manifest_before_type_cast; end

    sig { returns(T::Boolean) }
    def manifest_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def manifest_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def manifest_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def manifest_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def manifest_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def manifest_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def manifest_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def manifest_previously_was; end

    sig { returns(T.untyped) }
    def manifest_was; end

    sig { void }
    def manifest_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def migration_last_update; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def migration_last_update=(value); end

    sig { returns(T::Boolean) }
    def migration_last_update?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def migration_last_update_before_last_save; end

    sig { returns(T.untyped) }
    def migration_last_update_before_type_cast; end

    sig { returns(T::Boolean) }
    def migration_last_update_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def migration_last_update_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def migration_last_update_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def migration_last_update_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def migration_last_update_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def migration_last_update_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def migration_last_update_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def migration_last_update_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def migration_last_update_was; end

    sig { void }
    def migration_last_update_will_change!; end

    sig { returns(::String) }
    def migration_state; end

    sig { params(value: ::String).returns(::String) }
    def migration_state=(value); end

    sig { returns(T::Boolean) }
    def migration_state?; end

    sig { returns(T.nilable(::String)) }
    def migration_state_before_last_save; end

    sig { returns(T.untyped) }
    def migration_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def migration_state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def migration_state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def migration_state_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def migration_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def migration_state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def migration_state_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def migration_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def migration_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def migration_state_was; end

    sig { void }
    def migration_state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def original_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def original_name=(value); end

    sig { returns(T::Boolean) }
    def original_name?; end

    sig { returns(T.nilable(::String)) }
    def original_name_before_last_save; end

    sig { returns(T.untyped) }
    def original_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def original_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def original_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def original_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def original_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def original_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def original_name_was; end

    sig { void }
    def original_name_will_change!; end

    sig { returns(::String) }
    def platform; end

    sig { params(value: ::String).returns(::String) }
    def platform=(value); end

    sig { returns(T::Boolean) }
    def platform?; end

    sig { returns(T.nilable(::String)) }
    def platform_before_last_save; end

    sig { returns(T.untyped) }
    def platform_before_type_cast; end

    sig { returns(T::Boolean) }
    def platform_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def platform_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def platform_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def platform_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def platform_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def platform_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def platform_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def platform_previously_was; end

    sig { returns(T.nilable(::String)) }
    def platform_was; end

    sig { void }
    def platform_will_change!; end

    sig { returns(T::Boolean) }
    def pre_release; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def pre_release=(value); end

    sig { returns(T::Boolean) }
    def pre_release?; end

    sig { returns(T.nilable(T::Boolean)) }
    def pre_release_before_last_save; end

    sig { returns(T.untyped) }
    def pre_release_before_type_cast; end

    sig { returns(T::Boolean) }
    def pre_release_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pre_release_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pre_release_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def pre_release_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def pre_release_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pre_release_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def pre_release_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def pre_release_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def pre_release_was; end

    sig { void }
    def pre_release_will_change!; end

    sig { returns(T::Boolean) }
    def published_via_actions; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def published_via_actions=(value); end

    sig { returns(T::Boolean) }
    def published_via_actions?; end

    sig { returns(T.nilable(T::Boolean)) }
    def published_via_actions_before_last_save; end

    sig { returns(T.untyped) }
    def published_via_actions_before_type_cast; end

    sig { returns(T::Boolean) }
    def published_via_actions_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def published_via_actions_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def published_via_actions_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def published_via_actions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def published_via_actions_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def published_via_actions_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def published_via_actions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def published_via_actions_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def published_via_actions_was; end

    sig { void }
    def published_via_actions_will_change!; end

    sig { returns(::Integer) }
    def registry_package_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def registry_package_id=(value); end

    sig { returns(T::Boolean) }
    def registry_package_id?; end

    sig { returns(T.nilable(::Integer)) }
    def registry_package_id_before_last_save; end

    sig { returns(T.untyped) }
    def registry_package_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def registry_package_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def registry_package_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def registry_package_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def registry_package_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def registry_package_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def registry_package_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def registry_package_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def registry_package_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def registry_package_id_was; end

    sig { void }
    def registry_package_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def release_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def release_id=(value); end

    sig { returns(T::Boolean) }
    def release_id?; end

    sig { returns(T.nilable(::Integer)) }
    def release_id_before_last_save; end

    sig { returns(T.untyped) }
    def release_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def release_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def release_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def release_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def release_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def release_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def release_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def release_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def release_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def release_id_was; end

    sig { void }
    def release_id_will_change!; end

    sig { void }
    def restore_author_id!; end

    sig { void }
    def restore_commit_oid!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_deleted_by_id!; end

    sig { void }
    def restore_files_count!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_manifest!; end

    sig { void }
    def restore_migration_last_update!; end

    sig { void }
    def restore_migration_state!; end

    sig { void }
    def restore_original_name!; end

    sig { void }
    def restore_platform!; end

    sig { void }
    def restore_pre_release!; end

    sig { void }
    def restore_published_via_actions!; end

    sig { void }
    def restore_registry_package_id!; end

    sig { void }
    def restore_release_id!; end

    sig { void }
    def restore_sha256!; end

    sig { void }
    def restore_size!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_version!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_author_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_author_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_commit_oid; end

    sig { returns(T::Boolean) }
    def saved_change_to_commit_oid?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_deleted_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_by_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_files_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_files_count?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_manifest; end

    sig { returns(T::Boolean) }
    def saved_change_to_manifest?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_migration_last_update; end

    sig { returns(T::Boolean) }
    def saved_change_to_migration_last_update?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_migration_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_migration_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_original_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_original_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_platform; end

    sig { returns(T::Boolean) }
    def saved_change_to_platform?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_pre_release; end

    sig { returns(T::Boolean) }
    def saved_change_to_pre_release?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_published_via_actions; end

    sig { returns(T::Boolean) }
    def saved_change_to_published_via_actions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_registry_package_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_registry_package_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_release_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_release_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_sha256; end

    sig { returns(T::Boolean) }
    def saved_change_to_sha256?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_size; end

    sig { returns(T::Boolean) }
    def saved_change_to_size?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_version?; end

    sig { returns(T.nilable(::String)) }
    def sha256; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def sha256=(value); end

    sig { returns(T::Boolean) }
    def sha256?; end

    sig { returns(T.nilable(::String)) }
    def sha256_before_last_save; end

    sig { returns(T.untyped) }
    def sha256_before_type_cast; end

    sig { returns(T::Boolean) }
    def sha256_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sha256_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sha256_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sha256_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sha256_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sha256_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sha256_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sha256_previously_was; end

    sig { returns(T.nilable(::String)) }
    def sha256_was; end

    sig { void }
    def sha256_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def size; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def size=(value); end

    sig { returns(T::Boolean) }
    def size?; end

    sig { returns(T.nilable(::Integer)) }
    def size_before_last_save; end

    sig { returns(T.untyped) }
    def size_before_type_cast; end

    sig { returns(T::Boolean) }
    def size_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def size_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def size_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def size_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def size_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def size_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def size_was; end

    sig { void }
    def size_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def version; end

    sig { params(value: ::String).returns(::String) }
    def version=(value); end

    sig { returns(T::Boolean) }
    def version?; end

    sig { returns(T.nilable(::String)) }
    def version_before_last_save; end

    sig { returns(T.untyped) }
    def version_before_type_cast; end

    sig { returns(T::Boolean) }
    def version_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def version_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def version_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def version_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def version_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def version_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def version_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def version_was; end

    sig { void }
    def version_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_author_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_commit_oid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_files_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_manifest?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_migration_last_update?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_migration_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_original_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_platform?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pre_release?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_published_via_actions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_registry_package_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_release_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sha256?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_size?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_version?; end
  end

  module GeneratedPreludeBatchMethods
    sig { params(options: T.untyped).returns(T.untyped) }
    def prelude_body_html(options); end

    sig { params(options: T.untyped).returns(Promise[T.untyped]) }
    def async_batch_prelude_body_html(options); end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def any_deleted_version_migrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def exclude_docker_base_layer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def migratable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def migrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def migration_in_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_migrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def on_repository(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def under_migration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unmigrated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unmigrated_only_deleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unmigrated_undeleted(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Registry::PackageVersion } }

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def to_a; end

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Registry::PackageVersion } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Registry::PackageVersion } }

    sig do
      params(
        records: T.any(::Registry::PackageVersion, T::Enumerable[T.any(::Registry::PackageVersion, T::Enumerable[::Registry::PackageVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Registry::PackageVersion, T::Enumerable[T.any(::Registry::PackageVersion, T::Enumerable[::Registry::PackageVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Registry::PackageVersion, T::Enumerable[T.any(::Registry::PackageVersion, T::Enumerable[::Registry::PackageVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Registry::PackageVersion, T::Enumerable[T.any(::Registry::PackageVersion, T::Enumerable[::Registry::PackageVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Registry::PackageVersion, T::Enumerable[T.any(::Registry::PackageVersion, T::Enumerable[::Registry::PackageVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Registry::PackageVersion, T::Enumerable[T.any(::Registry::PackageVersion, T::Enumerable[::Registry::PackageVersion])])
      ).returns(T::Array[::Registry::PackageVersion])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def target; end

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def to_a; end

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Registry::PackageVersion } }

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def to_a; end

    sig { returns(T::Array[::Registry::PackageVersion]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Registry::PackageVersion } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

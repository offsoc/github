{"version":3,"file":"notifications-global-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/behaviors/ajax-error.ts","app/assets/modules/github/notifications/notifications-list-subscription-form-element.ts","app/assets/modules/github/notifications/notifications-team-subscription-form-element.ts","app/assets/modules/github/notifications/notifications-subscriptions-dialog-label-item.ts","ui/packages/form-utils/form-utils.ts","ui/packages/form-utils/remote-submit.ts"],"sourcesContent":["// Global handler for uncaught AJAX errors.\n//\n// Only enabled by default on new style `data-remote` requests.\n\n// eslint-disable-next-line no-restricted-imports\nimport {on} from 'delegated-events'\n\nexport function showGlobalError() {\n  const ajaxErrorMessage = document.getElementById('ajax-error-message')\n  if (ajaxErrorMessage) {\n    ajaxErrorMessage.hidden = false\n  }\n}\n\nexport function hideGlobalError() {\n  const ajaxErrorMessage = document.getElementById('ajax-error-message')\n  if (ajaxErrorMessage) {\n    ajaxErrorMessage.hidden = true\n  }\n}\n\non('deprecatedAjaxError', '[data-remote]', function (event) {\n  const detail = (event as CustomEvent).detail\n  const {error, text} = detail\n\n  if (event.currentTarget !== event.target) {\n    return\n  }\n  if (error === 'abort' || error === 'canceled') {\n    return\n  }\n\n  if (/<html/.test(text)) {\n    showGlobalError()\n    event.stopImmediatePropagation()\n  } else {\n    setTimeout(function () {\n      if (event.defaultPrevented) {\n        return\n      }\n      showGlobalError()\n    }, 0)\n  }\n})\n\n// Clear any errors when the request is tried again\non('deprecatedAjaxSend', '[data-remote]', function () {\n  hideGlobalError()\n})\n\n// \"Dismiss\" button\non('click', '.js-ajax-error-dismiss', function () {\n  hideGlobalError()\n})\n","import type {\n  NotificationsDialogLabelItemElement,\n  NotificationsDialogLabelToggledEvent,\n} from './notifications-subscriptions-dialog-label-item'\nimport {controller, target, targets} from '@github/catalyst'\nimport {hideGlobalError, showGlobalError} from '../behaviors/ajax-error'\nimport type DetailsDialogElement from '@github/details-dialog-element'\nimport type DetailsMenuElement from '@github/details-menu-element'\nimport {changeValue} from '@github-ui/form-utils'\n\n@controller\nclass NotificationsListSubscriptionFormElement extends HTMLElement {\n  @target details: HTMLDetailsElement\n  @target menu: DetailsMenuElement\n  @target customButton: HTMLButtonElement\n  @target customDialog: DetailsDialogElement\n  @target filterLabelsDialog: DetailsDialogElement\n  @targets subscriptionButtons: HTMLButtonElement[]\n  @targets subscriptionsLabels: HTMLElement[]\n  @target labelInputs: HTMLElement\n  @target subscriptionsSubtitle: HTMLElement\n  @target socialCount: HTMLElement\n  @target unwatchButtonCopy: HTMLElement\n  @target stopIgnoringButtonCopy: HTMLElement\n  @target watchButtonCopy: HTMLElement\n  @targets threadTypeCheckboxes: HTMLInputElement[]\n  @target customSubmit: HTMLButtonElement\n  @target subscriptionsContainer: HTMLElement\n  @targets dialogLabelItems: NotificationsDialogLabelItemElement[]\n\n  lastAppliedLabels: {[labelId: string]: Node} = {}\n\n  async submitCustomForm(e: Event) {\n    await this.submitForm(e)\n    this.closeMenu()\n  }\n\n  async submitForm(e: Event) {\n    e.preventDefault()\n\n    hideGlobalError()\n\n    const form = e.currentTarget as HTMLFormElement\n    const body = new FormData(form)\n\n    const response = await self.fetch(form.action, {\n      method: form.method,\n      body,\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        Accept: 'application/json',\n      },\n    })\n\n    if (!response.ok) {\n      showGlobalError()\n      return\n    }\n    const json = await response.json()\n\n    const doParam = body.get('do')\n    if (typeof doParam === 'string') this.updateCheckedState(doParam)\n    if (typeof doParam === 'string') this.updateMenuButtonCopy(doParam)\n    this.updateSocialCount(json.count)\n    this.applyInputsCheckedPropertiesToAttributesForNextFormReset()\n    this.closeMenu()\n  }\n\n  updateMenuButtonCopy(subscription: string) {\n    this.unwatchButtonCopy.hidden = !(subscription === 'subscribed' || subscription === 'custom')\n    this.stopIgnoringButtonCopy.hidden = !(subscription === 'ignore')\n    this.watchButtonCopy.hidden = !(\n      subscription !== 'subscribed' &&\n      subscription !== 'custom' &&\n      subscription !== 'ignore'\n    )\n  }\n\n  // form.reset() will reset the form back to the values in it's html attributes, not to it's current JS properties\n  // therefore, after successfully saving the form to the server, we transfer value of the `.checked` properties\n  // of the inputs in the form into the `[checked]` attribute. This means that if the user reopens the form and\n  // edits it again, cancelling will reset the form to it's last saved state, not the original state on page load\n  applyInputsCheckedPropertiesToAttributesForNextFormReset() {\n    for (const input of [...this.threadTypeCheckboxes]) {\n      input.toggleAttribute('checked', input.checked)\n    }\n  }\n\n  updateCheckedState(doParam: string) {\n    for (const button of this.subscriptionButtons) {\n      button.setAttribute('aria-checked', button.value === doParam ? 'true' : 'false')\n    }\n\n    if (doParam === 'custom') {\n      this.customButton.setAttribute('aria-checked', 'true')\n    } else {\n      this.customButton.setAttribute('aria-checked', 'false')\n\n      for (const input of [...this.threadTypeCheckboxes]) {\n        changeValue(input, false)\n      }\n      // Clean up labels\n      if (this.subscriptionsContainer !== undefined) {\n        for (let i = 0; i < this.subscriptionsLabels.length; i++) {\n          this.subscriptionsLabels[i]!.remove()\n        }\n\n        if (this.subscriptionsSubtitle !== undefined) {\n          this.subscriptionsSubtitle.toggleAttribute('hidden', false)\n        }\n\n        this.subscriptionsContainer.textContent = ''\n      }\n    }\n  }\n\n  updateSocialCount(count: string) {\n    if (this.socialCount) {\n      this.socialCount.textContent = count\n      this.socialCount.setAttribute('aria-label', `${this.pluralizeUsers(count)} watching this repository`)\n    }\n  }\n\n  pluralizeUsers(userCount: string) {\n    return parseInt(userCount) === 1 ? '1 user is' : `${userCount} users are`\n  }\n\n  handleDialogLabelToggle(e: CustomEvent<NotificationsDialogLabelToggledEvent>) {\n    // change aria-checked attribute for the selected label\n    // to make item appear selected/unselected depending on the current state\n    const wasChecked = e.detail.wasChecked\n    const labelId = e.detail.toggledLabelId\n    const templateLabelElementClone = e.detail.templateLabelElementClone\n\n    // add/remove selected label from the list of selected labels\n    if (wasChecked) {\n      // if label was checked previously and is now unchecked, remove label from subscribed labels list\n      for (let i = 0; i < this.subscriptionsLabels.length; i++) {\n        if (this.subscriptionsLabels[i]!.getAttribute('data-label-id') === labelId) {\n          this.subscriptionsLabels[i]!.remove()\n          break\n        }\n      }\n    } else {\n      templateLabelElementClone.removeAttribute('hidden')\n      templateLabelElementClone.setAttribute('data-targets', 'notifications-list-subscription-form.subscriptionsLabels')\n\n      this.subscriptionsContainer.appendChild(templateLabelElementClone)\n    }\n  }\n\n  openCustomDialog(e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n    this.menu.toggleAttribute('hidden', true)\n    this.enableApplyButtonAndCheckbox()\n    this.saveCurrentLabelsState()\n    this.customDialog.toggleAttribute('hidden', false)\n    setTimeout(() => {\n      this.customDialog.querySelector<HTMLInputElement>('input[type=checkbox][autofocus]')?.focus()\n    }, 0)\n  }\n\n  enableApplyButtonAndCheckbox() {\n    const visibleLabels = this.customDialog.querySelectorAll<HTMLElement>('[data-type=\"label\"]:not([hidden])')\n\n    if (visibleLabels.length > 0) {\n      this.customSubmit.removeAttribute('disabled')\n      this.threadTypeCheckboxes[0]!.checked = true\n    }\n  }\n\n  closeCustomDialog(e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n    this.menu.toggleAttribute('hidden', false)\n    this.customDialog.toggleAttribute('hidden', true)\n    setTimeout(() => {\n      this.customButton.focus()\n    }, 0)\n  }\n\n  // Apply the previous state of labels selected\n  resetFilterLabelsDialog(e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n\n    // remove checkboxes from the dialog\n    for (let idx = 0; idx < this.subscriptionsLabels.length; idx++) {\n      const labelId = this.subscriptionsLabels[idx]!.getAttribute('data-label-id')\n\n      // this is up to O(n^2) but is an im memorty alternative for dom queries, which should be faster\n      for (let i = 0; i < this.dialogLabelItems.length; i++) {\n        if (this.dialogLabelItems[i]!.labelId === labelId) {\n          this.dialogLabelItems[i]!.setCheckedForDropdownLabel(false)\n          break\n        }\n      }\n    }\n\n    // add checkboxes to dialog based on last applied labels\n    for (let idx = 0; idx < Object.keys(this.lastAppliedLabels).length; idx++) {\n      const labelId = Object.keys(this.lastAppliedLabels)[idx]\n\n      // this is up to O(n^2) but is an im memorty alternative for dom queries, which should be faster\n      for (let i = 0; i < this.dialogLabelItems.length; i++) {\n        if (this.dialogLabelItems[i]!.labelId === labelId) {\n          this.dialogLabelItems[i]!.setCheckedForDropdownLabel(true)\n          break\n        }\n      }\n    }\n\n    this.subscriptionsContainer.replaceChildren(...Object.values(this.lastAppliedLabels))\n    this.closeFilterLabelsDialog(e)\n  }\n\n  openFilterLabelsDialog(e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n\n    this.saveCurrentLabelsState()\n    this.customDialog.toggleAttribute('hidden', true)\n    this.filterLabelsDialog.toggleAttribute('hidden', false)\n    setTimeout(() => {\n      this.filterLabelsDialog.querySelector<HTMLInputElement>('input[type=checkbox][autofocus]')?.focus()\n    }, 0)\n  }\n\n  closeFilterLabelsDialog(e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n\n    this.menu.toggleAttribute('hidden', true)\n    this.customDialog.toggleAttribute('hidden', false)\n    this.filterLabelsDialog.toggleAttribute('hidden', true)\n  }\n\n  // Apply changes from labels filter\n  applyFilterLabelsDialog(e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n\n    this.saveCurrentLabelsState()\n\n    this.hideFilterSubtitle()\n    this.enableIssuesCheckbox()\n    this.closeFilterLabelsDialog(e)\n  }\n\n  enableIssuesCheckbox() {\n    const enableCheckbox = Object.keys(this.lastAppliedLabels).length > 0\n\n    if (enableCheckbox && this.threadTypeCheckboxes.length > 0) {\n      this.threadTypeCheckboxes[0]!.checked = enableCheckbox\n    }\n\n    this.threadTypeCheckboxesUpdated()\n  }\n\n  hideFilterSubtitle() {\n    const hideSubtitle = Object.keys(this.lastAppliedLabels).length > 0\n    this.subscriptionsSubtitle.toggleAttribute('hidden', hideSubtitle)\n  }\n\n  // Save the selected labels and save label ids in inputs\n  saveCurrentLabelsState() {\n    this.lastAppliedLabels = {}\n    this.labelInputs.textContent = ''\n\n    for (let i = 0; i < this.subscriptionsLabels.length; i++) {\n      const labelId = this.subscriptionsLabels[i]!.getAttribute('data-label-id')\n      if (labelId) {\n        this.lastAppliedLabels[labelId] = this.subscriptionsLabels[i]!.cloneNode(true)\n        this.appendLabelToFormInput(labelId)\n      }\n    }\n  }\n\n  appendLabelToFormInput(value: string) {\n    // create input in memory to append it to the form element\n    const input = document.createElement('input')\n    input.setAttribute('type', 'hidden')\n    input.setAttribute('name', 'labels[]')\n    input.setAttribute('value', value)\n\n    this.labelInputs.appendChild(input)\n  }\n\n  detailsToggled() {\n    this.menu.toggleAttribute('hidden', false)\n    this.customDialog.toggleAttribute('hidden', true)\n  }\n\n  submitCustom(e: Event) {\n    e.preventDefault()\n    this.details.toggleAttribute('open', false)\n  }\n\n  threadTypeCheckboxesUpdated() {\n    const noneSelected = !this.threadTypeCheckboxes.some(input => input.checked)\n\n    this.customSubmit.disabled = noneSelected\n  }\n\n  closeMenu() {\n    this.details.toggleAttribute('open', false)\n  }\n}\n","import {controller, target} from '@github/catalyst'\n@controller\nclass NotificationsTeamSubscriptionFormElement extends HTMLElement {\n  @target details: HTMLDetailsElement\n\n  closeMenu() {\n    this.details.toggleAttribute('open', false)\n  }\n}\n","import {attr, controller, target} from '@github/catalyst'\n\nexport interface NotificationsDialogLabelToggledEvent {\n  wasChecked: boolean\n  toggledLabelId: string\n  templateLabelElementClone: HTMLElement\n}\n\n@controller\nexport class NotificationsDialogLabelItemElement extends HTMLElement {\n  @target label: HTMLElement\n  @target hiddenLabelTemplate: HTMLElement\n  @target hiddenCheckboxInput: HTMLInputElement\n\n  static attrPrefix = ''\n  @attr labelId: string\n\n  toggleDropdownLabel(e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n\n    if (this.label) {\n      // change aria-checked attribute for the selected label\n      const wasChecked = this.label.getAttribute('aria-checked') === 'true'\n\n      this.setCheckedForDropdownLabel(!wasChecked)\n\n      this.dispatchEvent(\n        new CustomEvent<NotificationsDialogLabelToggledEvent>('notifications-dialog-label-toggled', {\n          detail: {\n            wasChecked,\n            toggledLabelId: this.labelId,\n            templateLabelElementClone: this.hiddenLabelTemplate.cloneNode(true) as HTMLElement,\n          },\n          bubbles: true,\n        }),\n      )\n    }\n  }\n\n  setCheckedForDropdownLabel(checked: boolean) {\n    this.label.setAttribute('aria-checked', checked.toString())\n  }\n}\n","import {persistSubmitButtonValue} from './remote-submit'\n\ntype TextField = HTMLInputElement | HTMLTextAreaElement\ntype Button = HTMLInputElement | HTMLButtonElement\n\nfunction fire(target: HTMLElement, name: string, cancelable: boolean): boolean {\n  return target.dispatchEvent(\n    new CustomEvent(name, {\n      bubbles: true,\n      cancelable,\n    }),\n  )\n}\n\n// Submit a form while ensuring that `submit` event is also triggered.\n//\n// Calling native `form.submit()` method immediately submits the form without triggering the `submit` event.\n// As a result, code that wants to hook into form submits would never execute.\n//\n// This method first triggers the `submit` event and, if that event wasn't `preventDefault`d, submits the\n// form natively.\nexport function requestSubmit(form: HTMLFormElement, submitter?: Button) {\n  if (submitter) {\n    checkButtonValidity(form, submitter)\n    persistSubmitButtonValue(submitter)\n  }\n  if (fire(form, 'submit', true)) {\n    form.submit()\n  }\n}\n\n// Check submitter validity for form.requestSubmit compatibility.\n// See https://html.spec.whatwg.org/#dom-form-requestsubmit.\nfunction checkButtonValidity(form: HTMLFormElement, submitter: Button) {\n  if (!(form instanceof HTMLFormElement)) throw new TypeError('The specified element is not of type HTMLFormElement.')\n  if (!(submitter instanceof HTMLElement)) throw new TypeError('The specified element is not of type HTMLElement.')\n  if (submitter.type !== 'submit') throw new TypeError('The specified element is not a submit button.')\n  if (!form || form !== submitter.form) throw new Error('The specified element is not owned by the form element.')\n}\n\n// Set a form field value while ensuring that `change` event is also triggered.\n//\n// Having the `change` event fire is important for various behaviors to react, such as form validation.\nexport function changeValue(input: TextField, value: string | boolean) {\n  if (typeof value === 'boolean') {\n    if (input instanceof HTMLInputElement) {\n      input.checked = value\n    } else {\n      throw new TypeError('only checkboxes can be set to boolean value')\n    }\n  } else {\n    if (input.type === 'checkbox') {\n      throw new TypeError(\"checkbox can't be set to string value\")\n    } else {\n      input.value = value\n    }\n  }\n  fire(input, 'change', false)\n}\n\n// Fill multiple form fields by item name.\nexport function fillFormValues(form: HTMLFormElement, fields: {[key: string]: string}) {\n  for (const name in fields) {\n    const value = fields[name]\n    const element = form.elements.namedItem(name)\n\n    if (element instanceof HTMLInputElement) {\n      element.value = value!\n    } else if (element instanceof HTMLTextAreaElement) {\n      element.value = value!\n    }\n  }\n}\n\n// Test if element is a form field.\nexport function isFormField(element: Node): boolean {\n  if (!(element instanceof HTMLElement)) {\n    return false\n  }\n\n  const name = element.nodeName.toLowerCase()\n  const type = (element.getAttribute('type') || '').toLowerCase()\n  return (\n    name === 'select' ||\n    name === 'textarea' ||\n    (name === 'input' && type !== 'submit' && type !== 'reset') ||\n    element.isContentEditable\n  )\n}\n\nfunction searchParamsFromFormData(formData: FormData): URLSearchParams {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new URLSearchParams(formData as any)\n}\n\n// Get a `?` search string for a URL for a GET form, using its `action` attribute as well as its other fields.\nexport function combineGetFormSearchParams(formAction: URL, formData: FormData): string {\n  const allSearchParams = new URLSearchParams(formAction.search)\n  const searchParamsFromInputs = searchParamsFromFormData(formData)\n  for (const [key, value] of searchParamsFromInputs) {\n    allSearchParams.append(key, value)\n  }\n  return allSearchParams.toString()\n}\n\n// Serialize form data into string.\nexport function serialize(form: HTMLFormElement): string {\n  return searchParamsFromFormData(new FormData(form)).toString()\n}\n","// Emulates submit button submission values by inserting a hidden input to the form.\n//\n// Submit events can be triggerd in the following ways:\n// - User clicks on a submit button.\n// - User press Enter when focusing on a form field; also known as \"implicit submission\".\n// - Programmatically via requestSubmit helper.\n//\n// On GitHub.com, the submission is either handled by the browser or remoteForm.\n//\n// For submissions triggered by user actions, the name and value of the clicked submit button (also known as\n// \"the submitter\") is passed along in the request, and can be programmatically retrieved with FormData.entries().\n//\n// However, this value will be lost in the following cases:\n// - 1. When the submitter button is disabled, most commonly by [data-disable-with].\n// - 2. When submitting via requestSubmit (from form.js), because the submission does not originated from a submitter.\n// - 3. When submitting with remoteForm, because FormData(form).entries() does not know about the submitter. In Safari\n// the submitter is known during the submission steps, but this behavior is not supported in any other browsers.\n//\n// @see {@link https://github.com/github/form-data-entries/pull/7}.\n//\n// For the exact workarounds, refer to ./form.js and ./remote.js.\nexport function persistSubmitButtonValue(button: HTMLButtonElement | HTMLInputElement) {\n  const form = button.closest('form')\n  if (!(form instanceof HTMLFormElement)) {\n    return\n  }\n\n  let input = findPersistedSubmitButtonValue(form)\n\n  if (button.name) {\n    const defaultValue = button.matches('input[type=submit]') ? 'Submit' : ''\n    const value = button.value || defaultValue\n    if (!input) {\n      input = document.createElement('input')\n      input.type = 'hidden'\n      input.classList.add('js-submit-button-value')\n      form.prepend(input)\n    }\n    input.name = button.name\n    input.value = value\n  } else if (input) {\n    input.remove()\n  }\n}\n\nexport function findPersistedSubmitButtonValue(form: HTMLFormElement): HTMLInputElement | null {\n  const input = form.querySelector('input.js-submit-button-value')\n  return input instanceof HTMLInputElement ? input : null\n}\n"],"names":["showGlobalError","ajaxErrorMessage","document","getElementById","hidden","hideGlobalError","on","event","error","text","detail","currentTarget","target","test","stopImmediatePropagation","setTimeout","defaultPrevented","NotificationsListSubscriptionFormElement","HTMLElement","submitCustomForm","e","submitForm","closeMenu","preventDefault","form","body","FormData","response","self","fetch","action","method","headers","Accept","ok","json","doParam","get","updateCheckedState","updateMenuButtonCopy","updateSocialCount","count","applyInputsCheckedPropertiesToAttributesForNextFormReset","subscription","unwatchButtonCopy","stopIgnoringButtonCopy","watchButtonCopy","input","threadTypeCheckboxes","toggleAttribute","checked","button","subscriptionButtons","setAttribute","value","customButton","changeValue","undefined","subscriptionsContainer","i","subscriptionsLabels","length","remove","subscriptionsSubtitle","textContent","socialCount","pluralizeUsers","userCount","parseInt","handleDialogLabelToggle","wasChecked","labelId","toggledLabelId","templateLabelElementClone","getAttribute","removeAttribute","appendChild","openCustomDialog","stopPropagation","menu","enableApplyButtonAndCheckbox","saveCurrentLabelsState","customDialog","querySelector","focus","visibleLabels","querySelectorAll","customSubmit","closeCustomDialog","resetFilterLabelsDialog","idx","dialogLabelItems","setCheckedForDropdownLabel","Object","keys","lastAppliedLabels","replaceChildren","values","closeFilterLabelsDialog","openFilterLabelsDialog","filterLabelsDialog","applyFilterLabelsDialog","hideFilterSubtitle","enableIssuesCheckbox","enableCheckbox","threadTypeCheckboxesUpdated","hideSubtitle","labelInputs","cloneNode","appendLabelToFormInput","createElement","detailsToggled","submitCustom","details","noneSelected","some","disabled","targets","controller","NotificationsTeamSubscriptionFormElement","NotificationsDialogLabelItemElement","toggleDropdownLabel","label","dispatchEvent","CustomEvent","hiddenLabelTemplate","bubbles","toString","attrPrefix","attr","fire","name","cancelable","requestSubmit","submitter","checkButtonValidity","HTMLFormElement","type","persistSubmitButtonValue","submit","HTMLInputElement","fillFormValues","fields","element","elements","namedItem","HTMLTextAreaElement","isFormField","nodeName","toLowerCase","isContentEditable","searchParamsFromFormData","formData","URLSearchParams","combineGetFormSearchParams","formAction","allSearchParams","search","key","append","serialize","closest","findPersistedSubmitButtonValue","defaultValue","matches","classList","add","prepend"],"sourceRoot":""}
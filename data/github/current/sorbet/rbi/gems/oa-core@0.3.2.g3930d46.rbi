# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `oa-core` gem.
# Please instead update this file by running `bin/tapioca gem oa-core`.

# source://oa-core//lib/omniauth/core.rb#4
module OmniAuth
  class << self
    # source://oa-core//lib/omniauth/core.rb#81
    def config; end

    # @yield [config]
    #
    # source://oa-core//lib/omniauth/core.rb#85
    def configure; end

    # source://oa-core//lib/omniauth/core.rb#89
    def mock_auth_for(provider); end

    # source://oa-core//lib/omniauth/core.rb#12
    def strategies; end
  end
end

# source://oa-core//lib/omniauth/builder.rb#4
class OmniAuth::Builder < ::Rack::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://oa-core//lib/omniauth/builder.rb#5
  def initialize(app, &block); end

  # source://oa-core//lib/omniauth/builder.rb#28
  def call(env); end

  # source://oa-core//lib/omniauth/builder.rb#14
  def configure(&block); end

  # source://oa-core//lib/omniauth/builder.rb#10
  def on_failure(&block); end

  # source://oa-core//lib/omniauth/builder.rb#18
  def provider(klass, *args, &block); end
end

# source://oa-core//lib/omniauth/core.rb#16
class OmniAuth::Configuration
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Configuration] a new instance of Configuration
  #
  # source://oa-core//lib/omniauth/core.rb#44
  def initialize; end

  # source://oa-core//lib/omniauth/core.rb#56
  def add_mock(provider, mock = T.unsafe(nil)); end

  # Returns the value of attribute allowed_request_methods.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def allowed_request_methods; end

  # Sets the attribute allowed_request_methods
  #
  # @param value the value to set the attribute allowed_request_methods to.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def allowed_request_methods=(_arg0); end

  # Returns the value of attribute form_css.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def form_css; end

  # Sets the attribute form_css
  #
  # @param value the value to set the attribute form_css to.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def form_css=(_arg0); end

  # Returns the value of attribute full_host.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def full_host; end

  # Sets the attribute full_host
  #
  # @param value the value to set the attribute full_host to.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def full_host=(_arg0); end

  # Returns the value of attribute mock_auth.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def mock_auth; end

  # Sets the attribute mock_auth
  #
  # @param value the value to set the attribute mock_auth to.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def mock_auth=(_arg0); end

  # source://oa-core//lib/omniauth/core.rb#48
  def on_failure(&block); end

  # Sets the attribute on_failure
  #
  # @param value the value to set the attribute on_failure to.
  #
  # source://oa-core//lib/omniauth/core.rb#77
  def on_failure=(_arg0); end

  # Returns the value of attribute path_prefix.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def path_prefix; end

  # Sets the attribute path_prefix
  #
  # @param value the value to set the attribute path_prefix to.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def path_prefix=(_arg0); end

  # Returns the value of attribute test_mode.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def test_mode; end

  # Sets the attribute test_mode
  #
  # @param value the value to set the attribute test_mode to.
  #
  # source://oa-core//lib/omniauth/core.rb#78
  def test_mode=(_arg0); end

  class << self
    # source://oa-core//lib/omniauth/core.rb#40
    def defaults; end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://oa-core//lib/omniauth/form.rb#4
class OmniAuth::Form
  # @return [Form] a new instance of Form
  #
  # source://oa-core//lib/omniauth/form.rb#91
  def initialize(options = T.unsafe(nil)); end

  # source://oa-core//lib/omniauth/form.rb#127
  def button(text); end

  # source://oa-core//lib/omniauth/form.rb#135
  def fieldset(legend, options = T.unsafe(nil), &block); end

  # source://oa-core//lib/omniauth/form.rb#158
  def footer; end

  # source://oa-core//lib/omniauth/form.rb#142
  def header(title, header_info); end

  # source://oa-core//lib/omniauth/form.rb#131
  def html(html); end

  # source://oa-core//lib/omniauth/form.rb#110
  def input_field(type, name); end

  # source://oa-core//lib/omniauth/form.rb#105
  def label_field(text, target); end

  # Returns the value of attribute options.
  #
  # source://oa-core//lib/omniauth/form.rb#89
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://oa-core//lib/omniauth/form.rb#89
  def options=(_arg0); end

  # source://oa-core//lib/omniauth/form.rb#121
  def password_field(label, name); end

  # source://oa-core//lib/omniauth/form.rb#115
  def text_field(label, name); end

  # source://oa-core//lib/omniauth/form.rb#170
  def to_html; end

  # source://oa-core//lib/omniauth/form.rb#175
  def to_response; end

  protected

  # source://oa-core//lib/omniauth/form.rb#182
  def css; end

  class << self
    # source://oa-core//lib/omniauth/form.rb#100
    def build(title = T.unsafe(nil), &block); end
  end
end

# source://oa-core//lib/omniauth/form.rb#5
OmniAuth::Form::DEFAULT_CSS = T.let(T.unsafe(nil), String)

# source://oa-core//lib/omniauth/strategy.rb#4
class OmniAuth::NoSessionError < ::StandardError; end

# source://oa-core//lib/omniauth/core.rb#5
module OmniAuth::Strategies; end

class OmniAuth::Strategies::CAS
  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/cas.rb#11
  def initialize(app, options = T.unsafe(nil), &block); end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def app; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def env; end

  def find_user(uid); end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def name; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def options; end

  def reconcile_access(user); end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def response; end

  protected

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/cas.rb#38
  def auth_hash; end

  def callback_phase; end
  def callback_phase_prelude; end

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/cas.rb#18
  def request_phase; end
end

class OmniAuth::Strategies::LDAP
  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/ldap.rb#32
  def initialize(app, options = T.unsafe(nil), &block); end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def app; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def env; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def name; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def options; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def response; end

  protected

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/ldap.rb#81
  def auth_hash; end

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/ldap.rb#56
  def callback_phase; end

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/ldap.rb#49
  def get_credentials; end

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/ldap.rb#40
  def request_phase; end

  class << self
    # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/ldap.rb#89
    def map_user(mapper, object); end
  end
end

class OmniAuth::Strategies::SAML
  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/saml.rb#14
  def initialize(app, options = T.unsafe(nil)); end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def app; end

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/saml.rb#43
  def auth_hash; end

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/saml.rb#30
  def callback_phase; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def env; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def name; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def options; end

  # source://oa-enterprise/0.3.2.g3930d46/lib/omniauth/strategies/saml.rb#25
  def request_phase; end

  # source://oa-core//lib/omniauth/strategy.rb#13
  def response; end
end

# The Strategy is the base unit of OmniAuth's ability to
# wrangle multiple providers. Each strategy provided by
# OmniAuth includes this mixin to gain the default functionality
# necessary to be compatible with the OmniAuth library.
#
# source://oa-core//lib/omniauth/strategy.rb#9
module OmniAuth::Strategy
  # @yield [_self]
  # @yieldparam _self [OmniAuth::Strategy] the object that the method was called on
  #
  # source://oa-core//lib/omniauth/strategy.rb#17
  def initialize(app, name, *args, &block); end

  # source://oa-core//lib/omniauth/strategy.rb#175
  def auth_hash; end

  # source://oa-core//lib/omniauth/strategy.rb#29
  def call(env); end

  # @raise [OmniAuth::NoSessionError]
  #
  # source://oa-core//lib/omniauth/strategy.rb#33
  def call!(env); end

  # source://oa-core//lib/omniauth/strategy.rb#171
  def call_app!(env = T.unsafe(nil)); end

  # source://oa-core//lib/omniauth/strategy.rb#163
  def call_through_to_app; end

  # Performs the steps necessary to run the callback phase of a strategy.
  #
  # source://oa-core//lib/omniauth/strategy.rb#63
  def callback_call; end

  # source://oa-core//lib/omniauth/strategy.rb#147
  def callback_path; end

  # source://oa-core//lib/omniauth/strategy.rb#133
  def callback_phase; end

  # source://oa-core//lib/omniauth/strategy.rb#196
  def callback_url; end

  # source://oa-core//lib/omniauth/strategy.rb#128
  def copy_query_params; end

  # source://oa-core//lib/omniauth/strategy.rb#155
  def current_path; end

  # source://oa-core//lib/omniauth/strategy.rb#227
  def fail!(message_key, exception = T.unsafe(nil)); end

  # source://oa-core//lib/omniauth/strategy.rb#182
  def full_host; end

  # source://oa-core//lib/omniauth/strategy.rb#25
  def inspect; end

  # source://oa-core//lib/omniauth/strategy.rb#83
  def mock_call!(env); end

  # source://oa-core//lib/omniauth/strategy.rb#101
  def mock_callback_call; end

  # source://oa-core//lib/omniauth/strategy.rb#89
  def mock_request_call; end

  # @return [Boolean]
  #
  # source://oa-core//lib/omniauth/strategy.rb#71
  def on_auth_path?; end

  # @return [Boolean]
  #
  # source://oa-core//lib/omniauth/strategy.rb#79
  def on_callback_path?; end

  # @return [Boolean]
  #
  # source://oa-core//lib/omniauth/strategy.rb#75
  def on_request_path?; end

  # source://oa-core//lib/omniauth/strategy.rb#139
  def path_prefix; end

  # source://oa-core//lib/omniauth/strategy.rb#159
  def query_string; end

  # source://oa-core//lib/omniauth/strategy.rb#212
  def redirect(uri); end

  # source://oa-core//lib/omniauth/strategy.rb#208
  def request; end

  # Performs the steps necessary to run the request phase of a strategy.
  #
  # source://oa-core//lib/omniauth/strategy.rb#48
  def request_call; end

  # source://oa-core//lib/omniauth/strategy.rb#143
  def request_path; end

  # @raise [NotImplementedError]
  #
  # source://oa-core//lib/omniauth/strategy.rb#124
  def request_phase; end

  # source://oa-core//lib/omniauth/strategy.rb#200
  def script_name; end

  # source://oa-core//lib/omniauth/strategy.rb#204
  def session; end

  # source://oa-core//lib/omniauth/strategy.rb#151
  def setup_path; end

  # source://oa-core//lib/omniauth/strategy.rb#115
  def setup_phase; end

  # source://oa-core//lib/omniauth/strategy.rb#225
  def user_info; end

  class << self
    # @private
    #
    # source://oa-core//lib/omniauth/strategy.rb#10
    def included(base); end
  end
end

# Support for testing OmniAuth strategies.
#
# source://oa-core//lib/omniauth/test.rb#4
module OmniAuth::Test; end

# source://oa-core//lib/omniauth/test/phony_session.rb#1
class OmniAuth::Test::PhonySession
  # @return [PhonySession] a new instance of PhonySession
  #
  # source://oa-core//lib/omniauth/test/phony_session.rb#2
  def initialize(app); end

  # source://oa-core//lib/omniauth/test/phony_session.rb#3
  def call(env); end
end

# source://oa-core//lib/omniauth/test/strategy_macros.rb#5
module OmniAuth::Test::StrategyMacros
  # source://oa-core//lib/omniauth/test/strategy_macros.rb#7
  def sets_an_auth_hash; end

  # source://oa-core//lib/omniauth/test/strategy_macros.rb#13
  def sets_provider_to(provider); end

  # source://oa-core//lib/omniauth/test/strategy_macros.rb#19
  def sets_uid_to(uid); end

  # source://oa-core//lib/omniauth/test/strategy_macros.rb#25
  def sets_user_info_to(user_info); end
end

# Support for testing OmniAuth strategies.
#
# @example Usage
#   class MyStrategyTest < Test::Unit::TestCase
#   include OmniAuth::Test::StrategyTestCase
#   def strategy
#   # return the parameters to a Rack::Builder map call:
#   [MyStrategy.new, :some, :configuration, :options => 'here']
#   end
#   setup do
#   post '/auth/my_strategy/callback', :user => { 'name' => 'Dylan', 'id' => '445' }
#   end
#   end
#
# source://oa-core//lib/omniauth/test/strategy_test_case.rb#21
module OmniAuth::Test::StrategyTestCase
  # source://oa-core//lib/omniauth/test/strategy_test_case.rb#23
  def app; end

  # source://oa-core//lib/omniauth/test/strategy_test_case.rb#33
  def app_response; end

  # source://oa-core//lib/omniauth/test/strategy_test_case.rb#37
  def session; end

  # @raise [NotImplementedError]
  #
  # source://oa-core//lib/omniauth/test/strategy_test_case.rb#41
  def strategy; end
end

# source://oa-core//lib/omniauth/core.rb#93
module OmniAuth::Utils
  private

  # source://oa-core//lib/omniauth/core.rb#130
  def camelize(word, first_letter_in_uppercase = T.unsafe(nil)); end

  # source://oa-core//lib/omniauth/core.rb#115
  def deep_merge(hash, other_hash); end

  # source://oa-core//lib/omniauth/core.rb#111
  def form_css; end

  class << self
    # source://oa-core//lib/omniauth/core.rb#130
    def camelize(word, first_letter_in_uppercase = T.unsafe(nil)); end

    # source://oa-core//lib/omniauth/core.rb#115
    def deep_merge(hash, other_hash); end

    # source://oa-core//lib/omniauth/core.rb#111
    def form_css; end
  end
end

# source://oa-core//lib/omniauth/core.rb#94
OmniAuth::Utils::CAMELIZE_SPECIAL = T.let(T.unsafe(nil), Hash)

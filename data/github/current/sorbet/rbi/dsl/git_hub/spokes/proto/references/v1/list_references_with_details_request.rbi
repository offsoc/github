# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GitHub::Spokes::Proto::References::V1::ListReferencesWithDetailsRequest`.
# Please instead update this file by running `bin/tapioca dsl GitHub::Spokes::Proto::References::V1::ListReferencesWithDetailsRequest`.

class GitHub::Spokes::Proto::References::V1::ListReferencesWithDetailsRequest
  sig do
    params(
      ref_glob_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::RefGlobSelector),
      repository: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository),
      request_context: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext),
      universal_selector: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)
    ).void
  end
  def initialize(ref_glob_selector: nil, repository: nil, request_context: nil, universal_selector: nil); end

  sig { void }
  def clear_ref_glob_selector; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_universal_selector; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::RefGlobSelector)) }
  def ref_glob_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::RefGlobSelector)).void }
  def ref_glob_selector=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)) }
  def repository; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::V1::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Symbol)) }
  def selector; end

  sig { returns(T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)) }
  def universal_selector; end

  sig { params(value: T.nilable(GitHub::Spokes::Proto::Types::Selectors::V1::UniversalSelector)).void }
  def universal_selector=(value); end
end

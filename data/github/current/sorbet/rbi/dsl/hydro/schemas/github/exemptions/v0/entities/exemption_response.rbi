# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionResponse`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionResponse`.

class Hydro::Schemas::Github::Exemptions::V0::Entities::ExemptionResponse
  sig do
    params(
      created_at: T.nilable(Google::Protobuf::Timestamp),
      exemption_request_id: T.nilable(Integer),
      id: T.nilable(Integer),
      reviewer: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      status: T.nilable(T.any(Symbol, Integer)),
      updated_at: T.nilable(Google::Protobuf::Timestamp)
    ).void
  end
  def initialize(created_at: nil, exemption_request_id: nil, id: nil, reviewer: nil, status: nil, updated_at: nil); end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_exemption_request_id; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_reviewer; end

  sig { void }
  def clear_status; end

  sig { void }
  def clear_updated_at; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def exemption_request_id; end

  sig { params(value: Integer).void }
  def exemption_request_id=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def reviewer; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def reviewer=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def updated_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def updated_at=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Repositories::V1::RuleSuiteEvaluation`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Repositories::V1::RuleSuiteEvaluation`.

class Hydro::Schemas::Github::Repositories::V1::RuleSuiteEvaluation
  sig do
    params(
      after_oid: T.nilable(String),
      before_oid: T.nilable(String),
      evaluation_metadata: T.nilable(String),
      policy_oid: T.nilable(String),
      public_key: T.nilable(Hydro::Schemas::Github::V1::Entities::PublicKey),
      ref_name: T.nilable(String),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      result: T.nilable(T.any(Symbol, Integer)),
      rule_runs: T.nilable(T.any(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Repositories::V1::Entities::RuleRun], T::Array[Hydro::Schemas::Github::Repositories::V1::Entities::RuleRun])),
      rule_suite_id: T.nilable(Integer),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(after_oid: nil, before_oid: nil, evaluation_metadata: nil, policy_oid: nil, public_key: nil, ref_name: nil, repository: nil, result: nil, rule_runs: T.unsafe(nil), rule_suite_id: nil, user: nil); end

  sig { returns(String) }
  def after_oid; end

  sig { params(value: String).void }
  def after_oid=(value); end

  sig { returns(String) }
  def before_oid; end

  sig { params(value: String).void }
  def before_oid=(value); end

  sig { void }
  def clear_after_oid; end

  sig { void }
  def clear_before_oid; end

  sig { void }
  def clear_evaluation_metadata; end

  sig { void }
  def clear_policy_oid; end

  sig { void }
  def clear_public_key; end

  sig { void }
  def clear_ref_name; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_result; end

  sig { void }
  def clear_rule_runs; end

  sig { void }
  def clear_rule_suite_id; end

  sig { void }
  def clear_user; end

  sig { returns(String) }
  def evaluation_metadata; end

  sig { params(value: String).void }
  def evaluation_metadata=(value); end

  sig { returns(String) }
  def policy_oid; end

  sig { params(value: String).void }
  def policy_oid=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PublicKey)) }
  def public_key; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PublicKey)).void }
  def public_key=(value); end

  sig { returns(String) }
  def ref_name; end

  sig { params(value: String).void }
  def ref_name=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def result; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def result=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Repositories::V1::Entities::RuleRun]) }
  def rule_runs; end

  sig do
    params(
      value: Google::Protobuf::RepeatedField[Hydro::Schemas::Github::Repositories::V1::Entities::RuleRun]
    ).void
  end
  def rule_runs=(value); end

  sig { returns(Integer) }
  def rule_suite_id; end

  sig { params(value: Integer).void }
  def rule_suite_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

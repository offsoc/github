# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Classroom::SyncClassroom::V1::CreateClassroomAssignmentRecordsRequest`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Classroom::SyncClassroom::V1::CreateClassroomAssignmentRecordsRequest`.

class MonolithTwirp::Classroom::SyncClassroom::V1::CreateClassroomAssignmentRecordsRequest
  sig do
    params(
      assignment_name: T.nilable(String),
      assignment_type: T.nilable(String),
      classroom_id: T.nilable(Integer),
      deadline: T.nilable(String),
      has_autograding: T.nilable(T::Boolean),
      id: T.nilable(Integer),
      starter_code_repository_id: T.nilable(Integer)
    ).void
  end
  def initialize(assignment_name: nil, assignment_type: nil, classroom_id: nil, deadline: nil, has_autograding: nil, id: nil, starter_code_repository_id: nil); end

  sig { returns(String) }
  def assignment_name; end

  sig { params(value: String).void }
  def assignment_name=(value); end

  sig { returns(String) }
  def assignment_type; end

  sig { params(value: String).void }
  def assignment_type=(value); end

  sig { returns(Integer) }
  def classroom_id; end

  sig { params(value: Integer).void }
  def classroom_id=(value); end

  sig { void }
  def clear_assignment_name; end

  sig { void }
  def clear_assignment_type; end

  sig { void }
  def clear_classroom_id; end

  sig { void }
  def clear_deadline; end

  sig { void }
  def clear_has_autograding; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_starter_code_repository_id; end

  sig { returns(String) }
  def deadline; end

  sig { params(value: String).void }
  def deadline=(value); end

  sig { returns(T::Boolean) }
  def has_autograding; end

  sig { params(value: T::Boolean).void }
  def has_autograding=(value); end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(Integer) }
  def starter_code_repository_id; end

  sig { params(value: Integer).void }
  def starter_code_repository_id=(value); end
end

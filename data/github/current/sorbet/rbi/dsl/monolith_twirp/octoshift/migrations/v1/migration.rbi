# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `MonolithTwirp::Octoshift::Migrations::V1::Migration`.
# Please instead update this file by running `bin/tapioca dsl MonolithTwirp::Octoshift::Migrations::V1::Migration`.

class MonolithTwirp::Octoshift::Migrations::V1::Migration
  sig do
    params(
      continue_on_error: T.nilable(T::Boolean),
      created_at: T.nilable(Google::Protobuf::Timestamp),
      failure_reason: T.nilable(String),
      id: T.nilable(String),
      migration_log_url: T.nilable(String),
      migration_state: T.nilable(T.any(Symbol, Integer)),
      repository_name: T.nilable(String),
      source_connector_id: T.nilable(String),
      source_url: T.nilable(String),
      warnings_count: T.nilable(Integer)
    ).void
  end
  def initialize(continue_on_error: nil, created_at: nil, failure_reason: nil, id: nil, migration_log_url: nil, migration_state: nil, repository_name: nil, source_connector_id: nil, source_url: nil, warnings_count: nil); end

  sig { void }
  def clear_continue_on_error; end

  sig { void }
  def clear_created_at; end

  sig { void }
  def clear_failure_reason; end

  sig { void }
  def clear_id; end

  sig { void }
  def clear_migration_log_url; end

  sig { void }
  def clear_migration_state; end

  sig { void }
  def clear_repository_name; end

  sig { void }
  def clear_source_connector_id; end

  sig { void }
  def clear_source_url; end

  sig { void }
  def clear_warnings_count; end

  sig { returns(T::Boolean) }
  def continue_on_error; end

  sig { params(value: T::Boolean).void }
  def continue_on_error=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def created_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def created_at=(value); end

  sig { returns(String) }
  def failure_reason; end

  sig { params(value: String).void }
  def failure_reason=(value); end

  sig { returns(String) }
  def id; end

  sig { params(value: String).void }
  def id=(value); end

  sig { returns(String) }
  def migration_log_url; end

  sig { params(value: String).void }
  def migration_log_url=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def migration_state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def migration_state=(value); end

  sig { returns(String) }
  def repository_name; end

  sig { params(value: String).void }
  def repository_name=(value); end

  sig { returns(String) }
  def source_connector_id; end

  sig { params(value: String).void }
  def source_connector_id=(value); end

  sig { returns(String) }
  def source_url; end

  sig { params(value: String).void }
  def source_url=(value); end

  sig { returns(Integer) }
  def warnings_count; end

  sig { params(value: Integer).void }
  def warnings_count=(value); end
end

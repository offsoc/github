# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hook::Event::BranchProtectionRuleEvent`.
# Please instead update this file by running `bin/tapioca dsl Hook::Event::BranchProtectionRuleEvent`.

class Hook::Event::BranchProtectionRuleEvent
  sig do
    params(
      action: T.untyped,
      actor_id: T.untyped,
      protected_branch_id: T.untyped,
      authorized_actor_names: T.untyped,
      business_id: T.untyped,
      delivered_hook_ids: T.untyped,
      event_guid: T.untyped,
      organization_id: T.untyped,
      previous_authorized_actor_names: T.untyped,
      previous_authorized_actors_only: T.untyped,
      previous_authorized_dismissal_actors_only: T.untyped,
      previous_changes: T.untyped,
      previous_status_checks_contexts: T.untyped,
      primary_resource: T.untyped,
      primary_resource_data: T.untyped,
      repository_id: T.untyped,
      triggered_at: T.untyped
    ).void
  end
  def initialize(action:, actor_id:, protected_branch_id:, authorized_actor_names: nil, business_id: nil, delivered_hook_ids: nil, event_guid: nil, organization_id: nil, previous_authorized_actor_names: nil, previous_authorized_actors_only: nil, previous_authorized_dismissal_actors_only: nil, previous_changes: nil, previous_status_checks_contexts: nil, primary_resource: nil, primary_resource_data: nil, repository_id: nil, triggered_at: nil); end

  sig { returns(T.untyped) }
  def action; end

  sig { params(value: T.untyped).void }
  def action=(value); end

  sig { returns(T.untyped) }
  def actor_id; end

  sig { params(value: T.untyped).void }
  def actor_id=(value); end

  sig { returns(T.untyped) }
  def authorized_actor_names; end

  sig { returns(T.untyped) }
  def business_id; end

  sig { returns(T.untyped) }
  def protected_branch_id; end

  sig { params(value: T.untyped).void }
  def authorized_actor_names=(value); end

  sig { params(value: T.untyped).void }
  def business_id=(value); end

  sig { params(value: T.untyped).void }
  def previous_authorized_actor_names=(value); end

  sig { params(value: T.untyped).void }
  def protected_branch_id=(value); end

  sig { returns(T.untyped) }
  def delivered_hook_ids; end

  sig { params(value: T.untyped).void }
  def delivered_hook_ids=(value); end

  sig { returns(T.untyped) }
  def event_guid; end

  sig { params(value: T.untyped).void }
  def event_guid=(value); end

  sig { returns(T.untyped) }
  def organization_id; end

  sig { params(value: T.untyped).void }
  def organization_id=(value); end

  sig { returns(T.untyped) }
  def previous_authorized_actor_names; end

  sig { returns(T.untyped) }
  def previous_authorized_actors_only; end

  sig { params(value: T.untyped).void }
  def previous_authorized_actors_only=(value); end

  sig { returns(T.untyped) }
  def previous_authorized_dismissal_actors_only; end

  sig { params(value: T.untyped).void }
  def previous_authorized_dismissal_actors_only=(value); end

  sig { returns(T.untyped) }
  def previous_changes; end

  sig { params(value: T.untyped).void }
  def previous_changes=(value); end

  sig { returns(T.untyped) }
  def previous_status_checks_contexts; end

  sig { params(value: T.untyped).void }
  def previous_status_checks_contexts=(value); end

  sig { returns(T.untyped) }
  def primary_resource; end

  sig { params(value: T.untyped).void }
  def primary_resource=(value); end

  sig { returns(T.untyped) }
  def primary_resource_data; end

  sig { params(value: T.untyped).void }
  def primary_resource_data=(value); end

  sig { returns(T.untyped) }
  def repository_id; end

  sig { params(value: T.untyped).void }
  def repository_id=(value); end

  sig { returns(T.untyped) }
  def triggered_at; end

  sig { params(value: T.untyped).void }
  def triggered_at=(value); end

  class << self
    sig do
      params(
        action: T.untyped,
        actor_id: T.untyped,
        protected_branch_id: T.untyped,
        authorized_actor_names: T.untyped,
        business_id: T.untyped,
        delivered_hook_ids: T.untyped,
        event_guid: T.untyped,
        organization_id: T.untyped,
        previous_authorized_actor_names: T.untyped,
        previous_authorized_actors_only: T.untyped,
        previous_authorized_dismissal_actors_only: T.untyped,
        previous_changes: T.untyped,
        previous_status_checks_contexts: T.untyped,
        primary_resource: T.untyped,
        primary_resource_data: T.untyped,
        repository_id: T.untyped,
        triggered_at: T.untyped
      ).returns(T::Boolean)
    end
    def queue(action:, actor_id:, protected_branch_id:, authorized_actor_names: nil, business_id: nil, delivered_hook_ids: nil, event_guid: nil, organization_id: nil, previous_authorized_actor_names: nil, previous_authorized_actors_only: nil, previous_authorized_dismissal_actors_only: nil, previous_changes: nil, previous_status_checks_contexts: nil, primary_resource: nil, primary_resource_data: nil, repository_id: nil, triggered_at: nil); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `charlock_holmes` gem.
# Please instead update this file by running `bin/tapioca gem charlock_holmes`.

# source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#1
module CharlockHolmes; end

class CharlockHolmes::Converter
  class << self
    def convert(_arg0, _arg1, _arg2); end
  end
end

# source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#2
class CharlockHolmes::EncodingDetector
  # @return [EncodingDetector] a new instance of EncodingDetector
  #
  # source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#11
  def initialize(scan_len = T.unsafe(nil)); end

  # Length for which to scan content for NULL bytes
  #
  # source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#7
  def binary_scan_length; end

  # Length for which to scan content for NULL bytes
  #
  # source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#7
  def binary_scan_length=(_arg0); end

  def detect(*_arg0); end
  def detect_all(*_arg0); end
  def is_binary?(_arg0); end
  def strip_tags; end
  def strip_tags=(_arg0); end
  def strip_tags?; end

  class << self
    # Builds the ENCODING_TABLE hash by running through the list of supported encodings
    # in the ICU detection API and trying to map them to supported encodings in Ruby.
    # This is built dynamically so as to take advantage of ICU upgrades which may have
    # support for more encodings in the future.
    #
    # Returns nothing.
    #
    # source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#65
    def build_encoding_table; end

    # Attempt to detect the encoding of this string
    #
    # NOTE: This will create a new CharlockHolmes::EncodingDetector instance on every call
    # as well as use the default binary scan length
    #
    # str      - a String, what you want to detect the encoding of
    # hint_enc - an optional String (like "UTF-8"), the encoding name which will
    #            be used as an additional hint to the charset detector
    #
    # Returns: a Hash with :encoding, :language, :type and :confidence
    #
    # source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#25
    def detect(str, hint_enc = T.unsafe(nil)); end

    # Attempt to detect the encoding of this string, and return
    # a list with all the possible encodings that match it.
    #
    # NOTE: This will create a new CharlockHolmes::EncodingDetector instance on every call
    # as well as use the default binary scan length
    #
    # str      - a String, what you want to detect the encoding of
    # hint_enc - an optional String (like "UTF-8"), the encoding name which will
    #            be used as an additional hint to the charset detector
    #
    # Returns: an Array with zero or more Hashes,
    # each one of them with with :encoding, :language, :type and :confidence
    #
    # source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#41
    def detect_all(str, hint_enc = T.unsafe(nil)); end

    # source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#53
    def encoding_table; end

    def supported_encodings; end
  end
end

# source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#57
CharlockHolmes::EncodingDetector::BINARY = T.let(T.unsafe(nil), String)

# Default length for which to scan content for NULL bytes
#
# source://charlock_holmes//lib/charlock_holmes/encoding_detector.rb#4
CharlockHolmes::EncodingDetector::DEFAULT_BINARY_SCAN_LEN = T.let(T.unsafe(nil), Integer)

class CharlockHolmes::Transliterator
  class << self
    def id_list; end
    def transliterate(_arg0, _arg1); end
  end
end

# source://charlock_holmes//lib/charlock_holmes/version.rb#2
CharlockHolmes::VERSION = T.let(T.unsafe(nil), String)

# source://charlock_holmes//lib/charlock_holmes/string.rb#3
class String
  include ::Comparable
  include ::MessagePack::CoreExt
  include ::JSON::Ext::Generator::GeneratorMethods::String
  extend ::JSON::Ext::Generator::GeneratorMethods::String::Extend

  # Attempt to detect the encoding of this string
  #
  # Returns: a Hash with :encoding, :language, :type and :confidence
  #
  # source://charlock_holmes//lib/charlock_holmes/string.rb#7
  def detect_encoding(hint_enc = T.unsafe(nil)); end

  # Attempt to detect the encoding of this string
  # then set the encoding to what was detected ala `force_encoding`
  #
  # Returns: self
  #
  # source://charlock_holmes//lib/charlock_holmes/string.rb#27
  def detect_encoding!(hint_enc = T.unsafe(nil)); end

  # Attempt to detect the encoding of this string, and return
  # a list with all the possible encodings that match it.
  #
  # Returns: an Array with zero or more Hashes,
  #          each one of them with with :encoding, :language, :type and :confidence
  #
  # source://charlock_holmes//lib/charlock_holmes/string.rb#17
  def detect_encodings(hint_enc = T.unsafe(nil)); end
end

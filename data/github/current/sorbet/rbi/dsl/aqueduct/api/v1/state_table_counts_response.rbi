# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aqueduct::Api::V1::StateTableCountsResponse`.
# Please instead update this file by running `bin/tapioca dsl Aqueduct::Api::V1::StateTableCountsResponse`.

class Aqueduct::Api::V1::StateTableCountsResponse
  sig do
    params(
      error: T.nilable(String),
      per_node: T.nilable(T.any(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::NodeCount], T::Array[Aqueduct::Api::V1::StateTableCountsResponse::NodeCount])),
      per_queue: T.nilable(T.any(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::QueueCount], T::Array[Aqueduct::Api::V1::StateTableCountsResponse::QueueCount])),
      total: T.nilable(T.any(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::Count], T::Array[Aqueduct::Api::V1::StateTableCountsResponse::Count]))
    ).void
  end
  def initialize(error: nil, per_node: T.unsafe(nil), per_queue: T.unsafe(nil), total: T.unsafe(nil)); end

  sig { void }
  def clear_error; end

  sig { void }
  def clear_per_node; end

  sig { void }
  def clear_per_queue; end

  sig { void }
  def clear_total; end

  sig { returns(String) }
  def error; end

  sig { params(value: String).void }
  def error=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::NodeCount]) }
  def per_node; end

  sig { params(value: Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::NodeCount]).void }
  def per_node=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::QueueCount]) }
  def per_queue; end

  sig { params(value: Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::QueueCount]).void }
  def per_queue=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::Count]) }
  def total; end

  sig { params(value: Google::Protobuf::RepeatedField[Aqueduct::Api::V1::StateTableCountsResponse::Count]).void }
  def total=(value); end
end

# typed: strict
# frozen_string_literal: true

require "#{Rails.root}/config/environment"

# To learn more about transitions, checkout the documentation on The Hub:
# https://thehub.github.com/epd/engineering/products-and-services/dotcom/transitions/
module GitHub
  module Transitions
    class <%= class_name %> < Base
      # Most transitions iterate over a dataset. To do that, use and configure
      # an iterator using `iterate_over`. See the common database table
      # iterator example below, or check the iterators base class
      # (`GitHub::Transitions::Iterators::Base`) to learn how to implement
      # a custom iterator.
      #
      # In case you are not iterating over a dataset but want to perform a
      # one-off action, you can overwrite the `#perform` method.

      # Example: Iterate over a database table
      #
      #     class MyModel < ApplicationRecord::Domain::MyDomain
      #       self.table_name = :my_table
      #     end
      #
      #     iterate_over :database_table, params: {
      #       model_class: MyModel,
      #       conditions: "my_column IS NOT NULL",
      #       columns: %i[my_column],
      #     }
      #

      # sig { override.void }
      # def after_initialize
      #   # in case you need to initialize some instance variables
      # end

      sig { override.params(items: Iterators::Items).void }
      def process_batch(items)
        # Here you do your thing! Use `dry_run?` to check if this is a dry run
        # and `log(message)` to output messages to the transition's logs.

        # If you're using the database table iterator, `items` is a
        # a `Hash` with `id`s as keys and values as columns loaded from
        # table: `{ 42 => { my_column: "foo" } }`

        # The size of `items` is determined by the `process_batch_size`
        # argument. The value can be passed via the `--process-batch-size`
        # and has defaults for online and GHES environments.

        # If you write to the database, use `write_to(model_class:)`. This will
        # switch the relevant connection to the primary and throttle.
        #
        # Consider writing with a single query per batch instead of one query
        # per item. This will ensure speedy transitions in the GHES environment
        # where the process batch size is larger.
        #
        # Example:
        #
        #     write_to(model_class: MyModel) do
        #       MyModel.where(id: items.keys).update_all(my_column: "bar")
        #     end
        #
      end
    end
  end
end

# Run as a single process if this script is run directly
if $0 == __FILE__
  # See the transition arguments class for information about standard
  # arguments and their default values. If you require additional arguments,
  # pass them via `additional_arguments: %w(foo)` to the `parse` method.
  args = GitHub::Transitions::Arguments.parse(ARGV)

  GitHub::Transitions::<%= class_name %>.new(args).run
end

{"version":3,"file":"chunk-app_assets_modules_github_insights_column-chart_ts-node_modules_date-fns_parseISO_mjs-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/insights/column-chart.ts","node_modules/date-fns/parseISO.mjs"],"sourcesContent":["import {RegisterColumnChart} from '@github-ui/insights-charts'\n\nRegisterColumnChart()\n","import { millisecondsInHour, millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  const timestamp = date.getTime();\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    const dirtyDate = new Date(timestamp + time);\n    // JS parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n    const result = new Date(0);\n    result.setFullYear(\n      dirtyDate.getUTCFullYear(),\n      dirtyDate.getUTCMonth(),\n      dirtyDate.getUTCDate(),\n    );\n    result.setHours(\n      dirtyDate.getUTCHours(),\n      dirtyDate.getUTCMinutes(),\n      dirtyDate.getUTCSeconds(),\n      dirtyDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n"],"names":["RegisterColumnChart","parseISO","argument","options","date","offset","additionalDigits","dateStrings","splitDateString","dateString","timeString","array","split","patterns","dateTimeDelimiter","length","test","timeZoneDelimiter","substr","token","timezone","exec","time","replace","parseYearResult","parseYear","regex","captures","match","year","NaN","restDateString","parseInt","century","slice","parseDate","Date","dateRegex","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","dayOfISOWeekYear","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","getUTCDate","daysInMonths","isLeapYearIndex","Math","max","isNaN","getTime","timestamp","parseTime","timeRegex","hours","parseTimeUnit","minutes","seconds","parseTimezone","timezoneString","timezoneRegex","sign","dirtyDate","result","setFullYear","getUTCFullYear","getUTCMonth","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","value","parseFloat"],"sourceRoot":""}
# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Aleph::Proto::IndexingResult`.
# Please instead update this file by running `bin/tapioca dsl Aleph::Proto::IndexingResult`.

class Aleph::Proto::IndexingResult
  sig do
    params(
      enqueued_at: T.nilable(Google::Protobuf::Timestamp),
      finished_at: T.nilable(Google::Protobuf::Timestamp),
      language: T.nilable(String),
      reason: T.nilable(String),
      repo_commit: T.nilable(Aleph::Proto::RepoCommit),
      started_at: T.nilable(Google::Protobuf::Timestamp),
      status: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(enqueued_at: nil, finished_at: nil, language: nil, reason: nil, repo_commit: nil, started_at: nil, status: nil); end

  sig { void }
  def clear_enqueued_at; end

  sig { void }
  def clear_finished_at; end

  sig { void }
  def clear_language; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_repo_commit; end

  sig { void }
  def clear_started_at; end

  sig { void }
  def clear_status; end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def enqueued_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def enqueued_at=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def finished_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def finished_at=(value); end

  sig { returns(String) }
  def language; end

  sig { params(value: String).void }
  def language=(value); end

  sig { returns(String) }
  def reason; end

  sig { params(value: String).void }
  def reason=(value); end

  sig { returns(T.nilable(Aleph::Proto::RepoCommit)) }
  def repo_commit; end

  sig { params(value: T.nilable(Aleph::Proto::RepoCommit)).void }
  def repo_commit=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def started_at; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def started_at=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def status=(value); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `toxiproxy` gem.
# Please instead update this file by running `bin/tapioca gem toxiproxy`.

# source://toxiproxy//lib/toxiproxy/toxic.rb#1
class Toxiproxy
  extend ::SingleForwardable

  # @return [Toxiproxy] a new instance of Toxiproxy
  #
  # source://toxiproxy//lib/toxiproxy.rb#22
  def initialize(options); end

  # Create a Toxiproxy, proxying traffic from `@listen` (optional argument to
  # the constructor) to `@upstream`. `#down` `#upstream` or `#downstream` can at any time alter the health
  # of this connection.
  #
  # source://toxiproxy//lib/toxiproxy.rb#186
  def create; end

  # Destroys a Toxiproxy.
  #
  # source://toxiproxy//lib/toxiproxy.rb#203
  def destroy; end

  # Disables a Toxiproxy. This will drop all active connections and stop the proxy from listening.
  #
  # source://toxiproxy//lib/toxiproxy.rb#158
  def disable; end

  # Simulates the endpoint is down, by closing the connection and no
  # longer accepting connections. This is useful to simulate critical system
  # failure, such as a data store becoming completely unavailable.
  #
  # source://toxiproxy//lib/toxiproxy.rb#150
  def down(&block); end

  # Set a downstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy.rb#139
  def downstream(type, attrs = T.unsafe(nil)); end

  # Enables a Toxiproxy. This will cause the proxy to start listening again.
  #
  # source://toxiproxy//lib/toxiproxy.rb#171
  def enable; end

  # Returns the value of attribute enabled.
  #
  # source://toxiproxy//lib/toxiproxy.rb#20
  def enabled; end

  # Returns the value of attribute listen.
  #
  # source://toxiproxy//lib/toxiproxy.rb#20
  def listen; end

  # Returns the value of attribute name.
  #
  # source://toxiproxy//lib/toxiproxy.rb#20
  def name; end

  # Set a downstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy.rb#139
  def toxic(type, attrs = T.unsafe(nil)); end

  # Set a downstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy.rb#139
  def toxicate(type, attrs = T.unsafe(nil)); end

  # Returns an array of the current toxics for a direction.
  #
  # source://toxiproxy//lib/toxiproxy.rb#211
  def toxics; end

  # Set an upstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy.rb#130
  def upstream(type = T.unsafe(nil), attrs = T.unsafe(nil)); end

  private

  # source://toxiproxy//lib/toxiproxy.rb#278
  def assert_response(*args); end

  # source://toxiproxy//lib/toxiproxy.rb#261
  def http; end

  # source://toxiproxy//lib/toxiproxy.rb#241
  def http_request(request); end

  class << self
    # If given a regex, it'll use `grep` to return a Toxiproxy::Collection.
    # Otherwise, it'll convert the passed object to a string and find the proxy by
    # name.
    #
    # source://toxiproxy//lib/toxiproxy.rb#95
    def [](query); end

    # Returns a collection of all currently active Toxiproxies.
    #
    # source://toxiproxy//lib/toxiproxy.rb#51
    def all; end

    # source://toxiproxy//lib/toxiproxy.rb#265
    def assert_response(response); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def count(*args, **_arg1, &block); end

    # Convenience method to create a proxy.
    #
    # source://toxiproxy//lib/toxiproxy.rb#76
    def create(options); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def down(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def each(*args, **_arg1, &block); end

    # source://toxiproxy//lib/toxiproxy.rb#245
    def ensure_webmock_whitelists_toxiproxy; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def find(*args, **_arg1, &block); end

    # Find a single proxy by name.
    #
    # source://toxiproxy//lib/toxiproxy.rb#81
    def find_by_name(name = T.unsafe(nil), &block); end

    # Calls find_by_name and raises NotFound if not found
    #
    # @raise [NotFound]
    #
    # source://toxiproxy//lib/toxiproxy.rb#86
    def find_by_name!(*args); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def grep(*args, **_arg1, &block); end

    # Sets the toxiproxy host to use.
    #
    # source://toxiproxy//lib/toxiproxy.rb#69
    def host=(host); end

    # source://toxiproxy//lib/toxiproxy.rb#257
    def http; end

    # source://toxiproxy//lib/toxiproxy.rb#236
    def http_request(request); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def length(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def map(*args, **_arg1, &block); end

    # source://toxiproxy//lib/toxiproxy.rb#100
    def populate(*proxies); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def reject(*args, **_arg1, &block); end

    # Re-enables all proxies and disables all toxics.
    #
    # source://toxiproxy//lib/toxiproxy.rb#32
    def reset; end

    # source://toxiproxy//lib/toxiproxy.rb#229
    def reset_http_client!; end

    # @return [Boolean]
    #
    # source://toxiproxy//lib/toxiproxy.rb#122
    def running?; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def select(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def size(*args, **_arg1, &block); end

    # source://toxiproxy//lib/toxiproxy.rb#253
    def uri; end

    # source://toxiproxy//lib/toxiproxy.rb#41
    def version; end
  end
end

# source://toxiproxy//lib/toxiproxy.rb#13
Toxiproxy::DEFAULT_URI = T.let(T.unsafe(nil), String)

# source://toxiproxy//lib/toxiproxy.rb#18
class Toxiproxy::InvalidToxic < ::StandardError; end

# source://toxiproxy//lib/toxiproxy.rb#16
class Toxiproxy::NotFound < ::StandardError; end

# ProxyCollection represents a set of proxies. This allows to easily perform
# actions on every proxy in the collection.
#
# Unfortunately, it doesn't implement all of Enumerable because there's no way
# to subclass an Array or include Enumerable for the methods to return a
# Collection instead of an Array (see MRI). Instead, we delegate methods where
# it doesn't matter and only allow the filtering methods that really make
# sense on a proxy collection.
#
# source://toxiproxy//lib/toxiproxy/proxy_collection.rb#10
class Toxiproxy::ProxyCollection
  extend ::Forwardable

  # @return [ProxyCollection] a new instance of ProxyCollection
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#19
  def initialize(collection); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def count(*args, **_arg1, &block); end

  # Destroys all toxiproxy's in the collection
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#60
  def destroy; end

  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#51
  def disable; end

  # Sets every proxy in the collection as down. For example:
  #
  #   Toxiproxy.grep(/redis/).down { .. }
  #
  # Would simulate every Redis server being down for the duration of the
  # block.
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#29
  def down(&block); end

  # Set a downstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#43
  def downstream(toxic, attrs = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#55
  def enable; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def find(*args, **_arg1, &block); end

  # Grep allows easily selecting a subset of proxies, by returning a
  # ProxyCollection with every proxy name matching the regex passed.
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#74
  def grep(regex); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def map(*args, **_arg1, &block); end

  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#68
  def reject(&block); end

  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#64
  def select(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # Set a downstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#43
  def toxic(toxic, attrs = T.unsafe(nil)); end

  # Set a downstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#43
  def toxicate(toxic, attrs = T.unsafe(nil)); end

  # Set an upstream toxic.
  #
  # source://toxiproxy//lib/toxiproxy/proxy_collection.rb#36
  def upstream(toxic, attrs = T.unsafe(nil)); end
end

# source://toxiproxy//lib/toxiproxy/proxy_collection.rb#14
Toxiproxy::ProxyCollection::DEFINED_METHODS = T.let(T.unsafe(nil), Array)

# source://toxiproxy//lib/toxiproxy/proxy_collection.rb#13
Toxiproxy::ProxyCollection::DELEGATED_METHODS = T.let(T.unsafe(nil), Array)

# source://toxiproxy//lib/toxiproxy/proxy_collection.rb#15
Toxiproxy::ProxyCollection::METHODS = T.let(T.unsafe(nil), Array)

# source://toxiproxy//lib/toxiproxy.rb#17
class Toxiproxy::ProxyExists < ::StandardError; end

# source://toxiproxy//lib/toxiproxy/toxic.rb#2
class Toxiproxy::Toxic
  # @return [Toxic] a new instance of Toxic
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#6
  def initialize(attrs); end

  # source://toxiproxy//lib/toxiproxy/toxic.rb#39
  def as_json; end

  # Returns the value of attribute attributes.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#4
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#4
  def attributes=(_arg0); end

  # source://toxiproxy//lib/toxiproxy/toxic.rb#32
  def destroy; end

  # Returns the value of attribute name.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#3
  def name; end

  # Returns the value of attribute proxy.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#3
  def proxy; end

  # source://toxiproxy//lib/toxiproxy/toxic.rb#16
  def save; end

  # Returns the value of attribute stream.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#3
  def stream; end

  # Returns the value of attribute toxicity.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#4
  def toxicity; end

  # Sets the attribute toxicity
  #
  # @param value the value to set the attribute toxicity to.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#4
  def toxicity=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://toxiproxy//lib/toxiproxy/toxic.rb#3
  def type; end
end

# source://toxiproxy//lib/toxiproxy/toxic_collection.rb#2
class Toxiproxy::ToxicCollection
  extend ::Forwardable

  # @return [ToxicCollection] a new instance of ToxicCollection
  #
  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#10
  def initialize(proxies); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def <<(*args, **_arg1, &block); end

  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#15
  def apply(&block); end

  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#44
  def downstream(type, attrs = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def find(*args, **_arg1, &block); end

  # Returns the value of attribute proxies.
  #
  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#6
  def proxies; end

  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#44
  def toxic(type, attrs = T.unsafe(nil)); end

  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#44
  def toxicate(type, attrs = T.unsafe(nil)); end

  # Returns the value of attribute toxics.
  #
  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#5
  def toxics; end

  # Sets the attribute toxics
  #
  # @param value the value to set the attribute toxics to.
  #
  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#5
  def toxics=(_arg0); end

  # source://toxiproxy//lib/toxiproxy/toxic_collection.rb#30
  def upstream(type, attrs = T.unsafe(nil)); end
end

# source://toxiproxy//lib/toxiproxy.rb#14
Toxiproxy::VALID_DIRECTIONS = T.let(T.unsafe(nil), Array)

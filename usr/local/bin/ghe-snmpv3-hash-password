#!/usr/bin/env ruby
# frozen_string_literal: true
#!/usr/share/rbenv/versions/current/bin/ruby
#/ Usage: ghe-snmpv3-hash-password [-h] [-m|--md5] [-s|--sha] <password>
#/
#/ Hash the provided password according to RFC2574 for use with SNMPv3.
#/
#/  OPTIONS:
#/    -h | --help      Show this message.
#/    -m | --md5       Hash using MD5 algorithm
#/    -s | --sha       Hash using SHA1 algorithm (default)
#/
#/ EXAMPLE:
#/
#/  Hash a password using MD5:
#/    $ ghe-snmpv3-hash-password -m secret_password
#/
#/  Hash a passphrase using SHA1:
#/    $ ghe-snmpv3-hash-password -s "secret passphrase"
#/
require "digest"

if ARGV.include?("--help") || ARGV.include?("-h") || ARGV.length == 0 || ARGV.length > 2 || (ARGV.length == 1 && ["-s", "--sha", "-m", "--md5"].include?(ARGV[0]))
  system "grep '^#/' '#{__FILE__}' |cut -c 4-"
  exit 2
end

alg = ENV["HASH_ALG"] || (["-m", "--md5", "--MD5"].include?(ARGV[0]) ? "MD5" : "SHA")
password = ARGV.length == 1 ? ARGV[0] : ARGV[1]

def password_to_key(password, alg)
  password_len = password.bytesize
  password_index = 0
  count = 0
  # rubocop:disable GitHub/InsecureHashAlgorithm
  hash = (alg == "SHA") ? Digest::SHA1.new : Digest::MD5.new

  buffer = (password * ((1024 * 1024 / password.bytesize) + 1)).byteslice(0, 1024 * 1024)
  "0x#{hash.hexdigest buffer}"
end

puts password_to_key(password, alg)

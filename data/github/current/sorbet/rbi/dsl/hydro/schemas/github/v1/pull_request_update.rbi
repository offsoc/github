# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::PullRequestUpdate`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::PullRequestUpdate`.

class Hydro::Schemas::Github::V1::PullRequestUpdate
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      current_body: T.nilable(String),
      current_title: T.nilable(String),
      feature_flags: T.nilable(T.any(Google::Protobuf::RepeatedField[String], T::Array[String])),
      issue: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue),
      previous_body: T.nilable(String),
      previous_title: T.nilable(String),
      pull_request: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)
    ).void
  end
  def initialize(actor: nil, current_body: nil, current_title: nil, feature_flags: T.unsafe(nil), issue: nil, previous_body: nil, previous_title: nil, pull_request: nil, repository: nil, repository_owner: nil, request_context: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_current_body; end

  sig { void }
  def clear_current_title; end

  sig { void }
  def clear_feature_flags; end

  sig { void }
  def clear_issue; end

  sig { void }
  def clear_previous_body; end

  sig { void }
  def clear_previous_title; end

  sig { void }
  def clear_pull_request; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { returns(String) }
  def current_body; end

  sig { params(value: String).void }
  def current_body=(value); end

  sig { returns(String) }
  def current_title; end

  sig { params(value: String).void }
  def current_title=(value); end

  sig { returns(Google::Protobuf::RepeatedField[String]) }
  def feature_flags; end

  sig { params(value: Google::Protobuf::RepeatedField[String]).void }
  def feature_flags=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)) }
  def issue; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Issue)).void }
  def issue=(value); end

  sig { returns(String) }
  def previous_body; end

  sig { params(value: String).void }
  def previous_body=(value); end

  sig { returns(String) }
  def previous_title; end

  sig { params(value: String).void }
  def previous_title=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)) }
  def pull_request; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::PullRequest)).void }
  def pull_request=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end
end

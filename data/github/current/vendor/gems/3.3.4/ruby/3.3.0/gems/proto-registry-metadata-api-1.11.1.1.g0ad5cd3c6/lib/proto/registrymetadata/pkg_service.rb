# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pkg_service.proto

require 'google/protobuf'

require 'google/protobuf/field_mask_pb'
require 'google/protobuf/timestamp_pb'
require_relative 'pkg_entities'
Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("pkg_service.proto", :syntax => :proto3) do
    add_message "github.registry.metadata.v1.pkg.GetPackageMetadataRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :version_order, :enum, 5, "github.registry.metadata.v1.pkg.Order"
      optional :version_limit, :int64, 6
      optional :version_offset, :int64, 7
      optional :include_deleted, :bool, 9
      optional :actor_type, :enum, 10, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 11, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :include_download_count, :bool, 12
      optional :integration_name, :string, 13
      oneof :eco_version_filter do
        optional :containerVersionFilter, :enum, 8, "github.registry.metadata.v1.pkg.EcoVersionFilterContainer"
      end
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageMetadataResponse" do
      optional :package_metadata, :message, 1, "github.registry.metadata.v1.pkg.PackageMetadata"
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesMetadataRequest" do
      optional :user_id, :int64, 1
      repeated :package_ids, :int64, 2
      optional :include_deleted, :bool, 3
      optional :actor_type, :enum, 4, "github.registry.metadata.v1.pkg.ActorType"
      optional :exclude_latest_version, :bool, 5
      optional :include_version_count, :bool, 6
      optional :integration_name, :string, 7
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesMetadataResponse" do
      repeated :packages_metadata, :message, 1, "github.registry.metadata.v1.pkg.PackagesMetadata"
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVersionRequest" do
      optional :user_id, :int64, 1
      optional :namespace, :string, 2
      optional :name, :string, 3
      optional :ecosystem, :enum, 4, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :version_id, :int64, 5
      optional :actor_type, :enum, 6, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 7, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 8
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVersionResponse" do
      optional :version, :message, 1, "github.registry.metadata.v1.pkg.Version"
    end
    add_message "github.registry.metadata.v1.pkg.UpdatePackageRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 5
      optional :visibility, :enum, 6, "github.registry.metadata.v1.pkg.Visibility"
      optional :repo_id, :int64, 7
      optional :active_sync_perms, :bool, 8
      optional :update_mask, :message, 9, "google.protobuf.FieldMask"
      optional :actor_type, :enum, 10, "github.registry.metadata.v1.pkg.ActorType"
    end
    add_message "github.registry.metadata.v1.pkg.UpdatePackageResponse" do
    end
    add_message "github.registry.metadata.v1.pkg.UpdatePackageVersionEcodataRequest" do
      optional :user_id, :int64, 1
      optional :version_id, :int64, 2
      optional :key, :string, 3
      optional :value, :string, 4
      optional :actor_type, :enum, 5, "github.registry.metadata.v1.pkg.ActorType"
    end
    add_message "github.registry.metadata.v1.pkg.UpdatePackageVersionEcodataResponse" do
    end
    add_message "github.registry.metadata.v1.pkg.DeletePackageRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :mode, :enum, 5, "github.registry.metadata.v1.pkg.DeleteMode"
      optional :staff_override, :bool, 6
      optional :actor_type, :enum, 7, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 8, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 9
    end
    add_message "github.registry.metadata.v1.pkg.DeletePackageResponse" do
    end
    add_message "github.registry.metadata.v1.pkg.DeletePackageVersionRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :mode, :enum, 5, "github.registry.metadata.v1.pkg.DeleteMode"
      optional :version, :string, 6
      optional :staff_override, :bool, 7
      optional :actor_type, :enum, 8, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 9, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 10
    end
    add_message "github.registry.metadata.v1.pkg.DeletePackageVersionResponse" do
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVersionDownloadCountsRequest" do
      optional :package_id, :int64, 1
      optional :version_id, :int64, 2
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVersionDownloadCountsResponse" do
      optional :total, :int64, 1
      repeated :day_counts, :int64, 2
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageTotalDownloadCountsRequest" do
      optional :package_id, :int64, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageTotalDownloadCountsResponse" do
      optional :total, :int64, 1
      repeated :day_counts, :int64, 2
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesTotalDownloadCountsRequest" do
      repeated :package_ids, :int64, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesTotalDownloadCountsResponse" do
      map :package_counts, :int64, :int64, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetAllPackagesRequest" do
      optional :namespace, :string, 1
      optional :limit, :int64, 2
      optional :offset, :int64, 3
      optional :exclude_deleted, :bool, 4
      optional :ecosystem, :enum, 5, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :filter, :enum, 6, "github.registry.metadata.v1.pkg.Filter"
      optional :order, :enum, 7, "github.registry.metadata.v1.pkg.Order"
    end
    add_message "github.registry.metadata.v1.pkg.GetAllPackagesResponse" do
      repeated :packages, :message, 1, "github.registry.metadata.v1.pkg.Package"
      optional :total_packages, :int64, 2
    end
    add_message "github.registry.metadata.v1.pkg.GetAllPackageSummariesRequest" do
      optional :namespace, :string, 1
      optional :limit, :int64, 2
      optional :offset, :int64, 3
      optional :exclude_deleted, :bool, 4
      optional :ecosystem, :enum, 5, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :filter, :enum, 6, "github.registry.metadata.v1.pkg.Filter"
      optional :order, :enum, 7, "github.registry.metadata.v1.pkg.Order"
      optional :perform_authz, :bool, 8
      optional :actor_id, :int64, 9
      optional :actor_type, :enum, 10, "github.registry.metadata.v1.pkg.ActorType"
      optional :exclude_download_count, :bool, 11
      optional :exclude_version_count, :bool, 12
      optional :integration_name, :string, 13
    end
    add_message "github.registry.metadata.v1.pkg.GetAllPackageSummariesResponse" do
      repeated :package_summaries, :message, 1, "github.registry.metadata.v1.pkg.PackageSummary"
      optional :total_packages, :int64, 2
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVisibilityRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVisibilityResponse" do
      optional :visibility, :enum, 1, "github.registry.metadata.v1.pkg.Visibility"
    end
    add_message "github.registry.metadata.v1.pkg.GetDeletedPackageVersionsRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :version_order, :enum, 5, "github.registry.metadata.v1.pkg.Order"
      optional :version_limit, :int64, 6
      optional :version_offset, :int64, 7
      optional :since_days, :int64, 8
      optional :actor_type, :enum, 9, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 10, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 11
    end
    add_message "github.registry.metadata.v1.pkg.GetDeletedPackageVersionsResponse" do
      optional :package_metadata, :message, 1, "github.registry.metadata.v1.pkg.PackageMetadata"
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesByNamesRequest" do
      optional :namespace, :string, 1
      repeated :package_names, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :actor_type, :enum, 5, "github.registry.metadata.v1.pkg.ActorType"
      optional :integration_name, :string, 6
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesByNamesResponse" do
      repeated :packages, :message, 1, "github.registry.metadata.v1.pkg.PackageMetadata"
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesByOriginalNameRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :since_days, :int64, 5
      optional :actor_type, :enum, 6, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 7, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 8
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesByOriginalNameResponse" do
      repeated :packages, :message, 1, "github.registry.metadata.v1.pkg.Package"
    end
    add_message "github.registry.metadata.v1.pkg.UpdatePackageRepoRequest" do
      optional :package_id, :int64, 1
      optional :repo_id, :int64, 2
    end
    add_message "github.registry.metadata.v1.pkg.UpdatePackageRepoResponse" do
    end
    add_message "github.registry.metadata.v1.pkg.RestorePackageRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :actor_type, :enum, 5, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 6, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 7
    end
    add_message "github.registry.metadata.v1.pkg.RestorePackageResponse" do
      optional :package, :message, 1, "github.registry.metadata.v1.pkg.Package"
    end
    add_message "github.registry.metadata.v1.pkg.RestorePackageVersionRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :version, :string, 5
      optional :actor_type, :enum, 6, "github.registry.metadata.v1.pkg.ActorType"
      optional :package_subtype, :enum, 7, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 8
    end
    add_message "github.registry.metadata.v1.pkg.RestorePackageVersionResponse" do
      optional :version, :message, 1, "github.registry.metadata.v1.pkg.Version"
    end
    add_message "github.registry.metadata.v1.pkg.ReindexSearchRequest" do
      repeated :package_ids, :int64, 1
      optional :range_min, :int64, 2
      optional :range_max, :int64, 3
    end
    add_message "github.registry.metadata.v1.pkg.ReindexSearchResponse" do
      repeated :errors, :string, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesByRepoRequest" do
      optional :repo_id, :int64, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetPackagesByRepoResponse" do
      repeated :packages, :message, 1, "github.registry.metadata.v1.pkg.Package"
    end
    add_message "github.registry.metadata.v1.pkg.GetStorageUtilizationRequest" do
      repeated :namespaces, :string, 1
      optional :effective_date, :message, 2, "google.protobuf.Timestamp"
    end
    add_message "github.registry.metadata.v1.pkg.GetStorageUtilizationResponse" do
      optional :total_storage_bytes, :uint64, 1
      map :namespaces, :string, :uint64, 2
    end
    add_message "github.registry.metadata.v1.pkg.GetReclaimedStorageRequest" do
      repeated :billing_entity_namespaces, :string, 1
      optional :namespace, :string, 2
      optional :name, :string, 3
      optional :version, :string, 4
      optional :ecosystem, :enum, 5, "github.registry.metadata.v1.pkg.Ecosystem"
    end
    add_message "github.registry.metadata.v1.pkg.GetReclaimedStorageResponse" do
      optional :reclaimed_storage_bytes, :uint64, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetAllNamespacesRequest" do
    end
    add_message "github.registry.metadata.v1.pkg.GetAllNamespacesResponse" do
      repeated :namespaces, :string, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageListingRequest" do
      optional :namespace, :string, 1
      optional :ecosystem, :enum, 2, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 3
      optional :limit, :int64, 4
      optional :offset, :int64, 5
      optional :actor_type, :enum, 6, "github.registry.metadata.v1.pkg.ActorType"
      repeated :internal_namespaces, :string, 7
      optional :visibility, :string, 8
      repeated :readable_repo_ids, :int64, 9
      optional :package_subtype, :enum, 10, "github.registry.metadata.v1.pkg.PackageSubtype"
      optional :integration_name, :string, 11
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageListingResponse" do
      repeated :packages, :message, 1, "github.registry.metadata.v1.pkg.PackagesMetadata"
      optional :total_packages, :int64, 2
      optional :has_more_pages, :bool, 3
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVersionFilesRequest" do
      optional :version_id, :int64, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetPackageVersionFilesResponse" do
      repeated :files, :message, 1, "github.registry.metadata.v1.pkg.PackageFile"
    end
    add_message "github.registry.metadata.v1.pkg.GetEcoNamespaceStorageUtilizationRequest" do
      optional :namespace, :string, 1
    end
    add_message "github.registry.metadata.v1.pkg.GetEcoNamespaceStorageUtilizationResponse" do
      optional :total_storage_bytes, :uint64, 1
    end
    add_message "github.registry.metadata.v1.pkg.UnretireNamespaceRequest" do
      optional :name, :string, 1
      optional :namespace, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
    end
    add_message "github.registry.metadata.v1.pkg.UnretireNamespaceResponse" do
      optional :success, :bool, 1
    end
    add_message "github.registry.metadata.v1.pkg.RetireNamespaceRequest" do
      optional :name, :string, 1
      optional :namespace, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :owner_id, :int32, 4
    end
    add_message "github.registry.metadata.v1.pkg.RetireNamespaceResponse" do
      optional :success, :bool, 1
    end
    add_message "github.registry.metadata.v1.pkg.CheckPackagesRetiredNamespaceRequest" do
      optional :owner_id, :int32, 1
      optional :new_namespace, :string, 2
      optional :old_namespace, :string, 3
    end
    add_message "github.registry.metadata.v1.pkg.CheckPackagesRetiredNamespaceResponse" do
      optional :retired_namespace_exists, :bool, 1
      optional :first_retired_namespace, :string, 2
    end
    add_message "github.registry.metadata.v1.pkg.GetContainerLatestVersionRequest" do
      optional :namespace, :string, 1
      optional :name, :string, 2
      optional :ecosystem, :enum, 3, "github.registry.metadata.v1.pkg.Ecosystem"
      optional :user_id, :int64, 4
      optional :actor_type, :enum, 5, "github.registry.metadata.v1.pkg.ActorType"
      optional :integration_name, :string, 6
    end
    add_message "github.registry.metadata.v1.pkg.GetContainerLatestVersionResponse" do
      optional :version, :message, 1, "github.registry.metadata.v1.pkg.Version"
    end
    add_enum "github.registry.metadata.v1.pkg.EcoVersionFilterContainer" do
      value :TAGGED, 0
      value :UNTAGGED, 1
      value :RECENT_TAGGED, 2
    end
  end
end

module Proto
  module RegistryMetadata
    module V1
      module Package
        GetPackageMetadataRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageMetadataRequest").msgclass
        GetPackageMetadataResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageMetadataResponse").msgclass
        GetPackagesMetadataRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesMetadataRequest").msgclass
        GetPackagesMetadataResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesMetadataResponse").msgclass
        GetPackageVersionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVersionRequest").msgclass
        GetPackageVersionResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVersionResponse").msgclass
        UpdatePackageRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UpdatePackageRequest").msgclass
        UpdatePackageResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UpdatePackageResponse").msgclass
        UpdatePackageVersionEcodataRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UpdatePackageVersionEcodataRequest").msgclass
        UpdatePackageVersionEcodataResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UpdatePackageVersionEcodataResponse").msgclass
        DeletePackageRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.DeletePackageRequest").msgclass
        DeletePackageResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.DeletePackageResponse").msgclass
        DeletePackageVersionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.DeletePackageVersionRequest").msgclass
        DeletePackageVersionResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.DeletePackageVersionResponse").msgclass
        GetPackageVersionDownloadCountsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVersionDownloadCountsRequest").msgclass
        GetPackageVersionDownloadCountsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVersionDownloadCountsResponse").msgclass
        GetPackageTotalDownloadCountsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageTotalDownloadCountsRequest").msgclass
        GetPackageTotalDownloadCountsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageTotalDownloadCountsResponse").msgclass
        GetPackagesTotalDownloadCountsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesTotalDownloadCountsRequest").msgclass
        GetPackagesTotalDownloadCountsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesTotalDownloadCountsResponse").msgclass
        GetAllPackagesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetAllPackagesRequest").msgclass
        GetAllPackagesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetAllPackagesResponse").msgclass
        GetAllPackageSummariesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetAllPackageSummariesRequest").msgclass
        GetAllPackageSummariesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetAllPackageSummariesResponse").msgclass
        GetPackageVisibilityRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVisibilityRequest").msgclass
        GetPackageVisibilityResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVisibilityResponse").msgclass
        GetDeletedPackageVersionsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetDeletedPackageVersionsRequest").msgclass
        GetDeletedPackageVersionsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetDeletedPackageVersionsResponse").msgclass
        GetPackagesByNamesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesByNamesRequest").msgclass
        GetPackagesByNamesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesByNamesResponse").msgclass
        GetPackagesByOriginalNameRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesByOriginalNameRequest").msgclass
        GetPackagesByOriginalNameResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesByOriginalNameResponse").msgclass
        UpdatePackageRepoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UpdatePackageRepoRequest").msgclass
        UpdatePackageRepoResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UpdatePackageRepoResponse").msgclass
        RestorePackageRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.RestorePackageRequest").msgclass
        RestorePackageResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.RestorePackageResponse").msgclass
        RestorePackageVersionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.RestorePackageVersionRequest").msgclass
        RestorePackageVersionResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.RestorePackageVersionResponse").msgclass
        ReindexSearchRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.ReindexSearchRequest").msgclass
        ReindexSearchResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.ReindexSearchResponse").msgclass
        GetPackagesByRepoRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesByRepoRequest").msgclass
        GetPackagesByRepoResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackagesByRepoResponse").msgclass
        GetStorageUtilizationRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetStorageUtilizationRequest").msgclass
        GetStorageUtilizationResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetStorageUtilizationResponse").msgclass
        GetReclaimedStorageRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetReclaimedStorageRequest").msgclass
        GetReclaimedStorageResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetReclaimedStorageResponse").msgclass
        GetAllNamespacesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetAllNamespacesRequest").msgclass
        GetAllNamespacesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetAllNamespacesResponse").msgclass
        GetPackageListingRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageListingRequest").msgclass
        GetPackageListingResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageListingResponse").msgclass
        GetPackageVersionFilesRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVersionFilesRequest").msgclass
        GetPackageVersionFilesResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetPackageVersionFilesResponse").msgclass
        GetEcoNamespaceStorageUtilizationRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetEcoNamespaceStorageUtilizationRequest").msgclass
        GetEcoNamespaceStorageUtilizationResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetEcoNamespaceStorageUtilizationResponse").msgclass
        UnretireNamespaceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UnretireNamespaceRequest").msgclass
        UnretireNamespaceResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.UnretireNamespaceResponse").msgclass
        RetireNamespaceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.RetireNamespaceRequest").msgclass
        RetireNamespaceResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.RetireNamespaceResponse").msgclass
        CheckPackagesRetiredNamespaceRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.CheckPackagesRetiredNamespaceRequest").msgclass
        CheckPackagesRetiredNamespaceResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.CheckPackagesRetiredNamespaceResponse").msgclass
        GetContainerLatestVersionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetContainerLatestVersionRequest").msgclass
        GetContainerLatestVersionResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.GetContainerLatestVersionResponse").msgclass
        EcoVersionFilterContainer = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("github.registry.metadata.v1.pkg.EcoVersionFilterContainer").enummodule
      end
    end
  end
end

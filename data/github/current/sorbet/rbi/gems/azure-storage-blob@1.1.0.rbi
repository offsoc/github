# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `azure-storage-blob` gem.
# Please instead update this file by running `bin/tapioca gem azure-storage-blob`.

# source://azure-storage-blob//lib/azure/storage/blob/autoload.rb#33
module Azure; end

# source://azure-storage-blob//lib/azure/storage/blob/autoload.rb#34
module Azure::Storage
  include ::Azure::Storage::Common::Service
end

# source://azure-storage-blob//lib/azure/storage/blob/autoload.rb#35
module Azure::Storage::Blob
  include ::Azure::Storage::Common::Service

  # Public: Aborts a pending Copy Blob operation and leaves a destination blob with zero length and full metadata.
  #
  # ==== Attributes
  #
  # * +container+             - String. The destination container name.
  # * +blob+                  - String. The destination blob name.
  # * +copy_id+               - String. The copy identifier returned in the copy blob operation.
  # * +options+               - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:lease_id+             - String. The lease id if the destination blob has an active infinite lease
  # * +:timeout+              - Integer. A timeout in seconds.
  # * +:request_id+           - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                             in the analytics logs when storage analytics logging is enabled.
  #
  # See https://msdn.microsoft.com/en-us/library/azure/jj159098.aspx
  #
  # Returns nil on success
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#855
  def abort_copy_blob(container, blob, copy_id, options = T.unsafe(nil)); end

  # Public: Establishes an exclusive write lock on a blob. The lock duration can be 15 to 60 seconds, or can be infinite.
  # To write to a locked blob, a client must provide a lease ID.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:duration+                  - Integer. Default -1. Specifies the duration of the lease, in seconds, or negative one (-1)
  #                                  for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. (optional)
  # * +:proposed_lease_id+         - String. Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request)
  #                                  if the proposed lease ID is not in the correct format. (optional)
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to acquire the lease
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to acquire the lease
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to acquire the lease
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to acquire the lease
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns a String of the new unique lease id. While the lease is active, you must include the lease ID with any request
  # to write to the blob, or to renew, change, or release the lease.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#460
  def acquire_blob_lease(container, blob, options = T.unsafe(nil)); end

  # Public: Commits a new block of data to the end of an existing append blob.
  # This operation is permitted only on blobs created with the create_append_blob API.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +content+                    - IO or String. The content of the blob.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:content_md5+               - String. Content MD5 for the request contents.
  # * +:max_size+                  - Integer. The max length in bytes permitted for the append blob
  # * +:append_position+           - Integer. A number indicating the byte offset to compare. It will succeed only if the append position is equal to this number
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to append a block only if
  #                                  the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to append a block only if
  #                                  the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to append a block only if
  #                                  the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to append a block only if
  #                                  the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an
  #                                  active lease, specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/mt427365.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/append.rb#144
  def append_blob_block(container, blob, content, options = T.unsafe(nil)); end

  # Public: Breaks the lease, if the blob has an active lease. Once a lease is broken, it cannot be renewed. Any
  # authorized request can break the lease; the request is not required to specify a matching lease ID. When a
  # lease is broken, the lease break period is allowed to elapse, during which time no lease operation except
  # break and release can be performed on the blob. When a lease is successfully broken, the response indicates
  # the interval in seconds until a new lease can be acquired.
  #
  # A lease that has been broken can also be released, in which case another client may immediately acquire the
  # lease on the blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:break_period+              - Integer. The proposed duration of seconds that the lease should continue before it is
  #                                  broken, between 0 and 60 seconds. This break period is only used if it is shorter than
  #                                  the time remaining on the lease. If longer, the time remaining on the lease is used. A
  #                                  new lease will not be available before the break period has expired, but the lease may
  #                                  be held for longer than the break period.
  #
  #                                  If this option is not used, a fixed-duration lease breaks after the remaining lease
  #                                  period elapses, and an infinite lease breaks immediately.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to break the lease
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to break the lease
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to break the lease
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to break the lease
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns an Integer of the remaining lease time. This value is the approximate time remaining in the lease
  # period, in seconds. This header is returned only for a successful request to break the lease. If the break
  # is immediate, 0 is returned.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#627
  def break_blob_lease(container, blob, options = T.unsafe(nil)); end

  # Public: Change the lease ID.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +lease+                      - String. The existing lease id.
  # * +proposed_lease+             - String. Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request)
  #                                  if the proposed lease ID is not in the correct format. (optional).
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to change the lease
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to change the lease
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to change the lease
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to change the lease
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns the changed lease id
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#537
  def change_blob_lease(container, blob, lease, proposed_lease, options = T.unsafe(nil)); end

  # Public: Clears a range of pages from the blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. Name of container.
  # * +blob+                       - String. Name of blob.
  # * +start_range+                - Integer. Position of first byte of first page.
  # * +end_range+                  - Integer. Position of last byte of of last page.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to clear the page only if
  #                                  the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to clear the page only if
  #                                  the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to clear the page only if
  #                                  the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to clear the page only if
  #                                  the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691975.aspx
  #
  # Returns Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#220
  def clear_blob_pages(container, blob, start_range, end_range, options = T.unsafe(nil)); end

  # Public: Commits existing blob blocks to a blob.
  #
  # This method writes a blob by specifying the list of block IDs that make up the
  # blob. In order to be written as part of a blob, a block must have been
  # successfully written to the server in a prior put_blob_block method.
  #
  # You can call Put Block List to update a blob by uploading only those blocks
  # that have changed, then committing the new and existing blocks together.
  # You can do this by specifying whether to commit a block from the committed
  # block list or from the uncommitted block list, or to commit the most recently
  # uploaded version of the block, whichever list it may belong to.
  #
  # ==== Attributes
  #
  # * +container+   - String. The container name.
  # * +blob+        - String. The blob name.
  # * +block_list+  - Array. A ordered list of lists in the following format:
  #   [ ["block_id1", :committed], ["block_id2", :uncommitted], ["block_id3"], ["block_id4", :committed]... ]
  #   The first element of the inner list is the block_id, the second is optional
  #   and can be either :committed or :uncommitted to indicate in which group of blocks
  #   the id should be looked for. If it is omitted, the latest of either group will be used.
  # * +options+     - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:transactional_md5+         - String. Content MD5 for the request contents (not the blob contents!)
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an
  #                                  active lease, specify the valid lease ID for this header.
  #
  # This operation also supports the use of conditional headers to commit the block list if a specified condition is met.
  # For more information, see https://msdn.microsoft.com/en-us/library/azure/dd179371.aspx
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179467.aspx
  #
  # Returns nil on success
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#200
  def commit_blob_blocks(container, blob, block_list, options = T.unsafe(nil)); end

  # Public: Copies a source blob to a destination blob within the same storage account.
  #
  # ==== Attributes
  #
  # * +destination_container+      - String. The destination container name to copy to.
  # * +destination_blob+           - String. The destination blob name to copy to.
  # * +source_container+           - String. The source container name to copy from.
  # * +source_blob+                - String. The source blob name to copy from.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:source_snapshot+            - String. A snapshot id for the source blob
  # * +:metadata+                   - Hash. Custom metadata values to store with the copy. If this parameter is not
  #                                   specified, the operation will copy the source blob metadata to the destination
  #                                   blob. If this parameter is specified, the destination blob is created with the
  #                                   specified metadata, and metadata is not copied from the source blob.
  # * +:source_if_modified_since+   - String. A DateTime value. Specify this option to write the page only if the source blob
  #                                   has been modified since the specified date/time. If the blob has not been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:source_if_unmodified_since+ - String. A DateTime value. Specify this option to write the page only if the source blob
  #                                   has not been modified since the specified date/time. If the blob has been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:source_if_match+            - String. An ETag value. Specify an ETag value to write the page only if the source blob's
  #                                   ETag value matches the value specified. If the values do not match, the Blob
  #                                   service returns status code 412 (Precondition Failed).
  # * +:source_if_none_match+       - String. An ETag value. Specify an ETag value to write the page only if the source blob's
  #                                   ETag value does not match the value specified. If the values are identical, the
  #                                   Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_modified_since+     - String. A DateTime value. Specify this option to write the page only if the destination
  #                                   blob has been modified since the specified date/time. If the blob has not been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_unmodified_since+   - String. A DateTime value. Specify this option to write the page only if the destination
  #                                   blob has not been modified since the specified date/time. If the blob has been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_match+              - String. An ETag value. Specify an ETag value to write the page only if the destination
  #                                   blob's ETag value matches the value specified. If the values do not match, the
  #                                   Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_none_match+         - String. An ETag value. Specify an ETag value to write the page only if the destination
  #                                   blob's ETag value does not match the value specified. If the values are
  #                                   identical, the Blob service returns status code 412 (Precondition Failed).
  # * +:timeout+                    - Integer. A timeout in seconds.
  # * +:request_id+                 - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                   in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                   - String. Required if the destination blob has an active lease. The lease ID specified for
  #                                   this header must match the lease ID of the destination blob. If the request does not include
  #                                   the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).
  #                                   If this header is specified and the destination blob does not currently have an active lease,
  #                                   the operation will also fail with status code 412 (Precondition Failed).
  #                                   In version 2012-02-12 and newer, this value must specify an active, infinite lease for a
  #                                   leased blob. A finite-duration lease ID fails with 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd894037.aspx
  #
  # Returns a tuple of (copy_id, copy_status).
  #
  # * +copy_id+                    - String identifier for this copy operation. Use with get_blob or get_blob_properties to check
  #                                  the status of this copy operation, or pass to abort_copy_blob to abort a pending copy.
  # * +copy_status+                - String. The state of the copy operation, with these values:
  #                                    "success" - The copy completed successfully.
  #                                    "pending" - The copy is in progress.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#829
  def copy_blob(destination_container, destination_blob, source_container, source_blob, options = T.unsafe(nil)); end

  # Public: Copies a source blob or file to a destination blob.
  #
  # ==== Attributes
  #
  # * +destination_container+      - String. The destination container name to copy to.
  # * +destination_blob+           - String. The destination blob name to copy to.
  # * +source_uri+                 - String. The source blob or file URI to copy from.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:source_snapshot+            - String. A snapshot id for the source blob
  # * +:metadata+                   - Hash. Custom metadata values to store with the copy. If this parameter is not
  #                                   specified, the operation will copy the source blob metadata to the destination
  #                                   blob. If this parameter is specified, the destination blob is created with the
  #                                   specified metadata, and metadata is not copied from the source blob.
  # * +:source_if_modified_since+   - String. A DateTime value. Specify this option to write the page only if the source blob
  #                                   has been modified since the specified date/time. If the blob has not been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:source_if_unmodified_since+ - String. A DateTime value. Specify this option to write the page only if the source blob
  #                                   has not been modified since the specified date/time. If the blob has been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:source_if_match+            - String. An ETag value. Specify an ETag value to write the page only if the source blob's
  #                                   ETag value matches the value specified. If the values do not match, the Blob
  #                                   service returns status code 412 (Precondition Failed).
  # * +:source_if_none_match+       - String. An ETag value. Specify an ETag value to write the page only if the source blob's
  #                                   ETag value does not match the value specified. If the values are identical, the
  #                                   Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_modified_since+     - String. A DateTime value. Specify this option to write the page only if the destination
  #                                   blob has been modified since the specified date/time. If the blob has not been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_unmodified_since+   - String. A DateTime value. Specify this option to write the page only if the destination
  #                                   blob has not been modified since the specified date/time. If the blob has been
  #                                   modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_match+              - String. An ETag value. Specify an ETag value to write the page only if the destination
  #                                   blob's ETag value matches the value specified. If the values do not match, the
  #                                   Blob service returns status code 412 (Precondition Failed).
  # * +:dest_if_none_match+         - String. An ETag value. Specify an ETag value to write the page only if the destination
  #                                   blob's ETag value does not match the value specified. If the values are
  #                                   identical, the Blob service returns status code 412 (Precondition Failed).
  # * +:timeout+                    - Integer. A timeout in seconds.
  # * +:request_id+                 - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                   in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                   - String. Required if the destination blob has an active lease. The lease ID specified for
  #                                   this header must match the lease ID of the destination blob. If the request does not include
  #                                   the lease ID or it is not valid, the operation fails with status code 412 (Precondition Failed).
  #                                   If this header is specified and the destination blob does not currently have an active lease,
  #                                   the operation will also fail with status code 412 (Precondition Failed).
  #                                   In version 2012-02-12 and newer, this value must specify an active, infinite lease for a
  #                                   leased blob. A finite-duration lease ID fails with 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd894037.aspx
  #
  # Returns a tuple of (copy_id, copy_status).
  #
  # * +copy_id+                    - String identifier for this copy operation. Use with get_blob or get_blob_properties to check
  #                                  the status of this copy operation, or pass to abort_copy_blob to abort a pending copy.
  # * +copy_status+                - String. The state of the copy operation, with these values:
  #                                    "success" - The copy completed successfully.
  #                                    "pending" - The copy is in progress.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#748
  def copy_blob_from_uri(destination_container, destination_blob, source_uri, options = T.unsafe(nil)); end

  # Public: Creates a new append blob. Note that calling create_append_blob to create an append
  # blob only initializes the blob. To add content to an append blob, call append_blob_blocks method.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179451.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/append.rb#70
  def create_append_blob(container, blob, options = T.unsafe(nil)); end

  # Public: Creates a new append blob with given content
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +content+                    - IO or String. Content to write.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:max_size+                  - Integer. The max length in bytes permitted for the append blob.
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179451.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/append.rb#208
  def create_append_blob_from_content(container, blob, content, options = T.unsafe(nil)); end

  # Public: Creates a snapshot of a blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob snapshot.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create the blob snapshot
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create the blob snapshot
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create the blob snapshot
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create the blob snapshot
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. If this header is specified, the operation will be performed only if both of the
  #                                  following conditions are met:
  #                                   - The blob's lease is currently active.
  #                                   - The lease ID specified in the request matches that of the blob.
  #                                  If this header is specified and both of these conditions are not met, the request will fail
  #                                  and the Snapshot Blob operation will fail with status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691971.aspx
  #
  # Returns the snapshot DateTime value
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#668
  def create_blob_snapshot(container, blob, options = T.unsafe(nil)); end

  # Public: Creates a new block blob or updates the content of an existing block blob.
  #
  # Updating an existing block blob overwrites any existing metadata on the blob
  # Partial updates are not supported with create_block_blob the content of the
  # existing blob is overwritten with the content of the new blob. To perform a
  # partial update of the content of a block blob, use the create_block_list
  # method.
  #
  # Note that the default content type is application/octet-stream.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +content+                    - IO or String. The content of the blob.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:transactional_md5+         - String. An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.
  #                                  When this header is specified, the storage service checks the hash that has arrived with the one that was sent.
  #                                  If the two hashes do not match, the operation will fail with error code 400 (Bad Request).
  # * +:single_upload_threshold+   - Integer. Threshold in bytes for single upload, must be lower than 256MB or 256MB will be used.
  # * +:content_length+            - Integer. Length of the content to upload, must be specified if 'content' does not implement 'size'.
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179451.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#98
  def create_block_blob(container, blob, content, options = T.unsafe(nil)); end

  # Public: Creates a new block blob or updates the content of an existing block blob.
  #
  # Updating an existing block blob overwrites any existing metadata on the blob
  # Partial updates are not supported with create_block_blob the content of the
  # existing blob is overwritten with the content of the new blob. To perform a
  # partial update of the content of a block blob, use the create_block_list
  # method.
  #
  # Note that the default content type is application/octet-stream.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +content+                    - IO or String. The content of the blob.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:transactional_md5+         - String. An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.
  #                                  When this header is specified, the storage service checks the hash that has arrived with the one that was sent.
  #                                  If the two hashes do not match, the operation will fail with error code 400 (Bad Request).
  # * +:single_upload_threshold+   - Integer. Threshold in bytes for single upload, must be lower than 256MB or 256MB will be used.
  # * +:content_length+            - Integer. Length of the content to upload, must be specified if 'content' does not implement 'size'.
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179451.aspx
  #
  # Returns a Blob
  # Public: Creates a new block blob or updates the content of an existing block blob.
  #
  # Updating an existing block blob overwrites any existing metadata on the blob
  # Partial updates are not supported with create_block_blob the content of the
  # existing blob is overwritten with the content of the new blob. To perform a
  # partial update of the content of a block blob, use the create_block_list
  # method.
  #
  # Note that the default content type is application/octet-stream.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +content+                    - IO or String. The content of the blob.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:transactional_md5+         - String. An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.
  #                                  When this header is specified, the storage service checks the hash that has arrived with the one that was sent.
  #                                  If the two hashes do not match, the operation will fail with error code 400 (Bad Request).
  # * +:single_upload_threshold+   - Integer. Threshold in bytes for single upload, must be lower than 256MB or 256MB will be used.
  # * +:content_length+            - Integer. Length of the content to upload, must be specified if 'content' does not implement 'size'.
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179451.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#98
  def create_block_blob_from_content(container, blob, content, options = T.unsafe(nil)); end

  # Public: Creates a new page blob. Note that calling create_page_blob to create a page
  # blob only initializes the blob. To add content to a page blob, call put_blob_pages method.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +length+                     - Integer. Specifies the maximum size for the page blob, up to 1 TB.
  #                                  The page blob size must be aligned to a 512-byte boundary.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:transactional_md5+         - String. An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during transport.
  #                                  When this header is specified, the storage service checks the hash that has arrived with the one that was sent.
  #                                  If the two hashes do not match, the operation will fail with error code 400 (Bad Request).
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:sequence_number+           - Integer. The sequence number is a user-controlled value that you can use to track requests.
  #                                  The value of the sequence number must be between 0 and 2^63 - 1.The default value is 0.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179451.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#76
  def create_page_blob(container, blob, length, options = T.unsafe(nil)); end

  # Public: Creates a new page blob filled with given content.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +length+                     - Integer. Specifies the maximum size for the page blob, up to 1 TB.
  #                                  The page blob size must be aligned to a 512-byte boundary.
  # * +content+                    - String or IO. The content to put in the page blob.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:metadata+                  - Hash. Custom metadata values to store with the blob.
  # * +:sequence_number+           - Integer. The sequence number is a user-controlled value that you can use to track requests.
  #                                  The value of the sequence number must be between 0 and 2^63 - 1.The default value is 0.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create a new blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create a new blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179451.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#546
  def create_page_blob_from_content(container, blob, length, content, options = T.unsafe(nil)); end

  # Public: Deletes a blob or blob snapshot.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:snapshot+                  - String. An opaque DateTime value that specifies the blob snapshot to
  #                                  retrieve information from. (optional)
  # * +:delete_snapshots+          - Symbol. Used to specify the scope of the delete operation for snapshots.
  #                                  This parameter is ignored if a blob does not have snapshots, or if a
  #                                  snapshot is specified in the snapshot parameter. (optional)
  #
  #                                  Possible values include:
  #                                    * +:only+     - Deletes only the snapshots for the blob, but leaves the blob
  #                                    * +:include+  - Deletes the blob and all of the snapshots for the blob
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to create the blob snapshot
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to create the blob snapshot
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to create the blob snapshot
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to create the blob snapshot
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an
  #                                  active lease, specify the valid lease ID for this header. If a valid lease ID is not specified
  #                                  on the request, the operation will fail with status code 403 (Forbidden).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179440.aspx
  #
  # Returns nil on success
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#914
  def delete_blob(container, blob, options = T.unsafe(nil)); end

  # Public: Reads or downloads a blob from the system, including its metadata and properties.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:start_range+               - Integer. Position of first byte of first page. (optional)
  # * +:end_range+                 - Integer. Position of last byte of of last page. (optional)
  # * +:snapshot+                  - String. An opaque DateTime value that specifies the blob snapshot to
  #                                  retrieve information from. (optional)
  # * +:get_content_md5+           - Boolean. Return the MD5 hash for the range. This option only valid if
  #                                  start_range and end_range are specified. (optional)
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+             - LocationMode. Specifies the location mode used to decide
  #                                  which location the request should be sent to.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to get the blob
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to get the blob
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to get the blob
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to get the blob
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. If this header is specified, the operation will be performed only if both of the
  #                                  following conditions are met:
  #                                   - The blob's lease is currently active.
  #                                   - The lease ID specified in the request matches that of the blob.
  #                                  If this header is specified and both of these conditions are not met, the request will fail
  #                                  and the Get Blob operation will fail with status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179440.aspx
  #
  # Returns a blob and the blob body
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#89
  def get_blob(container, blob, options = T.unsafe(nil)); end

  # Public: Returns metadata on the blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:snapshot+                  - String. An opaque DateTime value that specifies the blob snapshot to
  #                                  retrieve information from.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+             - LocationMode. Specifies the location mode used to decide
  #                                  which location the request should be sent to.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to get the blob metadata
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to get the blob metadata
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to get the blob metadata
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to get the blob metadata
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. If this header is specified, the operation will be performed only if both of the
  #                                  following conditions are met:
  #
  #                                   - The blob's lease is currently active.
  #                                   - The lease ID specified in the request matches that of the blob.
  #
  #                                  If this header is specified and both of these conditions are not met, the request will fail
  #                                  and the Get Blob Metadata operation will fail with status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179350.aspx
  #
  # Returns a Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#349
  def get_blob_metadata(container, blob, options = T.unsafe(nil)); end

  # Public: Returns all properties and metadata on the blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:snapshot+                  - String. An opaque DateTime value that specifies the blob snapshot to
  #                                  retrieve information from.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+             - LocationMode. Specifies the location mode used to decide
  #                                  which location the request should be sent to.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to get the blob properties
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to get the blob properties
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to get the blob properties
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to get the blob properties
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. If this header is specified, the operation will be performed only if both of the
  #                                  following conditions are met:
  #
  #                                   - The blob's lease is currently active.
  #                                   - The lease ID specified in the request matches that of the blob.
  #
  #                                  If this header is specified and both of these conditions are not met, the request will fail
  #                                  and the Get Blob Properties operation will fail with status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179394.aspx
  #
  # Returns the blob properties with a Blob instance
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#155
  def get_blob_properties(container, blob, options = T.unsafe(nil)); end

  # Public: Copies a snapshot of the source page blob to a destination page blob. The snapshot is copied such that only
  # the differential changes between the previously copied snapshot are transferred to the destination. The copied snapshots
  # are complete copies of the original snapshot and can be read or copied from as usual.The destination of an incremental copy
  # must either not exist, or must have been created with a previous incremental copy from the same source blob. Once created,
  # the destination blob is permanently associated with the source and may only be used for incremental copies. The Get Blob
  # Properties and List Blobs APIs indicate whether the blob is an incremental copy blob created in this way. Incremental
  # copy blobs may not be downloaded directly. The only supported operations are Get Blob Properties, Incremental Copy Blob,
  # and Delete Blob. The copied snapshots may be read and deleted as usual.
  #
  # ==== Attributes
  #
  # * +destination_container+       - String. The destination container name to copy to.
  # * +destination_blob+            - String. The destination blob name to copy to.
  # * +source_uri+                  - String. Specifies the URI of the source page blob snapshot.
  #                                   This value is a URL of up to 2 KB in length that specifies a page blob snapshot. The
  #                                   value should be URL-encoded as it would appear in a request URI. The source blob must
  #                                   either be public or must be authenticated via a shared access signature. Here is an
  #                                   example of a source blob URL:
  #                                     https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
  # * +options+                     - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:metadata+                   - Hash. Custom metadata values to store with the copy. If this parameter is not
  #                                   specified, the operation will copy the source blob metadata to the destination
  #                                   blob. If this parameter is specified, the destination blob is created with the
  #                                   specified metadata, and metadata is not copied from the source blob.
  # * +:if_modified_since+          - String. A DateTime value. Specify this conditional header to copy the blob only if the
  #                                   destination blob has been modified since the specified date/time. If the destination blob
  #                                   has not been modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+        - String. A DateTime value. Specify this conditional header to copy the blob only if the
  #                                   destination blob has not been modified since the specified date/time. If the destination
  #                                   blob has been modified, the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                   - String. An ETag value. Specify an ETag value for this conditional header to copy the blob
  #                                   only if the specified ETag value matches the ETag value for an existing destination blob.
  #                                   If the ETag for the destination blob does not match the ETag specified for If-Match,
  #                                   the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+              - String. An ETag value, or the wildcard character (*). Specify an ETag value for this
  #                                   conditional header to copy the blob only if the specified ETag value does not match the
  #                                   ETag value for the destination blob. Specify the wildcard character (*) to perform the
  #                                   operation only if the destination blob does not exist. If the specified condition isn't met,
  #                                   the Blob service returns status code 412 (Precondition Failed).
  # * +:timeout+                    - Integer. A timeout in seconds.
  # * +:request_id+                 - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                   in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                   - String. If this header is specified, the operation will be performed only if both of the
  #                                   following conditions are met:
  #                                     - The blob's lease is currently active.
  #                                     - The lease ID specified in the request matches that of the blob.
  #                                   If this header is specified and both of these conditions are not met, the request will fail
  #                                   and the Snapshot Blob operation will fail with status code 412 (Precondition Failed).
  #
  # See https://docs.microsoft.com/en-us/rest/api/storageservices/incremental-copy-blob
  #
  # Returns a tuple of (copy_id, copy_status).
  #
  # * +copy_id+                    - String. String identifier for this copy operation. Use with Get Blob Properties to check
  #                                  the status of this copy operation, or pass to Abort Copy Blob to abort a pending copy.
  # * +copy_status+                - String. State of the copy operation. This is always pending to indicate that the copy has
  #                                  started and is in progress.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#418
  def incremental_copy_blob(destination_container, destination_blob, source_uri, options = T.unsafe(nil)); end

  # Public: Retrieves the list of blocks that have been uploaded as part of a block blob.
  #
  # There are two block lists maintained for a blob:
  # 1) Committed Block List: The list of blocks that have been successfully
  #    committed to a given blob with commitBlobBlocks.
  # 2) Uncommitted Block List: The list of blocks that have been uploaded for a
  #    blob using Put Block (REST API), but that have not yet been committed.
  #    These blocks are stored in Microsoft Azure in association with a blob, but do
  #    not yet form part of the blob.
  #
  # ==== Attributes
  #
  # * +container+                 - String. The container name.
  # * +blob+                      - String. The blob name.
  # * +options+                   - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:blocklist_type+           - Symbol. One of :all, :committed, :uncommitted. Defaults to :all (optional)
  # * +:snapshot+                 - String. An opaque DateTime value that specifies the blob snapshot to
  #                                 retrieve information from. (optional)
  # * +:timeout+                  - Integer. A timeout in seconds.
  # * +:request_id+               - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                 in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+            - LocationMode. Specifies the location mode used to decide
  #                                 which location the request should be sent to.
  # * +:lease_id+                 - String. If this header is specified, the operation will be performed only if both of the
  #                                 following conditions are met:
  #                                   - The blob's lease is currently active.
  #                                   - The lease ID specified in the request matches that of the blob.
  #                                 If this header is specified and both of these conditions are not met, the request will fail
  #                                 and the operation will fail with status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179400.aspx
  #
  # Returns a list of Azure::Storage::Entity::Blob::Block instances
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#263
  def list_blob_blocks(container, blob, options = T.unsafe(nil)); end

  # Public: Returns a list of active page ranges for a page blob. Active page ranges are
  # those that have been populated with data.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:start_range+               - Integer. Position of first byte of first page. (optional)
  # * +:end_range+                 - Integer. Position of last byte of of last page. (optional)
  # * +:snapshot+                  - String. An opaque DateTime value that specifies the blob snapshot to
  #                                  retrieve information from. (optional)
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+             - LocationMode. Specifies the location mode used to decide
  #                                  which location the request should be sent to.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to list the pages only if
  #                                  the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to list the pages only if
  #                                  the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to list the pages only if
  #                                  the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to list the pages only if
  #                                  the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:previous_snapshot+         - String. An opaque DateTime value that specifies that the response will contain only pages that
  #                                  were changed between target blob and previous snapshot. Changed pages include both updated and
  #                                  cleared pages. The target blob may be a snapshot, as long as the snapshot specified by this
  #                                  is the older of the two.
  # * +:lease_id+                  - String. If this header is specified, the operation will be performed only if both of the
  #                                  following conditions are met:
  #                                   - The blob's lease is currently active.
  #                                   - The lease ID specified in the request matches that of the blob.
  #                                  If this header is specified and both of these conditions are not met, the request will fail
  #                                  and the Get Blob operation will fail with status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691973.aspx
  #
  # Returns a list of page ranges in the format [ [start, end], [start, end], ... ]
  #
  #   e.g. [ [0, 511], [512, 1024], ... ]
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#296
  def list_page_blob_ranges(container, blob, options = T.unsafe(nil)); end

  # Public: Creates a new block to be committed as part of a block blob.
  #
  # ==== Attributes
  #
  # * +container+   - String. The container name.
  # * +blob+        - String. The blob name.
  # * +block_id+    - String. The block id. Note: this should be the raw block id, not Base64 encoded.
  # * +content+     - IO or String. The content of the blob.
  # * +options+      - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:content_md5+           - String. Content MD5 for the request contents.
  # * +:timeout+               - Integer. A timeout in seconds.
  # * +:request_id+            - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                              in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+              - String. Required if the blob has an active lease. To perform this operation on a blob with an
  #                              active lease, specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd135726.aspx
  #
  # Returns response of the operation
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#138
  def put_blob_block(container, blob, block_id, content, options = T.unsafe(nil)); end

  # Public: Creates a range of pages in a page blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. Name of container
  # * +blob+                       - String. Name of blob
  # * +start_range+                - Integer. Position of first byte of first page
  # * +end_range+                  - Integer. Position of last byte of of last page
  # * +content+                    - IO or String. Content to write. Length in bytes should equal end_range - start_range + 1
  # * +options+                    - Hash. A collection of options.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:transactional_md5+         - String. An MD5 hash of the page content. This hash is used to verify the integrity of the page during transport.
  #                                  When this header is specified, the storage service checks the hash that has arrived with the one that was sent.
  # * +:if_sequence_number_le+     - Integer. If the blob's sequence number is less than or equal to the specified value, the request proceeds;
  #                                  otherwise it fails with the SequenceNumberConditionNotMet error (HTTP status code 412 - Precondition Failed).
  # * +:if_sequence_number_lt+     - Integer. If the blob's sequence number is less than the specified value, the request proceeds;
  #                                  otherwise it fails with SequenceNumberConditionNotMet error (HTTP status code 412 - Precondition Failed).
  # * +:if_sequence_number_eq+     - Integer. If the blob's sequence number is equal to the specified value, the request proceeds;
  #                                  otherwise it fails with SequenceNumberConditionNotMet error (HTTP status code 412 - Precondition Failed).
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to write the page only if
  #                                  the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to write the page only if
  #                                  the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to write the page only if
  #                                  the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to write the page only if
  #                                  the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active lease,
  #                                  specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691975.aspx
  #
  # Returns Blob
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#161
  def put_blob_pages(container, blob, start_range, end_range, content, options = T.unsafe(nil)); end

  # Public: Releases the lease. The lease may be released if the lease ID specified on the request matches that
  # associated with the blob. Releasing the lease allows another client to immediately acquire the lease for
  # the blob as soon as the release is complete.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +lease+                      - String. The lease id.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to release the lease
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to release the lease
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to release the lease
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to release the lease
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns nil on success
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#575
  def release_blob_lease(container, blob, lease, options = T.unsafe(nil)); end

  # Public: Renews the lease. The lease can be renewed if the lease ID specified on the request matches that
  # associated with the blob. Note that the lease may be renewed even if it has expired as long as the blob
  # has not been modified or leased again since the expiration of that lease. When you renew a lease, the
  # lease duration clock resets.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +lease+                      - String. The lease id
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to renew the lease
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to renew the lease
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to renew the lease
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to renew the lease
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns the renewed lease id
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#499
  def renew_blob_lease(container, blob, lease, options = T.unsafe(nil)); end

  # Public: Resizes a page blob to the specified size.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +size+                       - String. The blob size. Resizes a page blob to the specified size.
  #                                  If the specified value is less than the current size of the blob,
  #                                  then all pages above the specified value are cleared.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to set the blob properties
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to set the blob properties
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to set the blob properties
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to set the blob properties
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691966.aspx
  #
  # Returns nil on success.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#351
  def resize_page_blob(container, blob, size, options = T.unsafe(nil)); end

  # Public: Sets metadata headers on the blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +metadata+                   - Hash. The custom metadata.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to set the blob metadata
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to set the blob metadata
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to set the blob metadata
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to set the blob metadata
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active
  #                                  lease, specify the valid lease ID for this header.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179414.aspx
  #
  # Returns nil on success.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#404
  def set_blob_metadata(container, blob, metadata, options = T.unsafe(nil)); end

  # Public: Sets system properties defined for a blob.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:content_type+              - String. Content type for the blob. Will be saved with blob.
  # * +:content_encoding+          - String. Content encoding for the blob. Will be saved with blob.
  # * +:content_language+          - String. Content language for the blob. Will be saved with blob.
  # * +:content_md5+               - String. Content MD5 for the blob. Will be saved with blob.
  # * +:cache_control+             - String. Cache control for the blob. Will be saved with blob.
  # * +:content_disposition+       - String. Conveys additional information about how to process the response payload,
  #                                  and also can be used to attach additional metadata
  # * +:content_length+            - Integer. Resizes a page blob to the specified size. If the specified
  #                                  value is less than the current size of the blob, then all pages above
  #                                  the specified value are cleared. This property cannot be used to change
  #                                  the size of a block blob. Setting this property for a block blob returns
  #                                  status code 400 (Bad Request).
  # * +:sequence_number_action+    - Symbol. This property indicates how the service should modify the sequence
  #                                  number for the blob. Required if :sequence_number is used. This property
  #                                  applies to page blobs only.
  #
  #                                  Specify one of the following options for this property:
  #
  #     * +:max+                       - Sets the sequence number to be the higher of the value included with
  #                                      the request and the value currently stored for the blob.
  #     * +:update+                    - Sets the sequence number to the value included with the request.
  #     * +:increment+                 - Increments the value of the sequence number by 1. If specifying this
  #                                      option, do not include the sequence_number option; doing so will return
  #                                      status code 400 (Bad Request).
  #
  # * +:sequence_number+           - Integer. This property sets the blob's sequence number. The sequence number is a
  #                                  user-controlled property that you can use to track requests and manage concurrency
  #                                  issues. Required if the :sequence_number_action option is set to :max or :update.
  #                                  This property applies to page blobs only.
  #
  #                                  Use this together with the :sequence_number_action to update the blob's sequence
  #                                  number, either to the specified value or to the higher of the values specified with
  #                                  the request or currently stored with the blob.
  #
  #                                  This header should not be specified if :sequence_number_action is set to :increment;
  #                                  in this case the service automatically increments the sequence number by one.
  #
  #                                  To set the sequence number to a value of your choosing, this property must be specified
  #                                  together with :sequence_number_action
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to set the blob properties
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to set the blob properties
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to set the blob properties
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to set the blob properties
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:lease_id+                  - String. Required if the blob has an active lease. To perform this operation on a blob with an active
  #                                  lease, specify the valid lease ID for this header.
  #
  # Remarks:
  #
  # The semantics for updating a blob's properties are as follows:
  #
  # * A page blob's sequence number is updated only if the request meets either of the following conditions:
  #
  #     * The :sequence_number_action property is set to :max or :update, and a value for :sequence_number is also set.
  #     * The :sequence_number_action property is set to :increment, indicating that the service should increment
  #       the sequence number by one.
  #
  # * The size of the page blob is modified only if a value for :content_length is specified.
  #
  # * If :sequence_number and/or :content_length are the only properties specified, then the other properties of the blob
  #   will NOT be modified.
  #
  # * If any one or more of the following properties are set, then all of these properties are set together. If a value is
  #   not provided for a given property when at least one of the properties listed below is set, then that property will be
  #   cleared for the blob.
  #
  #     * :cache_control
  #     * :content_type
  #     * :content_md5
  #     * :content_encoding
  #     * :content_language
  #     * :content_disposition
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691966.aspx
  #
  # Returns nil on success.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#276
  def set_blob_properties(container, blob, options = T.unsafe(nil)); end

  # Public: Sets a page blob's sequence number.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +blob+                       - String. The blob name.
  # * +action+                     - Symbol. Indicates how the service should modify the sequence
  #                                  number for the blob. Required if :sequence_number is used. This property
  #                                  applies to page blobs only.
  #
  #                                  Specify one of the following options for this property:
  #
  #     * +:max+                       - Sets the sequence number to be the higher of the value included with
  #                                      the request and the value currently stored for the blob.
  #     * +:update+                    - Sets the sequence number to the value included with the request.
  #     * +:increment+                 - Increments the value of the sequence number by 1. If specifying this
  #                                      option, do not include the sequence_number option; doing so will return
  #                                      status code 400 (Bad Request).
  #
  # * +number+                     - Integer. Sets the blob's sequence number. The sequence number is a
  #                                  user-controlled property that you can use to track requests and manage concurrency
  #                                  issues. Required if the 'action' parameter is set to :max or :update.
  #                                  This property applies to page blobs only.
  #
  #                                  Use this together with the 'action' parameter to update the blob's sequence
  #                                  number, either to the specified value or to the higher of the values specified with
  #                                  the request or currently stored with the blob.
  #
  #                                  This header should not be specified if the 'action' parameter is set to :increment;
  #                                  in this case the service automatically increments the sequence number by one.
  #
  #                                  To set the sequence number to a value of your choosing, this property must be specified
  #                                  together with the 'action' parameter
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to set the blob properties
  #                                  only if the blob has been modified since the specified date/time. If the blob has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to set the blob properties
  #                                  only if the blob has not been modified since the specified date/time. If the blob has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to set the blob properties
  #                                  only if the blob's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to set the blob properties
  #                                  only if the blob's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691966.aspx
  #
  # Returns nil on success.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/page.rb#496
  def set_sequence_number(container, blob, action, number, options = T.unsafe(nil)); end

  protected

  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#464
  def create_block_blob_multiple_put(container, blob, content, size, options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#391
  def create_block_blob_single_put(container, blob, content, options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#520
  def get_block_size(size); end

  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#507
  def get_single_upload_threshold(userThreshold); end
end

# source://azure-storage-blob//lib/azure/storage/blob/blob.rb#31
class Azure::Storage::Blob::Blob
  # @return [Blob] a new instance of Blob
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Blob::Blob] the object that the method was called on
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#32
  def initialize; end

  # Returns the value of attribute encrypted.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#42
  def encrypted; end

  # Sets the attribute encrypted
  #
  # @param value the value to set the attribute encrypted to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#42
  def encrypted=(_arg0); end

  # Returns the value of attribute metadata.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#41
  def metadata; end

  # Sets the attribute metadata
  #
  # @param value the value to set the attribute metadata to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#41
  def metadata=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#38
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#38
  def name=(_arg0); end

  # Returns the value of attribute properties.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#40
  def properties; end

  # Sets the attribute properties
  #
  # @param value the value to set the attribute properties to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#40
  def properties=(_arg0); end

  # Returns the value of attribute snapshot.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#39
  def snapshot; end

  # Sets the attribute snapshot
  #
  # @param value the value to set the attribute snapshot to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob.rb#39
  def snapshot=(_arg0); end
end

# Defines constants for use with blob operations.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#66
module Azure::Storage::Blob::BlobConstants; end

# XML element for a block list.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#74
Azure::Storage::Blob::BlobConstants::BLOCK_LIST_ELEMENT = T.let(T.unsafe(nil), String)

# Blob types
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#141
module Azure::Storage::Blob::BlobConstants::BlobTypes; end

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#144
Azure::Storage::Blob::BlobConstants::BlobTypes::APPEND = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#142
Azure::Storage::Blob::BlobConstants::BlobTypes::BLOCK = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#143
Azure::Storage::Blob::BlobConstants::BlobTypes::PAGE = T.let(T.unsafe(nil), String)

# XML element for committed blocks.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#77
Azure::Storage::Blob::BlobConstants::COMMITTED_ELEMENT = T.let(T.unsafe(nil), String)

# The default maximum size, in bytes, of a blob before it must be separated into blocks.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#86
Azure::Storage::Blob::BlobConstants::DEFAULT_SINGLE_BLOB_PUT_THRESHOLD_IN_BYTES = T.let(T.unsafe(nil), Integer)

# The default write block size, in bytes, used by blob streams.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#89
Azure::Storage::Blob::BlobConstants::DEFAULT_WRITE_BLOCK_SIZE_IN_BYTES = T.let(T.unsafe(nil), Integer)

# The default write page size, in bytes, used by blob streams.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#80
Azure::Storage::Blob::BlobConstants::DEFAULT_WRITE_PAGE_SIZE_IN_BYTES = T.let(T.unsafe(nil), Integer)

# XML element for the latest.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#68
Azure::Storage::Blob::BlobConstants::LATEST_ELEMENT = T.let(T.unsafe(nil), String)

# Blob lease constants
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#148
module Azure::Storage::Blob::BlobConstants::LeaseOperation; end

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#149
Azure::Storage::Blob::BlobConstants::LeaseOperation::ACQUIRE = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#153
Azure::Storage::Blob::BlobConstants::LeaseOperation::BREAK = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#151
Azure::Storage::Blob::BlobConstants::LeaseOperation::CHANGE = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#152
Azure::Storage::Blob::BlobConstants::LeaseOperation::RELEASE = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#150
Azure::Storage::Blob::BlobConstants::LeaseOperation::RENEW = T.let(T.unsafe(nil), String)

# List blob types.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#129
module Azure::Storage::Blob::BlobConstants::ListBlobTypes; end

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#130
Azure::Storage::Blob::BlobConstants::ListBlobTypes::Blob = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#131
Azure::Storage::Blob::BlobConstants::ListBlobTypes::Directory = T.let(T.unsafe(nil), String)

# The maximum size of block blob
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#101
Azure::Storage::Blob::BlobConstants::MAX_APPEND_BLOB_SIZE = T.let(T.unsafe(nil), Integer)

# The maximum size of block blob
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#98
Azure::Storage::Blob::BlobConstants::MAX_BLOCK_BLOB_SIZE = T.let(T.unsafe(nil), Integer)

# The maximum count of blocks for a block blob
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#95
Azure::Storage::Blob::BlobConstants::MAX_BLOCK_COUNT = T.let(T.unsafe(nil), Integer)

# The maximum size of a single block.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#92
Azure::Storage::Blob::BlobConstants::MAX_BLOCK_SIZE = T.let(T.unsafe(nil), Integer)

# The maximum buffer size for writing a stream buffer.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#113
Azure::Storage::Blob::BlobConstants::MAX_QUEUED_WRITE_DISK_BUFFER_SIZE = T.let(T.unsafe(nil), Integer)

# The maximum range get size when requesting for a contentMD5
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#107
Azure::Storage::Blob::BlobConstants::MAX_RANGE_GET_SIZE_WITH_MD5 = T.let(T.unsafe(nil), Integer)

# Max size for single get page range. The max value should be 150MB
# http://blogs.msdn.com/b/windowsazurestorage/archive/2012/03/26/getting-the-page-ranges-of-a-large-page-blob-in-segments.aspx
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#117
Azure::Storage::Blob::BlobConstants::MAX_SINGLE_GET_PAGE_RANGE_SIZE = T.let(T.unsafe(nil), Integer)

# The maximum size, in bytes, of a blob before it must be separated into blocks.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#104
Azure::Storage::Blob::BlobConstants::MAX_SINGLE_UPLOAD_BLOB_SIZE_IN_BYTES = T.let(T.unsafe(nil), Integer)

# The maximum page range size for a page update operation.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#110
Azure::Storage::Blob::BlobConstants::MAX_UPDATE_PAGE_SIZE = T.let(T.unsafe(nil), Integer)

# The minimum write page size, in bytes, used by blob streams.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#83
Azure::Storage::Blob::BlobConstants::MIN_WRITE_PAGE_SIZE_IN_BYTES = T.let(T.unsafe(nil), Integer)

# The size of a page, in bytes, in a page blob.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#120
Azure::Storage::Blob::BlobConstants::PAGE_SIZE = T.let(T.unsafe(nil), Integer)

# Put page write options
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#135
module Azure::Storage::Blob::BlobConstants::PageWriteOptions; end

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#137
Azure::Storage::Blob::BlobConstants::PageWriteOptions::CLEAR = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#136
Azure::Storage::Blob::BlobConstants::PageWriteOptions::UPDATE = T.let(T.unsafe(nil), String)

# Resource types.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#123
module Azure::Storage::Blob::BlobConstants::ResourceTypes; end

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#125
Azure::Storage::Blob::BlobConstants::ResourceTypes::BLOB = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#124
Azure::Storage::Blob::BlobConstants::ResourceTypes::CONTAINER = T.let(T.unsafe(nil), String)

# XML element for uncommitted blocks.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#71
Azure::Storage::Blob::BlobConstants::UNCOMMITTED_ELEMENT = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#157
module Azure::Storage::Blob::BlobErrorCodeStrings; end

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#166
Azure::Storage::Blob::BlobErrorCodeStrings::APPEND_POSITION_CONDITION_NOT_MET = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#160
Azure::Storage::Blob::BlobErrorCodeStrings::BLOB_ALREADY_EXISTS = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#159
Azure::Storage::Blob::BlobErrorCodeStrings::BLOB_NOT_FOUND = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#161
Azure::Storage::Blob::BlobErrorCodeStrings::CONTAINER_ALREADY_EXISTS = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#162
Azure::Storage::Blob::BlobErrorCodeStrings::CONTAINER_NOT_FOUND = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#163
Azure::Storage::Blob::BlobErrorCodeStrings::INVALID_BLOB_OR_BLOCK = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#158
Azure::Storage::Blob::BlobErrorCodeStrings::INVALID_BLOCK_ID = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#164
Azure::Storage::Blob::BlobErrorCodeStrings::INVALID_BLOCK_LIST = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#165
Azure::Storage::Blob::BlobErrorCodeStrings::MAX_BLOB_SIZE_CONDITION_NOT_MET = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#36
class Azure::Storage::Blob::BlobService < ::Azure::Storage::Common::Service::StorageService
  include ::Azure::Storage::Common::Core::Utility
  include ::Azure::Storage::Common::Service
  include ::Azure::Storage::Blob
  include ::Azure::Storage::Blob::Container

  # Public: Initializes an instance of [Azure::Storage::Blob::BlobService]
  #
  # ==== Attributes
  #
  # * +options+    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  #
  # * +:use_development_storage+        - TrueClass|FalseClass. Whether to use storage emulator.
  # * +:development_storage_proxy_uri+  - String. Used with +:use_development_storage+ if emulator is hosted other than localhost.
  # * +:storage_connection_string+      - String. The storage connection string.
  # * +:storage_account_name+           - String. The name of the storage account.
  # * +:storage_access_key+             - Base64 String. The access key of the storage account.
  # * +:storage_sas_token+              - String. The signed access signature for the storage account or one of its service.
  # * +:storage_blob_host+              - String. Specified Blob serivce endpoint or hostname
  # * +:storage_dns_suffix+             - String. The suffix of a regional Storage Serivce, to
  # * +:default_endpoints_protocol+     - String. http or https
  # * +:use_path_style_uri+             - String. Whether use path style URI for specified endpoints
  # * +:ca_file+                        - String. File path of the CA file if having issue with SSL
  # * +:ssl_version+                    - Symbol. The ssl version to be used, sample: :TLSv1_1, :TLSv1_2, for the details, see https://github.com/ruby/openssl/blob/master/lib/openssl/ssl.rb
  # * +:ssl_min_version+                - Symbol. The min ssl version supported, only supported in Ruby 2.5+
  # * +:ssl_max_version+                - Symbol. The max ssl version supported, only supported in Ruby 2.5+
  # * +:user_agent_prefix+              - String. The user agent prefix that can identify the application calls the library
  # * +:client+                         - Azure::Storage::Common::Client. The common client used to initalize the service.
  #
  # The valid set of options include:
  # * Storage Emulator: +:use_development_storage+ required, +:development_storage_proxy_uri+ optionally
  # * Storage account name and key: +:storage_account_name+ and +:storage_access_key+ required, set +:storage_dns_suffix+ necessarily
  # * Storage account name and SAS token: +:storage_account_name+ and +:storage_sas_token+ required, set +:storage_dns_suffix+ necessarily
  # * Specified hosts and SAS token: At least one of the service host and SAS token. It's up to user to ensure the SAS token is suitable for the serivce
  # * Azure::Storage::Common::Client: The common client used to initalize the service. This client can be initalized and used repeatedly.
  # * Anonymous Blob: only +:storage_blob_host+, if it is to only access blobs within a container
  #
  # Additional notes:
  # * Specified hosts can be set when use account name with access key or sas token
  # * +:default_endpoints_protocol+ can be set if the scheme is not specified in hosts
  # * Storage emulator always use path style URI
  # * +:ca_file+ is independent.
  #
  # When empty options are given, it will try to read settings from Environment Variables. Refer to [Azure::Storage::Common::ClientOptions.env_vars_mapping] for the mapping relationship
  #
  # @return [BlobService] a new instance of BlobService
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#161
  def initialize(options = T.unsafe(nil), &block); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#173
  def call(method, uri, body = T.unsafe(nil), headers = T.unsafe(nil), options = T.unsafe(nil)); end

  # Public: Get a list of Containers from the server.
  #
  # ==== Attributes
  #
  # * +options+                  - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:prefix+                  - String. Filters the results to return only containers
  #                                whose name begins with the specified prefix. (optional)
  #
  # * +:marker+                  - String. An identifier the specifies the portion of the
  #                                list to be returned. This value comes from the property
  #                                Azure::Storage::Common::EnumerationResults.continuation_token when there
  #                                are more containers available than were returned. The
  #                                marker value may then be used here to request the next set
  #                                of list items. (optional)
  #
  # * +:max_results+             - Integer. Specifies the maximum number of containers to return.
  #                                If max_results is not specified, or is a value greater than
  #                                5,000, the server will return up to 5,000 items. If it is set
  #                                to a value less than or equal to zero, the server will return
  #                                status code 400 (Bad Request). (optional)
  #
  # * +:metadata+                - Boolean. Specifies whether or not to return the container metadata.
  #                                (optional, Default=false)
  #
  # * +:timeout+                 - Integer. A timeout in seconds.
  #
  # * +:request_id+              - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                in the analytics logs when storage analytics logging is enabled.
  #
  # * +:location_mode+           - LocationMode. Specifies the location mode used to decide
  #                                which location the request should be sent to.
  #
  # See: https://msdn.microsoft.com/en-us/library/azure/dd179352.aspx
  #
  # NOTE: Metadata requested with the :metadata parameter must have been stored in
  # accordance with the naming restrictions imposed by the 2009-09-19 version of the Blob
  # service. Beginning with that version, all metadata names must adhere to the naming
  # conventions for C# identifiers. See: https://msdn.microsoft.com/en-us/library/aa664670(VS.71).aspx
  #
  # Any metadata with invalid names which were previously stored, will be returned with the
  # key "x-ms-invalid-name" in the metadata hash. This may contain multiple values and be an
  # Array (vs a String if it only contains a single value).
  #
  # Returns an Azure::Storage::Common::EnumerationResults
  #
  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#240
  def list_containers(options = T.unsafe(nil)); end

  protected

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#297
  def acquire_lease(container, blob, options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#623
  def add_blob_conditional_headers(options, headers); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#607
  def blob_uri(container_name, blob_name, query = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#546
  def break_lease(container, blob, options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#417
  def change_lease(container, blob, lease, proposed_lease, options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#590
  def container_uri(name, query = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#575
  def containers_uri(query = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#657
  def get_or_apply_content_type(body, content_type = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#475
  def release_lease(container, blob, lease, options = T.unsafe(nil)); end

  # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#359
  def renew_lease(container, blob, lease, options = T.unsafe(nil)); end

  class << self
    # Public: Creates an instance of [Azure::Storage::Blob::BlobService]
    #
    # ==== Attributes
    #
    # * +options+    - Hash. Optional parameters.
    #
    # ==== Options
    #
    # Accepted key/value pairs in options parameter are:
    #
    # * +:use_development_storage+        - TrueClass|FalseClass. Whether to use storage emulator.
    # * +:development_storage_proxy_uri+  - String. Used with +:use_development_storage+ if emulator is hosted other than localhost.
    # * +:storage_account_name+           - String. The name of the storage account.
    # * +:storage_access_key+             - Base64 String. The access key of the storage account.
    # * +:storage_sas_token+              - String. The signed access signature for the storage account or one of its service.
    # * +:storage_blob_host+              - String. Specified Blob service endpoint or hostname
    # * +:storage_dns_suffix+             - String. The suffix of a regional Storage Service, to
    # * +:default_endpoints_protocol+     - String. http or https
    # * +:use_path_style_uri+             - String. Whether use path style URI for specified endpoints
    # * +:ca_file+                        - String. File path of the CA file if having issue with SSL
    # * +:user_agent_prefix+              - String. The user agent prefix that can identify the application calls the library
    #
    # The valid set of options include:
    # * Storage Emulator: +:use_development_storage+ required, +:development_storage_proxy_uri+ optionally
    # * Storage account name and key: +:storage_account_name+ and +:storage_access_key+ required, set +:storage_dns_suffix+ necessarily
    # * Storage account name and SAS token: +:storage_account_name+ and +:storage_sas_token+ required, set +:storage_dns_suffix+ necessarily
    # * Specified hosts and SAS token: At least one of the service host and SAS token. It's up to user to ensure the SAS token is suitable for the serivce
    # * Anonymous Blob: only +:storage_blob_host+, if it is to only access blobs within a container
    #
    # Additional notes:
    # * Specified hosts can be set when use account name with access key or sas token
    # * +:default_endpoints_protocol+ can be set if the scheme is not specified in hosts
    # * Storage emulator always use path style URI
    # * +:ca_file+ is independent.
    #
    # When empty options are given, it will try to read settings from Environment Variables. Refer to [Azure::Storage::Common::ClientOptions.env_vars_mapping] for the mapping relationship
    #
    # @return [Azure::Storage::Blob::BlobService]
    #
    # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#80
    def create(options = T.unsafe(nil), &block); end

    # Public: Creates an instance of [Azure::Storage::Blob::BlobService] with Storage Emulator
    #
    # ==== Attributes
    #
    # * +proxy_uri+    - String. Used with +:use_development_storage+ if emulator is hosted other than localhost.
    #
    # @return [Azure::Storage::Blob::BlobService]
    #
    # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#93
    def create_development(proxy_uri = T.unsafe(nil), &block); end

    # Public: Creates an instance of [Azure::Storage::Blob::BlobService] from Environment Variables
    #
    # ==== Attributes
    #
    # * +connection_string+    - String. Please refer to https://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/.
    #
    # @return [Azure::Storage::Blob::BlobService]
    #
    # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#113
    def create_from_connection_string(connection_string, &block); end

    # Public: Creates an instance of [Azure::Storage::Blob::BlobService] from Environment Variables
    #
    # @return [Azure::Storage::Blob::BlobService]
    #
    # source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#101
    def create_from_env(&block); end
  end
end

# Represents a Block as part of a BlockList
# The type should be one of :uncommitted, :committed or :latest
#
# source://azure-storage-blob//lib/azure/storage/blob/block.rb#33
class Azure::Storage::Blob::Block
  # @return [Block] a new instance of Block
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Blob::Block] the object that the method was called on
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#34
  def initialize; end

  # Returns the value of attribute name.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#39
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#39
  def name=(_arg0); end

  # Returns the value of attribute size.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#40
  def size; end

  # Sets the attribute size
  #
  # @param value the value to set the attribute size to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#40
  def size=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#41
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/block.rb#41
  def type=(_arg0); end
end

# source://azure-storage-blob//lib/azure/storage/blob/container.rb#28
module Azure::Storage::Blob::Container
  include ::Azure::Storage::Common::Service

  # Public: Establishes an exclusive write lock on a container. The lock duration can be 15 to 60 seconds, or can be infinite.
  # To write to a locked container, a client must provide a lease ID.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:duration+                  - Integer. Default -1. Specifies the duration of the lease, in seconds, or negative one (-1)
  #                                  for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. (optional)
  # * +:proposed_lease_id+         - String. Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request)
  #                                  if the proposed lease ID is not in the correct format. (optional)
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to acquire the lease
  #                                  only if the container has been modified since the specified date/time. If the container has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to acquire the lease
  #                                  only if the container has not been modified since the specified date/time. If the container has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to acquire the lease
  #                                  only if the container's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to acquire the lease
  #                                  only if the container's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns a String of the new unique lease id. While the lease is active, you must include the lease ID with any request
  # to write, or to renew, change, or release the lease.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#378
  def acquire_container_lease(container, options = T.unsafe(nil)); end

  # Public: Breaks the lease, if the container has an active lease. Once a lease is broken, it cannot be renewed. Any
  # authorized request can break the lease; the request is not required to specify a matching lease ID. When a
  # lease is broken, the lease break period is allowed to elapse, during which time no lease operation except
  # break and release can be performed on the container. When a lease is successfully broken, the response indicates
  # the interval in seconds until a new lease can be acquired.
  #
  # A lease that has been broken can also be released, in which case another client may immediately acquire the
  # lease on the container.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:break_period+              - Integer. The proposed duration of seconds that the lease should continue before it is
  #                                  broken, between 0 and 60 seconds. This break period is only used if it is shorter than
  #                                  the time remaining on the lease. If longer, the time remaining on the lease is used. A
  #                                  new lease will not be available before the break period has expired, but the lease may
  #                                  be held for longer than the break period.
  #
  #                                  If this option is not used, a fixed-duration lease breaks after the remaining lease
  #                                  period elapses, and an infinite lease breaks immediately.
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to break the lease
  #                                  only if the container has been modified since the specified date/time. If the container has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to break the lease
  #                                  only if the container has not been modified since the specified date/time. If the container has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to break the lease
  #                                  only if the container's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to break the lease
  #                                  only if the container's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns an Integer of the remaining lease time. This value is the approximate time remaining in the lease
  # period, in seconds. This header is returned only for a successful request to break the lease. If the break
  # is immediate, 0 is returned.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#541
  def break_container_lease(container, options = T.unsafe(nil)); end

  # Public: Change the lease ID.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +lease+                      - String. The existing lease id.
  # * +proposed_lease+             - String. Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request)
  #                                  if the proposed lease ID is not in the correct format. (optional).
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to change the lease
  #                                  only if the container has been modified since the specified date/time. If the container has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to change the lease
  #                                  only if the container has not been modified since the specified date/time. If the container has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to change the lease
  #                                  only if the container's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to change the lease
  #                                  only if the container's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns the changed lease id
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#453
  def change_container_lease(container, lease, proposed_lease, options = T.unsafe(nil)); end

  # Public: Create a new container
  #
  # ==== Attributes
  #
  # * +name+                      - String. The name of the container.
  # * +options+                   - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:metadata+                 - Hash. User defined metadata for the container (optional).
  # * +:public_access_level+      - String. One of "container" or "blob" (optional).
  # * +:timeout+                  - Integer. A timeout in seconds.
  # * +:request_id+               - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                 in the analytics logs when storage analytics logging is enabled.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179468.aspx
  #
  # Returns a Container
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#63
  def create_container(name, options = T.unsafe(nil)); end

  # Public: Deletes a container.
  #
  # ==== Attributes
  #
  # * +name+                      - String. The name of the container.
  # * +options+                   - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                  - Integer. A timeout in seconds.
  # * +:request_id+               - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                 in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                 - String. Required for version 2012-02-12 and newer if the container has an active lease. To call
  #                                 Delete Container on a container that has an active lease, specify the lease ID in this header.
  #                                 If this header is not specified when there is an active lease, Delete Container will return 409
  #                                 (Conflict). If you specify the wrong lease ID, or a lease ID on a container that does not have
  #                                 an active lease, Delete Container will return 412 (Precondition failed).
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179408.aspx
  #
  # Returns nil on success
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#326
  def delete_container(name, options = T.unsafe(nil)); end

  # Public: Gets the access control list (ACL) and any container-level access policies
  # for the container.
  #
  # ==== Attributes
  #
  # * +name+                      - String. The name of the container
  # * +options+                   - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                  - Integer. A timeout in seconds.
  # * +:request_id+               - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                 in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+            - LocationMode. Specifies the location mode used to decide
  #                                 which location the request should be sent to.
  # * +:lease_id+                 - String. If specified, Get Container ACL only succeeds if the container’s lease is
  #                                 active and matches this ID. If there is no active lease or the ID does not match, 412
  #                                 (Precondition Failed) is returned.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179469.aspx
  #
  # Returns a tuple of (container, signed_identifiers)
  #   container           - A Azure::Storage::Entity::Blob::Container instance
  #   signed_identifiers  - A list of Azure::Storage::Entity::SignedIdentifier instances
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#228
  def get_container_acl(name, options = T.unsafe(nil)); end

  # Public: Returns only user-defined metadata for the specified container.
  #
  # ==== Attributes
  #
  # * +name+                      - String. The name of the container
  # * +options+                   - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                  - Integer. A timeout in seconds.
  # * +:request_id+               - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                 in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+            - LocationMode. Specifies the location mode used to decide
  #                                 which location the request should be sent to.
  # * +:lease_id+                 - String. If specified, Get Container Metadata only succeeds if the container’s lease is
  #                                 active and matches this ID. If there is no active lease or the ID does not match, 412
  #                                 (Precondition Failed) is returned.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/ee691976.aspx
  #
  # Returns a Container
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#147
  def get_container_metadata(name, options = T.unsafe(nil)); end

  # Public: Returns all properties and metadata on the container.
  #
  # ==== Attributes
  #
  # * +name+                      - String. The name of the container
  # * +options+                   - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                  - Integer. A timeout in seconds.
  # * +:request_id+               - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                 in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+            - LocationMode. Specifies the location mode used to decide
  #                                 which location the request should be sent to.
  # * +:lease_id+                 - String. If specified, Get Container Properties only succeeds if the container’s lease is
  #                                 active and matches this ID. If there is no active lease or the ID does not match, 412
  #                                 (Precondition Failed) is returned.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179370.aspx
  #
  # Returns a Container
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#108
  def get_container_properties(name, options = T.unsafe(nil)); end

  # Public: Get a list of Blobs from the server
  #
  # ==== Attributes
  #
  # * +name+              - String. The name of the container to list blobs for.
  # * +options+           - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:prefix+           - String. Filters the results to return only blobs
  #                         whose name begins with the specified prefix. (optional)
  # * +:delimiter+        - String. When the request includes this parameter, the operation
  #                         returns a BlobPrefix element in the response body that acts as a
  #                         placeholder for all blobs whose names begin with the same substring
  #                         up to the appearance of the delimiter character. The delimiter may
  #                         be a single character or a string.
  # * +:marker+           - String. An identifier that specifies the portion of the
  #                         list to be returned. This value comes from the property
  #                         Azure::Storage::Common::EnumerationResults.continuation_token when
  #                         there are more blobs available than were returned. The
  #                         marker value may then be used here to request the next set
  #                         of list items. (optional)
  # * +:max_results+      - Integer. Specifies the maximum number of blobs to return.
  #                         If max_results is not specified, or is a value greater than
  #                         5,000, the server will return up to 5,000 items. If it is set
  #                         to a value less than or equal to zero, the server will return
  #                         status code 400 (Bad Request). (optional)
  # * +:metadata+         - Boolean. Specifies whether or not to return the blob metadata.
  #                         (optional, Default=false)
  # * +:snapshots+        - Boolean. Specifies that snapshots should be included in the
  #                         enumeration. Snapshots are listed from oldest to newest in the
  #                         response. (optional, Default=false)
  # * +:uncomittedblobs+  - Boolean. Specifies that blobs for which blocks have been uploaded,
  #                         but which have not been committed using put_block_list, be included
  #                         in the response. (optional, Default=false)
  # * +:copy+             - Boolean. Specifies that metadata related to any current or previous
  #                         copy_blob operation should be included in the response.
  #                         (optional, Default=false)
  # * +:timeout+          - Integer. A timeout in seconds.
  # * +:request_id+       - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                         in the analytics logs when storage analytics logging is enabled.
  # * +:location_mode+    - LocationMode. Specifies the location mode used to decide
  #                         which location the request should be sent to.
  #
  # NOTE: Metadata requested with the :metadata parameter must have been stored in
  # accordance with the naming restrictions imposed by the 2009-09-19 version of the Blob
  # service. Beginning with that version, all metadata names must adhere to the naming
  # conventions for C# identifiers.
  #
  # See: http://msdn.microsoft.com/en-us/library/azure/dd135734.aspx
  #
  # Any metadata with invalid names which were previously stored, will be returned with the
  # key "x-ms-invalid-name" in the metadata hash. This may contain multiple values and be an
  # Array (vs a String if it only contains a single value).
  #
  # Returns an Azure::Storage::Common::EnumerationResults
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#602
  def list_blobs(name, options = T.unsafe(nil)); end

  # Public: Releases the lease. The lease may be released if the lease ID specified on the request matches that
  # associated with the container. Releasing the lease allows another client to immediately acquire the lease for
  # the container as soon as the release is complete.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +lease+                      - String. The lease id.
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to release the lease
  #                                  only if the container has been modified since the specified date/time. If the container has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to release the lease
  #                                  only if the container has not been modified since the specified date/time. If the container has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to release the lease
  #                                  only if the container's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to release the lease
  #                                  only if the container's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns nil on success
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#490
  def release_container_lease(container, lease, options = T.unsafe(nil)); end

  # Public: Renews the lease. The lease can be renewed if the lease ID specified on the request matches that
  # associated with the container. Note that the lease may be renewed even if it has expired as long as the container
  # has not been modified or leased again since the expiration of that lease. When you renew a lease, the
  # lease duration clock resets.
  #
  # ==== Attributes
  #
  # * +container+                  - String. The container name.
  # * +lease+                      - String. The lease id
  # * +options+                    - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                   - Integer. A timeout in seconds.
  # * +:request_id+                - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                  in the analytics logs when storage analytics logging is enabled.
  # * +:if_modified_since+         - String. A DateTime value. Specify this conditional header to renew the lease
  #                                  only if the container has been modified since the specified date/time. If the container has not been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_unmodified_since+       - String. A DateTime value. Specify this conditional header to renew the lease
  #                                  only if the container has not been modified since the specified date/time. If the container has been modified,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_match+                  - String. An ETag value. Specify an ETag value for this conditional header to renew the lease
  #                                  only if the container's ETag value matches the value specified. If the values do not match,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:if_none_match+             - String. An ETag value. Specify an ETag value for this conditional header to renew the lease
  #                                  only if the container's ETag value does not match the value specified. If the values are identical,
  #                                  the Blob service returns status code 412 (Precondition Failed).
  # * +:origin+                    - String. Optional. Specifies the origin from which the request is issued. The presence of this header results
  #                                  in cross-origin resource sharing headers on the response.
  # See http://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
  #
  # Returns the renewed lease id
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#416
  def renew_container_lease(container, lease, options = T.unsafe(nil)); end

  # Public: Sets the ACL and any container-level access policies for the container.
  #
  # ==== Attributes
  #
  # * +name+                         - String. The name of the container
  # * +public_access_level+          - String. The container public access level
  # * +options+                      - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:signed_identifiers+          - Array. A list of Azure::Storage::Entity::SignedIdentifier instances (optional)
  # * +:timeout+                     - Integer. A timeout in seconds.
  # * +:request_id+                  - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                    in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                    - String. If specified, Set Container ACL only succeeds if the container’s lease is
  #                                    active and matches this ID. If there is no active lease or the ID does not match, 412
  #                                    (Precondition Failed) is returned.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179391.aspx
  #
  # Returns a tuple of (container, signed_identifiers)
  # * +container+                    - A Azure::Storage::Entity::Blob::Container instance
  # * +signed_identifiers+           - A list of Azure::Storage::Entity::SignedIdentifier instances
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#274
  def set_container_acl(name, public_access_level, options = T.unsafe(nil)); end

  # Public: Sets custom metadata for the container.
  #
  # ==== Attributes
  #
  # * +name+                      - String. The name of the container
  # * +metadata+                  - Hash. A Hash of the metadata values
  # * +options+                   - Hash. Optional parameters.
  #
  # ==== Options
  #
  # Accepted key/value pairs in options parameter are:
  # * +:timeout+                  - Integer. A timeout in seconds.
  # * +:request_id+               - String. Provides a client-generated, opaque value with a 1 KB character limit that is recorded
  #                                 in the analytics logs when storage analytics logging is enabled.
  # * +:lease_id+                 - String. If specified, Set Container Metadata only succeeds if the container’s lease is
  #                                 active and matches this ID. If there is no active lease or the ID does not match, 412
  #                                 (Precondition Failed) is returned.
  #
  # See http://msdn.microsoft.com/en-us/library/azure/dd179362.aspx
  #
  # Returns nil on success
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#185
  def set_container_metadata(name, metadata, options = T.unsafe(nil)); end
end

# source://azure-storage-blob//lib/azure/storage/blob/container.rb#31
class Azure::Storage::Blob::Container::Container
  # @return [Container] a new instance of Container
  # @yield [_self]
  # @yieldparam _self [Azure::Storage::Blob::Container::Container] the object that the method was called on
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#32
  def initialize; end

  # Returns the value of attribute metadata.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#40
  def metadata; end

  # Sets the attribute metadata
  #
  # @param value the value to set the attribute metadata to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#40
  def metadata=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#38
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#38
  def name=(_arg0); end

  # Returns the value of attribute properties.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#39
  def properties; end

  # Sets the attribute properties
  #
  # @param value the value to set the attribute properties to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#39
  def properties=(_arg0); end

  # Returns the value of attribute public_access_level.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#41
  def public_access_level; end

  # Sets the attribute public_access_level
  #
  # @param value the value to set the attribute public_access_level to.
  #
  # source://azure-storage-blob//lib/azure/storage/blob/container.rb#41
  def public_access_level=(_arg0); end
end

# source://azure-storage-blob//lib/azure/storage/blob/default.rb#30
module Azure::Storage::Blob::Default; end

# Default value for Content-Type if request has body.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#59
Azure::Storage::Blob::Default::CONTENT_TYPE_VALUE = T.let(T.unsafe(nil), String)

# Default HTTPS port.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#51
Azure::Storage::Blob::Default::DEFAULT_HTTPS_PORT = T.let(T.unsafe(nil), Integer)

# Default HTTP port.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#49
Azure::Storage::Blob::Default::DEFAULT_HTTP_PORT = T.let(T.unsafe(nil), Integer)

# The number of default concurrent requests for parallel operation.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#35
Azure::Storage::Blob::Default::DEFAULT_PARALLEL_OPERATION_THREAD_COUNT = T.let(T.unsafe(nil), Integer)

# Constant representing a gigabyte (Non-SI version).
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#42
Azure::Storage::Blob::Default::GB = T.let(T.unsafe(nil), Integer)

# Specifies HTTP.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#45
Azure::Storage::Blob::Default::HTTP = T.let(T.unsafe(nil), String)

# Specifies HTTPS.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#47
Azure::Storage::Blob::Default::HTTPS = T.let(T.unsafe(nil), String)

# Constant representing a kilobyte (Non-SI version).
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#38
Azure::Storage::Blob::Default::KB = T.let(T.unsafe(nil), Integer)

# Constant representing a megabyte (Non-SI version).
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#40
Azure::Storage::Blob::Default::MB = T.let(T.unsafe(nil), Integer)

# Default REST service (STG) version number
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#32
Azure::Storage::Blob::Default::STG_VERSION = T.let(T.unsafe(nil), String)

# Default User Agent header string
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#62
Azure::Storage::Blob::Default::USER_AGENT = T.let(T.unsafe(nil), String)

# Marker for atom metadata.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#54
Azure::Storage::Blob::Default::XML_METADATA_MARKER = T.let(T.unsafe(nil), String)

# Marker for atom value.
#
# source://azure-storage-blob//lib/azure/storage/blob/default.rb#56
Azure::Storage::Blob::Default::XML_VALUE_MARKER = T.let(T.unsafe(nil), String)

# source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#30
module Azure::Storage::Blob::Serialization
  include ::Azure::Storage::Common::Service::Serialization
  extend ::Azure::Storage::Common::Service::Serialization::ClassMethods

  class << self
    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#294
    def add_block(type, block_node, block_list); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#107
    def blob_enumeration_results_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#162
    def blob_from_headers(headers); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#146
    def blob_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#138
    def blob_prefix_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#202
    def blob_properties_from_headers(headers); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#171
    def blob_properties_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#260
    def block_list_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#241
    def block_list_to_xml(block_list); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#33
    def container_enumeration_results_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#64
    def container_from_headers(headers); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#52
    def container_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#87
    def container_properties_from_headers(headers); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#72
    def container_properties_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#303
    def page_list_from_xml(xml); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#99
    def public_access_level_from_headers(headers); end

    # source://azure-storage-blob//lib/azure/storage/blob/serialization.rb#103
    def public_access_level_from_properties_xml(xml); end
  end
end

# source://azure-storage-blob//lib/azure/storage/blob/version.rb#30
class Azure::Storage::Blob::Version
  class << self
    # @return [String]
    #
    # source://azure-storage-blob//lib/azure/storage/blob/version.rb#38
    def to_s; end

    # source://azure-storage-blob//lib/azure/storage/blob/version.rb#42
    def to_uas; end
  end
end

# Fields represent the parts defined in http://semver.org/
#
# source://azure-storage-blob//lib/azure/storage/blob/version.rb#32
Azure::Storage::Blob::Version::MAJOR = T.let(T.unsafe(nil), Integer)

# source://azure-storage-blob//lib/azure/storage/blob/version.rb#33
Azure::Storage::Blob::Version::MINOR = T.let(T.unsafe(nil), Integer)

# source://azure-storage-blob//lib/azure/storage/blob/version.rb#34
Azure::Storage::Blob::Version::UPDATE = T.let(T.unsafe(nil), Integer)

# source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#679
Azure::Storage::BlobService = Azure::Storage::Blob::BlobService

# source://azure-storage-blob//lib/azure/storage/blob/blob_service.rb#33
Azure::Storage::StorageService = Azure::Storage::Common::Service::StorageService

{"version":3,"file":"dependabot-editor-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/editor/yaml-editors/dependabot/dependabot-editor.ts","app/assets/modules/github/editor/yaml-editors/codemirror-autocomplete-util.ts","app/assets/modules/github/editor/yaml-editors/yaml-smart-indentation.ts","app/assets/modules/github/editor/yaml-editors/yaml-codemirror-linter-util.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport {getRootRule} from './dependabot-rules'\nimport {registerAutocompleteEvents} from '../codemirror-autocomplete-util'\nimport {registerLinterEvents} from '../yaml-codemirror-linter-util'\n\nregisterLinterEvents(getRootRule)\nregisterAutocompleteEvents(getRootRule)\n","// FIXME This bundle implicitly loads CodeMirror off of the window global. This should\n// explicitly import the dependency to ensure it exists on the page. We usually include\n// all editors in the same bundle as CodeMirror but this stack-template bundle is separate.\n// Maybe dynamic imports solve this.\n\nimport type {getYamlRootRuleSignature, suggestionsForExpressionSignature} from './yaml-rule-util'\nimport type {Editor, MarkerRange, Position, TextMarker} from 'codemirror'\nimport {type Snippet, autocomplete} from './autocomplete-util'\nimport {getIndentation, replaceWhitespaces} from './utils'\nimport CodeMirror from 'codemirror'\n// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\nimport smartIndentation from './yaml-smart-indentation'\nimport type {CodeMirrorElement} from '../codemirror-linter-util'\n\nconst {Pass} = CodeMirror\n\nfunction hint(cm: Editor) {\n  return codeMirrorAutcomleteHelper.hint(cm)\n}\nhint.supportsSelection = true\n\nlet codeMirrorAutcomleteHelper: CodeMirrorAutocompleteHelper\nexport function registerAutocompleteEvents(getRootRule: getYamlRootRuleSignature) {\n  codeMirrorAutcomleteHelper = new CodeMirrorAutocompleteHelper(getRootRule)\n\n  observe('.CodeMirror', {\n    add(codeMirror: Element) {\n      const anyEditor = codeMirror as CodeMirrorElement\n      const editor = anyEditor.CodeMirror\n\n      // linting events\n      editor.setOption('hintOptions', {\n        hint,\n        completeSingle: false,\n      })\n\n      // autocomplete events\n      editor.setOption('extraKeys', {\n        'Ctrl-Space': 'autocomplete',\n        Enter: () => codeMirrorAutcomleteHelper.enter(editor),\n        ...(/Macintosh/.test(navigator.userAgent) && {'Alt-Space': 'autocomplete'}),\n      })\n\n      editor.addKeyMap({\n        Tab: (cm: Editor) => codeMirrorAutcomleteHelper.goToNextPlaceholder(cm, cm.getCursor()),\n        Backspace: backspace,\n      })\n\n      editor.on('change', (cm: Editor) => {\n        if (codeMirrorAutcomleteHelper.lastCursor) {\n          const cursor = cm.getCursor()\n          if (\n            codeMirrorAutcomleteHelper.lastCursor.line === cursor.line &&\n            codeMirrorAutcomleteHelper.lastCursor.ch === cursor.ch\n          )\n            return\n          codeMirrorAutcomleteHelper.lastCursor = cursor\n        }\n      })\n    },\n  })\n}\n\nexport class CodeMirrorAutocompleteHelper {\n  editorHelp: HTMLElement\n  defaultEditorHelp: HTMLElement\n  lastCursor: Position\n  getRootRule: getYamlRootRuleSignature\n  suggestionsForExpression: suggestionsForExpressionSignature\n\n  constructor(getRootRule: getYamlRootRuleSignature) {\n    this.editorHelp = document.getElementById('yaml-editor-help')!\n    this.defaultEditorHelp = document.getElementById('yaml-editor-help-default')!\n\n    this.getRootRule = getRootRule\n    this.suggestionsForExpression = getRootRule({}).suggestionsForExpression!\n  }\n\n  async hint(cm: Editor) {\n    const cursor = cm.getCursor()\n    let textBeforeCursor = cm.getRange({line: 0, ch: 0}, cursor)\n    // Remove the selected text to allow autocomplete in placeholders when the placeholder contains a description text.\n    // Otherwise the description text would be used to calculate the suggestion\n    textBeforeCursor = textBeforeCursor.substring(0, textBeforeCursor.length - cm.getSelection().length)\n    const suggestions = await autocomplete(\n      cm.getValue(),\n      textBeforeCursor,\n      this.getRootRule,\n      this.suggestionsForExpression,\n    )\n    if (!suggestions) {\n      return {list: [], from: CodeMirror.Pos(cursor.line, cursor.ch), to: CodeMirror.Pos(cursor.line, cursor.ch)}\n    }\n    const to = CodeMirror.Pos(cursor.line, cursor.ch)\n\n    const list = suggestions.map(suggestion => {\n      const {snippet, replace, displayText, description} = suggestion\n      const text = snippet.tokens[0]\n      const from = replace\n        ? CodeMirror.Pos(cursor.line, cursor.ch - replace.length)\n        : CodeMirror.Pos(cursor.line, cursor.ch)\n      return {\n        text,\n        displayText,\n        from,\n        to,\n        hint: () => {\n          cm.replaceRange('', from, to)\n          this.insertSnippet(cm, snippet, true)\n        },\n        render: (element: Element) => {\n          const textSpan = document.createElement('span')\n          textSpan.textContent = displayText\n          element.appendChild(textSpan)\n\n          if (description) {\n            const descriptionSpan = document.createElement('span')\n            descriptionSpan.textContent = description\n            descriptionSpan.className = 'CodeMirror-hint-description pl-2 text-small color-fg-muted'\n            element.appendChild(descriptionSpan)\n          }\n        },\n      }\n    })\n    const from = list.length > 0 ? list[0]!.from : undefined\n    return {list, from}\n  }\n\n  showHelp(editor: Editor, help: string) {\n    if (!this.editorHelp || !this.defaultEditorHelp) return\n    this.lastCursor = editor.getCursor()\n    const mark = findNextPlaceholder(editor, editor.getCursor())\n    if (!mark && !help) {\n      this.defaultEditorHelp.hidden = false\n      this.editorHelp.hidden = true\n      return\n    }\n\n    const placeholder = this.editorHelp.querySelector<HTMLElement>('.js-yaml-editor-help-placeholder')!\n    if (help) {\n      placeholder.textContent = `${help}.`\n      placeholder.hidden = false\n    } else {\n      placeholder.hidden = true\n    }\n    this.editorHelp.querySelector<HTMLElement>('.js-yaml-editor-help-tab')!.hidden = !mark\n    this.defaultEditorHelp.hidden = true\n    this.editorHelp.hidden = false\n  }\n\n  goToNextPlaceholder(editor: Editor, from: Position): typeof Pass | undefined {\n    const mark = findNextPlaceholder(editor, from)\n    if (!mark) {\n      editor.showHint()\n      return Pass\n    }\n\n    const location = mark.find() as MarkerRange\n    editor.setSelection(location.from, location.to)\n    mark.clear()\n    editor.showHint()\n\n    const placeholder = mark.attributes && mark.attributes.placeholder\n    this.showHelp(editor, typeof placeholder === 'string' ? placeholder : '')\n  }\n\n  insertSnippet(editor: Editor, snippet: Snippet, indent: boolean) {\n    const {tokens, help} = snippet\n\n    if (tokens.length > 1) {\n      cleanPlaceholders(editor)\n    }\n\n    const cursor = editor.getCursor()\n    const ind = indent ? getIndentation(editor.getLine(cursor.line)) : ''\n    const tab = getIndentationUnit(editor)\n    for (let i = 0; i < tokens.length; i += 2) {\n      const token = replaceWhitespaces(tokens[i]!, tab, ind)\n      const placeholder = tokens[i + 1]\n\n      editor.replaceSelection(token)\n      const from = editor.getCursor()\n      if (placeholder !== undefined) {\n        editor.replaceSelection(replaceWhitespaces(placeholder || ' ', tab, ind)) // marks with empty strings are not visible. We need at least one char\n        const to = editor.getCursor()\n        editor.markText(from, to, {\n          className: 'border color-border-accent-emphasis',\n          clearOnEnter: true,\n          clearWhenEmpty: true,\n          attributes: {placeholder: help ? help[Math.floor(i / 2)]! : ''},\n        })\n      }\n    }\n\n    if (snippet.keepCursorLocation !== true) {\n      this.goToNextPlaceholder(editor, cursor)\n    }\n  }\n\n  enter(editor: Editor): typeof Pass | undefined {\n    const cursor = editor.getCursor()\n    // If the user hits enter in the middle of a line, or in an empty line, don't do anything\n    const currentLine = editor.getLine(cursor.line)\n    if (currentLine.substring(cursor.ch).trim().length > 0 || currentLine.trim().length === 0) return Pass\n\n    const textBeforeCursor = editor.getRange({line: 0, ch: 0}, cursor)\n    const snippet = smartIndentation(textBeforeCursor, getIndentationUnit(editor), this.getRootRule(textBeforeCursor))\n    this.insertSnippet(editor, snippet, false)\n  }\n}\n\nfunction isPlaceholderMark(mark: TextMarker) {\n  return mark.attributes && 'placeholder' in mark.attributes\n}\n\nfunction getIndentationUnit(editor: Editor) {\n  if (editor.getOption('indentWithTabs')) return '\\t'\n  return ' '.repeat(editor.getOption('indentUnit')!)\n}\n\nfunction cleanPlaceholders(editor: Editor) {\n  for (const mark of editor.getAllMarks().filter(isPlaceholderMark)) {\n    if (typeof mark.clear === 'function') {\n      mark.clear()\n    }\n  }\n}\n\nfunction findNextPlaceholder(editor: Editor, from: Position) {\n  const lastLine = editor.lineCount() - 1\n  const end = {line: lastLine, ch: editor.getLine(lastLine).length}\n  const marks = editor.findMarks(from, end)\n  return marks.find(isPlaceholderMark)\n}\n\nfunction backspace(cm: Editor): typeof Pass | undefined {\n  const {line, ch} = cm.getCursor()\n  const currentLine = cm.getLine(line)\n  const text = currentLine.substring(0, ch)\n  if (text.match(/^\\s+$/)) {\n    const indent = getIndentationUnit(cm)\n    if (text.endsWith(indent)) {\n      cm.replaceRange('', {line, ch: ch - indent.length}, {line, ch})\n      return\n    }\n  }\n  return Pass\n}\n","import {type RootRule, ruleForPath} from './yaml-rule-util'\nimport {findNode, getCurrentNode, getSimplifiedText, parse} from './utils'\nimport type {Snippet} from './autocomplete-util'\n\nexport default function smartIndentation(textBeforeCursor: string, ind = '  ', rootRule: RootRule): Snippet {\n  const {simplifiedText} = getSimplifiedText(textBeforeCursor)\n  const lines = simplifiedText.split('\\n').filter(str => str.trim().length > 0)\n  const line = lines[lines.length - 1] || ''\n  const match = line.match(/^\\s*(-\\s*)?/)\n  let indentation = match ? match[0].replace('-', ' ') : ''\n\n  // beginning of a multiline string\n  if (line.match(/\\|\\s*$/)) {\n    return {tokens: [`\\n${indentation}\\t`]}\n  }\n\n  const defaultReturn = {tokens: [`\\n${indentation}`]}\n\n  try {\n    const {result, lastValue: lastParsedValue, consumeKey} = parse(simplifiedText, '')\n    const {path, lastValue: lastDataValue} = getCurrentNode(result)\n    const lastValue = lastParsedValue != null ? lastParsedValue : lastDataValue\n    if (consumeKey) path.pop()\n    // If the current line ends with an inlined array. We need to check if it ends with ]\n    // and if the parent node is an array (because could be it's just a string ending with ])\n    if (line.match(/]\\s*$/) && Array.isArray(findNode(result, path.slice(0, path.length - 1)))) {\n      path.pop()\n    }\n\n    if (lastValue) {\n      // Inside a multiline string. We check that the last value contains multiple lines and\n      // that the last line matches the last line in the multiline string (removing the extra empty line the parser adds).\n      // We do the last line check to ignore inlined multiline strings (e.g. `foo: \"bar\\nbaz\"`)\n      const multilines = lastValue.split('\\n')\n      if (multilines.length > 1 && line === `${indentation}${multilines[multilines.length - 2]}`) {\n        return defaultReturn\n      }\n\n      indentation = indentation.replace(ind, '') // Remove one indentation\n      path.pop()\n    }\n    if (path.length === 0) return defaultReturn\n\n    const rule = ruleForPath(path, rootRule)\n    if (!rule) return defaultReturn\n    if (rule.items) {\n      return {tokens: [`\\n${indentation}\\t- `]}\n    }\n    if (rule.map) {\n      const tokens = [`\\n${indentation}\\t`, rule.keyPlaceholder || 'key']\n      // A map rule may have line-breaking attributes: (rules, map) and non-breaking attributes: (single)\n      // Only break the indented line if all possible attributes are line-breaking\n      if ((rule.map.rules || rule.map.map) && !rule.map.single) {\n        tokens.push(`:\\n${indentation}\\t\\t`)\n        tokens.push('')\n      } else if (rule.map.items && rule.map.items.single) {\n        tokens.push(': [', 'value1', ', ', '...valueN', ']')\n      } else {\n        tokens.push(': ')\n        tokens.push('')\n      }\n\n      return {\n        tokens,\n        help: [rule.keyPlaceholderHelp || ''],\n      }\n    }\n    if (rule.rules) {\n      return {tokens: [`\\n${indentation}\\t`]}\n    }\n    return defaultReturn\n  } catch (err) {\n    return defaultReturn\n  }\n}\n","import CodeMirror from 'codemirror'\nimport type {Editor} from 'codemirror'\nimport type {getYamlRootRuleSignature} from './yaml-rule-util'\n// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\nimport {type CodeMirrorElement, CodeMirrorLintingHelper} from '../codemirror-linter-util'\nimport lint from './yaml-linters'\n\nclass YamlCodeMirrorLintingHelper extends CodeMirrorLintingHelper {\n  getRootRule: getYamlRootRuleSignature\n  constructor(_getRootRule: getYamlRootRuleSignature) {\n    super()\n    this.getRootRule = _getRootRule\n  }\n\n  async updateLinting(cm: Editor) {\n    const annotations = await lint(cm.getValue(), this.getRootRule)\n    cm.operation(() => {\n      this.clearState()\n      this.createMarks(cm, annotations)\n    })\n  }\n}\n\nexport function registerLinterEvents(getRootRule: getYamlRootRuleSignature) {\n  const codeMirrorLintingHelper = new YamlCodeMirrorLintingHelper(getRootRule)\n\n  observe('.CodeMirror', {\n    add(codeMirror: Element) {\n      const anyEditor = codeMirror as CodeMirrorElement\n      const editor = anyEditor.CodeMirror\n\n      editor?.on('change', () => {\n        clearTimeout(codeMirrorLintingHelper.lintTimeout)\n        codeMirrorLintingHelper.lintTimeout = setTimeout(() => codeMirrorLintingHelper.updateLinting(editor), 500)\n      })\n      CodeMirror?.on(editor.getWrapperElement(), 'mouseover', (event: Event) =>\n        codeMirrorLintingHelper.showTooltip(editor, event),\n      )\n      codeMirrorLintingHelper.updateLinting(editor)\n    },\n  })\n}\n"],"names":["registerLinterEvents","getRootRule","registerAutocompleteEvents","codeMirrorAutcomleteHelper","Pass","CodeMirror","hint","cm","CodeMirrorAutocompleteHelper","observe","add","codeMirror","editor","anyEditor","setOption","completeSingle","Enter","enter","test","navigator","userAgent","addKeyMap","Tab","goToNextPlaceholder","getCursor","Backspace","backspace","on","lastCursor","cursor","line","ch","supportsSelection","textBeforeCursor","getRange","substring","length","getSelection","suggestions","autocomplete","getValue","suggestionsForExpression","list","from","to","map","suggestion","snippet","replace","displayText","description","text","tokens","replaceRange","insertSnippet","render","textSpan","document","createElement","textContent","element","appendChild","descriptionSpan","className","undefined","showHelp","help","editorHelp","defaultEditorHelp","mark","findNextPlaceholder","hidden","placeholder","querySelector","showHint","location","find","setSelection","clear","attributes","indent","cleanPlaceholders","getAllMarks","filter","isPlaceholderMark","ind","getIndentation","getLine","tab","getIndentationUnit","i","token","replaceWhitespaces","replaceSelection","markText","clearOnEnter","clearWhenEmpty","Math","floor","keepCursorLocation","currentLine","trim","smartIndentation","rootRule","simplifiedText","getSimplifiedText","lines","split","str","match","indentation","defaultReturn","result","lastValue","lastParsedValue","consumeKey","parse","path","lastDataValue","getCurrentNode","pop","Array","isArray","findNode","slice","multilines","rule","ruleForPath","items","keyPlaceholder","rules","single","push","keyPlaceholderHelp","err","constructor","getElementById","getOption","repeat","lastLine","lineCount","end","marks","findMarks","endsWith","YamlCodeMirrorLintingHelper","CodeMirrorLintingHelper","updateLinting","annotations","lint","operation","clearState","createMarks","_getRootRule","codeMirrorLintingHelper","clearTimeout","lintTimeout","setTimeout","getWrapperElement","showTooltip","event"],"sourceRoot":""}
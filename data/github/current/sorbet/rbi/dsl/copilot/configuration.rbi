# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Copilot::Configuration`.
# Please instead update this file by running `bin/tapioca dsl Copilot::Configuration`.

class Copilot::Configuration
  include GeneratedAsyncReflectionAssociations
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def beta_features_github_chats; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def bing_github_chats; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def chat_enableds; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def clis; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def copilot_enableds; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def copilot_extensions; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def copilot_plans; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def custom_models; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def dotcom_chats; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def github_enterprise_feature_groups; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def mobile_chats; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def pr_summarizations; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def private_docs; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def private_telemetries; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def public_code_suggestions; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def seat_managements; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def usage_telemetry_apis; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def user_feedback_opt_ins; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def user_telemetries; end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Copilot::Configuration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Copilot::Configuration]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Copilot::Configuration)) }
    def fifth; end

    sig { returns(::Copilot::Configuration) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Copilot::Configuration)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Copilot::Configuration) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(T.nilable(T::Enumerator[::Copilot::Configuration]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Copilot::Configuration]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Copilot::Configuration]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Copilot::Configuration)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Copilot::Configuration) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Copilot::Configuration) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Copilot::Configuration) }
    def first!; end

    sig { returns(T.nilable(::Copilot::Configuration)) }
    def forty_two; end

    sig { returns(::Copilot::Configuration) }
    def forty_two!; end

    sig { returns(T.nilable(::Copilot::Configuration)) }
    def fourth; end

    sig { returns(::Copilot::Configuration) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Copilot::Configuration) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Copilot::Configuration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Copilot::Configuration).void)
      ).returns(::Copilot::Configuration)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Copilot::Configuration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Copilot::Configuration).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Copilot::Configuration)) }
    def second; end

    sig { returns(::Copilot::Configuration) }
    def second!; end

    sig { returns(T.nilable(::Copilot::Configuration)) }
    def second_to_last; end

    sig { returns(::Copilot::Configuration) }
    def second_to_last!; end

    sig { returns(::Copilot::Configuration) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Copilot::Configuration) }
    def take!; end

    sig { returns(T.nilable(::Copilot::Configuration)) }
    def third; end

    sig { returns(::Copilot::Configuration) }
    def third!; end

    sig { returns(T.nilable(::Copilot::Configuration)) }
    def third_to_last; end

    sig { returns(::Copilot::Configuration) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def all_organizations!; end

    sig { returns(T::Boolean) }
    def all_organizations?; end

    sig { void }
    def beta_features_github_chat_disabled!; end

    sig { returns(T::Boolean) }
    def beta_features_github_chat_disabled?; end

    sig { void }
    def beta_features_github_chat_enabled!; end

    sig { returns(T::Boolean) }
    def beta_features_github_chat_enabled?; end

    sig { void }
    def beta_features_github_chat_no_policy!; end

    sig { returns(T::Boolean) }
    def beta_features_github_chat_no_policy?; end

    sig { void }
    def bing_github_chat_disabled!; end

    sig { returns(T::Boolean) }
    def bing_github_chat_disabled?; end

    sig { void }
    def bing_github_chat_enabled!; end

    sig { returns(T::Boolean) }
    def bing_github_chat_enabled?; end

    sig { void }
    def bing_github_chat_no_policy!; end

    sig { returns(T::Boolean) }
    def bing_github_chat_no_policy?; end

    sig { void }
    def chat_enabled_disabled!; end

    sig { returns(T::Boolean) }
    def chat_enabled_disabled?; end

    sig { void }
    def chat_enabled_enabled!; end

    sig { returns(T::Boolean) }
    def chat_enabled_enabled?; end

    sig { void }
    def chat_enabled_no_policy!; end

    sig { returns(T::Boolean) }
    def chat_enabled_no_policy?; end

    sig { void }
    def chat_enabled_unconfigured!; end

    sig { returns(T::Boolean) }
    def chat_enabled_unconfigured?; end

    sig { void }
    def cli_disabled!; end

    sig { returns(T::Boolean) }
    def cli_disabled?; end

    sig { void }
    def cli_enabled!; end

    sig { returns(T::Boolean) }
    def cli_enabled?; end

    sig { void }
    def cli_no_policy!; end

    sig { returns(T::Boolean) }
    def cli_no_policy?; end

    sig { void }
    def cli_unconfigured!; end

    sig { returns(T::Boolean) }
    def cli_unconfigured?; end

    sig { void }
    def copilot_extensions_disabled!; end

    sig { returns(T::Boolean) }
    def copilot_extensions_disabled?; end

    sig { void }
    def copilot_extensions_enabled!; end

    sig { returns(T::Boolean) }
    def copilot_extensions_enabled?; end

    sig { void }
    def copilot_extensions_no_policy!; end

    sig { returns(T::Boolean) }
    def copilot_extensions_no_policy?; end

    sig { void }
    def copilot_extensions_unconfigured!; end

    sig { returns(T::Boolean) }
    def copilot_extensions_unconfigured?; end

    sig { void }
    def copilot_plan_business!; end

    sig { returns(T::Boolean) }
    def copilot_plan_business?; end

    sig { void }
    def copilot_plan_enterprise!; end

    sig { returns(T::Boolean) }
    def copilot_plan_enterprise?; end

    sig { void }
    def copilot_plan_unconfigured!; end

    sig { returns(T::Boolean) }
    def copilot_plan_unconfigured?; end

    sig { void }
    def custom_models_disabled!; end

    sig { returns(T::Boolean) }
    def custom_models_disabled?; end

    sig { void }
    def custom_models_enabled!; end

    sig { returns(T::Boolean) }
    def custom_models_enabled?; end

    sig { void }
    def custom_models_no_policy!; end

    sig { returns(T::Boolean) }
    def custom_models_no_policy?; end

    sig { void }
    def custom_models_unconfigured!; end

    sig { returns(T::Boolean) }
    def custom_models_unconfigured?; end

    sig { void }
    def disabled!; end

    sig { returns(T::Boolean) }
    def disabled?; end

    sig { void }
    def dotcom_chat_disabled!; end

    sig { returns(T::Boolean) }
    def dotcom_chat_disabled?; end

    sig { void }
    def dotcom_chat_enabled!; end

    sig { returns(T::Boolean) }
    def dotcom_chat_enabled?; end

    sig { void }
    def dotcom_chat_no_policy!; end

    sig { returns(T::Boolean) }
    def dotcom_chat_no_policy?; end

    sig { void }
    def dotcom_chat_unconfigured!; end

    sig { returns(T::Boolean) }
    def dotcom_chat_unconfigured?; end

    sig { void }
    def enabled!; end

    sig { returns(T::Boolean) }
    def enabled?; end

    sig { void }
    def github_enterprise_feature_group_disabled!; end

    sig { returns(T::Boolean) }
    def github_enterprise_feature_group_disabled?; end

    sig { void }
    def github_enterprise_feature_group_enabled!; end

    sig { returns(T::Boolean) }
    def github_enterprise_feature_group_enabled?; end

    sig { void }
    def github_enterprise_feature_group_no_policy!; end

    sig { returns(T::Boolean) }
    def github_enterprise_feature_group_no_policy?; end

    sig { void }
    def github_enterprise_feature_group_unconfigured!; end

    sig { returns(T::Boolean) }
    def github_enterprise_feature_group_unconfigured?; end

    sig { void }
    def mobile_chat_disabled!; end

    sig { returns(T::Boolean) }
    def mobile_chat_disabled?; end

    sig { void }
    def mobile_chat_enabled!; end

    sig { returns(T::Boolean) }
    def mobile_chat_enabled?; end

    sig { void }
    def mobile_chat_no_policy!; end

    sig { returns(T::Boolean) }
    def mobile_chat_no_policy?; end

    sig { void }
    def pr_summarizations_disabled!; end

    sig { returns(T::Boolean) }
    def pr_summarizations_disabled?; end

    sig { void }
    def pr_summarizations_enabled!; end

    sig { returns(T::Boolean) }
    def pr_summarizations_enabled?; end

    sig { void }
    def pr_summarizations_no_policy!; end

    sig { returns(T::Boolean) }
    def pr_summarizations_no_policy?; end

    sig { void }
    def pr_summarizations_unconfigured!; end

    sig { returns(T::Boolean) }
    def pr_summarizations_unconfigured?; end

    sig { void }
    def private_docs_disabled!; end

    sig { returns(T::Boolean) }
    def private_docs_disabled?; end

    sig { void }
    def private_docs_enabled!; end

    sig { returns(T::Boolean) }
    def private_docs_enabled?; end

    sig { void }
    def private_docs_no_policy!; end

    sig { returns(T::Boolean) }
    def private_docs_no_policy?; end

    sig { void }
    def private_docs_unconfigured!; end

    sig { returns(T::Boolean) }
    def private_docs_unconfigured?; end

    sig { void }
    def private_telemetry_disabled!; end

    sig { returns(T::Boolean) }
    def private_telemetry_disabled?; end

    sig { void }
    def private_telemetry_enabled!; end

    sig { returns(T::Boolean) }
    def private_telemetry_enabled?; end

    sig { void }
    def private_telemetry_no_policy!; end

    sig { returns(T::Boolean) }
    def private_telemetry_no_policy?; end

    sig { void }
    def private_telemetry_unconfigured!; end

    sig { returns(T::Boolean) }
    def private_telemetry_unconfigured?; end

    sig { void }
    def public_code_suggestions_allowed!; end

    sig { returns(T::Boolean) }
    def public_code_suggestions_allowed?; end

    sig { void }
    def public_code_suggestions_blocked!; end

    sig { returns(T::Boolean) }
    def public_code_suggestions_blocked?; end

    sig { void }
    def public_code_suggestions_no_policy!; end

    sig { returns(T::Boolean) }
    def public_code_suggestions_no_policy?; end

    sig { void }
    def public_code_suggestions_unconfigured!; end

    sig { returns(T::Boolean) }
    def public_code_suggestions_unconfigured?; end

    sig { void }
    def seat_management_disabled!; end

    sig { returns(T::Boolean) }
    def seat_management_disabled?; end

    sig { void }
    def seat_management_enabled_for_all!; end

    sig { returns(T::Boolean) }
    def seat_management_enabled_for_all?; end

    sig { void }
    def seat_management_enabled_for_selected!; end

    sig { returns(T::Boolean) }
    def seat_management_enabled_for_selected?; end

    sig { void }
    def seat_management_unconfigured!; end

    sig { returns(T::Boolean) }
    def seat_management_unconfigured?; end

    sig { void }
    def selected_organizations!; end

    sig { returns(T::Boolean) }
    def selected_organizations?; end

    sig { void }
    def usage_telemetry_api_disabled!; end

    sig { returns(T::Boolean) }
    def usage_telemetry_api_disabled?; end

    sig { void }
    def usage_telemetry_api_enabled!; end

    sig { returns(T::Boolean) }
    def usage_telemetry_api_enabled?; end

    sig { void }
    def usage_telemetry_api_no_policy!; end

    sig { returns(T::Boolean) }
    def usage_telemetry_api_no_policy?; end

    sig { void }
    def user_feedback_opt_in_disabled!; end

    sig { returns(T::Boolean) }
    def user_feedback_opt_in_disabled?; end

    sig { void }
    def user_feedback_opt_in_enabled!; end

    sig { returns(T::Boolean) }
    def user_feedback_opt_in_enabled?; end

    sig { void }
    def user_feedback_opt_in_no_policy!; end

    sig { returns(T::Boolean) }
    def user_feedback_opt_in_no_policy?; end

    sig { void }
    def user_telemetry_disabled!; end

    sig { returns(T::Boolean) }
    def user_telemetry_disabled?; end

    sig { void }
    def user_telemetry_enabled!; end

    sig { returns(T::Boolean) }
    def user_telemetry_enabled?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.untyped) }
    def configurable; end

    sig { params(value: T.untyped).void }
    def configurable=(value); end

    sig { returns(T.untyped) }
    def reload_configurable; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def all_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def beta_features_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def beta_features_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def beta_features_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def bing_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def bing_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def bing_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chat_enabled_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chat_enabled_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chat_enabled_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def chat_enabled_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cli_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cli_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cli_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cli_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_extensions_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_extensions_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_extensions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_extensions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_plan_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_plan_enterprise(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def copilot_plan_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def custom_models_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def custom_models_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def custom_models_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def custom_models_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dotcom_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dotcom_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dotcom_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dotcom_chat_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_enterprise_feature_group_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_enterprise_feature_group_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_enterprise_feature_group_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def github_enterprise_feature_group_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mobile_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mobile_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def mobile_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_all_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_beta_features_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_beta_features_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_beta_features_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_bing_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_bing_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_bing_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_chat_enabled_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_chat_enabled_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_chat_enabled_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_chat_enabled_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_cli_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_cli_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_cli_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_cli_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot_extensions_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot_extensions_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot_extensions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot_extensions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot_plan_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot_plan_enterprise(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_copilot_plan_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_custom_models_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_custom_models_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_custom_models_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_custom_models_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dotcom_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dotcom_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dotcom_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dotcom_chat_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_github_enterprise_feature_group_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_github_enterprise_feature_group_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_github_enterprise_feature_group_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_github_enterprise_feature_group_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mobile_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mobile_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_mobile_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pr_summarizations_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pr_summarizations_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pr_summarizations_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_pr_summarizations_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_docs_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_docs_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_docs_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_docs_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_telemetry_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_private_telemetry_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_public_code_suggestions_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_public_code_suggestions_blocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_public_code_suggestions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_public_code_suggestions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_seat_management_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_seat_management_enabled_for_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_seat_management_enabled_for_selected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_seat_management_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_selected_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_usage_telemetry_api_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_usage_telemetry_api_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_usage_telemetry_api_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_user_feedback_opt_in_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_user_feedback_opt_in_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_user_feedback_opt_in_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_user_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_user_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pending_downgrades(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pr_summarizations_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pr_summarizations_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pr_summarizations_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def pr_summarizations_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_docs_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_docs_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_docs_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_docs_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_telemetry_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def private_telemetry_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_code_suggestions_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_code_suggestions_blocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_code_suggestions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def public_code_suggestions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def seat_management_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def seat_management_enabled_for_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def seat_management_enabled_for_selected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def seat_management_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def selected_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def usage_telemetry_api_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def usage_telemetry_api_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def usage_telemetry_api_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_feedback_opt_in_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_feedback_opt_in_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_feedback_opt_in_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def user_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without_ids(*args, &blk); end
  end

  module GeneratedAsyncReflectionAssociations
    sig { returns(Promise[T.untyped]) }
    def async_configurable; end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def beta_features_github_chat; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def beta_features_github_chat=(value); end

    sig { returns(T::Boolean) }
    def beta_features_github_chat?; end

    sig { returns(T.nilable(::String)) }
    def beta_features_github_chat_before_last_save; end

    sig { returns(T.untyped) }
    def beta_features_github_chat_before_type_cast; end

    sig { returns(T::Boolean) }
    def beta_features_github_chat_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def beta_features_github_chat_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def beta_features_github_chat_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def beta_features_github_chat_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def beta_features_github_chat_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def beta_features_github_chat_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def beta_features_github_chat_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def beta_features_github_chat_previously_was; end

    sig { returns(T.nilable(::String)) }
    def beta_features_github_chat_was; end

    sig { void }
    def beta_features_github_chat_will_change!; end

    sig { returns(::String) }
    def bing_github_chat; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def bing_github_chat=(value); end

    sig { returns(T::Boolean) }
    def bing_github_chat?; end

    sig { returns(T.nilable(::String)) }
    def bing_github_chat_before_last_save; end

    sig { returns(T.untyped) }
    def bing_github_chat_before_type_cast; end

    sig { returns(T::Boolean) }
    def bing_github_chat_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def bing_github_chat_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def bing_github_chat_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def bing_github_chat_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bing_github_chat_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def bing_github_chat_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def bing_github_chat_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def bing_github_chat_previously_was; end

    sig { returns(T.nilable(::String)) }
    def bing_github_chat_was; end

    sig { void }
    def bing_github_chat_will_change!; end

    sig { returns(::String) }
    def chat_enabled; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def chat_enabled=(value); end

    sig { returns(T::Boolean) }
    def chat_enabled?; end

    sig { returns(T.nilable(::String)) }
    def chat_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def chat_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def chat_enabled_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def chat_enabled_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def chat_enabled_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def chat_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def chat_enabled_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def chat_enabled_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def chat_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def chat_enabled_previously_was; end

    sig { returns(T.nilable(::String)) }
    def chat_enabled_was; end

    sig { void }
    def chat_enabled_will_change!; end

    sig { returns(::String) }
    def cli; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def cli=(value); end

    sig { returns(T::Boolean) }
    def cli?; end

    sig { returns(T.nilable(::String)) }
    def cli_before_last_save; end

    sig { returns(T.untyped) }
    def cli_before_type_cast; end

    sig { returns(T::Boolean) }
    def cli_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def cli_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def cli_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def cli_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cli_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def cli_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def cli_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cli_previously_was; end

    sig { returns(T.nilable(::String)) }
    def cli_was; end

    sig { void }
    def cli_will_change!; end

    sig { returns(::Integer) }
    def configurable_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def configurable_id=(value); end

    sig { returns(T::Boolean) }
    def configurable_id?; end

    sig { returns(T.nilable(::Integer)) }
    def configurable_id_before_last_save; end

    sig { returns(T.untyped) }
    def configurable_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def configurable_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def configurable_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def configurable_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def configurable_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def configurable_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def configurable_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def configurable_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def configurable_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def configurable_id_was; end

    sig { void }
    def configurable_id_will_change!; end

    sig { returns(::String) }
    def configurable_type; end

    sig { params(value: ::String).returns(::String) }
    def configurable_type=(value); end

    sig { returns(T::Boolean) }
    def configurable_type?; end

    sig { returns(T.nilable(::String)) }
    def configurable_type_before_last_save; end

    sig { returns(T.untyped) }
    def configurable_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def configurable_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def configurable_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def configurable_type_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def configurable_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def configurable_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def configurable_type_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def configurable_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def configurable_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def configurable_type_was; end

    sig { void }
    def configurable_type_will_change!; end

    sig { returns(::String) }
    def copilot_enabled; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def copilot_enabled=(value); end

    sig { returns(T::Boolean) }
    def copilot_enabled?; end

    sig { returns(T.nilable(::String)) }
    def copilot_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def copilot_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def copilot_enabled_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_enabled_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_enabled_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def copilot_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def copilot_enabled_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_enabled_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def copilot_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def copilot_enabled_previously_was; end

    sig { returns(T.nilable(::String)) }
    def copilot_enabled_was; end

    sig { void }
    def copilot_enabled_will_change!; end

    sig { returns(::String) }
    def copilot_extensions; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def copilot_extensions=(value); end

    sig { returns(T::Boolean) }
    def copilot_extensions?; end

    sig { returns(T.nilable(::String)) }
    def copilot_extensions_before_last_save; end

    sig { returns(T.untyped) }
    def copilot_extensions_before_type_cast; end

    sig { returns(T::Boolean) }
    def copilot_extensions_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_extensions_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_extensions_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def copilot_extensions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def copilot_extensions_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_extensions_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def copilot_extensions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def copilot_extensions_previously_was; end

    sig { returns(T.nilable(::String)) }
    def copilot_extensions_was; end

    sig { void }
    def copilot_extensions_will_change!; end

    sig { returns(::String) }
    def copilot_plan; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def copilot_plan=(value); end

    sig { returns(T::Boolean) }
    def copilot_plan?; end

    sig { returns(T.nilable(::String)) }
    def copilot_plan_before_last_save; end

    sig { returns(T.untyped) }
    def copilot_plan_before_type_cast; end

    sig { returns(T::Boolean) }
    def copilot_plan_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_plan_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_plan_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def copilot_plan_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def copilot_plan_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def copilot_plan_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def copilot_plan_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def copilot_plan_previously_was; end

    sig { returns(T.nilable(::String)) }
    def copilot_plan_was; end

    sig { void }
    def copilot_plan_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def custom_models; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def custom_models=(value); end

    sig { returns(T::Boolean) }
    def custom_models?; end

    sig { returns(T.nilable(::String)) }
    def custom_models_before_last_save; end

    sig { returns(T.untyped) }
    def custom_models_before_type_cast; end

    sig { returns(T::Boolean) }
    def custom_models_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def custom_models_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def custom_models_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def custom_models_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def custom_models_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def custom_models_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def custom_models_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def custom_models_previously_was; end

    sig { returns(T.nilable(::String)) }
    def custom_models_was; end

    sig { void }
    def custom_models_will_change!; end

    sig { returns(::String) }
    def dotcom_chat; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def dotcom_chat=(value); end

    sig { returns(T::Boolean) }
    def dotcom_chat?; end

    sig { returns(T.nilable(::String)) }
    def dotcom_chat_before_last_save; end

    sig { returns(T.untyped) }
    def dotcom_chat_before_type_cast; end

    sig { returns(T::Boolean) }
    def dotcom_chat_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def dotcom_chat_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def dotcom_chat_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dotcom_chat_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dotcom_chat_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def dotcom_chat_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def dotcom_chat_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def dotcom_chat_previously_was; end

    sig { returns(T.nilable(::String)) }
    def dotcom_chat_was; end

    sig { void }
    def dotcom_chat_will_change!; end

    sig { returns(::String) }
    def github_enterprise_feature_group; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def github_enterprise_feature_group=(value); end

    sig { returns(T::Boolean) }
    def github_enterprise_feature_group?; end

    sig { returns(T.nilable(::String)) }
    def github_enterprise_feature_group_before_last_save; end

    sig { returns(T.untyped) }
    def github_enterprise_feature_group_before_type_cast; end

    sig { returns(T::Boolean) }
    def github_enterprise_feature_group_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def github_enterprise_feature_group_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def github_enterprise_feature_group_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def github_enterprise_feature_group_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def github_enterprise_feature_group_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def github_enterprise_feature_group_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def github_enterprise_feature_group_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def github_enterprise_feature_group_previously_was; end

    sig { returns(T.nilable(::String)) }
    def github_enterprise_feature_group_was; end

    sig { void }
    def github_enterprise_feature_group_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def ide_chat; end

    sig { params(value: ::Integer).returns(::Integer) }
    def ide_chat=(value); end

    sig { returns(T::Boolean) }
    def ide_chat?; end

    sig { returns(T.nilable(::Integer)) }
    def ide_chat_before_last_save; end

    sig { returns(T.untyped) }
    def ide_chat_before_type_cast; end

    sig { returns(T::Boolean) }
    def ide_chat_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ide_chat_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ide_chat_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ide_chat_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ide_chat_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def ide_chat_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def ide_chat_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ide_chat_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ide_chat_was; end

    sig { void }
    def ide_chat_will_change!; end

    sig { returns(::Integer) }
    def max_seats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def max_seats=(value); end

    sig { returns(T::Boolean) }
    def max_seats?; end

    sig { returns(T.nilable(::Integer)) }
    def max_seats_before_last_save; end

    sig { returns(T.untyped) }
    def max_seats_before_type_cast; end

    sig { returns(T::Boolean) }
    def max_seats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def max_seats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def max_seats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def max_seats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def max_seats_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def max_seats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def max_seats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def max_seats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def max_seats_was; end

    sig { void }
    def max_seats_will_change!; end

    sig { returns(::String) }
    def mobile_chat; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def mobile_chat=(value); end

    sig { returns(T::Boolean) }
    def mobile_chat?; end

    sig { returns(T.nilable(::String)) }
    def mobile_chat_before_last_save; end

    sig { returns(T.untyped) }
    def mobile_chat_before_type_cast; end

    sig { returns(T::Boolean) }
    def mobile_chat_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def mobile_chat_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def mobile_chat_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def mobile_chat_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def mobile_chat_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def mobile_chat_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def mobile_chat_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def mobile_chat_previously_was; end

    sig { returns(T.nilable(::String)) }
    def mobile_chat_was; end

    sig { void }
    def mobile_chat_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def pending_plan_downgrade_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def pending_plan_downgrade_date=(value); end

    sig { returns(T::Boolean) }
    def pending_plan_downgrade_date?; end

    sig { returns(T.nilable(::Date)) }
    def pending_plan_downgrade_date_before_last_save; end

    sig { returns(T.untyped) }
    def pending_plan_downgrade_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def pending_plan_downgrade_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def pending_plan_downgrade_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def pending_plan_downgrade_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def pending_plan_downgrade_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def pending_plan_downgrade_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def pending_plan_downgrade_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def pending_plan_downgrade_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def pending_plan_downgrade_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def pending_plan_downgrade_date_was; end

    sig { void }
    def pending_plan_downgrade_date_will_change!; end

    sig { returns(::Integer) }
    def pr_diff_chats; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pr_diff_chats=(value); end

    sig { returns(T::Boolean) }
    def pr_diff_chats?; end

    sig { returns(T.nilable(::Integer)) }
    def pr_diff_chats_before_last_save; end

    sig { returns(T.untyped) }
    def pr_diff_chats_before_type_cast; end

    sig { returns(T::Boolean) }
    def pr_diff_chats_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pr_diff_chats_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pr_diff_chats_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pr_diff_chats_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pr_diff_chats_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pr_diff_chats_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pr_diff_chats_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pr_diff_chats_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pr_diff_chats_was; end

    sig { void }
    def pr_diff_chats_will_change!; end

    sig { returns(::String) }
    def pr_summarizations; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def pr_summarizations=(value); end

    sig { returns(T::Boolean) }
    def pr_summarizations?; end

    sig { returns(T.nilable(::String)) }
    def pr_summarizations_before_last_save; end

    sig { returns(T.untyped) }
    def pr_summarizations_before_type_cast; end

    sig { returns(T::Boolean) }
    def pr_summarizations_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def pr_summarizations_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def pr_summarizations_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def pr_summarizations_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pr_summarizations_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def pr_summarizations_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def pr_summarizations_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pr_summarizations_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pr_summarizations_was; end

    sig { void }
    def pr_summarizations_will_change!; end

    sig { returns(::String) }
    def private_docs; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def private_docs=(value); end

    sig { returns(T::Boolean) }
    def private_docs?; end

    sig { returns(T.nilable(::String)) }
    def private_docs_before_last_save; end

    sig { returns(T.untyped) }
    def private_docs_before_type_cast; end

    sig { returns(T::Boolean) }
    def private_docs_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_docs_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_docs_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def private_docs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def private_docs_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_docs_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def private_docs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def private_docs_previously_was; end

    sig { returns(T.nilable(::String)) }
    def private_docs_was; end

    sig { void }
    def private_docs_will_change!; end

    sig { returns(::String) }
    def private_telemetry; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def private_telemetry=(value); end

    sig { returns(T::Boolean) }
    def private_telemetry?; end

    sig { returns(T.nilable(::String)) }
    def private_telemetry_before_last_save; end

    sig { returns(T.untyped) }
    def private_telemetry_before_type_cast; end

    sig { returns(T::Boolean) }
    def private_telemetry_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_telemetry_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_telemetry_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def private_telemetry_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def private_telemetry_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def private_telemetry_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def private_telemetry_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def private_telemetry_previously_was; end

    sig { returns(T.nilable(::String)) }
    def private_telemetry_was; end

    sig { void }
    def private_telemetry_will_change!; end

    sig { returns(::Integer) }
    def prompt_overlap; end

    sig { params(value: ::Integer).returns(::Integer) }
    def prompt_overlap=(value); end

    sig { returns(T::Boolean) }
    def prompt_overlap?; end

    sig { returns(T.nilable(::Integer)) }
    def prompt_overlap_before_last_save; end

    sig { returns(T.untyped) }
    def prompt_overlap_before_type_cast; end

    sig { returns(T::Boolean) }
    def prompt_overlap_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prompt_overlap_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prompt_overlap_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def prompt_overlap_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def prompt_overlap_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def prompt_overlap_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def prompt_overlap_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def prompt_overlap_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def prompt_overlap_was; end

    sig { void }
    def prompt_overlap_will_change!; end

    sig { returns(::String) }
    def public_code_suggestions; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def public_code_suggestions=(value); end

    sig { returns(T::Boolean) }
    def public_code_suggestions?; end

    sig { returns(T.nilable(::String)) }
    def public_code_suggestions_before_last_save; end

    sig { returns(T.untyped) }
    def public_code_suggestions_before_type_cast; end

    sig { returns(T::Boolean) }
    def public_code_suggestions_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def public_code_suggestions_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def public_code_suggestions_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def public_code_suggestions_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def public_code_suggestions_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def public_code_suggestions_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def public_code_suggestions_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def public_code_suggestions_previously_was; end

    sig { returns(T.nilable(::String)) }
    def public_code_suggestions_was; end

    sig { void }
    def public_code_suggestions_will_change!; end

    sig { void }
    def restore_beta_features_github_chat!; end

    sig { void }
    def restore_bing_github_chat!; end

    sig { void }
    def restore_chat_enabled!; end

    sig { void }
    def restore_cli!; end

    sig { void }
    def restore_configurable_id!; end

    sig { void }
    def restore_configurable_type!; end

    sig { void }
    def restore_copilot_enabled!; end

    sig { void }
    def restore_copilot_extensions!; end

    sig { void }
    def restore_copilot_plan!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_custom_models!; end

    sig { void }
    def restore_dotcom_chat!; end

    sig { void }
    def restore_github_enterprise_feature_group!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_ide_chat!; end

    sig { void }
    def restore_max_seats!; end

    sig { void }
    def restore_mobile_chat!; end

    sig { void }
    def restore_pending_plan_downgrade_date!; end

    sig { void }
    def restore_pr_diff_chats!; end

    sig { void }
    def restore_pr_summarizations!; end

    sig { void }
    def restore_private_docs!; end

    sig { void }
    def restore_private_telemetry!; end

    sig { void }
    def restore_prompt_overlap!; end

    sig { void }
    def restore_public_code_suggestions!; end

    sig { void }
    def restore_seat_management!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_usage_telemetry_api!; end

    sig { void }
    def restore_user_feedback_opt_in!; end

    sig { void }
    def restore_user_telemetry!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_beta_features_github_chat; end

    sig { returns(T::Boolean) }
    def saved_change_to_beta_features_github_chat?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_bing_github_chat; end

    sig { returns(T::Boolean) }
    def saved_change_to_bing_github_chat?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_chat_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_chat_enabled?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_cli; end

    sig { returns(T::Boolean) }
    def saved_change_to_cli?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_configurable_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_configurable_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_configurable_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_configurable_type?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_copilot_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_copilot_enabled?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_copilot_extensions; end

    sig { returns(T::Boolean) }
    def saved_change_to_copilot_extensions?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_copilot_plan; end

    sig { returns(T::Boolean) }
    def saved_change_to_copilot_plan?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_custom_models; end

    sig { returns(T::Boolean) }
    def saved_change_to_custom_models?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_dotcom_chat; end

    sig { returns(T::Boolean) }
    def saved_change_to_dotcom_chat?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_github_enterprise_feature_group; end

    sig { returns(T::Boolean) }
    def saved_change_to_github_enterprise_feature_group?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_ide_chat; end

    sig { returns(T::Boolean) }
    def saved_change_to_ide_chat?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_max_seats; end

    sig { returns(T::Boolean) }
    def saved_change_to_max_seats?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_mobile_chat; end

    sig { returns(T::Boolean) }
    def saved_change_to_mobile_chat?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_pending_plan_downgrade_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_pending_plan_downgrade_date?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pr_diff_chats; end

    sig { returns(T::Boolean) }
    def saved_change_to_pr_diff_chats?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_pr_summarizations; end

    sig { returns(T::Boolean) }
    def saved_change_to_pr_summarizations?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_private_docs; end

    sig { returns(T::Boolean) }
    def saved_change_to_private_docs?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_private_telemetry; end

    sig { returns(T::Boolean) }
    def saved_change_to_private_telemetry?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_prompt_overlap; end

    sig { returns(T::Boolean) }
    def saved_change_to_prompt_overlap?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_public_code_suggestions; end

    sig { returns(T::Boolean) }
    def saved_change_to_public_code_suggestions?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_seat_management; end

    sig { returns(T::Boolean) }
    def saved_change_to_seat_management?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_usage_telemetry_api; end

    sig { returns(T::Boolean) }
    def saved_change_to_usage_telemetry_api?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_user_feedback_opt_in; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_feedback_opt_in?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_user_telemetry; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_telemetry?; end

    sig { returns(::String) }
    def seat_management; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def seat_management=(value); end

    sig { returns(T::Boolean) }
    def seat_management?; end

    sig { returns(T.nilable(::String)) }
    def seat_management_before_last_save; end

    sig { returns(T.untyped) }
    def seat_management_before_type_cast; end

    sig { returns(T::Boolean) }
    def seat_management_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def seat_management_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def seat_management_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def seat_management_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def seat_management_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def seat_management_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def seat_management_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def seat_management_previously_was; end

    sig { returns(T.nilable(::String)) }
    def seat_management_was; end

    sig { void }
    def seat_management_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def usage_telemetry_api; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def usage_telemetry_api=(value); end

    sig { returns(T::Boolean) }
    def usage_telemetry_api?; end

    sig { returns(T.nilable(::String)) }
    def usage_telemetry_api_before_last_save; end

    sig { returns(T.untyped) }
    def usage_telemetry_api_before_type_cast; end

    sig { returns(T::Boolean) }
    def usage_telemetry_api_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def usage_telemetry_api_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def usage_telemetry_api_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def usage_telemetry_api_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def usage_telemetry_api_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def usage_telemetry_api_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def usage_telemetry_api_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def usage_telemetry_api_previously_was; end

    sig { returns(T.nilable(::String)) }
    def usage_telemetry_api_was; end

    sig { void }
    def usage_telemetry_api_will_change!; end

    sig { returns(::String) }
    def user_feedback_opt_in; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def user_feedback_opt_in=(value); end

    sig { returns(T::Boolean) }
    def user_feedback_opt_in?; end

    sig { returns(T.nilable(::String)) }
    def user_feedback_opt_in_before_last_save; end

    sig { returns(T.untyped) }
    def user_feedback_opt_in_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_feedback_opt_in_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_feedback_opt_in_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_feedback_opt_in_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def user_feedback_opt_in_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_feedback_opt_in_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_feedback_opt_in_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def user_feedback_opt_in_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_feedback_opt_in_previously_was; end

    sig { returns(T.nilable(::String)) }
    def user_feedback_opt_in_was; end

    sig { void }
    def user_feedback_opt_in_will_change!; end

    sig { returns(::String) }
    def user_telemetry; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def user_telemetry=(value); end

    sig { returns(T::Boolean) }
    def user_telemetry?; end

    sig { returns(T.nilable(::String)) }
    def user_telemetry_before_last_save; end

    sig { returns(T.untyped) }
    def user_telemetry_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_telemetry_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_telemetry_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_telemetry_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def user_telemetry_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_telemetry_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def user_telemetry_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def user_telemetry_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def user_telemetry_previously_was; end

    sig { returns(T.nilable(::String)) }
    def user_telemetry_was; end

    sig { void }
    def user_telemetry_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_beta_features_github_chat?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bing_github_chat?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_chat_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cli?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_configurable_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_configurable_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_copilot_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_copilot_extensions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_copilot_plan?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_custom_models?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dotcom_chat?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_github_enterprise_feature_group?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ide_chat?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_max_seats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mobile_chat?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pending_plan_downgrade_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pr_diff_chats?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pr_summarizations?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_private_docs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_private_telemetry?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prompt_overlap?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_public_code_suggestions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_seat_management?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_usage_telemetry_api?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_feedback_opt_in?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_telemetry?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def all_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def beta_features_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def beta_features_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def beta_features_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def bing_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def bing_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def bing_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chat_enabled_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chat_enabled_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chat_enabled_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def chat_enabled_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cli_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cli_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cli_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cli_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_extensions_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_extensions_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_extensions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_extensions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_plan_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_plan_enterprise(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def copilot_plan_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def custom_models_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def custom_models_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def custom_models_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def custom_models_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dotcom_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dotcom_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dotcom_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dotcom_chat_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_enterprise_feature_group_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_enterprise_feature_group_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_enterprise_feature_group_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def github_enterprise_feature_group_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit_execution_time(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mobile_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mobile_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def mobile_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_all_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_beta_features_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_beta_features_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_beta_features_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_bing_github_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_bing_github_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_bing_github_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_chat_enabled_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_chat_enabled_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_chat_enabled_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_chat_enabled_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_cli_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_cli_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_cli_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_cli_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot_extensions_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot_extensions_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot_extensions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot_extensions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot_plan_business(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot_plan_enterprise(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_copilot_plan_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_custom_models_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_custom_models_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_custom_models_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_custom_models_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dotcom_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dotcom_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dotcom_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dotcom_chat_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_github_enterprise_feature_group_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_github_enterprise_feature_group_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_github_enterprise_feature_group_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_github_enterprise_feature_group_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mobile_chat_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mobile_chat_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_mobile_chat_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pr_summarizations_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pr_summarizations_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pr_summarizations_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_pr_summarizations_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_docs_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_docs_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_docs_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_docs_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_telemetry_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_private_telemetry_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_public_code_suggestions_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_public_code_suggestions_blocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_public_code_suggestions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_public_code_suggestions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_seat_management_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_seat_management_enabled_for_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_seat_management_enabled_for_selected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_seat_management_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_selected_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_usage_telemetry_api_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_usage_telemetry_api_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_usage_telemetry_api_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_user_feedback_opt_in_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_user_feedback_opt_in_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_user_feedback_opt_in_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_user_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_user_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pending_downgrades(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pr_summarizations_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pr_summarizations_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pr_summarizations_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def pr_summarizations_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_docs_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_docs_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_docs_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_docs_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_telemetry_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def private_telemetry_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_code_suggestions_allowed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_code_suggestions_blocked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_code_suggestions_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def public_code_suggestions_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def seat_management_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def seat_management_enabled_for_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def seat_management_enabled_for_selected(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def seat_management_unconfigured(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def selected_organizations(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def usage_telemetry_api_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def usage_telemetry_api_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def usage_telemetry_api_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_feedback_opt_in_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_feedback_opt_in_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_feedback_opt_in_no_policy(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_telemetry_disabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def user_telemetry_enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without_ids(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Copilot::Configuration } }

    sig { returns(T::Array[::Copilot::Configuration]) }
    def to_a; end

    sig { returns(T::Array[::Copilot::Configuration]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Copilot::Configuration } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Copilot::Configuration } }

    sig do
      params(
        records: T.any(::Copilot::Configuration, T::Enumerable[T.any(::Copilot::Configuration, T::Enumerable[::Copilot::Configuration])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Copilot::Configuration, T::Enumerable[T.any(::Copilot::Configuration, T::Enumerable[::Copilot::Configuration])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Copilot::Configuration, T::Enumerable[T.any(::Copilot::Configuration, T::Enumerable[::Copilot::Configuration])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Copilot::Configuration]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Copilot::Configuration, T::Enumerable[T.any(::Copilot::Configuration, T::Enumerable[::Copilot::Configuration])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Copilot::Configuration, T::Enumerable[T.any(::Copilot::Configuration, T::Enumerable[::Copilot::Configuration])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Copilot::Configuration, T::Enumerable[T.any(::Copilot::Configuration, T::Enumerable[::Copilot::Configuration])])
      ).returns(T::Array[::Copilot::Configuration])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Copilot::Configuration]) }
    def target; end

    sig { returns(T::Array[::Copilot::Configuration]) }
    def to_a; end

    sig { returns(T::Array[::Copilot::Configuration]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Copilot::Configuration } }

    sig { returns(T::Array[::Copilot::Configuration]) }
    def to_a; end

    sig { returns(T::Array[::Copilot::Configuration]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Copilot::Configuration } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end

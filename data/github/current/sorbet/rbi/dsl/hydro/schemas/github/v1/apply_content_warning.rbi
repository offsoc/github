# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::V1::ApplyContentWarning`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::V1::ApplyContentWarning`.

class Hydro::Schemas::Github::V1::ApplyContentWarning
  sig do
    params(
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      category: T.nilable(Google::Protobuf::StringValue),
      custom_sub_category: T.nilable(Google::Protobuf::StringValue),
      instructions: T.nilable(Google::Protobuf::StringValue),
      notify_fork_owners: T.nilable(T::Boolean),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      sub_category: T.nilable(Google::Protobuf::StringValue),
      type: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(actor: nil, category: nil, custom_sub_category: nil, instructions: nil, notify_fork_owners: nil, repository: nil, sub_category: nil, type: nil); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def category; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def category=(value); end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_category; end

  sig { void }
  def clear_custom_sub_category; end

  sig { void }
  def clear_instructions; end

  sig { void }
  def clear_notify_fork_owners; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_sub_category; end

  sig { void }
  def clear_type; end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def custom_sub_category; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def custom_sub_category=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def instructions; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def instructions=(value); end

  sig { returns(T::Boolean) }
  def notify_fork_owners; end

  sig { params(value: T::Boolean).void }
  def notify_fork_owners=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(T.nilable(Google::Protobuf::StringValue)) }
  def sub_category; end

  sig { params(value: T.nilable(Google::Protobuf::StringValue)).void }
  def sub_category=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def type=(value); end
end

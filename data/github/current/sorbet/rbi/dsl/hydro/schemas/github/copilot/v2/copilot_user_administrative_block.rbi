# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Copilot::V2::CopilotUserAdministrativeBlock`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Copilot::V2::CopilotUserAdministrativeBlock`.

class Hydro::Schemas::Github::Copilot::V2::CopilotUserAdministrativeBlock
  sig do
    params(
      block_reason: T.nilable(String),
      copilot_access_type: T.nilable(T.any(Symbol, Integer)),
      copilot_user_details: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails),
      staff_actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      state: T.nilable(String),
      user: T.nilable(Hydro::Schemas::Github::V1::Entities::User)
    ).void
  end
  def initialize(block_reason: nil, copilot_access_type: nil, copilot_user_details: nil, staff_actor: nil, state: nil, user: nil); end

  sig { returns(String) }
  def block_reason; end

  sig { params(value: String).void }
  def block_reason=(value); end

  sig { void }
  def clear_block_reason; end

  sig { void }
  def clear_copilot_access_type; end

  sig { void }
  def clear_copilot_user_details; end

  sig { void }
  def clear_staff_actor; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_user; end

  sig { returns(T.any(Symbol, Integer)) }
  def copilot_access_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def copilot_access_type=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)) }
  def copilot_user_details; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Copilot::V1::Entities::CopilotUserDetails)).void }
  def copilot_user_details=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def staff_actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def staff_actor=(value); end

  sig { returns(String) }
  def state; end

  sig { params(value: String).void }
  def state=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def user; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def user=(value); end
end

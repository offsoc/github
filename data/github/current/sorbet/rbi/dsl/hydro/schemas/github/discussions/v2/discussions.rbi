# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Hydro::Schemas::Github::Discussions::V2::Discussions`.
# Please instead update this file by running `bin/tapioca dsl Hydro::Schemas::Github::Discussions::V2::Discussions`.

class Hydro::Schemas::Github::Discussions::V2::Discussions
  sig do
    params(
      action: T.nilable(T.any(Symbol, Integer)),
      action_timestamp: T.nilable(Google::Protobuf::Timestamp),
      actor: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      actor_id: T.nilable(Integer),
      announcement: T.nilable(T::Boolean),
      category_id: T.nilable(Integer),
      converted_from_issue: T.nilable(T::Boolean),
      converted_issue_id: T.nilable(Integer),
      created_from_category_template: T.nilable(T::Boolean),
      discussion: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion),
      discussion_format: T.nilable(T.any(Symbol, Integer)),
      discussion_id: T.nilable(Integer),
      lock_status: T.nilable(T.any(Symbol, Integer)),
      org_or_repo_level: T.nilable(T.any(Symbol, Integer)),
      pin_status: T.nilable(T.any(Symbol, Integer)),
      repository: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository),
      repository_id: T.nilable(Integer),
      repository_owner: T.nilable(Hydro::Schemas::Github::V1::Entities::User),
      request_context: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext),
      specimen_body: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData),
      specimen_title: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData),
      state: T.nilable(T.any(Symbol, Integer)),
      state_reason: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(action: nil, action_timestamp: nil, actor: nil, actor_id: nil, announcement: nil, category_id: nil, converted_from_issue: nil, converted_issue_id: nil, created_from_category_template: nil, discussion: nil, discussion_format: nil, discussion_id: nil, lock_status: nil, org_or_repo_level: nil, pin_status: nil, repository: nil, repository_id: nil, repository_owner: nil, request_context: nil, specimen_body: nil, specimen_title: nil, state: nil, state_reason: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def action; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def action=(value); end

  sig { returns(T.nilable(Google::Protobuf::Timestamp)) }
  def action_timestamp; end

  sig { params(value: T.nilable(Google::Protobuf::Timestamp)).void }
  def action_timestamp=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def actor; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def actor=(value); end

  sig { returns(Integer) }
  def actor_id; end

  sig { params(value: Integer).void }
  def actor_id=(value); end

  sig { returns(T::Boolean) }
  def announcement; end

  sig { params(value: T::Boolean).void }
  def announcement=(value); end

  sig { returns(Integer) }
  def category_id; end

  sig { params(value: Integer).void }
  def category_id=(value); end

  sig { void }
  def clear_action; end

  sig { void }
  def clear_action_timestamp; end

  sig { void }
  def clear_actor; end

  sig { void }
  def clear_actor_id; end

  sig { void }
  def clear_announcement; end

  sig { void }
  def clear_category_id; end

  sig { void }
  def clear_converted_from_issue; end

  sig { void }
  def clear_converted_issue_id; end

  sig { void }
  def clear_created_from_category_template; end

  sig { void }
  def clear_discussion; end

  sig { void }
  def clear_discussion_format; end

  sig { void }
  def clear_discussion_id; end

  sig { void }
  def clear_lock_status; end

  sig { void }
  def clear_org_or_repo_level; end

  sig { void }
  def clear_pin_status; end

  sig { void }
  def clear_repository; end

  sig { void }
  def clear_repository_id; end

  sig { void }
  def clear_repository_owner; end

  sig { void }
  def clear_request_context; end

  sig { void }
  def clear_specimen_body; end

  sig { void }
  def clear_specimen_title; end

  sig { void }
  def clear_state; end

  sig { void }
  def clear_state_reason; end

  sig { returns(T::Boolean) }
  def converted_from_issue; end

  sig { params(value: T::Boolean).void }
  def converted_from_issue=(value); end

  sig { returns(Integer) }
  def converted_issue_id; end

  sig { params(value: Integer).void }
  def converted_issue_id=(value); end

  sig { returns(T::Boolean) }
  def created_from_category_template; end

  sig { params(value: T::Boolean).void }
  def created_from_category_template=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion)) }
  def discussion; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::Discussions::V1::Entities::Discussion)).void }
  def discussion=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def discussion_format; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def discussion_format=(value); end

  sig { returns(Integer) }
  def discussion_id; end

  sig { params(value: Integer).void }
  def discussion_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def lock_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def lock_status=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def org_or_repo_level; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def org_or_repo_level=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def pin_status; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def pin_status=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)) }
  def repository; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::Repository)).void }
  def repository=(value); end

  sig { returns(Integer) }
  def repository_id; end

  sig { params(value: Integer).void }
  def repository_id=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::User)) }
  def repository_owner; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::User)).void }
  def repository_owner=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)) }
  def request_context; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::RequestContext)).void }
  def request_context=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_body; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_body=(value); end

  sig { returns(T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)) }
  def specimen_title; end

  sig { params(value: T.nilable(Hydro::Schemas::Github::V1::Entities::SpecimenData)).void }
  def specimen_title=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def state_reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def state_reason=(value); end
end
